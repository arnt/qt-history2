/****************************************************************************
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the $MODULE$ of the Qt Toolkit.
**
** $LICENSE$
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#include "qwsevent_qws.h"

QWSEvent *QWSEvent::factory(int type)
{
    QWSEvent *event = 0;
    switch (type) {
    case QWSEvent::Connected:
        event = new QWSConnectedEvent;
        break;
    case QWSEvent::MaxWindowRect:
        event = new QWSMaxWindowRectEvent;
        break;
    case QWSEvent::Mouse:
        event = new QWSMouseEvent;
        break;
    case QWSEvent::Focus:
        event = new QWSFocusEvent;
        break;
    case QWSEvent::Key:
        event = new QWSKeyEvent;
        break;
    case QWSEvent::Region:
        event = new QWSRegionEvent;
        break;
    case QWSEvent::Creation:
        event = new QWSCreationEvent;
        break;
#ifndef QT_NO_QWS_PROPERTIES
    case QWSEvent::PropertyNotify:
        event = new QWSPropertyNotifyEvent;
        break;
    case QWSEvent::PropertyReply:
        event = new QWSPropertyReplyEvent;
        break;
#endif // QT_NO_QWS_PROPERTIES
    case QWSEvent::SelectionClear:
        event = new QWSSelectionClearEvent;
        break;
    case QWSEvent::SelectionRequest:
        event = new QWSSelectionRequestEvent;
        break;
    case QWSEvent::SelectionNotify:
        event = new QWSSelectionNotifyEvent;
        break;
#ifndef QT_NO_COP
    case QWSEvent::QCopMessage:
        event = new QWSQCopMessageEvent;
        break;
#endif
    case QWSEvent::WindowOperation:
        event = new QWSWindowOperationEvent;
        break;

#ifndef QT_NO_QWS_INPUTMETHODS
    case QWSEvent::IMEvent:
        event = new QWSIMEvent;
        break;
    case QWSEvent::IMQuery:
        event = new QWSIMQueryEvent;
        break;
    case QWSEvent::IMInit:
        event = new QWSIMInitEvent;
        break;
#endif
    default:
        qDebug("QWSDisplayData::readMore() : Protocol error - got %08x!", type);
    }
    return event;
}

/*!
    \class QWSKeyEvent
    \ingroup qws

    \brief The QWSKeyEvent class encapsulates a character input event.

    When running a Qtopia Core application, it either runs as a server
    or connects to an existing server. Internally in the client/server
    protocol, each key press and key release is sent as a QWSKeyEvent.
    When the server receives a key event, it pass the event to the
    client process that is responsible for processing the key
    events. The client process the event by sending it to the right
    window (if any).

    A QWSKeyEvent object contains the following data:

    \table
    \header \o Data Item \o Description
    \row
        \o \bold unicode
        \o The input's unicode value
    \row
        \o \bold keycode
        \o The Qt keycode value as defined by the Qt::Key enum.
    \row
        \o \bold modifier
        \o An OR combination of Qt::KeyboardModifier values.
    \row
        \o \bold is_press
        \o True if the event is a key press; otherwise false.
    \row
        \o \bold is_auto_repeat
        \o True if this event is caused by auto repeat; otherwise false.
    \endtable

    Key events may come from keyboard drivers, but they can also be
    generated by the server process itself using the static
    QWSServer::sendKeyEvent() function. Typically, this is done by
    popping up a widget, and letting the user specify characters with
    the pointer device.

    \sa {Character Input}
*/
