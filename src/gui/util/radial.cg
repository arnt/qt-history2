// radial shader
//struct InputData {
//        float4 frag_coord : POSITION;
//};

uniform sampler1D palette;
uniform float2 fmp;
uniform float fmp2_m_radius2;
uniform float4 inv_matrix;
uniform float2 inv_matrix_offset;

float4 main(float4 frag_coord) : COLOR
{
//     float2 A = frag_coord.xy;//mul(inv_matrix, frag_coord.xy) + inv_matrix_offset;
    float2x2 mat;
    mat[0][0] = inv_matrix.x;
    mat[0][1] = inv_matrix.y;
    mat[1][0] = inv_matrix.z;
    mat[1][1] = inv_matrix.w;
    float2 A = mul(mat, frag_coord.xy) + inv_matrix_offset;
    float2 B = fmp;
    float a = fmp2_m_radius2;
    float b = 2.0*dot(A, B);
    float c = -dot(A, A);
    float val = (-b + sqrt(b*b - 4.0*a*c)) / (2.0*a);
    return tex1D(palette, val);
}
