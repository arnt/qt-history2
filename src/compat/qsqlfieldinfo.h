/****************************************************************************
**
** Definition of QSqlFieldInfo class.
**
** This class is obsoleted, please use QSqlField
**
** Copyright (C) 1992-2003 Trolltech AS. All rights reserved.
**
** This file is part of the sql module of the Qt GUI Toolkit.
** EDITIONS: FREE, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QSQLFIELDINFO_H
#define QSQLFIELDINFO_H

#ifndef QT_NO_SQL

#include "qglobal.h"
#ifdef QT_COMPAT

#include "qsqlfield.h"

/* QSqlFieldInfo Class 
   obsoleted, use QSqlField instead
*/


class QM_EXPORT_SQL QSqlFieldInfo
{
    // class is obsoleted, won't change anyways,
    // so no d pointer
    int req, len, prec, tID;
    uint gen: 1;
    uint trim: 1;
    uint calc: 1;
    QString nm;
    QVariant::Type typ;
    QVariant defValue;

public:
    QSqlFieldInfo( const QString& name = QString(),
		   QVariant::Type typ = QVariant::Invalid,
		   int required = -1,
		   int len = -1,
		   int prec = -1,
		   const QVariant& defValue = QVariant(),
		   int sqlType = 0,
		   bool generated = TRUE,
		   bool trim = FALSE,
		   bool calculated = FALSE ) :
	req(required), len(len), prec(prec), tID(sqlType),
	gen(generated), trim(trim), calc(calculated),
	nm(name), typ(typ), defValue(defValue) {}

    virtual ~QSqlFieldInfo() {}

    QSqlFieldInfo( const QSqlField & other, bool generated = TRUE )
    {
	nm = other.name();
	typ = other.type();
	req = other.isRequired();
	len = other.length();
	prec = other.precision();
	defValue = other.defaultValue();
	tID = other.typeID();
	calc = other.isAutoGenerated() > 0;
	gen = generated;
    }

    bool operator==( const QSqlFieldInfo& f ) const
    {
	return (nm == f.nm &&
                typ == f.typ &&
                req == f.req &&
                len == f.len &&
                prec == f.prec &&
                defValue == f.defValue &&
                tID == f.tID &&
                gen == f.gen &&
                trim == f.trim &&
                calc == f.calc);
    }

    QSqlField toField() const
    { return QSqlField(nm, typ, req, len, prec, defValue, tID, calc); }
    int isRequired() const
    { return req; }
    QVariant::Type type() const
    { return typ; }
    int	length() const
    { return len; }
    int	precision() const
    { return prec; }
    QVariant defaultValue() const
    { return defValue; }
    QString name() const
    { return nm; }
    int	typeID() const
    { return tID; }
    bool isGenerated() const
    { return gen; }
    bool isTrim() const
    { return trim; }
    bool isCalculated() const
    { return calc; }

    virtual void setTrim( bool trim )
    { this->trim = trim; }
    virtual void setGenerated( bool generated )
    { gen = generated; }
    virtual void setCalculated( bool calculated )
    { calc = calculated; }

};

#endif	// QT_NO_SQL
#endif  // QT_COMPAT
#endif
