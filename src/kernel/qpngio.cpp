/****************************************************************************
** $Id: //depot/qt/main/src/kernel/qpngio.cpp#8 $
**
** Implementation of PNG QImage IOHandler
**
** Created : 970521
**
** Copyright (C) 1992-1998 Troll Tech AS.  All rights reserved.
**
** This file is part of Troll Tech's internal development tree for Qt.
**
** This header text will be replaced by an appropriate text by the
** mkdist script which generates external distributions.
**
** If you are using the Qt Professional Edition or the Qt Free Edition,
** please notify Troll Tech at <info@troll.no> if you see this text.
**
** To Troll Tech developers: This header was generated by the script
** fixcopyright-int. It has the same number of text lines as the free
** and professional editions to avoid line number inconsistency.
**
*****************************************************************************/

extern "C" {
#include <png.h>
}
#include "qimage.h"
#include "qasyncimageio.h"
#include "qiodevice.h"
#include "qpngio.h"

/*
  The following PNG Test Suite (October 1996) images do not load correctly,
  with no apparent reason:

    ct0n0g04.png
    ct1n0g04.png
    ctzn0g04.png
    cm0n0g04.png
    cm7n0g04.png
    cm9n0g04.png

  All others load apparently correctly, and to the minimal QImage equivalent.

  All QImage formats output to reasonably efficient PNG equivalents.  Never
  to greyscale.
*/

static
void iod_read_fn(png_structp png_ptr, png_bytep data, png_size_t length)
{
    QImageIO* iio = (QImageIO*)png_get_io_ptr(png_ptr);
    QIODevice* in = iio->ioDevice();

    while (length) {
	int nr = in->readBlock((char*)data, length);
	if (nr <= 0) {
	    png_error(png_ptr, "Read Error");
	    return;
	}
	length -= nr;
    }
}

static
void qpiw_write_fn(png_structp png_ptr, png_bytep data, png_size_t length)
{
    QPNGImageWriter* qpiw = (QPNGImageWriter*)png_get_io_ptr(png_ptr);
    QIODevice* out = qpiw->device();

    uint nr = out->writeBlock((char*)data, length);
    if (nr != length) {
	png_error(png_ptr, "Write Error");
	return;
    }
}

static
void setup_qt( QImage& image, png_structp png_ptr, png_infop info_ptr )
{
    png_set_strip_16(png_ptr);

    if (info_ptr->bit_depth < 8
    && (info_ptr->bit_depth != 1
     || info_ptr->channels != 1
     || (info_ptr->color_type != PNG_COLOR_TYPE_GRAY
      && info_ptr->color_type != PNG_COLOR_TYPE_PALETTE)))
    {
	png_set_packing(png_ptr);
    }

    if (info_ptr->valid & PNG_INFO_gAMA)
	png_set_gamma(png_ptr, 2.2, info_ptr->gamma);

    bool noalpha = FALSE;

    if (info_ptr->bit_depth == 1
     && info_ptr->channels == 1
     && info_ptr->color_type == PNG_COLOR_TYPE_GRAY)
    {
	// Black & White
	png_set_invert_mono(png_ptr);
	png_read_update_info(png_ptr, info_ptr);
	image.create(info_ptr->width,info_ptr->height, 1, 2,
	    QImage::BigEndian);
	image.setColor(1, qRgb(0,0,0) );
	image.setColor(0, qRgb(255,255,255) );
    } else if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE
    && (info_ptr->valid & PNG_INFO_PLTE)
    && info_ptr->num_palette <= 256)
    {
	// 1-bit and 8-bit color
	png_read_update_info(png_ptr, info_ptr);
	image.create(
	    info_ptr->width,
	    info_ptr->height,
	    info_ptr->bit_depth,
	    info_ptr->num_palette,
	    QImage::BigEndian
	);
	for (int i=0; i<info_ptr->num_palette; i++) {
	    image.setColor(i, qRgb(
		info_ptr->palette[i].red,
		info_ptr->palette[i].green,
		info_ptr->palette[i].blue
		)
	    );
	}
	if ( info_ptr->valid & PNG_INFO_tRNS ) {
	    image.setAlphaBuffer( TRUE );
	    int i;
	    for (i=0; i<info_ptr->num_trans; i++) {
		image.setColor(i, image.color(i) | 
		    (info_ptr->trans[i] << 24));
	    }
	    while (i < info_ptr->num_palette) {
		image.setColor(i, image.color(i) | (0xff << 24));
		i++;
	    }
	}
    } else if (info_ptr->color_type == PNG_COLOR_TYPE_GRAY)
    {
	// 8-bit greyscale
	int ncols = info_ptr->bit_depth < 8 ? 1 << info_ptr->bit_depth : 256;
	int g = info_ptr->trans_values.gray;
	if ( info_ptr->bit_depth > 8 ) {
	    g >>= (info_ptr->bit_depth-8);
	}
	png_read_update_info(png_ptr, info_ptr);
	image.create(info_ptr->width,info_ptr->height,8,ncols);
	for (int i=0; i<ncols; i++) {
	    int c = i*255/(ncols-1);
	    image.setColor( i, 0xff000000 | qRgb(c,c,c) );
	}
	if ( info_ptr->valid & PNG_INFO_tRNS ) {
	    image.setAlphaBuffer( TRUE );
	    image.setColor(g, 0x00ffffff & image.color(g));
	}
    } else {
	// 32-bit
	png_set_expand(png_ptr);

	if (info_ptr->color_type == PNG_COLOR_TYPE_GRAY ||
	    info_ptr->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
	{
	    png_set_gray_to_rgb(png_ptr);
	}

	// Only add filler if no alpha, or we can get 5 channel data.
	if (!(info_ptr->color_type & PNG_COLOR_MASK_ALPHA)
	   && !(info_ptr->valid & PNG_INFO_tRNS))
	{
	    png_set_filler(png_ptr, 0xff,
		QImage::systemByteOrder() == QImage::BigEndian ?
		    PNG_FILLER_BEFORE : PNG_FILLER_AFTER);
	    // We want 4 bytes, but it isn't an alpha channel
	    noalpha = TRUE;
	}

	png_read_update_info(png_ptr, info_ptr);
	image.create(info_ptr->width,info_ptr->height,32);
    }

    if (!noalpha && (info_ptr->channels == 4 || 
	(info_ptr->channels == 3 && (info_ptr->valid & PNG_INFO_tRNS)))) {
	image.setAlphaBuffer(TRUE);
    }

    if ( QImage::systemByteOrder() == QImage::BigEndian ) {
	png_set_bgr(png_ptr);
	png_set_swap_alpha(png_ptr);
    }
}

static
void read_png_image(QImageIO* iio)
{
    png_structp png_ptr;
    png_infop info_ptr;
    png_infop end_info;
    png_bytep* row_pointers;

    png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING,0,0,0);
    if (!png_ptr) {
	iio->setStatus(-1);
	return;
    }

    info_ptr = png_create_info_struct(png_ptr);
    if (!info_ptr) {
	png_destroy_read_struct(&png_ptr, 0, 0);
	iio->setStatus(-2);
	return;
    }

    end_info = png_create_info_struct(png_ptr);
    if (!end_info) {
	png_destroy_read_struct(&png_ptr, &info_ptr, 0);
	iio->setStatus(-3);
	return;
    }

    if (setjmp(png_ptr->jmpbuf)) {
	png_destroy_read_struct(&png_ptr, &info_ptr, &end_info);
	iio->setStatus(-4);
	return;
    }

    png_set_read_fn(png_ptr, (void*)iio, iod_read_fn);
    png_read_info(png_ptr, info_ptr);

    QImage image;
    setup_qt(image, png_ptr, info_ptr);

    uchar** jt = image.jumpTable();
    row_pointers=new png_bytep[info_ptr->height];

    for (uint y=0; y<info_ptr->height; y++) {
	row_pointers[y]=jt[y];
    }

    png_read_image(png_ptr, row_pointers);

#if 0 // libpng takes care of this.
    if (image.depth()==32 && (info_ptr->valid & PNG_INFO_tRNS)) {
	QRgb trans = 0xFF000000 | qRgb(
	      (info_ptr->trans_values.red << 8 >> info_ptr->bit_depth)&0xff,
	      (info_ptr->trans_values.green << 8 >> info_ptr->bit_depth)&0xff,
	      (info_ptr->trans_values.blue << 8 >> info_ptr->bit_depth)&0xff);
	for (uint y=0; y<info_ptr->height; y++) {
	    for (uint x=0; x<info_ptr->width; x++) {
		if (((uint**)jt)[y][x] == trans) {
		    ((uint**)jt)[y][x] &= 0x00FFFFFF;
		} else {
		}
	    }
	}
    }
#endif

    delete row_pointers;

    iio->setImage(image);

    png_read_end(png_ptr, end_info);
    png_destroy_read_struct(&png_ptr, &info_ptr, &end_info);

    iio->setStatus(0);
}

QPNGImageWriter::QPNGImageWriter(QIODevice* iod) :
    dev(iod),
    frames_written(0),
    disposal(Unspecified),
    looping(-1),
    ms_delay(0)
{
}

QPNGImageWriter::~QPNGImageWriter()
{
}

void QPNGImageWriter::setDisposalMethod(DisposalMethod dm)
{
    disposal = dm;
}

void QPNGImageWriter::setLooping(int loops)
{
    looping = loops;
}

void QPNGImageWriter::setFrameDelay(int msecs)
{
    ms_delay = msecs;
}


bool QPNGImageWriter::writeImage(const QImage& image, int off_x, int off_y)
{
    png_structp png_ptr;
    png_infop info_ptr;
    png_bytep* row_pointers;

    png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING,0,0,0);
    if (!png_ptr) {
	return FALSE;
    }

    info_ptr = png_create_info_struct(png_ptr);
    if (!info_ptr) {
	png_destroy_write_struct(&png_ptr, 0);
	return FALSE;
    }

    if (setjmp(png_ptr->jmpbuf)) {
	png_destroy_write_struct(&png_ptr, &info_ptr);
	return FALSE;
    }

    png_set_write_fn(png_ptr, (void*)this, qpiw_write_fn, 0);

    info_ptr->channels =
	(image.depth() == 32)
	    ? (image.hasAlphaBuffer() ? 4 : 3)
	    : 1;

    png_set_IHDR(png_ptr, info_ptr, image.width(), image.height(),
	image.depth() == 1 ? 1 : 8 /* per channel */,
	image.depth() == 32
	    ? image.hasAlphaBuffer()
		? PNG_COLOR_TYPE_RGB_ALPHA
		: PNG_COLOR_TYPE_RGB
	    : PNG_COLOR_TYPE_PALETTE, 0, 0, 0);


    //png_set_sBIT(png_ptr, info_ptr, 8);
    info_ptr->sig_bit.red = 8;
    info_ptr->sig_bit.green = 8;
    info_ptr->sig_bit.blue = 8;

#if 0 // libpng takes care of this.
    if (image.depth() == 1 && image.bitOrder() == QImage::BigEndian)
       png_set_packswap(png_ptr);
#endif

    if (image.numColors()) {
	// Paletted
	info_ptr->valid |= PNG_INFO_PLTE;
	info_ptr->palette = new png_color[image.numColors()];
	info_ptr->num_palette = image.numColors();
	int* trans = new int[info_ptr->num_palette];
	int num_trans = 0;
	for (int i=0; i<info_ptr->num_palette; i++) {
	    QRgb rgb=image.color(i);
	    info_ptr->palette[i].red = qRed(rgb);
	    info_ptr->palette[i].green = qGreen(rgb);
	    info_ptr->palette[i].blue = qBlue(rgb);
	    if (image.hasAlphaBuffer()) {
		trans[i] = rgb >> 24;
		if (trans[i] < 255) {
		    num_trans = i+1;
		}
	    }
	}
	if (num_trans) {
	    info_ptr->valid |= PNG_INFO_tRNS;
	    info_ptr->trans = new png_byte[num_trans];
	    info_ptr->num_trans = num_trans;
	    for (int i=0; i<num_trans; i++)
		info_ptr->trans[i] = trans[i];
	}
	delete trans;
    }

    if ( image.hasAlphaBuffer() ) {
	info_ptr->sig_bit.alpha = 8;
    }

    if ( QImage::systemByteOrder() == QImage::BigEndian ) {
	png_set_bgr(png_ptr);
	png_set_swap_alpha(png_ptr);
    }

    if (off_x || off_y) {
	png_set_oFFs(png_ptr, info_ptr, off_x, off_y, PNG_OFFSET_PIXEL);
    }

    if ( frames_written > 0 )
        png_set_sig_bytes(png_ptr, 8);

    png_write_info(png_ptr, info_ptr);

    if ( image.depth() != 1 )
	png_set_packing(png_ptr);

    if ( image.depth() == 32 && !image.hasAlphaBuffer() )
	png_set_filler(png_ptr, 0,
	    QImage::systemByteOrder() == QImage::BigEndian ?
		PNG_FILLER_BEFORE : PNG_FILLER_AFTER);

    if ( looping >= 0 && frames_written == 0 ) {
	uchar data[13] = "NETSCAPE2.0";
	//                0123456789aBC
	data[0xB] = looping%0x100;
	data[0xC] = looping/0x100;
	png_write_chunk(png_ptr, (png_byte*)"gIFx", data, 13);
    }
    if ( ms_delay >= 0 || disposal!=Unspecified ) {
	uchar data[4];
	data[0] = disposal;
	data[1] = 0;
	data[2] = (ms_delay/10)/0x100; // hundredths
	data[3] = (ms_delay/10)%0x100;
	png_write_chunk(png_ptr, (png_byte*)"gIFg", data, 4);
    }

    uchar** jt = image.jumpTable();
    row_pointers=new png_bytep[info_ptr->height];
    uint y;
    for (y=0; y<info_ptr->height; y++) {
	    row_pointers[y]=jt[y];
    }
    png_write_image(png_ptr, row_pointers);
    delete row_pointers;

    png_write_end(png_ptr, info_ptr);
    frames_written++;

    if (image.numColors())
	delete info_ptr->palette;
    if (info_ptr->valid & PNG_INFO_tRNS)
	delete info_ptr->trans;

    png_destroy_write_struct(&png_ptr, &info_ptr);

    return TRUE;
}

static
void write_png_image(QImageIO* iio)
{
    QPNGImageWriter writer(iio->ioDevice());
    if ( writer.writeImage(iio->image()) )
	iio->setStatus(0);
    else
	iio->setStatus(-1);
}


QPNGImagePacker::QPNGImagePacker(QIODevice* iod, int storage_depth=32,
	int conversionflags=0) :
    QPNGImageWriter(iod),
    depth(storage_depth),
    convflags(conversionflags)
{
}

bool QPNGImagePacker::packImage(const QImage& img)
{
    QImage image = img.convertDepth(32);
    if ( previous.isNull() ) {
	// First image
	writeImage(image.convertDepth(depth,convflags));
debug("Initial image has %d pixels",image.width()*image.height());
    } else {
	bool done;
	int minx, maxx, miny, maxy;
	int w = image.width();
	int h = image.height();

	QRgb** jt = (QRgb**)image.jumpTable();
	QRgb** pjt = (QRgb**)previous.jumpTable();

	// Find left edge of change
	done = FALSE;
	for (minx = 0; minx < w && !done; minx++) {
	    for (int ty = 0; ty < h; ty++) {
		if ( jt[ty][minx] != pjt[ty][minx] ) {
		    done = TRUE;
		    break;
		}
	    }
	}
	minx--;

	// Find right edge of change
	done = FALSE;
	for (maxx = w-1; maxx >= 0 && !done; maxx--) {
	    for (int ty = 0; ty < h; ty++) {
		if ( jt[ty][maxx] != pjt[ty][maxx] ) {
		    done = TRUE;
		    break;
		}
	    }
	}
	maxx++;

	// Find top edge of change
	done = FALSE;
	for (miny = 0; miny < h && !done; miny++) {
	    for (int tx = 0; tx < w; tx++) {
		if ( jt[miny][tx] != pjt[miny][tx] ) {
		    done = TRUE;
		    break;
		}
	    }
	}
	miny--;

	// Find right edge of change
	done = FALSE;
	for (maxy = h-1; maxy >= 0 && !done; maxy--) {
	    for (int tx = 0; tx < w; tx++) {
		if ( jt[maxy][tx] != pjt[maxy][tx] ) {
		    done = TRUE;
		    break;
		}
	    }
	}
	maxy++;

	if ( minx > maxx ) minx=maxx=0;
	if ( miny > maxy ) miny=maxy=0;

	int dw = maxx-minx+1;
	int dh = maxy-miny+1;

	QImage diff(dw, dh, 32);

	diff.setAlphaBuffer(TRUE);
	int x, y;
	int n = 0;
	for (y = 0; y < dh; y++) {
	    QRgb* li = (QRgb*)image.scanLine(y+miny)+minx;
	    QRgb* lp = (QRgb*)previous.scanLine(y+miny)+minx;
	    QRgb* ld = (QRgb*)diff.scanLine(y);
	    for (x = 0; x < dw; x++) {
		if ( li[x] == lp[x] ) {
		    ld[x] = qRgba(0,0,0,0);
		} else {
		    ld[x] = 0xff000000 | li[x];
		    n++;
		}
	    }
	}
debug("Semi-transparent frame has %d new pixels",n);

	diff = diff.convertDepth(depth,convflags);
	if ( !writeImage(diff, minx, miny) )
	    return FALSE;
    }
    previous = image;
    return TRUE;
}



class Q_EXPORT QPNGFormat : public QImageFormat {
public:
    QPNGFormat();
    virtual ~QPNGFormat();

    int decode(QImage& img, QImageConsumer* consumer,
	    const uchar* buffer, int length);

    void info(png_structp png_ptr, png_infop info);
    void row(png_structp png_ptr, png_bytep new_row,
		png_uint_32 row_num, int pass);
    void end(png_structp png_ptr, png_infop info);
#ifdef PNG_USER_CHUNK_SUPPORTED
    int user_chunk(png_structp png_ptr, png_infop info,
	    png_bytep data, png_uint_32 length);
#endif

private:
    // Animation-level information
    enum { MovieStart, FrameStart, Inside } state;
    int first_frame;
    int base_offx;
    int base_offy;

    // Image-level information
    png_structp png_ptr;
    png_infop info_ptr;

    // Temporary locals during single data-chunk processing
    QImageConsumer* consumer;
    QImage* image;
    int unused_data;
};

class Q_EXPORT QPNGFormatType : public QImageFormatType
{
    QImageFormat* decoderFor(const uchar* buffer, int length);
    const char* formatName() const;
};


/*!
  \class QPNGFormat qpngio.h
  \brief Incremental image decoder for PNG image format.

  \ingroup images

  This subclass of QImageFormat decodes PNG format images,
  including animated PNGs.

  Animated PNG images are standard PNG images.  The PNG standard
  defines two extension chunks that are useful for animations:

  <dl>
   <dt>gIFg - GIF-like Graphic Control Extension
    <dd>Includes frame disposal, user input flag (we ignore this),
	    and inter-frame delay.
   <dt>gIFx - GIF-like Application Extension
    <dd>Multi-purpose, but we just use the Netscape extension
	    which specifies looping.
  </dl>

  The subimages usually contain a offset chunk (oFFs) but need not.  

  The first image defines the "screen" size.  Any subsequent image that
  doesn't fit is clipped.

TODO: decide on this point.  gIFg gives disposal types, so it can be done.
  All images paste (\e not composite, just place all-channel copying)
  over the previous image to produce a subsequent frame.
*/

/*!
  \class QPNGFormatType qasyncimageio.h
  \brief Incremental image decoder for PNG image format.

  \ingroup images

  This subclass of QImageFormatType recognizes PNG
  format images, creating a QPNGFormat when required.  An instance
  of this class is created automatically before any other factories,
  so you should have no need for such objects.
*/

QImageFormat* QPNGFormatType::decoderFor(
    const uchar* buffer, int length)
{
    if (length < 8) return 0;
    if (buffer[0]==137
     && buffer[1]=='P'
     && buffer[2]=='N'
     && buffer[3]=='G'
     && buffer[4]==13
     && buffer[5]==10
     && buffer[6]==26
     && buffer[7]==10)
        return new QPNGFormat;
    return 0;
}

const char* QPNGFormatType::formatName() const
{
    return "PNG";
}


static void
info_callback(png_structp png_ptr, png_infop info)
{
    QPNGFormat* that = (QPNGFormat*)png_get_progressive_ptr(png_ptr);
    that->info(png_ptr,info);
}

static void
row_callback(png_structp png_ptr, png_bytep new_row,
   png_uint_32 row_num, int pass)
{
    QPNGFormat* that = (QPNGFormat*)png_get_progressive_ptr(png_ptr);
    that->row(png_ptr,new_row,row_num,pass);
}

static void
end_callback(png_structp png_ptr, png_infop info)
{
    QPNGFormat* that = (QPNGFormat*)png_get_progressive_ptr(png_ptr);
    that->end(png_ptr,info);
}

#ifdef PNG_USER_CHUNK_SUPPORTED
static int
user_chunk_callback(png_structp png_ptr, png_infop info,
	    png_bytep data, png_uint_32 length)
{
    QPNGFormat* that = (QPNGFormat*)png_get_progressive_ptr(png_ptr);
    return that->user_chunk(png_ptr,info,data,length);
}
#endif


/*!
  Constructs a QPNGFormat.
*/
QPNGFormat::QPNGFormat()
{
    state = MovieStart;
    first_frame = 1;
    base_offx = 0;
    base_offy = 0;
    png_ptr = 0;
    info_ptr = 0;
}

/*!
  Destructs a QPNGFormat.
*/
QPNGFormat::~QPNGFormat()
{
}





/*!
  This function decodes some data into image changes.

  Returns the number of bytes consumed.
*/
int QPNGFormat::decode(QImage& img, QImageConsumer* cons,
	const uchar* buffer, int length)
{
    consumer = cons;
    image = &img;

    if ( state != Inside ) {
       png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING, 0, 0, 0);
       png_set_compression_level(png_ptr, 9);

       if (png_ptr == NULL) {
	  info_ptr = NULL;
	  image = 0;
	  return 0;
       }

       info_ptr = png_create_info_struct(png_ptr);

       if (info_ptr == NULL) {
	  png_destroy_read_struct(&png_ptr, &info_ptr, (png_infopp)NULL);
	  image = 0;
	  return 0;
       }

       if (setjmp((png_ptr)->jmpbuf)) {
	  png_destroy_read_struct(&png_ptr, &info_ptr, (png_infopp)NULL);
	  image = 0;
	  return 0;
       }

       png_set_progressive_read_fn(png_ptr, (void *)this,
	  info_callback, row_callback, end_callback);

#ifdef PNG_USER_CHUNK_SUPPORTED
       png_set_user_chunk_fn(png_ptr, user_chunk_callback);
#endif

       if ( state != MovieStart && *buffer != 0211 ) {
	   // Good, no signature - the preferred way to concat PNG images.
	   // Skip them.
	   png_set_sig_bytes(png_ptr, 8);
       }

       state = Inside;
    }

    if (setjmp(png_ptr->jmpbuf)) {
       png_destroy_read_struct(&png_ptr, &info_ptr, (png_infopp)NULL);
       image = 0;
       return 0;
    }
    unused_data = 0;
    png_process_data(png_ptr, info_ptr, (png_bytep)buffer, length);
    length -= unused_data;

    // TODO: send incremental stuff to consumer (optional)

    if ( state != Inside ) {
	if ( png_ptr )
	    png_destroy_read_struct(&png_ptr, &info_ptr, (png_infopp)NULL);
    }

    image = 0;
    return length;
}

void QPNGFormat::info(png_structp png_ptr, png_infop)
{
    png_set_interlace_handling(png_ptr);
    setup_qt(*image, png_ptr, info_ptr);
}

void QPNGFormat::row(png_structp png_ptr, png_bytep new_row,
   png_uint_32 row_num, int)
{
    uchar* old_row = image->scanLine(row_num);
    png_progressive_combine_row(png_ptr, old_row, new_row);
}


void QPNGFormat::end(png_structp png_ptr, png_infop info)
{
    int offx = png_get_x_offset_pixels(png_ptr,info) - base_offx;
    int offy = png_get_y_offset_pixels(png_ptr,info) - base_offy;
    if ( first_frame ) {
	base_offx = offx;
	base_offy = offy;
	first_frame = 0;
    }
    QRect r(0,0,image->width(),image->height());
    consumer->frameDone(QPoint(offx,offy),r);
    state = FrameStart;
    unused_data = png_ptr->buffer_size; // Since libpng doesn't tell us
}

#ifdef PNG_USER_CHUNK_SUPPORTED
int QPNGFormat::user_chunk(png_structp png_ptr, png_infop,
	    png_bytep data, png_uint_32 length)
{
    // debug("Got %ld-byte %s chunk", length, png_ptr->chunk_name);
    if ( 0==strcmp((char*)png_ptr->chunk_name, "gIFg") ) {

	QPNGImageWriter::DisposalMethod disposal = data[0];
	// TODO: use the disposal method
	int ms_delay = ((data[2] << 8) | data[3])*10;
	consumer->setFramePeriod(ms_delay);
	return 1;
    } if ( 0==strcmp((char*)png_ptr->chunk_name, "gIFx") ) {
	if ( strncmp((char*)data,"NETSCAPE2.0",11)==0 ) {
	    int looping = (data[0xC]<<8)|data[0xB];
	    consumer->setLooping(looping);
	    return 1;
	}
    }
    return 0;
}
#endif




void qInitPngIO()
{
    QImageIO::defineIOHandler("PNG", "^.PNG\r", 0, read_png_image, write_png_image);
    (void)new QPNGFormatType;
}




