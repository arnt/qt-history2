#include "qcomponentinterface.h"

#ifndef QT_NO_COMPONENT

// We still have no name for the COM-like stuff here! See ###

/*!
  \class QUuid quuiddefs.h
  \brief The QUuid struct provides an object oriented wrapper for Unique Univeral Identifiers (UUIDs)

  For objects or declarations that need to be identified uniquely, UUIDs (also known as GUIDs) are widely 
  used in order to assign a fixed and easy to compare value to this object or declaration. The 128bit value
  of an UUID is generated by an algorithm that guarantees a value that is unique in time and space.

  In Qt, UUIDs are wrapped by the QUuid struct which provides convenience functions for comparing and coping 
  this value. The QUuid struct is used in the ### to identify interfaces. Most platforms provide a tool to generate
  new UUIDs (uuidgen, guidgen), and the distribution includes a graphical tool \e quuidgen that generates the UUIDs in
  a programmer friendly format.

  \sa QUnknownInterface
*/

/*!
  \fn QUuid::QUuid()

  Creates the null UUID {00000000-0000-0000-0000-000000000000}.
*/

/*!
  \fn QUuid::QUuid( uint l, ushort w1, ushort w2, uchar b1, uchar b2, uchar b3, uchar b4, uchar b5, uchar b6, uchar b7, uchar b8 )

  Creates an UUID with the value specified by the parameters.

  Example:
  \code
  // {67C8770B-44F1-410A-AB9A-F9B5446F13EE} 
  QUuid IID_MyInterface( 0x67c8770b, 0x44f1, 0x410a, 0xab, 0x9a, 0xf9, 0xb5, 0x44, 0x6f, 0x13, 0xee )
  \endcode
*/

/*!
  \fn QUuid::QUuid( const QUuid &orig )

  Creates a copy of the QUuid \a orig.
*/

/*!
  Creates a QUuid object from the string \a text. Right now, the function 
  can only convert the format {12345678-1234-1234-1234-123456789ABC} and
  will create the null UUID when the conversion fails.
*/
QUuid::QUuid( const QString &text )
{
    bool ok;
    QString temp = text.upper();
    
    data1 = temp.mid( 1, 8 ).toULong( &ok, 16 );
    if ( !ok ) {
	*this = QUuid();
	return;
    }
    
    data2 = temp.mid( 10, 4 ).toUInt( &ok, 16 );
    if ( !ok ) {
	*this = QUuid();
	return;
    }
    data3 = temp.mid( 15, 4 ).toUInt( &ok, 16 );
    if ( !ok ) {
	*this = QUuid();
	return;
    }
    data4[0] = temp.mid( 20, 2 ).toUInt( &ok, 16 );
    if ( !ok ) {
	*this = QUuid();
	return;
    }
    data4[1] = temp.mid( 22, 2 ).toUInt( &ok, 16 );
    if ( !ok ) {
	*this = QUuid();
	return;
    }
    for ( int i = 2; i<8; i++ ) {
	data4[i] = temp.mid( 25 + (i-2)*2, 2 ).toUShort( &ok, 16 );
	if ( !ok ) {
	    *this = QUuid();
	    return;
	}
    }
}

/*!
  \fn QUuid QUuid::operator=(const QUuid &uuid )

  Assigns the value of \a uuid to this QUuid object.
*/

/*!
  QString QUuid::toString() const

  Returns a string in {12345678-1234-1234-1234-123456789ABC} format.
*/
QString QUuid::toString() const
{
    QString result;

    result = "{" + QString::number( data1, 16 ) + "-";
    result += QString::number( data2, 16 ) + "-";
    result += QString::number( data3, 16 ) + "-";
    result += QString::number( data4[0], 16 );
    result += QString::number( data4[1], 16 ) + "-";
    for ( int i = 2; i < 8; i++ )
	result += QString::number( data4[i], 16 );

    return result + "}";
}

/*!
  \fn bool QUuid::operator==( const QUuid &uuid ) const

  Returns TRUE if the value of \a uuid is the value if this QUuid object, otherwise returns FALSE.
*/

/*!
  \fn bool QUuid::operator!=( const QUuid &uuid ) const

  Returns TRUE if the value of \a uuid is different from the value if this QUuid object, otherwise returns FALSE.
*/

/*!
  \class QUnknownInterface qcomponentinterface.h
  \brief The QUnknownInterface class serves as a base class for interfaces.

  All ### interfaces are derived from the QUnknownInterface. This interface provides
  control of the object's lifetime and the ability to navigate a component implementing
  multple interfaces.
  The object's lifetime is controlled using a reference count that is increased and
  decreased using the functions addRef and release, respectively.
  The queryInterface functions determines whether the component supports a specific interface.
  For every interface a Unique Universal Identifier (UUID) is provided to identify requests
  for an interfaces. In Qt, this identifier is wrapped in the \link QUuid QUuid \endlink class
  that provides convenience operators for comparison and copying.
*/

/*!
  \fn QUnknownInterface* QUnknownInterface::queryInterface( const QUuid &request )

  Returns a pointer to an interface specified with \a request, or NULL if this interface 
  can't provide the requested interface. An implementation of this function must call
  addRef() on the pointer it returns.

  Example:
  \code
  QUnknownInterface *MyComponent::queryInterface( const QUuid &request )
  {
      QUnknownInterface *iface = 0;
      if ( request == IID_QUnknownInterface )
          return (QUnknownInterface*)this;
      else if ( request == IID_... )
	  return (...*)this;
      ...

      if ( iface )
          iface->addRef();
      return iface;
  }
  \endcode

  For any component, a query for the QUnknownInterface must always return the same
  pointer value to allow a client to determine whether two interfaces point to the
  same component.
  There are four requirements for implementations of queryInterface:
  <ul>
  <li>The set of interfaces accessible through queryInterface must be static for any component.
  <li>Reflexive - if a client holding a pointer to one interface and queries for that interface the call must succeed
  <li>Symmetric - if a client holding a pointer to one interface and queries for another, 
      a query through the obtained interface for the first interface must succeed
  <li>Transitive - if a client holding a pointer to one interface queries successfully for a second, and queries that 
      successfully for a third interface, a query for that third interface on the first interface must succeed.
  </ul>

  \sa addRef(), release()
*/

/*!
  \fn ulong QUnknownInterface::addRef()

  Increases the reference counter for this interface by one and returns
  the old reference count.

  Example:
  \code
  int MyComponent::addRef()
  {
      return ref++;
  }
  \endcode

  This function must be called when this interface is returned as a result of a 
  queryInterface() call. It should be called for every new copy of a pointer to 
  this interface.

  \sa queryInterface(), release()
*/

/*!
  \fn ulong QUnknownInterface::release()

  Decreases the reference count for this interface by one and returns
  the new reference count. If the reference count falls to 0, the object is freed from memory.

  Example:
  \code
  int MyComponent::release()
  {
      if ( !--ref ) {
          delete this;
	  return 0;
      }
      return ref;
  }
  \endcode

  This function should be called whenever a copy of a pointer to this interface is no longer needed.

  \sa addRef()
*/



/*!
  \class QComponentInterface qcomponentinterface.h
  \brief The QComponentInterface class provides functions to get information about components.
*/

/*!
  \fn QString QComponentInterface::name() const

  Returns a string with the name of the module.
*/

/*!
  \fn QString QComponentInterface::description() const

  Returns a string with a description of the module.
*/

/*!
  \fn QString QComponentInterface::author() const

  Returns a string with information about the author of the module.
*/

/*!
  \fn QString QComponentInterface::version() const

  Returns a string with information about the version of the module.
*/



/*!
  \class QLibraryInterface
  \brief The QLibraryInterface class provides an interface to control loading and unloading of components.
*/

/*!
  \fn bool QLibraryInterface::init()

  When this function returns FALSE, the component implementing this interface will not be loaded.
*/

/*!
  \fn void QLibraryInterface::cleanup()

  Called by QLibrary before unloading the component implementing this interface.
*/

/*!
  \fn bool QLibraryInterface::canUnload() const

  When this function returns FALSE, the component implementing this interface will not be unloaded.
  This function may be called regularily to unload unused libraries.
*/

/*!
  \class QFeatureListInterface
  \brief The QFeatureListInterface struct defines an interface to retrieve information about features provided by a component.

  \sa 
*/

/*!
  \fn QStringList QFeatureListInterface::featureList() const

  Returns a list of features implemented in this component.
*/

#endif // QT_NO_COMPONENT
