/****************************************************************************
** $Id: //depot/qt/main/src/kernel/qabstractlayout.h#1 $
**
** Definition of the abstract layout base class
**
** Created : 960416
**
** Copyright (C) 1992-1998 Troll Tech AS.  All rights reserved.
**
** This file is part of Troll Tech's internal development tree for Qt.
**
** This header text will be replaced by an appropriate text by the
** mkdist script which generates external distributions.
**
** If you are using the Qt Professional Edition or the Qt Free Edition,
** please notify Troll Tech at <info@troll.no> if you see this text.
**
** To Troll Tech developers: This header was generated by the script
** fixcopyright-int. It has the same number of text lines as the free
** and professional editions to avoid line number inconsistency.
**
*****************************************************************************/

#ifndef QABSTRACTLAYOUT_H
#define QABSTRACTLAYOUT_H

#ifndef QT_H
#include "qobject.h"
#include "qsizepolicy.h"
#endif // QT_H

class QMenuBar;
class QWidget;
struct QLayoutData;

class Q_EXPORT QLayout : public QObject
{
    Q_OBJECT
public:
    QLayout( QWidget *parent, int border=0, int autoBorder=-1,
	     const char *name=0 );
    QLayout( int autoBorder=-1, const char *name=0 );
    virtual ~QLayout();
    int defaultBorder() const { return insideSpacing; }
    int margin() const { return outsideBorder; }

    enum { unlimited = QCOORD_MAX };

    void freeze( int w, int h );
    void freeze() { freeze( 0, 0 ); }

    virtual void  setMenuBar( QMenuBar *w );

    QWidget *mainWidget();
    QMenuBar *menuBar() const { return menubar; }
    bool isTopLevel() const { return topLevel; }
    const QRect &geometry() { return rect; }
#if 1	//OBSOLETE
    bool activate();
#endif
    virtual QSizePolicy sizePolicy();
    
    virtual QSize sizeHint() = 0;
    //    virtual void clearCache();
    virtual void setGeometry( const QRect& );
    virtual bool removeWidget( QWidget * ) = 0;
protected:
    bool  eventFilter( QObject *, QEvent * );
    virtual void paintEvent( QPaintEvent * );
    void addChildLayout( QLayout *l );
private:
    void setWidgetLayout( QWidget *, QLayout * );
    int insideSpacing;
    int outsideBorder;
    bool    topLevel;
    QRect rect;
    QLayoutData *extraData;
    QMenuBar *menubar;
private:	// Disabled copy constructor and operator=
#if defined(Q_DISABLE_COPY)
    QLayout( const QLayout & );
    QLayout &operator=( const QLayout & );
#endif

};


#endif
