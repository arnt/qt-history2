/****************************************************************************
** $Id: //depot/qt/main/src/kernel/qdropsite.cpp#4 $
**
** Implementation of Drag and Drop support
**
** Copyright (C) 1992-1998 Troll Tech AS.  All rights reserved.
**
** This file is part of Troll Tech's internal development tree for Qt.
**
** This header text will be replaced by an appropriate text by the
** mkdist script which generates external distributions.
**
** If you are using the Qt Professional Edition or the Qt Free Edition,
** please notify Troll Tech at <info@troll.no> if you see this text.
**
** To Troll Tech developers: This header was generated by the script
** fixcopyright-int. It has the same number of text lines as the free
** and professional editions to avoid line number inconsistency.
**
*****************************************************************************/

#include "qdropsite.h"
#include "qwidget.h"

class QDropSitePrivate : public QObject {
    QDropSite* s;

public:
    QDropSitePrivate( QWidget* parent, QDropSite* site ) :
	QObject(parent),
	s(site)
    {
	parent->installEventFilter(this);
    }

    bool eventFilter( QObject*, QEvent* );
};

bool QDropSitePrivate::eventFilter( QObject *, QEvent * e )
{
    if ( e->type() == Event_Drop ) {
	s->dropEvent( (QDropEvent *)e );
	return TRUE;
    } else if ( e->type() == Event_DragEnter ) {
	s->dragEnterEvent( (QDragEnterEvent *)e );
	return TRUE;
    } else if ( e->type() == Event_DragMove ) {
	s->dragMoveEvent( (QDragMoveEvent *)e );
	return TRUE;
    } else if ( e->type() == Event_DragLeave ) {
	s->dragLeaveEvent( (QDragLeaveEvent *)e );
	return TRUE;
    } else {
	return FALSE;
    }
}


/*!
  \class QDropSite qdropsite.h
  \brief Encapsulates the requirements for implementing Drag-and-Drop dropping.

  Multiply-inherit from a QWidget subclass and this class to make a widget
  which can receive drag-and-drop events.  This slightly unusual arrangement
  is due to binary-compatibility issues.  Qt 2.0 will allow the same technique,
  but this class will be almost empty.

  Example:
  \code
    class MyLabel : public QLabel, QDropSite {
      public:
	MyLabel( QWidget* parent ) :
	    QLabel( parent ), QDropSite( this )
	{
	}

	void dragEnterEvent( QDragEnterEvent * );
	void dragMoveEvent( QDragMoveEvent * );
	void dragLeaveEvent( QDragLeaveEvent * );
	void dropEvent( QDropEvent * );
    };
  \endcode

  \sa QDrag, QTextDrag, QImageDrag
*/

/*!
  Constructs a QDropSite to handle events for the widget \a self.

  Pass <tt>this</tt> as the \a parent parameter.
  This enables dropping by calling QWidget::setAcceptDrops(TRUE).
*/
QDropSite::QDropSite( QWidget* self )
{
    d = new QDropSitePrivate(self,this);
    self->setAcceptDrops( TRUE );
}

/*!
  Destructs the drop site.
*/
QDropSite::~QDropSite()
{
    delete d; // not really needed
}

/*!
  This event handler is called when a drag is in progress and the
  mouse enters this widget.

  The default implementation does nothing.
*/
void QDropSite::dragEnterEvent( QDragEnterEvent * )
{
}

/*!
  This event handler is called when a drag is in progress and the
  mouse enters this widget, and whenever it moves within
  the widget.

  The default implementation does nothing.
*/
void QDropSite::dragMoveEvent( QDragMoveEvent * )
{
}

/*!
  This event handler is called when a drag is in progress and the
  mouse leaves this widget.

  The default implementation does nothing.
*/
void QDropSite::dragLeaveEvent( QDragLeaveEvent * )
{
}

/*!
  This event handler is called when the drag is dropped on this
  widget.

  The default implementation does nothing.
*/
void QDropSite::dropEvent( QDropEvent * )
{
}
