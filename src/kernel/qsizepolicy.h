/****************************************************************************
** $Id: //depot/qt/main/src/kernel/qsizepolicy.h#5 $
**
** Definition of QSizePolicy class
**
** Created : 930929
**
** Copyright (C) 1998 Troll Tech AS.  All rights reserved.
**
** This file is part of Troll Tech's internal development tree for Qt.
**
** This header text will be replaced by an appropriate text by the
** mkdist script which generates external distributions.
**
** If you are using the Qt Professional Edition or the Qt Free Edition,
** please notify Troll Tech at <info@troll.no> if you see this text.
**
** To Troll Tech developers: This header was generated by the script
** fixcopyright-int. It has the same number of text lines as the free
** and professional editions to avoid line number inconsistency.
**
*****************************************************************************/

#ifndef QSIZEPOLICY_H
#define QSIZEPOLICY_H

class QSizePolicy
{
private:
        enum { HSize = 6, HMask = 0x3f, VMask = HMask << HSize,
	       MayGrow = 1, ExpMask = 2, MayShrink = 4 };
public:
    enum SizeType { Fixed = 0, Minimum = MayGrow,
		    Maximum = MayShrink,
		    Preferred = MayGrow|MayShrink ,
		    Expanding = Preferred|ExpMask,
		    MinimumExpanding = Minimum|ExpMask };

    enum ExpandData { NoDirection = 0, Horizontal = 1, Vertical = 2,
			 BothDirections = Horizontal | Vertical };

    QSizePolicy() { data = 0; }

    QSizePolicy( SizeType hor, SizeType ver ) {
	data = hor | (ver<<HSize); }

    SizeType horData() const { return (SizeType)( data & HMask ); }
    SizeType verData() const { return (SizeType)(( data & VMask ) >> HSize); }

    bool mayShrinkHorizontally() const { return horData() & MayShrink; }
    bool mayShrinkVertically() const { return verData() & MayShrink; }
    bool mayGrowHorizontally() const { return horData() & MayGrow; }
    bool mayGrowVertically() const { return verData() & MayGrow; }

    ExpandData expanding() const {
	int r = (horData()|ExpMask ? Horizontal : 0)
		|(verData()|ExpMask ? Vertical : 0);
	return (ExpandData)r;
    }

    void setHorData( SizeType d ) { data = (data & ~HMask) | d; }
    void setVerData( SizeType d ) { data = (data & ~HMask) | d; }
		
		
		
    bool hasWidthForHeight() { return data & ( 1 << 2*HSize ); }

private:
    QSizePolicy( int i ) { data = i; }
    Q_UINT16 data;
};

#endif
