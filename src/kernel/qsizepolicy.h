/****************************************************************************
** $Id: //depot/qt/main/src/kernel/qsizepolicy.h#1 $
**
** Definition of QSizePolicy class
**
** Created : 930929
**
** Copyright (C) 1998 Troll Tech AS.  All rights reserved.
**
** This file is part of Troll Tech's internal development tree for Qt.
**
** This header text will be replaced by an appropriate text by the
** mkdist script which generates external distributions.
**
** If you are using the Qt Professional Edition or the Qt Free Edition,
** please notify Troll Tech at <info@troll.no> if you see this text.
**
** To Troll Tech developers: This header was generated by the script
** fixcopyright-int. It has the same number of text lines as the free
** and professional editions to avoid line number inconsistency.
**
*****************************************************************************/

#ifndef QSIZEPOLICY_H
#define QSIZEPOLICY_H


class QSizeData
{
public:
    enum SizeType { NoShrink = 0, MayShrink = 0x04,
		      NoGrow = 0, MayGrow = 0x01, WannaGrow = 0x03,
		      Fixed = NoGrow | NoShrink,
		      PrefSize = MayShrink | MayGrow,
		      PrefMin = MayShrink | WannaGrow };

    QSizeData() { data = 0; }
    QSizeData( SizeType i ) { data = i; }
    QSizeData operator&( const QSizeData d ) {
	return QSizeData( data & d.data ); }
    QSizeData operator|( const QSizeData d ) {
	return QSizeData( data | d.data ); }
    bool isFixed() { return data == Fixed; }
    bool mayGrow() { return data & MayGrow; }
    bool preferGrow() { return data & (WannaGrow^MayGrow); } //###
    bool mayShrink() { return data & MayShrink; }
private:
    QSizeData( int i ) { data = i; }
    Q_UINT8 data;
    friend class QSizePolicy;
};


class QSizePolicy
{
public:
    enum TriState { No=0, May=1, Yes=3 };
    enum SizeType { NoShrink = 0, MayShrink = 0x04,
		      NoGrow = 0, MayGrow = 0x01, WannaGrow = 0x03,
		      Fixed = NoGrow | NoShrink,
		      PrefSize = MayShrink | MayGrow,
		      PrefMin = MayShrink | WannaGrow };

    QSizePolicy() { data = 0; }
    QSizePolicy( TriState hGrow, bool hShrink,
		   TriState vGrow, bool vShrink );

    QSizePolicy( SizeType hor, SizeType ver ) {
	data = hor | (ver<<HSize); }
    QSizePolicy( QSizeData hor, QSizeData ver ) {
	data = hor.data | (ver.data<<HSize); }
    QSizeData horData() { return QSizeData( data & HMask ); }
    QSizeData verData() { return QSizeData(( data & VMask ) >> HSize); }

    void setHorData( QSizeData d ) { data = (data & ~HMask) | d.data; }
    void setVerData( QSizeData d ) { data = (data & ~HMask) | d.data; }
		
		
		
    bool hasWidthForHeight() { return data & ( 1 << 2*HSize ); }

private:
    QSizePolicy( int i ) { data = i; }
    enum { HSize = 6, HMask = 0x3f, VMask = HMask << HSize };
    Q_UINT16 data;
};

#endif
