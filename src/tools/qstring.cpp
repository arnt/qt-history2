/****************************************************************************
** $Id: //depot/qt/main/src/tools/qstring.cpp#220 $
**
** Implementation of the QString class and related Unicode functions
**
** Created : 920722
**
** Copyright (C) 1992-1999 Troll Tech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Troll Tech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** Licensees holding valid Qt Professional Edition licenses may use this
** file in accordance with the Qt Professional Edition License Agreement
** provided with the Qt Professional Edition.
**
** See http://www.troll.no/pricing.html or email sales@troll.no for
** information about the Professional Edition licensing, or see
** http://www.troll.no/qpl/ for QPL licensing information.
**
*****************************************************************************/

// Don't define it while compiling this module, or USERS of Qt will
// not be able to link.
#ifdef QT_NO_CAST_ASCII
#undef QT_NO_CAST_ASCII
#endif

#include "qstring.h"
#include "qregexp.h"
#include "qdatastream.h"
#include "qtextcodec.h"
#include "qstack.h"
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>
#include <limits.h>

/* -------------------------------------------------------------------------
 * unicode information
 * these tables are generated from the unicode reference file
 * ftp://ftp.unicode.org/Public/2.1-Update3/UnicodeData-2.1.8.txt
 *
 * Lars Knoll <knoll@mpi-hd.mpg.de>
 * -------------------------------------------------------------------------
 */

/* Perl script to generate

#!perl

sub numberize
{
    my(%r, $n, $id);
    for $id ( @_ ) {
	$id="" if $id eq "EMPTY";
	$r{$id}=$n++;
    }
    return %r;
}

# Code to integer mappings...
#
%category_code = numberize(qw{
      EMPTY
      Mn Mc Me
      Nd Nl No
      Zs Zl Zp
      Cc Cf Cs Co Cn

      Lu Ll Lt Lm Lo
      Pc Pd Ps Pe Pi Pf Po
      Sm Sc Sk So
});
%bidi_category_code = numberize(qw{
      L R EN ES ET AN CS B S WS ON });
%character_decomposition_tag = numberize(qw{
      single canonical font noBreak initial medial
      final isolated circle super sub vertical
      wide narrow small square compat fraction
});
%mirrored_code = numberize(qw{N Y});

# Read data into hashes...
#
open IN, "UnicodeData-2.1.8.txt";
while (<IN>) {
    @fields = split /;/;
    $code = shift @fields;
    for $n (qw{
      name category combining_class bidi_category
      character_decomposition decimal_digit_value digit_value
      numeric_value mirrored oldname comment
      uppercase lowercase titlecase})
    {
	$id = shift @fields;
	$codes = "${n}_code";
	if ( defined %$codes && defined $$codes{$id} ) {
	    $id = $$codes{$id};
	}
	${$n}{$code}=$id;
    }
}


# Build pages...
#
$rowtable_txt =
    "static const Q_UINT8 *unicode_info [256] = {";
for $row ( 0..255 ) {
    $nonzero=0;
    $txt = "";
    for $cell ( 0..255 ) {
	$code = sprintf("%02X%02X",$row,$cell);
	$info = $category{$code};
	$info = 0 if !defined $info;
	$txt .= "\n    " if $cell%8 == 0;
	$txt .= "$info, ";
    }
    $therow = $row{$txt};
    if ( !defined $therow ) {
	$size+=256;
	$therow = "ui_".sprintf("%02X",$row);
	$rowtext{$therow} =
	    "static const Q_UINT8 ${therow}[] = {$txt\n};\n\n";
	$row{$txt}=$therow;
    }
    $rowtable_txt .= "\n    " if $row%8 == 0;
    $rowtable_txt .= "$therow, ";
}

# Print pages...
#
for $r ( sort keys %rowtext ) {
    print $rowtext{$r};
}
print "$rowtable_txt\n};\n";
$size += 256*4;
print "// $size bytes";


__END__

*/

static const Q_UINT8 ui_00[] = {
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    7, 26, 26, 26, 28, 26, 26, 26,
    22, 23, 26, 27, 26, 21, 26, 26,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 26, 26, 27, 27, 27, 26,
    26, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 22, 26, 23, 29, 20,
    29, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 22, 27, 23, 27, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    7, 26, 28, 28, 28, 28, 30, 30,
    29, 30, 16, 24, 27, 21, 30, 29,
    30, 27, 6, 6, 29, 16, 30, 26,
    29, 6, 16, 25, 6, 6, 6, 26,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 27,
    15, 15, 15, 15, 15, 15, 15, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 27,
    16, 16, 16, 16, 16, 16, 16, 16,
};

static const Q_UINT8 ui_01[] = {
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    16, 15, 16, 15, 16, 15, 16, 15,
    16, 15, 16, 15, 16, 15, 16, 15,
    16, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 15, 16, 15, 16, 15, 16, 16,
    16, 15, 15, 16, 15, 16, 15, 15,
    16, 15, 15, 15, 16, 16, 15, 15,
    15, 15, 16, 15, 15, 16, 15, 15,
    15, 16, 16, 16, 15, 15, 16, 15,
    15, 16, 15, 16, 15, 16, 15, 15,
    16, 15, 19, 16, 15, 16, 15, 15,
    16, 15, 15, 15, 16, 15, 16, 15,
    15, 16, 16, 19, 15, 16, 19, 19,
    19, 19, 19, 19, 15, 17, 16, 15,
    17, 16, 15, 17, 16, 15, 16, 15,
    16, 15, 16, 15, 16, 15, 16, 15,
    16, 15, 16, 15, 16, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    16, 15, 17, 16, 15, 16, 0, 0,
    0, 0, 15, 16, 15, 16, 15, 16,
};

static const Q_UINT8 ui_02[] = {
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 0, 0, 0, 0, 0, 0, 0,
    18, 18, 18, 18, 18, 18, 18, 18,
    18, 29, 29, 18, 18, 18, 18, 18,
    18, 18, 29, 29, 29, 29, 29, 29,
    29, 29, 29, 29, 29, 29, 29, 29,
    18, 18, 29, 29, 29, 29, 29, 29,
    29, 29, 29, 29, 29, 29, 29, 0,
    18, 18, 18, 18, 18, 29, 29, 29,
    29, 29, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_03[] = {
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 26, 26, 0, 0,
    0, 0, 18, 0, 0, 0, 26, 0,
    0, 0, 0, 0, 29, 29, 15, 26,
    15, 15, 15, 0, 15, 0, 15, 15,
    16, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 0, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 0,
    16, 16, 15, 15, 15, 16, 16, 0,
    0, 0, 15, 0, 15, 0, 15, 0,
    15, 0, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    16, 16, 16, 19, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_04[] = {
    0, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 0, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    0, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 0, 16, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 30, 1, 1, 1, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    19, 15, 16, 15, 16, 0, 0, 15,
    16, 0, 0, 15, 16, 0, 0, 0,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 0, 0, 15, 16,
    15, 16, 15, 16, 15, 16, 0, 0,
    15, 16, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_05[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 0,
    0, 18, 26, 26, 26, 26, 26, 26,
    0, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    0, 26, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 0, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 0, 1, 1, 1, 26, 1,
    26, 1, 1, 26, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 0, 0, 0, 0, 0,
    19, 19, 19, 26, 26, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_06[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 26, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 26, 0, 0, 0, 26,
    0, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 0, 0, 0, 0, 0,
    18, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 1, 1, 1, 1, 1,
    1, 1, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 26, 26, 26, 26, 0, 0,
    1, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    0, 0, 19, 19, 19, 19, 19, 0,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 0,
    19, 19, 19, 19, 26, 19, 1, 1,
    1, 1, 1, 1, 1, 3, 3, 1,
    1, 1, 1, 1, 1, 18, 18, 1,
    1, 30, 1, 1, 1, 1, 0, 0,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_07[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_09[] = {
    0, 1, 1, 2, 0, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 0, 0, 1, 19, 2, 2,
    2, 1, 1, 1, 1, 1, 1, 1,
    1, 2, 2, 2, 2, 1, 0, 0,
    19, 1, 1, 1, 1, 0, 0, 0,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 1, 1, 26, 26, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    26, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 2, 2, 0, 19, 19, 19,
    19, 19, 19, 19, 19, 0, 0, 19,
    19, 0, 0, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 0, 19, 19, 19, 19, 19, 19,
    19, 0, 19, 0, 0, 0, 19, 19,
    19, 19, 0, 0, 1, 0, 2, 2,
    2, 1, 1, 1, 1, 0, 0, 2,
    2, 0, 0, 2, 2, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 2,
    0, 0, 0, 0, 19, 19, 0, 19,
    19, 19, 1, 1, 0, 0, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    19, 19, 28, 28, 6, 6, 6, 6,
    6, 6, 30, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_0A[] = {
    0, 0, 1, 0, 0, 19, 19, 19,
    19, 19, 19, 0, 0, 0, 0, 19,
    19, 0, 0, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 0, 19, 19, 19, 19, 19, 19,
    19, 0, 19, 19, 0, 19, 19, 0,
    19, 19, 0, 0, 1, 0, 2, 2,
    2, 1, 1, 0, 0, 0, 0, 1,
    1, 0, 0, 1, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 19, 19, 19, 19, 0, 19, 0,
    0, 0, 0, 0, 0, 0, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    1, 1, 19, 19, 19, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 2, 0, 19, 19, 19,
    19, 19, 19, 19, 0, 19, 0, 19,
    19, 19, 0, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 0, 19, 19, 19, 19, 19, 19,
    19, 0, 19, 19, 0, 19, 19, 19,
    19, 19, 0, 0, 1, 19, 2, 2,
    2, 1, 1, 1, 1, 1, 0, 1,
    1, 2, 0, 2, 2, 1, 0, 0,
    19, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    19, 0, 0, 0, 0, 0, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_0B[] = {
    0, 1, 2, 2, 0, 19, 19, 19,
    19, 19, 19, 19, 19, 0, 0, 19,
    19, 0, 0, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 0, 19, 19, 19, 19, 19, 19,
    19, 0, 19, 19, 0, 0, 19, 19,
    19, 19, 0, 0, 1, 19, 2, 1,
    2, 1, 1, 1, 0, 0, 0, 2,
    2, 0, 0, 2, 2, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 2,
    0, 0, 0, 0, 19, 19, 0, 19,
    19, 19, 0, 0, 0, 0, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    30, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 2, 0, 19, 19, 19,
    19, 19, 19, 0, 0, 0, 19, 19,
    19, 0, 19, 19, 19, 19, 0, 0,
    0, 19, 19, 0, 19, 0, 19, 19,
    0, 0, 0, 19, 19, 0, 0, 0,
    19, 19, 19, 0, 0, 0, 19, 19,
    19, 19, 19, 19, 19, 19, 0, 19,
    19, 19, 0, 0, 0, 0, 2, 2,
    1, 2, 2, 0, 0, 0, 2, 2,
    2, 0, 2, 2, 2, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 2,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    6, 6, 6, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_0C[] = {
    0, 2, 2, 2, 0, 19, 19, 19,
    19, 19, 19, 19, 19, 0, 19, 19,
    19, 0, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 0, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 0, 19, 19, 19,
    19, 19, 0, 0, 0, 0, 1, 1,
    1, 2, 2, 2, 2, 0, 1, 1,
    1, 0, 1, 1, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    19, 19, 0, 0, 0, 0, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 2, 2, 0, 19, 19, 19,
    19, 19, 19, 19, 19, 0, 19, 19,
    19, 0, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 0, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 0, 19, 19, 19,
    19, 19, 0, 0, 0, 0, 2, 1,
    2, 2, 2, 2, 2, 0, 1, 2,
    2, 0, 2, 2, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 2, 2, 0,
    0, 0, 0, 0, 0, 0, 19, 0,
    19, 19, 0, 0, 0, 0, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_0D[] = {
    0, 0, 2, 2, 0, 19, 19, 19,
    19, 19, 19, 19, 19, 0, 19, 19,
    19, 0, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 0, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 0, 0, 0, 0, 2, 2,
    2, 1, 1, 1, 0, 0, 2, 2,
    2, 0, 2, 2, 2, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 2,
    0, 0, 0, 0, 0, 0, 0, 0,
    19, 19, 0, 0, 0, 0, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_0E[] = {
    0, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 1, 19, 19, 1, 1, 1, 1,
    1, 1, 1, 0, 0, 0, 0, 28,
    19, 19, 19, 19, 19, 19, 18, 1,
    1, 1, 1, 1, 1, 1, 1, 30,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 26, 26, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 19, 19, 0, 19, 0, 0, 19,
    19, 0, 19, 0, 0, 19, 0, 0,
    0, 0, 0, 0, 19, 19, 19, 19,
    0, 19, 19, 19, 19, 19, 19, 19,
    0, 19, 19, 19, 0, 19, 0, 19,
    0, 0, 19, 19, 0, 19, 19, 19,
    19, 1, 19, 19, 1, 1, 1, 1,
    1, 1, 0, 1, 1, 19, 0, 0,
    19, 19, 19, 19, 19, 0, 18, 0,
    1, 1, 1, 1, 1, 1, 0, 0,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 0, 0, 19, 19, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_0F[] = {
    19, 30, 30, 30, 26, 26, 26, 26,
    26, 26, 26, 26, 26, 26, 26, 26,
    26, 26, 26, 30, 30, 30, 30, 30,
    1, 1, 30, 30, 30, 30, 30, 30,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 30, 1, 30, 1,
    30, 1, 22, 23, 22, 23, 2, 2,
    19, 19, 19, 19, 19, 19, 19, 19,
    0, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 2,
    1, 1, 1, 1, 1, 26, 1, 1,
    19, 19, 19, 19, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 0, 1,
    0, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1,
    0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_10[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 0,
    0, 0, 0, 26, 0, 0, 0, 0,
};

static const Q_UINT8 ui_11[] = {
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 0, 0, 0, 0, 0, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 0, 0, 0, 0, 0,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_1E[] = {
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 16, 16,
    16, 16, 16, 16, 0, 0, 0, 0,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 15, 16, 15, 16, 15, 16,
    15, 16, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_1F[] = {
    16, 16, 16, 16, 16, 16, 16, 16,
    15, 15, 15, 15, 15, 15, 15, 15,
    16, 16, 16, 16, 16, 16, 0, 0,
    15, 15, 15, 15, 15, 15, 0, 0,
    16, 16, 16, 16, 16, 16, 16, 16,
    15, 15, 15, 15, 15, 15, 15, 15,
    16, 16, 16, 16, 16, 16, 16, 16,
    15, 15, 15, 15, 15, 15, 15, 15,
    16, 16, 16, 16, 16, 16, 0, 0,
    15, 15, 15, 15, 15, 15, 0, 0,
    16, 16, 16, 16, 16, 16, 16, 16,
    0, 15, 0, 15, 0, 15, 0, 15,
    16, 16, 16, 16, 16, 16, 16, 16,
    15, 15, 15, 15, 15, 15, 15, 15,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 0, 0,
    16, 16, 16, 16, 16, 16, 16, 16,
    15, 15, 15, 15, 15, 15, 15, 15,
    16, 16, 16, 16, 16, 16, 16, 16,
    15, 15, 15, 15, 15, 15, 15, 15,
    16, 16, 16, 16, 16, 16, 16, 16,
    15, 15, 15, 15, 15, 15, 15, 15,
    16, 16, 16, 16, 16, 0, 16, 16,
    15, 15, 15, 15, 15, 29, 16, 29,
    29, 29, 16, 16, 16, 0, 16, 16,
    15, 15, 15, 15, 15, 29, 29, 29,
    16, 16, 16, 16, 0, 0, 16, 16,
    15, 15, 15, 15, 0, 29, 29, 29,
    16, 16, 16, 16, 16, 16, 16, 16,
    15, 15, 15, 15, 15, 29, 29, 29,
    0, 0, 16, 16, 16, 0, 16, 16,
    15, 15, 15, 15, 15, 29, 29, 0,
};

static const Q_UINT8 ui_20[] = {
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 11, 11, 11, 11,
    21, 21, 21, 21, 21, 21, 26, 26,
    24, 25, 22, 24, 24, 25, 22, 24,
    26, 26, 26, 26, 26, 26, 26, 26,
    8, 9, 11, 11, 11, 11, 11, 0,
    26, 26, 26, 26, 26, 26, 26, 26,
    26, 24, 25, 26, 26, 26, 26, 20,
    20, 26, 26, 26, 27, 22, 23, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 11, 11, 11, 11, 11, 11,
    6, 0, 0, 0, 6, 6, 6, 6,
    6, 6, 27, 27, 27, 22, 23, 16,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 27, 27, 27, 22, 23, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    28, 28, 28, 28, 28, 28, 28, 28,
    28, 28, 28, 28, 28, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 3, 3, 3,
    3, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_21[] = {
    30, 30, 15, 30, 30, 30, 30, 15,
    30, 30, 16, 15, 15, 15, 16, 16,
    15, 15, 15, 16, 30, 15, 30, 30,
    16, 15, 15, 15, 15, 15, 30, 30,
    30, 30, 30, 30, 15, 30, 15, 30,
    15, 30, 15, 15, 15, 15, 16, 16,
    15, 15, 30, 15, 16, 19, 19, 19,
    19, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    27, 27, 27, 27, 27, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 27, 30, 27, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_22[] = {
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 27, 27, 27, 27,
    27, 27, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_23[] = {
    30, 0, 30, 30, 30, 30, 30, 30,
    27, 27, 27, 27, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    27, 27, 30, 30, 30, 30, 30, 30,
    30, 22, 23, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_24[] = {
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 6, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_25[] = {
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_26[] = {
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 0, 0, 0, 0,
    0, 0, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_27[] = {
    0, 30, 30, 30, 30, 0, 30, 30,
    30, 30, 0, 0, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    0, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 0, 30, 0, 30,
    30, 30, 30, 0, 0, 0, 30, 0,
    30, 30, 30, 30, 30, 30, 30, 0,
    0, 30, 30, 30, 30, 30, 30, 30,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 30, 0, 0, 0,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    0, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_30[] = {
    7, 26, 26, 26, 30, 18, 19, 5,
    22, 23, 22, 23, 22, 23, 22, 23,
    22, 23, 30, 30, 22, 23, 22, 23,
    22, 23, 22, 23, 21, 22, 23, 23,
    30, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 1, 1, 1, 1, 1, 1,
    21, 18, 18, 18, 18, 18, 30, 30,
    0, 0, 0, 0, 0, 0, 0, 30,
    0, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 0, 0, 0,
    0, 1, 1, 29, 29, 18, 18, 0,
    0, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 20, 18, 18, 18, 0,
};

static const Q_UINT8 ui_31[] = {
    0, 0, 0, 0, 0, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 0, 0, 0,
    0, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 0,
    30, 30, 6, 6, 6, 6, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_32[] = {
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 0, 0, 0,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 0, 0, 0, 30,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 0, 0, 0, 0,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 0,
};

static const Q_UINT8 ui_33[] = {
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 0,
    0, 0, 0, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 0, 0,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 0,
};

static const Q_UINT8 ui_4E[] = {
    19, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_9F[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 19, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_D7[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 19, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_D8[] = {
    12, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_DB[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 12,
    12, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 12,
};

static const Q_UINT8 ui_DF[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 12,
};

static const Q_UINT8 ui_E0[] = {
    13, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_F8[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 13,
};

static const Q_UINT8 ui_F9[] = {
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
};

static const Q_UINT8 ui_FA[] = {
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 ui_FB[] = {
    16, 16, 16, 16, 16, 16, 16, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 16, 16, 16, 16, 16,
    0, 0, 0, 0, 0, 0, 1, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 27, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 0,
    19, 19, 19, 19, 19, 0, 19, 0,
    19, 19, 0, 19, 19, 0, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
};

static const Q_UINT8 ui_FD[] = {
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 22, 23,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    0, 0, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 0, 0, 0, 0,
};

static const Q_UINT8 ui_FE[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    26, 21, 21, 20, 20, 22, 23, 22,
    23, 22, 23, 22, 23, 22, 23, 22,
    23, 22, 23, 22, 23, 0, 0, 0,
    0, 26, 26, 26, 26, 20, 20, 20,
    26, 26, 26, 0, 26, 26, 26, 26,
    21, 22, 23, 22, 23, 22, 23, 26,
    26, 26, 27, 21, 27, 27, 27, 0,
    26, 28, 26, 26, 0, 0, 0, 0,
    19, 19, 19, 0, 19, 0, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 0, 0, 11,
};

static const Q_UINT8 ui_FF[] = {
    0, 26, 26, 26, 28, 26, 26, 26,
    22, 23, 26, 27, 26, 21, 26, 26,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 26, 26, 27, 27, 27, 26,
    26, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 22, 26, 23, 29, 20,
    29, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 22, 27, 23, 27, 0,
    0, 26, 22, 23, 26, 20, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    18, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 18, 18,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 0,
    0, 0, 19, 19, 19, 19, 19, 19,
    0, 0, 19, 19, 19, 19, 19, 19,
    0, 0, 19, 19, 19, 19, 19, 19,
    0, 0, 19, 19, 19, 0, 0, 0,
    28, 28, 27, 29, 30, 28, 28, 0,
    27, 27, 27, 27, 27, 30, 30, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 30, 30, 0, 0,
};

static const Q_UINT8 *unicode_info [256] = {
    ui_00, ui_01, ui_02, ui_03, ui_04, ui_05, ui_06, ui_07,
    ui_07, ui_09, ui_0A, ui_0B, ui_0C, ui_0D, ui_0E, ui_0F,
    ui_10, ui_11, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_1E, ui_1F,
    ui_20, ui_21, ui_22, ui_23, ui_24, ui_25, ui_26, ui_27,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_30, ui_31, ui_32, ui_33, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_4E, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_9F,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_4E, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_D7,
    ui_D8, ui_07, ui_07, ui_DB, ui_D8, ui_07, ui_07, ui_DF,
    ui_E0, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07, ui_07,
    ui_F8, ui_F9, ui_FA, ui_FB, ui_F9, ui_FD, ui_FE, ui_FF,
};
// 12544 bytes






static const Q_UINT16 cb_3 [] = {
    230, 230, 230, 230, 230, 230, 230, 230,
    230, 230, 230, 230, 230, 230, 230, 230,
    230, 230, 230, 230, 230, 232, 220, 220,
    220, 220, 232, 216, 220, 220, 220, 220,
    220, 202, 202, 220, 220, 220, 220, 202,
    202, 220, 220, 220, 220, 220, 220, 220,
    220, 220, 220, 220, 1, 1, 1, 1,
    1, 220, 220, 220, 220, 230, 230, 230,
    230, 230, 230, 230, 230, 240, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    234, 234, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_4 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 230, 230, 230, 230, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_5 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 220, 230, 230, 230, 230, 220, 230,
    230, 230, 222, 220, 230, 230, 230, 230,
    230, 230, 0, 220, 220, 220, 220, 220,
    230, 230, 220, 230, 230, 222, 230, 230,
    10, 11, 12, 13, 14, 15, 16, 17,
    18, 19, 0, 20, 21, 22, 0, 23,
    0, 24, 25, 0, 230, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_6 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 27, 28, 29, 30, 31,
    32, 33, 34, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    35, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 230, 230,
    230, 230, 230, 230, 230, 0, 0, 230,
    230, 230, 230, 220, 230, 0, 0, 230,
    230, 0, 220, 230, 230, 220, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_9 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 7, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 9, 0, 0,
    0, 230, 220, 230, 230, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 7, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 9, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_a [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 7, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 9, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 7, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 9, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_b [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 7, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 9, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 9, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_c [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 84, 0,
    0, 0, 0, 0, 0, 9, 0, 0,
    0, 0, 0, 0, 0, 84, 91, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 9, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_d [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 9, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_e [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    103, 103, 9, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    107, 107, 107, 107, 0, 107, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    118, 118, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    122, 122, 122, 122, 0, 122, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_f [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    220, 220, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 230, 0, 230,
    0, 216, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 130, 0, 132, 0, 0, 0,
    0, 0, 130, 130, 130, 130, 0, 0,
    130, 0, 230, 230, 9, 0, 230, 230,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_20 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    230, 230, 1, 1, 230, 230, 230, 230,
    1, 1, 1, 230, 230, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_30 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 218, 228, 232, 222, 224, 224,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 8, 8, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_fb [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 26, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 cb_fe [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    230, 230, 230, 230, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

#if 0 // not used
static const Q_UINT16 *combining_info [256] = {
     0, 0, 0, cb_3, cb_4, cb_5, cb_6, 0,
     0, cb_9, cb_a, cb_b, cb_c, cb_d, cb_e, cb_f,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     cb_20, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     cb_30, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, cb_fb, 0, 0, cb_fe, 0,
};
#endif


static const Q_UINT8 dir_0 [] = {
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 8, 7, 8, 7, 7, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 7, 7, 7, 8,
    9, 10, 10, 0, 0, 0, 10, 10,
    138, 138, 10, 0, 6, 0, 6, 0,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 6, 10, 138, 10, 138, 10,
    10, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 138, 10, 138, 10, 10,
    10, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 138, 10, 138, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    9, 10, 0, 0, 0, 0, 10, 10,
    10, 10, 0, 138, 10, 10, 10, 10,
    0, 0, 2, 2, 10, 0, 10, 10,
    10, 2, 0, 138, 10, 10, 10, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_2 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 10, 10, 0, 0, 0, 0, 0,
    0, 0, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 0,
    0, 0, 0, 0, 0, 10, 10, 10,
    10, 10, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_3 [] = {
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    10, 10, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 10, 0,
    0, 0, 0, 0, 10, 10, 0, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_4 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 10, 10, 10, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_5 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 0, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 0, 10, 10, 10, 1, 10,
    1, 10, 10, 1, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_6 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 6, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 1,
    0, 1, 33, 33, 33, 33, 17, 33,
    17, 33, 17, 17, 17, 17, 17, 33,
    33, 33, 33, 17, 17, 17, 17, 17,
    17, 17, 17, 0, 0, 0, 0, 0,
    49, 17, 17, 17, 17, 17, 17, 17,
    33, 33, 17, 10, 10, 10, 10, 10,
    10, 10, 10, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 0, 5, 5, 1, 0, 0,
    10, 65, 33, 33, 65, 33, 33, 33,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    33, 33, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 33, 33, 33, 33,
    33, 33, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    0, 0, 17, 17, 17, 17, 17, 0,
    33, 17, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 17, 33, 17, 0,
    17, 17, 33, 33, 1, 65, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 1, 1, 10,
    10, 10, 10, 10, 10, 10, 0, 0,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_9 [] = {
    0, 10, 10, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 10, 0, 0, 0,
    0, 10, 10, 10, 10, 10, 10, 10,
    10, 0, 0, 0, 0, 10, 0, 0,
    0, 10, 10, 10, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 10, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 10, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 10, 0, 0, 0,
    0, 10, 10, 10, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 10, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_a [] = {
    0, 0, 10, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 10, 0, 0, 0,
    0, 10, 10, 0, 0, 0, 0, 10,
    10, 0, 0, 10, 10, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    10, 10, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 10, 10, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 10, 0, 0, 0,
    0, 10, 10, 10, 10, 10, 0, 10,
    10, 0, 0, 0, 0, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_b [] = {
    0, 10, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 10, 0, 0, 10,
    0, 10, 10, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 10, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    10, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_c [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 10, 10,
    10, 0, 0, 0, 0, 0, 10, 10,
    10, 0, 10, 10, 10, 10, 0, 0,
    0, 0, 0, 0, 0, 10, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 10,
    0, 0, 0, 0, 0, 0, 10, 0,
    0, 0, 0, 0, 10, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_d [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 10, 10, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_e [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 10, 0, 0, 10, 10, 10, 10,
    10, 10, 10, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 10,
    10, 10, 10, 10, 10, 10, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 10, 0, 0, 10, 10, 10, 10,
    10, 10, 0, 10, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    10, 10, 10, 10, 10, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_f [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    10, 10, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 10, 0, 10,
    0, 10, 10, 10, 10, 10, 10, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 0,
    10, 10, 10, 10, 10, 0, 10, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    10, 10, 10, 10, 10, 10, 0, 10,
    0, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 0, 0,
    0, 10, 10, 10, 10, 10, 10, 10,
    0, 10, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_1f [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 10, 0, 10,
    10, 10, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 10, 10, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 10, 10, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 10, 10, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 10, 10, 0,
};

static const Q_UINT8 dir_20 [] = {
    9, 9, 9, 9, 9, 9, 9, 6,
    9, 9, 9, 9, 10, 10, 0, 1,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    7, 7, 0, 1, 10, 0, 1, 0,
    0, 0, 0, 0, 0, 10, 10, 10,
    10, 138, 138, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 138, 138, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 10, 10, 10, 10, 10, 10,
    2, 0, 0, 0, 2, 2, 2, 2,
    2, 2, 0, 0, 10, 138, 138, 0,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 0, 0, 10, 138, 138, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_21 [] = {
    10, 10, 0, 10, 10, 10, 10, 0,
    10, 10, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 10, 0, 10, 10,
    0, 0, 0, 0, 0, 0, 10, 10,
    10, 10, 10, 10, 0, 10, 0, 10,
    0, 10, 0, 0, 0, 0, 0, 0,
    0, 0, 10, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_22 [] = {
    10, 138, 138, 138, 138, 10, 10, 10,
    138, 138, 138, 138, 138, 138, 10, 10,
    10, 138, 0, 0, 10, 138, 138, 10,
    10, 10, 138, 138, 138, 138, 10, 138,
    138, 138, 138, 10, 138, 10, 138, 10,
    10, 10, 10, 138, 138, 138, 138, 138,
    138, 138, 138, 138, 10, 10, 10, 10,
    10, 138, 10, 138, 138, 138, 138, 138,
    138, 138, 138, 138, 138, 138, 138, 138,
    138, 138, 138, 138, 138, 10, 10, 10,
    10, 10, 138, 138, 138, 138, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 138,
    138, 10, 138, 10, 138, 138, 138, 138,
    138, 138, 138, 138, 10, 10, 138, 138,
    138, 138, 138, 138, 138, 138, 138, 138,
    138, 138, 138, 138, 138, 138, 138, 138,
    138, 138, 138, 138, 138, 138, 138, 138,
    138, 138, 138, 138, 138, 10, 10, 138,
    138, 138, 138, 10, 10, 10, 10, 10,
    138, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 138, 138, 10, 10, 138, 138,
    138, 138, 138, 138, 138, 138, 138, 138,
    138, 138, 138, 138, 138, 138, 138, 138,
    138, 10, 10, 10, 10, 10, 138, 138,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 138, 138, 138, 138, 138, 10, 10,
    138, 138, 10, 10, 10, 10, 138, 138,
    138, 138, 138, 138, 138, 138, 138, 138,
    138, 138, 138, 138, 138, 138, 138, 138,
    138, 138, 138, 138, 138, 138, 10, 10,
    138, 138, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_23 [] = {
    10, 0, 10, 10, 10, 10, 10, 10,
    138, 138, 138, 138, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    138, 138, 10, 10, 10, 10, 10, 10,
    10, 138, 138, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_24 [] = {
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 2, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_25 [] = {
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_26 [] = {
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 0, 0, 0, 0,
    0, 0, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_27 [] = {
    0, 10, 10, 10, 10, 0, 10, 10,
    10, 10, 0, 0, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    0, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 0, 10, 0, 10,
    10, 10, 10, 0, 0, 0, 10, 0,
    10, 10, 10, 10, 10, 10, 10, 0,
    0, 10, 10, 10, 10, 10, 10, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 0, 0, 0,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    0, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_30 [] = {
    9, 10, 10, 10, 10, 10, 0, 0,
    138, 138, 138, 138, 138, 138, 138, 138,
    138, 138, 10, 10, 138, 138, 138, 138,
    138, 138, 138, 138, 10, 10, 10, 10,
    10, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    0, 0, 0, 0, 0, 0, 0, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 10, 10, 10, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT8 dir_fb [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 10, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 0, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 0,
    1, 1, 1, 1, 1, 0, 1, 0,
    1, 1, 0, 1, 1, 0, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    65, 65, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 33, 33, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 33, 33, 17, 17,
    17, 17, 17, 17, 17, 17, 33, 33,
    33, 33, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 17, 17, 17, 17, 33,
    33, 33, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 17, 17, 17, 17,
    1, 1, 33, 33, 65, 65, 33, 33,
    33, 33, 33, 33, 33, 33, 17, 17,
    17, 1, 1, 1, 17, 17, 17, 17,
};

static const Q_UINT8 dir_fc [] = {
    17, 17, 17, 33, 17, 17, 17, 17,
    17, 33, 17, 17, 17, 17, 17, 33,
    17, 17, 17, 33, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 33, 17, 17, 17, 33, 17, 33,
    17, 17, 17, 17, 17, 33, 17, 17,
    17, 17, 17, 33, 17, 17, 17, 17,
    17, 33, 17, 17, 17, 17, 17, 33,
    17, 17, 17, 33, 17, 17, 17, 17,
    17, 33, 17, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 33, 33, 17, 17,
    33, 17, 33, 33, 17, 17, 33, 17,
    33, 33, 17, 17, 33, 17, 33, 33,
    17, 17, 33, 17, 33, 17, 33, 17,
    33, 17, 17, 33, 17, 17, 33, 17,
    33, 17, 33, 33, 17, 17, 33, 17,
    1, 33, 33, 17, 17, 33, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 1, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 1, 1, 1, 33, 17, 33,
    17, 33, 17, 33, 17, 33, 17, 33,
};

static const Q_UINT8 dir_fd [] = {
    17, 33, 17, 33, 17, 33, 17, 33,
    17, 17, 17, 17, 17, 33, 33, 33,
    33, 33, 17, 33, 17, 33, 17, 33,
    17, 33, 17, 33, 17, 33, 17, 33,
    17, 33, 17, 33, 17, 17, 17, 17,
    17, 33, 33, 33, 33, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 1, 1, 10, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 33, 17, 17, 33, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 33, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    33, 17, 17, 33, 17, 17, 17, 17,
    17, 17, 33, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    0, 0, 17, 17, 17, 17, 33, 17,
    17, 33, 17, 33, 17, 17, 17, 17,
    33, 17, 33, 17, 33, 17, 33, 33,
    33, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    33, 33, 17, 33, 33, 17, 17, 17,
    17, 33, 17, 17, 0, 0, 0, 0,
};

static const Q_UINT8 dir_fe [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    10, 10, 10, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 0, 0, 0,
    0, 10, 10, 10, 10, 10, 10, 10,
    6, 10, 6, 0, 10, 6, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 0,
    10, 10, 0, 0, 10, 10, 10, 0,
    10, 0, 0, 10, 0, 0, 0, 0,
    1, 1, 1, 0, 1, 0, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 33, 33, 33, 33, 33, 33, 33,
    33, 17, 17, 17, 17, 33, 33, 17,
    17, 17, 17, 33, 33, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 33, 33, 33, 33, 33, 33, 33,
    33, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 33, 33, 33,
    33, 17, 17, 17, 17, 33, 33, 33,
    33, 33, 33, 33, 33, 0, 0, 10,
};

static const Q_UINT8 dir_ff [] = {
    0, 10, 10, 0, 0, 0, 10, 10,
    10, 10, 10, 0, 6, 0, 6, 0,
    2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 6, 10, 10, 10, 10, 10,
    10, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 10, 10, 10, 10, 10,
    10, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 10, 10, 10, 10, 0,
    0, 10, 10, 10, 10, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 10, 10,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 10, 10, 10, 0, 0, 0,
    10, 10, 10, 10, 10, 10, 10, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 10, 10, 10, 10,
};

static const Q_UINT8 *direction_info [256] = {
    dir_0, 0, dir_2, dir_3, dir_4, dir_5, dir_6, 0,
    0, dir_9, dir_a, dir_b, dir_c, dir_d, dir_e, dir_f,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, dir_1f,
    dir_20, dir_21, dir_22, dir_23, dir_24, dir_25, dir_26, dir_27,
    0, 0, 0, 0, 0, 0, 0, 0,
    dir_30, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, dir_fb, dir_fc, dir_fd, dir_fe, dir_ff,
};

static const Q_UINT16 decomp_map [] = {
    0,
    0x10, 0x5e, 0x20, 0x302, 0,
    0x10, 0x5f, 0x20, 0x332, 0,
    0x10, 0x60, 0x20, 0x300, 0,
    0x3, 0xa0, 0x20, 0,
    0x10, 0xa8, 0x20, 0x308, 0,
    0x9, 0xaa, 0x61, 0,
    0x10, 0xaf, 0x20, 0x304, 0,
    0x9, 0xb2, 0x32, 0,
    0x9, 0xb3, 0x33, 0,
    0x10, 0xb4, 0x20, 0x301, 0,
    0x10, 0xb5, 0x3bc, 0,
    0x10, 0xb8, 0x20, 0x327, 0,
    0x9, 0xb9, 0x31, 0,
    0x9, 0xba, 0x6f, 0,
    0x11, 0xbc, 0x31, 0x2044, 0x34, 0,
    0x11, 0xbd, 0x31, 0x2044, 0x32, 0,
    0x11, 0xbe, 0x33, 0x2044, 0x34, 0,
    0x1, 0xc0, 0x41, 0x300, 0,
    0x1, 0xc1, 0x41, 0x301, 0,
    0x1, 0xc2, 0x41, 0x302, 0,
    0x1, 0xc3, 0x41, 0x303, 0,
    0x1, 0xc4, 0x41, 0x308, 0,
    0x1, 0xc5, 0x41, 0x30a, 0,
    0x1, 0xc7, 0x43, 0x327, 0,
    0x1, 0xc8, 0x45, 0x300, 0,
    0x1, 0xc9, 0x45, 0x301, 0,
    0x1, 0xca, 0x45, 0x302, 0,
    0x1, 0xcb, 0x45, 0x308, 0,
    0x1, 0xcc, 0x49, 0x300, 0,
    0x1, 0xcd, 0x49, 0x301, 0,
    0x1, 0xce, 0x49, 0x302, 0,
    0x1, 0xcf, 0x49, 0x308, 0,
    0x1, 0xd1, 0x4e, 0x303, 0,
    0x1, 0xd2, 0x4f, 0x300, 0,
    0x1, 0xd3, 0x4f, 0x301, 0,
    0x1, 0xd4, 0x4f, 0x302, 0,
    0x1, 0xd5, 0x4f, 0x303, 0,
    0x1, 0xd6, 0x4f, 0x308, 0,
    0x1, 0xd9, 0x55, 0x300, 0,
    0x1, 0xda, 0x55, 0x301, 0,
    0x1, 0xdb, 0x55, 0x302, 0,
    0x1, 0xdc, 0x55, 0x308, 0,
    0x1, 0xdd, 0x59, 0x301, 0,
    0x1, 0xe0, 0x61, 0x300, 0,
    0x1, 0xe1, 0x61, 0x301, 0,
    0x1, 0xe2, 0x61, 0x302, 0,
    0x1, 0xe3, 0x61, 0x303, 0,
    0x1, 0xe4, 0x61, 0x308, 0,
    0x1, 0xe5, 0x61, 0x30a, 0,
    0x1, 0xe7, 0x63, 0x327, 0,
    0x1, 0xe8, 0x65, 0x300, 0,
    0x1, 0xe9, 0x65, 0x301, 0,
    0x1, 0xea, 0x65, 0x302, 0,
    0x1, 0xeb, 0x65, 0x308, 0,
    0x1, 0xec, 0x69, 0x300, 0,
    0x1, 0xed, 0x69, 0x301, 0,
    0x1, 0xee, 0x69, 0x302, 0,
    0x1, 0xef, 0x69, 0x308, 0,
    0x1, 0xf1, 0x6e, 0x303, 0,
    0x1, 0xf2, 0x6f, 0x300, 0,
    0x1, 0xf3, 0x6f, 0x301, 0,
    0x1, 0xf4, 0x6f, 0x302, 0,
    0x1, 0xf5, 0x6f, 0x303, 0,
    0x1, 0xf6, 0x6f, 0x308, 0,
    0x1, 0xf9, 0x75, 0x300, 0,
    0x1, 0xfa, 0x75, 0x301, 0,
    0x1, 0xfb, 0x75, 0x302, 0,
    0x1, 0xfc, 0x75, 0x308, 0,
    0x1, 0xfd, 0x79, 0x301, 0,
    0x1, 0xff, 0x79, 0x308, 0,
    0x1, 0x100, 0x41, 0x304, 0,
    0x1, 0x101, 0x61, 0x304, 0,
    0x1, 0x102, 0x41, 0x306, 0,
    0x1, 0x103, 0x61, 0x306, 0,
    0x1, 0x104, 0x41, 0x328, 0,
    0x1, 0x105, 0x61, 0x328, 0,
    0x1, 0x106, 0x43, 0x301, 0,
    0x1, 0x107, 0x63, 0x301, 0,
    0x1, 0x108, 0x43, 0x302, 0,
    0x1, 0x109, 0x63, 0x302, 0,
    0x1, 0x10a, 0x43, 0x307, 0,
    0x1, 0x10b, 0x63, 0x307, 0,
    0x1, 0x10c, 0x43, 0x30c, 0,
    0x1, 0x10d, 0x63, 0x30c, 0,
    0x1, 0x10e, 0x44, 0x30c, 0,
    0x1, 0x10f, 0x64, 0x30c, 0,
    0x1, 0x112, 0x45, 0x304, 0,
    0x1, 0x113, 0x65, 0x304, 0,
    0x1, 0x114, 0x45, 0x306, 0,
    0x1, 0x115, 0x65, 0x306, 0,
    0x1, 0x116, 0x45, 0x307, 0,
    0x1, 0x117, 0x65, 0x307, 0,
    0x1, 0x118, 0x45, 0x328, 0,
    0x1, 0x119, 0x65, 0x328, 0,
    0x1, 0x11a, 0x45, 0x30c, 0,
    0x1, 0x11b, 0x65, 0x30c, 0,
    0x1, 0x11c, 0x47, 0x302, 0,
    0x1, 0x11d, 0x67, 0x302, 0,
    0x1, 0x11e, 0x47, 0x306, 0,
    0x1, 0x11f, 0x67, 0x306, 0,
    0x1, 0x120, 0x47, 0x307, 0,
    0x1, 0x121, 0x67, 0x307, 0,
    0x1, 0x122, 0x47, 0x327, 0,
    0x1, 0x123, 0x67, 0x327, 0,
    0x1, 0x124, 0x48, 0x302, 0,
    0x1, 0x125, 0x68, 0x302, 0,
    0x1, 0x128, 0x49, 0x303, 0,
    0x1, 0x129, 0x69, 0x303, 0,
    0x1, 0x12a, 0x49, 0x304, 0,
    0x1, 0x12b, 0x69, 0x304, 0,
    0x1, 0x12c, 0x49, 0x306, 0,
    0x1, 0x12d, 0x69, 0x306, 0,
    0x1, 0x12e, 0x49, 0x328, 0,
    0x1, 0x12f, 0x69, 0x328, 0,
    0x1, 0x130, 0x49, 0x307, 0,
    0x10, 0x132, 0x49, 0x4a, 0,
    0x10, 0x133, 0x69, 0x6a, 0,
    0x1, 0x134, 0x4a, 0x302, 0,
    0x1, 0x135, 0x6a, 0x302, 0,
    0x1, 0x136, 0x4b, 0x327, 0,
    0x1, 0x137, 0x6b, 0x327, 0,
    0x1, 0x139, 0x4c, 0x301, 0,
    0x1, 0x13a, 0x6c, 0x301, 0,
    0x1, 0x13b, 0x4c, 0x327, 0,
    0x1, 0x13c, 0x6c, 0x327, 0,
    0x1, 0x13d, 0x4c, 0x30c, 0,
    0x1, 0x13e, 0x6c, 0x30c, 0,
    0x10, 0x13f, 0x4c, 0xb7, 0,
    0x10, 0x140, 0x6c, 0xb7, 0,
    0x1, 0x143, 0x4e, 0x301, 0,
    0x1, 0x144, 0x6e, 0x301, 0,
    0x1, 0x145, 0x4e, 0x327, 0,
    0x1, 0x146, 0x6e, 0x327, 0,
    0x1, 0x147, 0x4e, 0x30c, 0,
    0x1, 0x148, 0x6e, 0x30c, 0,
    0x10, 0x149, 0x2bc, 0x6e, 0,
    0x1, 0x14c, 0x4f, 0x304, 0,
    0x1, 0x14d, 0x6f, 0x304, 0,
    0x1, 0x14e, 0x4f, 0x306, 0,
    0x1, 0x14f, 0x6f, 0x306, 0,
    0x1, 0x150, 0x4f, 0x30b, 0,
    0x1, 0x151, 0x6f, 0x30b, 0,
    0x1, 0x154, 0x52, 0x301, 0,
    0x1, 0x155, 0x72, 0x301, 0,
    0x1, 0x156, 0x52, 0x327, 0,
    0x1, 0x157, 0x72, 0x327, 0,
    0x1, 0x158, 0x52, 0x30c, 0,
    0x1, 0x159, 0x72, 0x30c, 0,
    0x1, 0x15a, 0x53, 0x301, 0,
    0x1, 0x15b, 0x73, 0x301, 0,
    0x1, 0x15c, 0x53, 0x302, 0,
    0x1, 0x15d, 0x73, 0x302, 0,
    0x1, 0x15e, 0x53, 0x327, 0,
    0x1, 0x15f, 0x73, 0x327, 0,
    0x1, 0x160, 0x53, 0x30c, 0,
    0x1, 0x161, 0x73, 0x30c, 0,
    0x1, 0x162, 0x54, 0x327, 0,
    0x1, 0x163, 0x74, 0x327, 0,
    0x1, 0x164, 0x54, 0x30c, 0,
    0x1, 0x165, 0x74, 0x30c, 0,
    0x1, 0x168, 0x55, 0x303, 0,
    0x1, 0x169, 0x75, 0x303, 0,
    0x1, 0x16a, 0x55, 0x304, 0,
    0x1, 0x16b, 0x75, 0x304, 0,
    0x1, 0x16c, 0x55, 0x306, 0,
    0x1, 0x16d, 0x75, 0x306, 0,
    0x1, 0x16e, 0x55, 0x30a, 0,
    0x1, 0x16f, 0x75, 0x30a, 0,
    0x1, 0x170, 0x55, 0x30b, 0,
    0x1, 0x171, 0x75, 0x30b, 0,
    0x1, 0x172, 0x55, 0x328, 0,
    0x1, 0x173, 0x75, 0x328, 0,
    0x1, 0x174, 0x57, 0x302, 0,
    0x1, 0x175, 0x77, 0x302, 0,
    0x1, 0x176, 0x59, 0x302, 0,
    0x1, 0x177, 0x79, 0x302, 0,
    0x1, 0x178, 0x59, 0x308, 0,
    0x1, 0x179, 0x5a, 0x301, 0,
    0x1, 0x17a, 0x7a, 0x301, 0,
    0x1, 0x17b, 0x5a, 0x307, 0,
    0x1, 0x17c, 0x7a, 0x307, 0,
    0x1, 0x17d, 0x5a, 0x30c, 0,
    0x1, 0x17e, 0x7a, 0x30c, 0,
    0x10, 0x17f, 0x73, 0,
    0x1, 0x1a0, 0x4f, 0x31b, 0,
    0x1, 0x1a1, 0x6f, 0x31b, 0,
    0x1, 0x1af, 0x55, 0x31b, 0,
    0x1, 0x1b0, 0x75, 0x31b, 0,
    0x10, 0x1c4, 0x44, 0x17d, 0,
    0x10, 0x1c5, 0x44, 0x17e, 0,
    0x10, 0x1c6, 0x64, 0x17e, 0,
    0x10, 0x1c7, 0x4c, 0x4a, 0,
    0x10, 0x1c8, 0x4c, 0x6a, 0,
    0x10, 0x1c9, 0x6c, 0x6a, 0,
    0x10, 0x1ca, 0x4e, 0x4a, 0,
    0x10, 0x1cb, 0x4e, 0x6a, 0,
    0x10, 0x1cc, 0x6e, 0x6a, 0,
    0x1, 0x1cd, 0x41, 0x30c, 0,
    0x1, 0x1ce, 0x61, 0x30c, 0,
    0x1, 0x1cf, 0x49, 0x30c, 0,
    0x1, 0x1d0, 0x69, 0x30c, 0,
    0x1, 0x1d1, 0x4f, 0x30c, 0,
    0x1, 0x1d2, 0x6f, 0x30c, 0,
    0x1, 0x1d3, 0x55, 0x30c, 0,
    0x1, 0x1d4, 0x75, 0x30c, 0,
    0x1, 0x1d5, 0xdc, 0x304, 0,
    0x1, 0x1d6, 0xfc, 0x304, 0,
    0x1, 0x1d7, 0xdc, 0x301, 0,
    0x1, 0x1d8, 0xfc, 0x301, 0,
    0x1, 0x1d9, 0xdc, 0x30c, 0,
    0x1, 0x1da, 0xfc, 0x30c, 0,
    0x1, 0x1db, 0xdc, 0x300, 0,
    0x1, 0x1dc, 0xfc, 0x300, 0,
    0x1, 0x1de, 0xc4, 0x304, 0,
    0x1, 0x1df, 0xe4, 0x304, 0,
    0x1, 0x1e0, 0x41, 0x307, 0x304, 0,
    0x1, 0x1e1, 0x61, 0x307, 0x304, 0,
    0x1, 0x1e2, 0xc6, 0x304, 0,
    0x1, 0x1e3, 0xe6, 0x304, 0,
    0x1, 0x1e6, 0x47, 0x30c, 0,
    0x1, 0x1e7, 0x67, 0x30c, 0,
    0x1, 0x1e8, 0x4b, 0x30c, 0,
    0x1, 0x1e9, 0x6b, 0x30c, 0,
    0x1, 0x1ea, 0x4f, 0x328, 0,
    0x1, 0x1eb, 0x6f, 0x328, 0,
    0x1, 0x1ec, 0x1ea, 0x304, 0,
    0x1, 0x1ed, 0x1eb, 0x304, 0,
    0x1, 0x1ee, 0x1b7, 0x30c, 0,
    0x1, 0x1ef, 0x292, 0x30c, 0,
    0x1, 0x1f0, 0x6a, 0x30c, 0,
    0x10, 0x1f1, 0x44, 0x5a, 0,
    0x10, 0x1f2, 0x44, 0x7a, 0,
    0x10, 0x1f3, 0x64, 0x7a, 0,
    0x1, 0x1f4, 0x47, 0x301, 0,
    0x1, 0x1f5, 0x67, 0x301, 0,
    0x1, 0x1fa, 0xc5, 0x301, 0,
    0x1, 0x1fb, 0xe5, 0x301, 0,
    0x1, 0x1fc, 0xc6, 0x301, 0,
    0x1, 0x1fd, 0xe6, 0x301, 0,
    0x1, 0x1fe, 0xd8, 0x301, 0,
    0x1, 0x1ff, 0xf8, 0x301, 0,
    0x1, 0x200, 0x41, 0x30f, 0,
    0x1, 0x201, 0x61, 0x30f, 0,
    0x1, 0x202, 0x41, 0x311, 0,
    0x1, 0x203, 0x61, 0x311, 0,
    0x1, 0x204, 0x45, 0x30f, 0,
    0x1, 0x205, 0x65, 0x30f, 0,
    0x1, 0x206, 0x45, 0x311, 0,
    0x1, 0x207, 0x65, 0x311, 0,
    0x1, 0x208, 0x49, 0x30f, 0,
    0x1, 0x209, 0x69, 0x30f, 0,
    0x1, 0x20a, 0x49, 0x311, 0,
    0x1, 0x20b, 0x69, 0x311, 0,
    0x1, 0x20c, 0x4f, 0x30f, 0,
    0x1, 0x20d, 0x6f, 0x30f, 0,
    0x1, 0x20e, 0x4f, 0x311, 0,
    0x1, 0x20f, 0x6f, 0x311, 0,
    0x1, 0x210, 0x52, 0x30f, 0,
    0x1, 0x211, 0x72, 0x30f, 0,
    0x1, 0x212, 0x52, 0x311, 0,
    0x1, 0x213, 0x72, 0x311, 0,
    0x1, 0x214, 0x55, 0x30f, 0,
    0x1, 0x215, 0x75, 0x30f, 0,
    0x1, 0x216, 0x55, 0x311, 0,
    0x1, 0x217, 0x75, 0x311, 0,
    0x9, 0x2b0, 0x68, 0,
    0x9, 0x2b1, 0x266, 0,
    0x9, 0x2b2, 0x6a, 0,
    0x9, 0x2b3, 0x72, 0,
    0x9, 0x2b4, 0x279, 0,
    0x9, 0x2b5, 0x27b, 0,
    0x9, 0x2b6, 0x281, 0,
    0x9, 0x2b7, 0x77, 0,
    0x9, 0x2b8, 0x79, 0,
    0x10, 0x2d8, 0x20, 0x306, 0,
    0x10, 0x2d9, 0x20, 0x307, 0,
    0x10, 0x2da, 0x20, 0x30a, 0,
    0x10, 0x2db, 0x20, 0x328, 0,
    0x10, 0x2dc, 0x20, 0x303, 0,
    0x10, 0x2dd, 0x20, 0x30b, 0,
    0x9, 0x2e0, 0x263, 0,
    0x9, 0x2e1, 0x6c, 0,
    0x9, 0x2e2, 0x73, 0,
    0x9, 0x2e3, 0x78, 0,
    0x9, 0x2e4, 0x295, 0,
    0x1, 0x340, 0x300, 0,
    0x1, 0x341, 0x301, 0,
    0x1, 0x343, 0x313, 0,
    0x1, 0x344, 0x308, 0x301, 0,
    0x1, 0x374, 0x2b9, 0,
    0x10, 0x37a, 0x20, 0x345, 0,
    0x1, 0x37e, 0x3b, 0,
    0x10, 0x384, 0x20, 0x301, 0,
    0x1, 0x385, 0xa8, 0x301, 0,
    0x1, 0x386, 0x391, 0x301, 0,
    0x1, 0x387, 0xb7, 0,
    0x1, 0x388, 0x395, 0x301, 0,
    0x1, 0x389, 0x397, 0x301, 0,
    0x1, 0x38a, 0x399, 0x301, 0,
    0x1, 0x38c, 0x39f, 0x301, 0,
    0x1, 0x38e, 0x3a5, 0x301, 0,
    0x1, 0x38f, 0x3a9, 0x301, 0,
    0x1, 0x390, 0x3ca, 0x301, 0,
    0x1, 0x3aa, 0x399, 0x308, 0,
    0x1, 0x3ab, 0x3a5, 0x308, 0,
    0x1, 0x3ac, 0x3b1, 0x301, 0,
    0x1, 0x3ad, 0x3b5, 0x301, 0,
    0x1, 0x3ae, 0x3b7, 0x301, 0,
    0x1, 0x3af, 0x3b9, 0x301, 0,
    0x1, 0x3b0, 0x3cb, 0x301, 0,
    0x1, 0x3ca, 0x3b9, 0x308, 0,
    0x1, 0x3cb, 0x3c5, 0x308, 0,
    0x1, 0x3cc, 0x3bf, 0x301, 0,
    0x1, 0x3cd, 0x3c5, 0x301, 0,
    0x1, 0x3ce, 0x3c9, 0x301, 0,
    0x1, 0x3d3, 0x3d2, 0x301, 0,
    0x1, 0x3d4, 0x3d2, 0x308, 0,
    0x1, 0x401, 0x415, 0x308, 0,
    0x1, 0x403, 0x413, 0x301, 0,
    0x1, 0x407, 0x406, 0x308, 0,
    0x1, 0x40c, 0x41a, 0x301, 0,
    0x1, 0x40e, 0x423, 0x306, 0,
    0x1, 0x419, 0x418, 0x306, 0,
    0x1, 0x439, 0x438, 0x306, 0,
    0x1, 0x451, 0x435, 0x308, 0,
    0x1, 0x453, 0x433, 0x301, 0,
    0x1, 0x457, 0x456, 0x308, 0,
    0x1, 0x45c, 0x43a, 0x301, 0,
    0x1, 0x45e, 0x443, 0x306, 0,
    0x1, 0x476, 0x474, 0x30f, 0,
    0x1, 0x477, 0x475, 0x30f, 0,
    0x1, 0x4c1, 0x416, 0x306, 0,
    0x1, 0x4c2, 0x436, 0x306, 0,
    0x1, 0x4d0, 0x410, 0x306, 0,
    0x1, 0x4d1, 0x430, 0x306, 0,
    0x1, 0x4d2, 0x410, 0x308, 0,
    0x1, 0x4d3, 0x430, 0x308, 0,
    0x1, 0x4d6, 0x415, 0x306, 0,
    0x1, 0x4d7, 0x435, 0x306, 0,
    0x1, 0x4da, 0x4d8, 0x308, 0,
    0x1, 0x4db, 0x4d9, 0x308, 0,
    0x1, 0x4dc, 0x416, 0x308, 0,
    0x1, 0x4dd, 0x436, 0x308, 0,
    0x1, 0x4de, 0x417, 0x308, 0,
    0x1, 0x4df, 0x437, 0x308, 0,
    0x1, 0x4e2, 0x418, 0x304, 0,
    0x1, 0x4e3, 0x438, 0x304, 0,
    0x1, 0x4e4, 0x418, 0x308, 0,
    0x1, 0x4e5, 0x438, 0x308, 0,
    0x1, 0x4e6, 0x41e, 0x308, 0,
    0x1, 0x4e7, 0x43e, 0x308, 0,
    0x1, 0x4ea, 0x4e8, 0x308, 0,
    0x1, 0x4eb, 0x4e9, 0x308, 0,
    0x1, 0x4ee, 0x423, 0x304, 0,
    0x1, 0x4ef, 0x443, 0x304, 0,
    0x1, 0x4f0, 0x423, 0x308, 0,
    0x1, 0x4f1, 0x443, 0x308, 0,
    0x1, 0x4f2, 0x423, 0x30b, 0,
    0x1, 0x4f3, 0x443, 0x30b, 0,
    0x1, 0x4f4, 0x427, 0x308, 0,
    0x1, 0x4f5, 0x447, 0x308, 0,
    0x1, 0x4f8, 0x42b, 0x308, 0,
    0x1, 0x4f9, 0x44b, 0x308, 0,
    0x10, 0x587, 0x565, 0x582, 0,
    0x1, 0x929, 0x928, 0x93c, 0,
    0x1, 0x931, 0x930, 0x93c, 0,
    0x1, 0x934, 0x933, 0x93c, 0,
    0x1, 0x958, 0x915, 0x93c, 0,
    0x1, 0x959, 0x916, 0x93c, 0,
    0x1, 0x95a, 0x917, 0x93c, 0,
    0x1, 0x95b, 0x91c, 0x93c, 0,
    0x1, 0x95c, 0x921, 0x93c, 0,
    0x1, 0x95d, 0x922, 0x93c, 0,
    0x1, 0x95e, 0x92b, 0x93c, 0,
    0x1, 0x95f, 0x92f, 0x93c, 0,
    0x1, 0x9b0, 0x9ac, 0x9bc, 0,
    0x1, 0x9cb, 0x9c7, 0x9be, 0,
    0x1, 0x9cc, 0x9c7, 0x9d7, 0,
    0x1, 0x9dc, 0x9a1, 0x9bc, 0,
    0x1, 0x9dd, 0x9a2, 0x9bc, 0,
    0x1, 0x9df, 0x9af, 0x9bc, 0,
    0x1, 0xa59, 0xa16, 0xa3c, 0,
    0x1, 0xa5a, 0xa17, 0xa3c, 0,
    0x1, 0xa5b, 0xa1c, 0xa3c, 0,
    0x1, 0xa5c, 0xa21, 0xa3c, 0,
    0x1, 0xa5e, 0xa2b, 0xa3c, 0,
    0x1, 0xb48, 0xb47, 0xb56, 0,
    0x1, 0xb4b, 0xb47, 0xb3e, 0,
    0x1, 0xb4c, 0xb47, 0xb57, 0,
    0x1, 0xb5c, 0xb21, 0xb3c, 0,
    0x1, 0xb5d, 0xb22, 0xb3c, 0,
    0x1, 0xb5f, 0xb2f, 0xb3c, 0,
    0x1, 0xb94, 0xb92, 0xbd7, 0,
    0x1, 0xbca, 0xbc6, 0xbbe, 0,
    0x1, 0xbcb, 0xbc7, 0xbbe, 0,
    0x1, 0xbcc, 0xbc6, 0xbd7, 0,
    0x1, 0xc48, 0xc46, 0xc56, 0,
    0x1, 0xcc0, 0xcbf, 0xcd5, 0,
    0x1, 0xcc7, 0xcc6, 0xcd5, 0,
    0x1, 0xcc8, 0xcc6, 0xcd6, 0,
    0x1, 0xcca, 0xcc6, 0xcc2, 0,
    0x1, 0xccb, 0xcca, 0xcd5, 0,
    0x1, 0xd4a, 0xd46, 0xd3e, 0,
    0x1, 0xd4b, 0xd47, 0xd3e, 0,
    0x1, 0xd4c, 0xd46, 0xd57, 0,
    0x1, 0xe33, 0xe4d, 0xe32, 0,
    0x1, 0xeb3, 0xecd, 0xeb2, 0,
    0x10, 0xedc, 0xeab, 0xe99, 0,
    0x10, 0xedd, 0xeab, 0xea1, 0,
    0x1, 0xf43, 0xf42, 0xfb7, 0,
    0x1, 0xf4d, 0xf4c, 0xfb7, 0,
    0x1, 0xf52, 0xf51, 0xfb7, 0,
    0x1, 0xf57, 0xf56, 0xfb7, 0,
    0x1, 0xf5c, 0xf5b, 0xfb7, 0,
    0x1, 0xf69, 0xf40, 0xfb5, 0,
    0x1, 0xf73, 0xf72, 0xf71, 0,
    0x1, 0xf75, 0xf71, 0xf74, 0,
    0x1, 0xf76, 0xfb2, 0xf80, 0,
    0x1, 0xf77, 0xf76, 0xf71, 0,
    0x1, 0xf78, 0xfb3, 0xf80, 0,
    0x1, 0xf79, 0xf78, 0xf71, 0,
    0x1, 0xf81, 0xf80, 0xf71, 0,
    0x1, 0xf93, 0xf92, 0xfb7, 0,
    0x1, 0xf9d, 0xf9c, 0xfb7, 0,
    0x1, 0xfa2, 0xfa1, 0xfb7, 0,
    0x1, 0xfa7, 0xfa6, 0xfb7, 0,
    0x1, 0xfac, 0xfab, 0xfb7, 0,
    0x1, 0xfb9, 0xf90, 0xfb5, 0,
    0x10, 0x1101, 0x1100, 0x1100, 0,
    0x10, 0x1104, 0x1103, 0x1103, 0,
    0x10, 0x1108, 0x1107, 0x1107, 0,
    0x10, 0x110a, 0x1109, 0x1109, 0,
    0x10, 0x110d, 0x110c, 0x110c, 0,
    0x10, 0x1113, 0x1102, 0x1100, 0,
    0x10, 0x1114, 0x1102, 0x1102, 0,
    0x10, 0x1115, 0x1102, 0x1103, 0,
    0x10, 0x1116, 0x1102, 0x1107, 0,
    0x10, 0x1117, 0x1103, 0x1100, 0,
    0x10, 0x1118, 0x1105, 0x1102, 0,
    0x10, 0x1119, 0x1105, 0x1105, 0,
    0x10, 0x111a, 0x1105, 0x1112, 0,
    0x10, 0x111b, 0x1105, 0x110b, 0,
    0x10, 0x111c, 0x1106, 0x1107, 0,
    0x10, 0x111d, 0x1106, 0x110b, 0,
    0x10, 0x111e, 0x1107, 0x1100, 0,
    0x10, 0x111f, 0x1107, 0x1102, 0,
    0x10, 0x1120, 0x1107, 0x1103, 0,
    0x10, 0x1121, 0x1107, 0x1109, 0,
    0x10, 0x1122, 0x1107, 0x1109, 0x1100, 0,
    0x10, 0x1123, 0x1107, 0x1109, 0x1103, 0,
    0x10, 0x1124, 0x1107, 0x1109, 0x1107, 0,
    0x10, 0x1125, 0x1107, 0x1109, 0x1109, 0,
    0x10, 0x1126, 0x1107, 0x1109, 0x110c, 0,
    0x10, 0x1127, 0x1107, 0x110c, 0,
    0x10, 0x1128, 0x1107, 0x110e, 0,
    0x10, 0x1129, 0x1107, 0x1110, 0,
    0x10, 0x112a, 0x1107, 0x1111, 0,
    0x10, 0x112b, 0x1107, 0x110b, 0,
    0x10, 0x112c, 0x1107, 0x1107, 0x110b, 0,
    0x10, 0x112d, 0x1109, 0x1100, 0,
    0x10, 0x112e, 0x1109, 0x1102, 0,
    0x10, 0x112f, 0x1109, 0x1103, 0,
    0x10, 0x1130, 0x1109, 0x1105, 0,
    0x10, 0x1131, 0x1109, 0x1106, 0,
    0x10, 0x1132, 0x1109, 0x1107, 0,
    0x10, 0x1133, 0x1109, 0x1107, 0x1100, 0,
    0x10, 0x1134, 0x1109, 0x1109, 0x1109, 0,
    0x10, 0x1135, 0x1109, 0x110b, 0,
    0x10, 0x1136, 0x1109, 0x110c, 0,
    0x10, 0x1137, 0x1109, 0x110e, 0,
    0x10, 0x1138, 0x1109, 0x110f, 0,
    0x10, 0x1139, 0x1109, 0x1110, 0,
    0x10, 0x113a, 0x1109, 0x1111, 0,
    0x10, 0x113b, 0x1109, 0x1112, 0,
    0x10, 0x113d, 0x113c, 0x113c, 0,
    0x10, 0x113f, 0x113e, 0x113e, 0,
    0x10, 0x1141, 0x110b, 0x1100, 0,
    0x10, 0x1142, 0x110b, 0x1103, 0,
    0x10, 0x1143, 0x110b, 0x1106, 0,
    0x10, 0x1144, 0x110b, 0x1107, 0,
    0x10, 0x1145, 0x110b, 0x1109, 0,
    0x10, 0x1146, 0x110b, 0x1140, 0,
    0x10, 0x1147, 0x110b, 0x110b, 0,
    0x10, 0x1148, 0x110b, 0x110c, 0,
    0x10, 0x1149, 0x110b, 0x110e, 0,
    0x10, 0x114a, 0x110b, 0x1110, 0,
    0x10, 0x114b, 0x110b, 0x1111, 0,
    0x10, 0x114d, 0x110c, 0x110b, 0,
    0x10, 0x114f, 0x114e, 0x114e, 0,
    0x10, 0x1151, 0x1150, 0x1150, 0,
    0x10, 0x1152, 0x110e, 0x110f, 0,
    0x10, 0x1153, 0x110e, 0x1112, 0,
    0x10, 0x1156, 0x1111, 0x1107, 0,
    0x10, 0x1157, 0x1111, 0x110b, 0,
    0x10, 0x1158, 0x1112, 0x1112, 0,
    0x10, 0x1162, 0x1161, 0x1175, 0,
    0x10, 0x1164, 0x1163, 0x1175, 0,
    0x10, 0x1166, 0x1165, 0x1175, 0,
    0x10, 0x1168, 0x1167, 0x1175, 0,
    0x10, 0x116a, 0x1169, 0x1161, 0,
    0x10, 0x116b, 0x1169, 0x1161, 0x1175, 0,
    0x10, 0x116c, 0x1169, 0x1175, 0,
    0x10, 0x116f, 0x116e, 0x1165, 0,
    0x10, 0x1170, 0x116e, 0x1165, 0x1175, 0,
    0x10, 0x1171, 0x116e, 0x1175, 0,
    0x10, 0x1174, 0x1173, 0x1175, 0,
    0x10, 0x1176, 0x1161, 0x1169, 0,
    0x10, 0x1177, 0x1161, 0x116e, 0,
    0x10, 0x1178, 0x1163, 0x1169, 0,
    0x10, 0x1179, 0x1163, 0x116d, 0,
    0x10, 0x117a, 0x1165, 0x1169, 0,
    0x10, 0x117b, 0x1165, 0x116e, 0,
    0x10, 0x117c, 0x1165, 0x1173, 0,
    0x10, 0x117d, 0x1167, 0x1169, 0,
    0x10, 0x117e, 0x1167, 0x116e, 0,
    0x10, 0x117f, 0x1169, 0x1165, 0,
    0x10, 0x1180, 0x1169, 0x1166, 0,
    0x10, 0x1181, 0x1169, 0x1168, 0,
    0x10, 0x1182, 0x1169, 0x1169, 0,
    0x10, 0x1183, 0x1169, 0x116e, 0,
    0x10, 0x1184, 0x116d, 0x1163, 0,
    0x10, 0x1185, 0x116d, 0x1164, 0,
    0x10, 0x1186, 0x116d, 0x1167, 0,
    0x10, 0x1187, 0x116d, 0x1169, 0,
    0x10, 0x1188, 0x116d, 0x1175, 0,
    0x10, 0x1189, 0x116e, 0x1161, 0,
    0x10, 0x118a, 0x116e, 0x1162, 0,
    0x10, 0x118b, 0x116e, 0x1165, 0x1173, 0,
    0x10, 0x118c, 0x116e, 0x1168, 0,
    0x10, 0x118d, 0x116e, 0x116e, 0,
    0x10, 0x118e, 0x1172, 0x1161, 0,
    0x10, 0x118f, 0x1172, 0x1165, 0,
    0x10, 0x1190, 0x1172, 0x1166, 0,
    0x10, 0x1191, 0x1172, 0x1167, 0,
    0x10, 0x1192, 0x1172, 0x1168, 0,
    0x10, 0x1193, 0x1172, 0x116e, 0,
    0x10, 0x1194, 0x1172, 0x1175, 0,
    0x10, 0x1195, 0x1173, 0x116e, 0,
    0x10, 0x1196, 0x1173, 0x1173, 0,
    0x10, 0x1197, 0x1174, 0x116e, 0,
    0x10, 0x1198, 0x1175, 0x1161, 0,
    0x10, 0x1199, 0x1175, 0x1163, 0,
    0x10, 0x119a, 0x1175, 0x1169, 0,
    0x10, 0x119b, 0x1175, 0x116e, 0,
    0x10, 0x119c, 0x1175, 0x1173, 0,
    0x10, 0x119d, 0x1175, 0x119e, 0,
    0x10, 0x119f, 0x119e, 0x1165, 0,
    0x10, 0x11a0, 0x119e, 0x116e, 0,
    0x10, 0x11a1, 0x119e, 0x1175, 0,
    0x10, 0x11a2, 0x119e, 0x119e, 0,
    0x10, 0x11a9, 0x11a8, 0x11a8, 0,
    0x10, 0x11aa, 0x11a8, 0x11ba, 0,
    0x10, 0x11ac, 0x11ab, 0x11bd, 0,
    0x10, 0x11ad, 0x11ab, 0x11c2, 0,
    0x10, 0x11b0, 0x11af, 0x11a8, 0,
    0x10, 0x11b1, 0x11af, 0x11b7, 0,
    0x10, 0x11b2, 0x11af, 0x11b8, 0,
    0x10, 0x11b3, 0x11af, 0x11ba, 0,
    0x10, 0x11b4, 0x11af, 0x11c0, 0,
    0x10, 0x11b5, 0x11af, 0x11c1, 0,
    0x10, 0x11b6, 0x11af, 0x11c2, 0,
    0x10, 0x11b9, 0x11b8, 0x11ba, 0,
    0x10, 0x11bb, 0x11ba, 0x11ba, 0,
    0x10, 0x11c3, 0x11a8, 0x11af, 0,
    0x10, 0x11c4, 0x11a8, 0x11ba, 0x11a8, 0,
    0x10, 0x11c5, 0x11ab, 0x11a8, 0,
    0x10, 0x11c6, 0x11ab, 0x11ae, 0,
    0x10, 0x11c7, 0x11ab, 0x11ba, 0,
    0x10, 0x11c8, 0x11ab, 0x11eb, 0,
    0x10, 0x11c9, 0x11ab, 0x11c0, 0,
    0x10, 0x11ca, 0x11ae, 0x11a8, 0,
    0x10, 0x11cb, 0x11ae, 0x11af, 0,
    0x10, 0x11cc, 0x11af, 0x11a8, 0x11ba, 0,
    0x10, 0x11cd, 0x11af, 0x11ab, 0,
    0x10, 0x11ce, 0x11af, 0x11ae, 0,
    0x10, 0x11cf, 0x11af, 0x11ae, 0x11c2, 0,
    0x10, 0x11d0, 0x11af, 0x11af, 0,
    0x10, 0x11d1, 0x11af, 0x11b7, 0x11a8, 0,
    0x10, 0x11d2, 0x11af, 0x11b7, 0x11ba, 0,
    0x10, 0x11d3, 0x11af, 0x11b8, 0x11ba, 0,
    0x10, 0x11d4, 0x11af, 0x11b8, 0x11c2, 0,
    0x10, 0x11d5, 0x11af, 0x11b8, 0x11bc, 0,
    0x10, 0x11d6, 0x11af, 0x11ba, 0x11ba, 0,
    0x10, 0x11d7, 0x11af, 0x11eb, 0,
    0x10, 0x11d8, 0x11af, 0x11bf, 0,
    0x10, 0x11d9, 0x11af, 0x11f9, 0,
    0x10, 0x11da, 0x11b7, 0x11a8, 0,
    0x10, 0x11db, 0x11b7, 0x11af, 0,
    0x10, 0x11dc, 0x11b7, 0x11b8, 0,
    0x10, 0x11dd, 0x11b7, 0x11ba, 0,
    0x10, 0x11de, 0x11b7, 0x11ba, 0x11ba, 0,
    0x10, 0x11df, 0x11b7, 0x11eb, 0,
    0x10, 0x11e0, 0x11b7, 0x11be, 0,
    0x10, 0x11e1, 0x11b7, 0x11c2, 0,
    0x10, 0x11e2, 0x11b7, 0x11bc, 0,
    0x10, 0x11e3, 0x11b8, 0x11af, 0,
    0x10, 0x11e4, 0x11b8, 0x11c1, 0,
    0x10, 0x11e5, 0x11b8, 0x11c2, 0,
    0x10, 0x11e6, 0x11b8, 0x11bc, 0,
    0x10, 0x11e7, 0x11ba, 0x11a8, 0,
    0x10, 0x11e8, 0x11ba, 0x11ae, 0,
    0x10, 0x11e9, 0x11ba, 0x11af, 0,
    0x10, 0x11ea, 0x11ba, 0x11b8, 0,
    0x10, 0x11ec, 0x11bc, 0x11a8, 0,
    0x10, 0x11ed, 0x11bc, 0x11a8, 0x11a8, 0,
    0x10, 0x11ee, 0x11bc, 0x11bc, 0,
    0x10, 0x11ef, 0x11bc, 0x11bf, 0,
    0x10, 0x11f1, 0x11f0, 0x11ba, 0,
    0x10, 0x11f2, 0x11f0, 0x11eb, 0,
    0x10, 0x11f3, 0x11c1, 0x11b8, 0,
    0x10, 0x11f4, 0x11c1, 0x11bc, 0,
    0x10, 0x11f5, 0x11c2, 0x11ab, 0,
    0x10, 0x11f6, 0x11c2, 0x11af, 0,
    0x10, 0x11f7, 0x11c2, 0x11b7, 0,
    0x10, 0x11f8, 0x11c2, 0x11b8, 0,
    0x1, 0x1e00, 0x41, 0x325, 0,
    0x1, 0x1e01, 0x61, 0x325, 0,
    0x1, 0x1e02, 0x42, 0x307, 0,
    0x1, 0x1e03, 0x62, 0x307, 0,
    0x1, 0x1e04, 0x42, 0x323, 0,
    0x1, 0x1e05, 0x62, 0x323, 0,
    0x1, 0x1e06, 0x42, 0x331, 0,
    0x1, 0x1e07, 0x62, 0x331, 0,
    0x1, 0x1e08, 0xc7, 0x301, 0,
    0x1, 0x1e09, 0xe7, 0x301, 0,
    0x1, 0x1e0a, 0x44, 0x307, 0,
    0x1, 0x1e0b, 0x64, 0x307, 0,
    0x1, 0x1e0c, 0x44, 0x323, 0,
    0x1, 0x1e0d, 0x64, 0x323, 0,
    0x1, 0x1e0e, 0x44, 0x331, 0,
    0x1, 0x1e0f, 0x64, 0x331, 0,
    0x1, 0x1e10, 0x44, 0x327, 0,
    0x1, 0x1e11, 0x64, 0x327, 0,
    0x1, 0x1e12, 0x44, 0x32d, 0,
    0x1, 0x1e13, 0x64, 0x32d, 0,
    0x1, 0x1e14, 0x112, 0x300, 0,
    0x1, 0x1e15, 0x113, 0x300, 0,
    0x1, 0x1e16, 0x112, 0x301, 0,
    0x1, 0x1e17, 0x113, 0x301, 0,
    0x1, 0x1e18, 0x45, 0x32d, 0,
    0x1, 0x1e19, 0x65, 0x32d, 0,
    0x1, 0x1e1a, 0x45, 0x330, 0,
    0x1, 0x1e1b, 0x65, 0x330, 0,
    0x1, 0x1e1c, 0x114, 0x327, 0,
    0x1, 0x1e1d, 0x115, 0x327, 0,
    0x1, 0x1e1e, 0x46, 0x307, 0,
    0x1, 0x1e1f, 0x66, 0x307, 0,
    0x1, 0x1e20, 0x47, 0x304, 0,
    0x1, 0x1e21, 0x67, 0x304, 0,
    0x1, 0x1e22, 0x48, 0x307, 0,
    0x1, 0x1e23, 0x68, 0x307, 0,
    0x1, 0x1e24, 0x48, 0x323, 0,
    0x1, 0x1e25, 0x68, 0x323, 0,
    0x1, 0x1e26, 0x48, 0x308, 0,
    0x1, 0x1e27, 0x68, 0x308, 0,
    0x1, 0x1e28, 0x48, 0x327, 0,
    0x1, 0x1e29, 0x68, 0x327, 0,
    0x1, 0x1e2a, 0x48, 0x32e, 0,
    0x1, 0x1e2b, 0x68, 0x32e, 0,
    0x1, 0x1e2c, 0x49, 0x330, 0,
    0x1, 0x1e2d, 0x69, 0x330, 0,
    0x1, 0x1e2e, 0xcf, 0x301, 0,
    0x1, 0x1e2f, 0xef, 0x301, 0,
    0x1, 0x1e30, 0x4b, 0x301, 0,
    0x1, 0x1e31, 0x6b, 0x301, 0,
    0x1, 0x1e32, 0x4b, 0x323, 0,
    0x1, 0x1e33, 0x6b, 0x323, 0,
    0x1, 0x1e34, 0x4b, 0x331, 0,
    0x1, 0x1e35, 0x6b, 0x331, 0,
    0x1, 0x1e36, 0x4c, 0x323, 0,
    0x1, 0x1e37, 0x6c, 0x323, 0,
    0x1, 0x1e38, 0x1e36, 0x304, 0,
    0x1, 0x1e39, 0x1e37, 0x304, 0,
    0x1, 0x1e3a, 0x4c, 0x331, 0,
    0x1, 0x1e3b, 0x6c, 0x331, 0,
    0x1, 0x1e3c, 0x4c, 0x32d, 0,
    0x1, 0x1e3d, 0x6c, 0x32d, 0,
    0x1, 0x1e3e, 0x4d, 0x301, 0,
    0x1, 0x1e3f, 0x6d, 0x301, 0,
    0x1, 0x1e40, 0x4d, 0x307, 0,
    0x1, 0x1e41, 0x6d, 0x307, 0,
    0x1, 0x1e42, 0x4d, 0x323, 0,
    0x1, 0x1e43, 0x6d, 0x323, 0,
    0x1, 0x1e44, 0x4e, 0x307, 0,
    0x1, 0x1e45, 0x6e, 0x307, 0,
    0x1, 0x1e46, 0x4e, 0x323, 0,
    0x1, 0x1e47, 0x6e, 0x323, 0,
    0x1, 0x1e48, 0x4e, 0x331, 0,
    0x1, 0x1e49, 0x6e, 0x331, 0,
    0x1, 0x1e4a, 0x4e, 0x32d, 0,
    0x1, 0x1e4b, 0x6e, 0x32d, 0,
    0x1, 0x1e4c, 0xd5, 0x301, 0,
    0x1, 0x1e4d, 0xf5, 0x301, 0,
    0x1, 0x1e4e, 0xd5, 0x308, 0,
    0x1, 0x1e4f, 0xf5, 0x308, 0,
    0x1, 0x1e50, 0x14c, 0x300, 0,
    0x1, 0x1e51, 0x14d, 0x300, 0,
    0x1, 0x1e52, 0x14c, 0x301, 0,
    0x1, 0x1e53, 0x14d, 0x301, 0,
    0x1, 0x1e54, 0x50, 0x301, 0,
    0x1, 0x1e55, 0x70, 0x301, 0,
    0x1, 0x1e56, 0x50, 0x307, 0,
    0x1, 0x1e57, 0x70, 0x307, 0,
    0x1, 0x1e58, 0x52, 0x307, 0,
    0x1, 0x1e59, 0x72, 0x307, 0,
    0x1, 0x1e5a, 0x52, 0x323, 0,
    0x1, 0x1e5b, 0x72, 0x323, 0,
    0x1, 0x1e5c, 0x1e5a, 0x304, 0,
    0x1, 0x1e5d, 0x1e5b, 0x304, 0,
    0x1, 0x1e5e, 0x52, 0x331, 0,
    0x1, 0x1e5f, 0x72, 0x331, 0,
    0x1, 0x1e60, 0x53, 0x307, 0,
    0x1, 0x1e61, 0x73, 0x307, 0,
    0x1, 0x1e62, 0x53, 0x323, 0,
    0x1, 0x1e63, 0x73, 0x323, 0,
    0x1, 0x1e64, 0x15a, 0x307, 0,
    0x1, 0x1e65, 0x15b, 0x307, 0,
    0x1, 0x1e66, 0x160, 0x307, 0,
    0x1, 0x1e67, 0x161, 0x307, 0,
    0x1, 0x1e68, 0x1e62, 0x307, 0,
    0x1, 0x1e69, 0x1e63, 0x307, 0,
    0x1, 0x1e6a, 0x54, 0x307, 0,
    0x1, 0x1e6b, 0x74, 0x307, 0,
    0x1, 0x1e6c, 0x54, 0x323, 0,
    0x1, 0x1e6d, 0x74, 0x323, 0,
    0x1, 0x1e6e, 0x54, 0x331, 0,
    0x1, 0x1e6f, 0x74, 0x331, 0,
    0x1, 0x1e70, 0x54, 0x32d, 0,
    0x1, 0x1e71, 0x74, 0x32d, 0,
    0x1, 0x1e72, 0x55, 0x324, 0,
    0x1, 0x1e73, 0x75, 0x324, 0,
    0x1, 0x1e74, 0x55, 0x330, 0,
    0x1, 0x1e75, 0x75, 0x330, 0,
    0x1, 0x1e76, 0x55, 0x32d, 0,
    0x1, 0x1e77, 0x75, 0x32d, 0,
    0x1, 0x1e78, 0x168, 0x301, 0,
    0x1, 0x1e79, 0x169, 0x301, 0,
    0x1, 0x1e7a, 0x16a, 0x308, 0,
    0x1, 0x1e7b, 0x16b, 0x308, 0,
    0x1, 0x1e7c, 0x56, 0x303, 0,
    0x1, 0x1e7d, 0x76, 0x303, 0,
    0x1, 0x1e7e, 0x56, 0x323, 0,
    0x1, 0x1e7f, 0x76, 0x323, 0,
    0x1, 0x1e80, 0x57, 0x300, 0,
    0x1, 0x1e81, 0x77, 0x300, 0,
    0x1, 0x1e82, 0x57, 0x301, 0,
    0x1, 0x1e83, 0x77, 0x301, 0,
    0x1, 0x1e84, 0x57, 0x308, 0,
    0x1, 0x1e85, 0x77, 0x308, 0,
    0x1, 0x1e86, 0x57, 0x307, 0,
    0x1, 0x1e87, 0x77, 0x307, 0,
    0x1, 0x1e88, 0x57, 0x323, 0,
    0x1, 0x1e89, 0x77, 0x323, 0,
    0x1, 0x1e8a, 0x58, 0x307, 0,
    0x1, 0x1e8b, 0x78, 0x307, 0,
    0x1, 0x1e8c, 0x58, 0x308, 0,
    0x1, 0x1e8d, 0x78, 0x308, 0,
    0x1, 0x1e8e, 0x59, 0x307, 0,
    0x1, 0x1e8f, 0x79, 0x307, 0,
    0x1, 0x1e90, 0x5a, 0x302, 0,
    0x1, 0x1e91, 0x7a, 0x302, 0,
    0x1, 0x1e92, 0x5a, 0x323, 0,
    0x1, 0x1e93, 0x7a, 0x323, 0,
    0x1, 0x1e94, 0x5a, 0x331, 0,
    0x1, 0x1e95, 0x7a, 0x331, 0,
    0x1, 0x1e96, 0x68, 0x331, 0,
    0x1, 0x1e97, 0x74, 0x308, 0,
    0x1, 0x1e98, 0x77, 0x30a, 0,
    0x1, 0x1e99, 0x79, 0x30a, 0,
    0x10, 0x1e9a, 0x61, 0x2be, 0,
    0x1, 0x1e9b, 0x17f, 0x307, 0,
    0x1, 0x1ea0, 0x41, 0x323, 0,
    0x1, 0x1ea1, 0x61, 0x323, 0,
    0x1, 0x1ea2, 0x41, 0x309, 0,
    0x1, 0x1ea3, 0x61, 0x309, 0,
    0x1, 0x1ea4, 0xc2, 0x301, 0,
    0x1, 0x1ea5, 0xe2, 0x301, 0,
    0x1, 0x1ea6, 0xc2, 0x300, 0,
    0x1, 0x1ea7, 0xe2, 0x300, 0,
    0x1, 0x1ea8, 0xc2, 0x309, 0,
    0x1, 0x1ea9, 0xe2, 0x309, 0,
    0x1, 0x1eaa, 0xc2, 0x303, 0,
    0x1, 0x1eab, 0xe2, 0x303, 0,
    0x1, 0x1eac, 0xc2, 0x323, 0,
    0x1, 0x1ead, 0xe2, 0x323, 0,
    0x1, 0x1eae, 0x102, 0x301, 0,
    0x1, 0x1eaf, 0x103, 0x301, 0,
    0x1, 0x1eb0, 0x102, 0x300, 0,
    0x1, 0x1eb1, 0x103, 0x300, 0,
    0x1, 0x1eb2, 0x102, 0x309, 0,
    0x1, 0x1eb3, 0x103, 0x309, 0,
    0x1, 0x1eb4, 0x102, 0x303, 0,
    0x1, 0x1eb5, 0x103, 0x303, 0,
    0x1, 0x1eb6, 0x102, 0x323, 0,
    0x1, 0x1eb7, 0x103, 0x323, 0,
    0x1, 0x1eb8, 0x45, 0x323, 0,
    0x1, 0x1eb9, 0x65, 0x323, 0,
    0x1, 0x1eba, 0x45, 0x309, 0,
    0x1, 0x1ebb, 0x65, 0x309, 0,
    0x1, 0x1ebc, 0x45, 0x303, 0,
    0x1, 0x1ebd, 0x65, 0x303, 0,
    0x1, 0x1ebe, 0xca, 0x301, 0,
    0x1, 0x1ebf, 0xea, 0x301, 0,
    0x1, 0x1ec0, 0xca, 0x300, 0,
    0x1, 0x1ec1, 0xea, 0x300, 0,
    0x1, 0x1ec2, 0xca, 0x309, 0,
    0x1, 0x1ec3, 0xea, 0x309, 0,
    0x1, 0x1ec4, 0xca, 0x303, 0,
    0x1, 0x1ec5, 0xea, 0x303, 0,
    0x1, 0x1ec6, 0xca, 0x323, 0,
    0x1, 0x1ec7, 0xea, 0x323, 0,
    0x1, 0x1ec8, 0x49, 0x309, 0,
    0x1, 0x1ec9, 0x69, 0x309, 0,
    0x1, 0x1eca, 0x49, 0x323, 0,
    0x1, 0x1ecb, 0x69, 0x323, 0,
    0x1, 0x1ecc, 0x4f, 0x323, 0,
    0x1, 0x1ecd, 0x6f, 0x323, 0,
    0x1, 0x1ece, 0x4f, 0x309, 0,
    0x1, 0x1ecf, 0x6f, 0x309, 0,
    0x1, 0x1ed0, 0xd4, 0x301, 0,
    0x1, 0x1ed1, 0xf4, 0x301, 0,
    0x1, 0x1ed2, 0xd4, 0x300, 0,
    0x1, 0x1ed3, 0xf4, 0x300, 0,
    0x1, 0x1ed4, 0xd4, 0x309, 0,
    0x1, 0x1ed5, 0xf4, 0x309, 0,
    0x1, 0x1ed6, 0xd4, 0x303, 0,
    0x1, 0x1ed7, 0xf4, 0x303, 0,
    0x1, 0x1ed8, 0xd4, 0x323, 0,
    0x1, 0x1ed9, 0xf4, 0x323, 0,
    0x1, 0x1eda, 0x1a0, 0x301, 0,
    0x1, 0x1edb, 0x1a1, 0x301, 0,
    0x1, 0x1edc, 0x1a0, 0x300, 0,
    0x1, 0x1edd, 0x1a1, 0x300, 0,
    0x1, 0x1ede, 0x1a0, 0x309, 0,
    0x1, 0x1edf, 0x1a1, 0x309, 0,
    0x1, 0x1ee0, 0x1a0, 0x303, 0,
    0x1, 0x1ee1, 0x1a1, 0x303, 0,
    0x1, 0x1ee2, 0x1a0, 0x323, 0,
    0x1, 0x1ee3, 0x1a1, 0x323, 0,
    0x1, 0x1ee4, 0x55, 0x323, 0,
    0x1, 0x1ee5, 0x75, 0x323, 0,
    0x1, 0x1ee6, 0x55, 0x309, 0,
    0x1, 0x1ee7, 0x75, 0x309, 0,
    0x1, 0x1ee8, 0x1af, 0x301, 0,
    0x1, 0x1ee9, 0x1b0, 0x301, 0,
    0x1, 0x1eea, 0x1af, 0x300, 0,
    0x1, 0x1eeb, 0x1b0, 0x300, 0,
    0x1, 0x1eec, 0x1af, 0x309, 0,
    0x1, 0x1eed, 0x1b0, 0x309, 0,
    0x1, 0x1eee, 0x1af, 0x303, 0,
    0x1, 0x1eef, 0x1b0, 0x303, 0,
    0x1, 0x1ef0, 0x1af, 0x323, 0,
    0x1, 0x1ef1, 0x1b0, 0x323, 0,
    0x1, 0x1ef2, 0x59, 0x300, 0,
    0x1, 0x1ef3, 0x79, 0x300, 0,
    0x1, 0x1ef4, 0x59, 0x323, 0,
    0x1, 0x1ef5, 0x79, 0x323, 0,
    0x1, 0x1ef6, 0x59, 0x309, 0,
    0x1, 0x1ef7, 0x79, 0x309, 0,
    0x1, 0x1ef8, 0x59, 0x303, 0,
    0x1, 0x1ef9, 0x79, 0x303, 0,
    0x1, 0x1f00, 0x3b1, 0x313, 0,
    0x1, 0x1f01, 0x3b1, 0x314, 0,
    0x1, 0x1f02, 0x1f00, 0x300, 0,
    0x1, 0x1f03, 0x1f01, 0x300, 0,
    0x1, 0x1f04, 0x1f00, 0x301, 0,
    0x1, 0x1f05, 0x1f01, 0x301, 0,
    0x1, 0x1f06, 0x1f00, 0x342, 0,
    0x1, 0x1f07, 0x1f01, 0x342, 0,
    0x1, 0x1f08, 0x391, 0x313, 0,
    0x1, 0x1f09, 0x391, 0x314, 0,
    0x1, 0x1f0a, 0x1f08, 0x300, 0,
    0x1, 0x1f0b, 0x1f09, 0x300, 0,
    0x1, 0x1f0c, 0x1f08, 0x301, 0,
    0x1, 0x1f0d, 0x1f09, 0x301, 0,
    0x1, 0x1f0e, 0x1f08, 0x342, 0,
    0x1, 0x1f0f, 0x1f09, 0x342, 0,
    0x1, 0x1f10, 0x3b5, 0x313, 0,
    0x1, 0x1f11, 0x3b5, 0x314, 0,
    0x1, 0x1f12, 0x1f10, 0x300, 0,
    0x1, 0x1f13, 0x1f11, 0x300, 0,
    0x1, 0x1f14, 0x1f10, 0x301, 0,
    0x1, 0x1f15, 0x1f11, 0x301, 0,
    0x1, 0x1f18, 0x395, 0x313, 0,
    0x1, 0x1f19, 0x395, 0x314, 0,
    0x1, 0x1f1a, 0x1f18, 0x300, 0,
    0x1, 0x1f1b, 0x1f19, 0x300, 0,
    0x1, 0x1f1c, 0x1f18, 0x301, 0,
    0x1, 0x1f1d, 0x1f19, 0x301, 0,
    0x1, 0x1f20, 0x3b7, 0x313, 0,
    0x1, 0x1f21, 0x3b7, 0x314, 0,
    0x1, 0x1f22, 0x1f20, 0x300, 0,
    0x1, 0x1f23, 0x1f21, 0x300, 0,
    0x1, 0x1f24, 0x1f20, 0x301, 0,
    0x1, 0x1f25, 0x1f21, 0x301, 0,
    0x1, 0x1f26, 0x1f20, 0x342, 0,
    0x1, 0x1f27, 0x1f21, 0x342, 0,
    0x1, 0x1f28, 0x397, 0x313, 0,
    0x1, 0x1f29, 0x397, 0x314, 0,
    0x1, 0x1f2a, 0x1f28, 0x300, 0,
    0x1, 0x1f2b, 0x1f29, 0x300, 0,
    0x1, 0x1f2c, 0x1f28, 0x301, 0,
    0x1, 0x1f2d, 0x1f29, 0x301, 0,
    0x1, 0x1f2e, 0x1f28, 0x342, 0,
    0x1, 0x1f2f, 0x1f29, 0x342, 0,
    0x1, 0x1f30, 0x3b9, 0x313, 0,
    0x1, 0x1f31, 0x3b9, 0x314, 0,
    0x1, 0x1f32, 0x1f30, 0x300, 0,
    0x1, 0x1f33, 0x1f31, 0x300, 0,
    0x1, 0x1f34, 0x1f30, 0x301, 0,
    0x1, 0x1f35, 0x1f31, 0x301, 0,
    0x1, 0x1f36, 0x1f30, 0x342, 0,
    0x1, 0x1f37, 0x1f31, 0x342, 0,
    0x1, 0x1f38, 0x399, 0x313, 0,
    0x1, 0x1f39, 0x399, 0x314, 0,
    0x1, 0x1f3a, 0x1f38, 0x300, 0,
    0x1, 0x1f3b, 0x1f39, 0x300, 0,
    0x1, 0x1f3c, 0x1f38, 0x301, 0,
    0x1, 0x1f3d, 0x1f39, 0x301, 0,
    0x1, 0x1f3e, 0x1f38, 0x342, 0,
    0x1, 0x1f3f, 0x1f39, 0x342, 0,
    0x1, 0x1f40, 0x3bf, 0x313, 0,
    0x1, 0x1f41, 0x3bf, 0x314, 0,
    0x1, 0x1f42, 0x1f40, 0x300, 0,
    0x1, 0x1f43, 0x1f41, 0x300, 0,
    0x1, 0x1f44, 0x1f40, 0x301, 0,
    0x1, 0x1f45, 0x1f41, 0x301, 0,
    0x1, 0x1f48, 0x39f, 0x313, 0,
    0x1, 0x1f49, 0x39f, 0x314, 0,
    0x1, 0x1f4a, 0x1f48, 0x300, 0,
    0x1, 0x1f4b, 0x1f49, 0x300, 0,
    0x1, 0x1f4c, 0x1f48, 0x301, 0,
    0x1, 0x1f4d, 0x1f49, 0x301, 0,
    0x1, 0x1f50, 0x3c5, 0x313, 0,
    0x1, 0x1f51, 0x3c5, 0x314, 0,
    0x1, 0x1f52, 0x1f50, 0x300, 0,
    0x1, 0x1f53, 0x1f51, 0x300, 0,
    0x1, 0x1f54, 0x1f50, 0x301, 0,
    0x1, 0x1f55, 0x1f51, 0x301, 0,
    0x1, 0x1f56, 0x1f50, 0x342, 0,
    0x1, 0x1f57, 0x1f51, 0x342, 0,
    0x1, 0x1f59, 0x3a5, 0x314, 0,
    0x1, 0x1f5b, 0x1f59, 0x300, 0,
    0x1, 0x1f5d, 0x1f59, 0x301, 0,
    0x1, 0x1f5f, 0x1f59, 0x342, 0,
    0x1, 0x1f60, 0x3c9, 0x313, 0,
    0x1, 0x1f61, 0x3c9, 0x314, 0,
    0x1, 0x1f62, 0x1f60, 0x300, 0,
    0x1, 0x1f63, 0x1f61, 0x300, 0,
    0x1, 0x1f64, 0x1f60, 0x301, 0,
    0x1, 0x1f65, 0x1f61, 0x301, 0,
    0x1, 0x1f66, 0x1f60, 0x342, 0,
    0x1, 0x1f67, 0x1f61, 0x342, 0,
    0x1, 0x1f68, 0x3a9, 0x313, 0,
    0x1, 0x1f69, 0x3a9, 0x314, 0,
    0x1, 0x1f6a, 0x1f68, 0x300, 0,
    0x1, 0x1f6b, 0x1f69, 0x300, 0,
    0x1, 0x1f6c, 0x1f68, 0x301, 0,
    0x1, 0x1f6d, 0x1f69, 0x301, 0,
    0x1, 0x1f6e, 0x1f68, 0x342, 0,
    0x1, 0x1f6f, 0x1f69, 0x342, 0,
    0x1, 0x1f70, 0x3b1, 0x300, 0,
    0x1, 0x1f71, 0x3ac, 0,
    0x1, 0x1f72, 0x3b5, 0x300, 0,
    0x1, 0x1f73, 0x3ad, 0,
    0x1, 0x1f74, 0x3b7, 0x300, 0,
    0x1, 0x1f75, 0x3ae, 0,
    0x1, 0x1f76, 0x3b9, 0x300, 0,
    0x1, 0x1f77, 0x3af, 0,
    0x1, 0x1f78, 0x3bf, 0x300, 0,
    0x1, 0x1f79, 0x3cc, 0,
    0x1, 0x1f7a, 0x3c5, 0x300, 0,
    0x1, 0x1f7b, 0x3cd, 0,
    0x1, 0x1f7c, 0x3c9, 0x300, 0,
    0x1, 0x1f7d, 0x3ce, 0,
    0x1, 0x1f80, 0x1f00, 0x345, 0,
    0x1, 0x1f81, 0x1f01, 0x345, 0,
    0x1, 0x1f82, 0x1f02, 0x345, 0,
    0x1, 0x1f83, 0x1f03, 0x345, 0,
    0x1, 0x1f84, 0x1f04, 0x345, 0,
    0x1, 0x1f85, 0x1f05, 0x345, 0,
    0x1, 0x1f86, 0x1f06, 0x345, 0,
    0x1, 0x1f87, 0x1f07, 0x345, 0,
    0x1, 0x1f88, 0x1f08, 0x345, 0,
    0x1, 0x1f89, 0x1f09, 0x345, 0,
    0x1, 0x1f8a, 0x1f0a, 0x345, 0,
    0x1, 0x1f8b, 0x1f0b, 0x345, 0,
    0x1, 0x1f8c, 0x1f0c, 0x345, 0,
    0x1, 0x1f8d, 0x1f0d, 0x345, 0,
    0x1, 0x1f8e, 0x1f0e, 0x345, 0,
    0x1, 0x1f8f, 0x1f0f, 0x345, 0,
    0x1, 0x1f90, 0x1f20, 0x345, 0,
    0x1, 0x1f91, 0x1f21, 0x345, 0,
    0x1, 0x1f92, 0x1f22, 0x345, 0,
    0x1, 0x1f93, 0x1f23, 0x345, 0,
    0x1, 0x1f94, 0x1f24, 0x345, 0,
    0x1, 0x1f95, 0x1f25, 0x345, 0,
    0x1, 0x1f96, 0x1f26, 0x345, 0,
    0x1, 0x1f97, 0x1f27, 0x345, 0,
    0x1, 0x1f98, 0x1f28, 0x345, 0,
    0x1, 0x1f99, 0x1f29, 0x345, 0,
    0x1, 0x1f9a, 0x1f2a, 0x345, 0,
    0x1, 0x1f9b, 0x1f2b, 0x345, 0,
    0x1, 0x1f9c, 0x1f2c, 0x345, 0,
    0x1, 0x1f9d, 0x1f2d, 0x345, 0,
    0x1, 0x1f9e, 0x1f2e, 0x345, 0,
    0x1, 0x1f9f, 0x1f2f, 0x345, 0,
    0x1, 0x1fa0, 0x1f60, 0x345, 0,
    0x1, 0x1fa1, 0x1f61, 0x345, 0,
    0x1, 0x1fa2, 0x1f62, 0x345, 0,
    0x1, 0x1fa3, 0x1f63, 0x345, 0,
    0x1, 0x1fa4, 0x1f64, 0x345, 0,
    0x1, 0x1fa5, 0x1f65, 0x345, 0,
    0x1, 0x1fa6, 0x1f66, 0x345, 0,
    0x1, 0x1fa7, 0x1f67, 0x345, 0,
    0x1, 0x1fa8, 0x1f68, 0x345, 0,
    0x1, 0x1fa9, 0x1f69, 0x345, 0,
    0x1, 0x1faa, 0x1f6a, 0x345, 0,
    0x1, 0x1fab, 0x1f6b, 0x345, 0,
    0x1, 0x1fac, 0x1f6c, 0x345, 0,
    0x1, 0x1fad, 0x1f6d, 0x345, 0,
    0x1, 0x1fae, 0x1f6e, 0x345, 0,
    0x1, 0x1faf, 0x1f6f, 0x345, 0,
    0x1, 0x1fb0, 0x3b1, 0x306, 0,
    0x1, 0x1fb1, 0x3b1, 0x304, 0,
    0x1, 0x1fb2, 0x1f70, 0x345, 0,
    0x1, 0x1fb3, 0x3b1, 0x345, 0,
    0x1, 0x1fb4, 0x3ac, 0x345, 0,
    0x1, 0x1fb6, 0x3b1, 0x342, 0,
    0x1, 0x1fb7, 0x1fb6, 0x345, 0,
    0x1, 0x1fb8, 0x391, 0x306, 0,
    0x1, 0x1fb9, 0x391, 0x304, 0,
    0x1, 0x1fba, 0x391, 0x300, 0,
    0x1, 0x1fbb, 0x386, 0,
    0x1, 0x1fbc, 0x391, 0x345, 0,
    0x10, 0x1fbd, 0x20, 0x313, 0,
    0x1, 0x1fbe, 0x3b9, 0,
    0x10, 0x1fbf, 0x20, 0x313, 0,
    0x10, 0x1fc0, 0x20, 0x342, 0,
    0x1, 0x1fc1, 0xa8, 0x342, 0,
    0x1, 0x1fc2, 0x1f74, 0x345, 0,
    0x1, 0x1fc3, 0x3b7, 0x345, 0,
    0x1, 0x1fc4, 0x3ae, 0x345, 0,
    0x1, 0x1fc6, 0x3b7, 0x342, 0,
    0x1, 0x1fc7, 0x1fc6, 0x345, 0,
    0x1, 0x1fc8, 0x395, 0x300, 0,
    0x1, 0x1fc9, 0x388, 0,
    0x1, 0x1fca, 0x397, 0x300, 0,
    0x1, 0x1fcb, 0x389, 0,
    0x1, 0x1fcc, 0x397, 0x345, 0,
    0x1, 0x1fcd, 0x1fbf, 0x300, 0,
    0x1, 0x1fce, 0x1fbf, 0x301, 0,
    0x1, 0x1fcf, 0x1fbf, 0x342, 0,
    0x1, 0x1fd0, 0x3b9, 0x306, 0,
    0x1, 0x1fd1, 0x3b9, 0x304, 0,
    0x1, 0x1fd2, 0x3ca, 0x300, 0,
    0x1, 0x1fd3, 0x390, 0,
    0x1, 0x1fd6, 0x3b9, 0x342, 0,
    0x1, 0x1fd7, 0x3ca, 0x342, 0,
    0x1, 0x1fd8, 0x399, 0x306, 0,
    0x1, 0x1fd9, 0x399, 0x304, 0,
    0x1, 0x1fda, 0x399, 0x300, 0,
    0x1, 0x1fdb, 0x38a, 0,
    0x1, 0x1fdd, 0x1ffe, 0x300, 0,
    0x1, 0x1fde, 0x1ffe, 0x301, 0,
    0x1, 0x1fdf, 0x1ffe, 0x342, 0,
    0x1, 0x1fe0, 0x3c5, 0x306, 0,
    0x1, 0x1fe1, 0x3c5, 0x304, 0,
    0x1, 0x1fe2, 0x3cb, 0x300, 0,
    0x1, 0x1fe3, 0x3b0, 0,
    0x1, 0x1fe4, 0x3c1, 0x313, 0,
    0x1, 0x1fe5, 0x3c1, 0x314, 0,
    0x1, 0x1fe6, 0x3c5, 0x342, 0,
    0x1, 0x1fe7, 0x3cb, 0x342, 0,
    0x1, 0x1fe8, 0x3a5, 0x306, 0,
    0x1, 0x1fe9, 0x3a5, 0x304, 0,
    0x1, 0x1fea, 0x3a5, 0x300, 0,
    0x1, 0x1feb, 0x38e, 0,
    0x1, 0x1fec, 0x3a1, 0x314, 0,
    0x1, 0x1fed, 0xa8, 0x300, 0,
    0x1, 0x1fee, 0x385, 0,
    0x1, 0x1fef, 0x60, 0,
    0x1, 0x1ff2, 0x1f7c, 0x345, 0,
    0x1, 0x1ff3, 0x3c9, 0x345, 0,
    0x1, 0x1ff4, 0x3ce, 0x345, 0,
    0x1, 0x1ff6, 0x3c9, 0x342, 0,
    0x1, 0x1ff7, 0x1ff6, 0x345, 0,
    0x1, 0x1ff8, 0x39f, 0x300, 0,
    0x1, 0x1ff9, 0x38c, 0,
    0x1, 0x1ffa, 0x3a9, 0x300, 0,
    0x1, 0x1ffb, 0x38f, 0,
    0x1, 0x1ffc, 0x3a9, 0x345, 0,
    0x1, 0x1ffd, 0xb4, 0,
    0x10, 0x1ffe, 0x20, 0x314, 0,
    0x1, 0x2000, 0x2002, 0,
    0x1, 0x2001, 0x2003, 0,
    0x10, 0x2002, 0x20, 0,
    0x10, 0x2003, 0x20, 0,
    0x10, 0x2004, 0x20, 0,
    0x10, 0x2005, 0x20, 0,
    0x10, 0x2006, 0x20, 0,
    0x3, 0x2007, 0x20, 0,
    0x10, 0x2008, 0x20, 0,
    0x10, 0x2009, 0x20, 0,
    0x10, 0x200a, 0x20, 0,
    0x3, 0x2011, 0x2010, 0,
    0x10, 0x2017, 0x20, 0x333, 0,
    0x10, 0x2024, 0x2e, 0,
    0x10, 0x2025, 0x2e, 0x2e, 0,
    0x10, 0x2026, 0x2e, 0x2e, 0x2e, 0,
    0x10, 0x2033, 0x2032, 0x2032, 0,
    0x10, 0x2034, 0x2032, 0x2032, 0x2032, 0,
    0x10, 0x2036, 0x2035, 0x2035, 0,
    0x10, 0x2037, 0x2035, 0x2035, 0x2035, 0,
    0x10, 0x203c, 0x21, 0x21, 0,
    0x10, 0x203e, 0x20, 0x305, 0,
    0x9, 0x2070, 0x30, 0,
    0x9, 0x2074, 0x34, 0,
    0x9, 0x2075, 0x35, 0,
    0x9, 0x2076, 0x36, 0,
    0x9, 0x2077, 0x37, 0,
    0x9, 0x2078, 0x38, 0,
    0x9, 0x2079, 0x39, 0,
    0x9, 0x207a, 0x2b, 0,
    0x9, 0x207b, 0x2212, 0,
    0x9, 0x207c, 0x3d, 0,
    0x9, 0x207d, 0x28, 0,
    0x9, 0x207e, 0x29, 0,
    0x9, 0x207f, 0x6e, 0,
    0xa, 0x2080, 0x30, 0,
    0xa, 0x2081, 0x31, 0,
    0xa, 0x2082, 0x32, 0,
    0xa, 0x2083, 0x33, 0,
    0xa, 0x2084, 0x34, 0,
    0xa, 0x2085, 0x35, 0,
    0xa, 0x2086, 0x36, 0,
    0xa, 0x2087, 0x37, 0,
    0xa, 0x2088, 0x38, 0,
    0xa, 0x2089, 0x39, 0,
    0xa, 0x208a, 0x2b, 0,
    0xa, 0x208b, 0x2212, 0,
    0xa, 0x208c, 0x3d, 0,
    0xa, 0x208d, 0x28, 0,
    0xa, 0x208e, 0x29, 0,
    0x10, 0x20a8, 0x52, 0x73, 0,
    0x10, 0x2100, 0x61, 0x2f, 0x63, 0,
    0x10, 0x2101, 0x61, 0x2f, 0x73, 0,
    0x2, 0x2102, 0x43, 0,
    0x10, 0x2103, 0xb0, 0x43, 0,
    0x10, 0x2105, 0x63, 0x2f, 0x6f, 0,
    0x10, 0x2106, 0x63, 0x2f, 0x75, 0,
    0x10, 0x2107, 0x190, 0,
    0x10, 0x2109, 0xb0, 0x46, 0,
    0x2, 0x210a, 0x67, 0,
    0x2, 0x210b, 0x48, 0,
    0x2, 0x210c, 0x48, 0,
    0x2, 0x210d, 0x48, 0,
    0x2, 0x210e, 0x68, 0,
    0x2, 0x210f, 0x127, 0,
    0x2, 0x2110, 0x49, 0,
    0x2, 0x2111, 0x49, 0,
    0x2, 0x2112, 0x4c, 0,
    0x2, 0x2113, 0x6c, 0,
    0x2, 0x2115, 0x4e, 0,
    0x10, 0x2116, 0x4e, 0x6f, 0,
    0x2, 0x2119, 0x50, 0,
    0x2, 0x211a, 0x51, 0,
    0x2, 0x211b, 0x52, 0,
    0x2, 0x211c, 0x52, 0,
    0x2, 0x211d, 0x52, 0,
    0x9, 0x2120, 0x53, 0x4d, 0,
    0x10, 0x2121, 0x54, 0x45, 0x4c, 0,
    0x9, 0x2122, 0x54, 0x4d, 0,
    0x2, 0x2124, 0x5a, 0,
    0x1, 0x2126, 0x3a9, 0,
    0x2, 0x2128, 0x5a, 0,
    0x1, 0x212a, 0x4b, 0,
    0x1, 0x212b, 0xc5, 0,
    0x2, 0x212c, 0x42, 0,
    0x2, 0x212d, 0x43, 0,
    0x2, 0x212f, 0x65, 0,
    0x2, 0x2130, 0x45, 0,
    0x2, 0x2131, 0x46, 0,
    0x2, 0x2133, 0x4d, 0,
    0x2, 0x2134, 0x6f, 0,
    0x10, 0x2135, 0x5d0, 0,
    0x10, 0x2136, 0x5d1, 0,
    0x10, 0x2137, 0x5d2, 0,
    0x10, 0x2138, 0x5d3, 0,
    0x11, 0x2153, 0x31, 0x2044, 0x33, 0,
    0x11, 0x2154, 0x32, 0x2044, 0x33, 0,
    0x11, 0x2155, 0x31, 0x2044, 0x35, 0,
    0x11, 0x2156, 0x32, 0x2044, 0x35, 0,
    0x11, 0x2157, 0x33, 0x2044, 0x35, 0,
    0x11, 0x2158, 0x34, 0x2044, 0x35, 0,
    0x11, 0x2159, 0x31, 0x2044, 0x36, 0,
    0x11, 0x215a, 0x35, 0x2044, 0x36, 0,
    0x11, 0x215b, 0x31, 0x2044, 0x38, 0,
    0x11, 0x215c, 0x33, 0x2044, 0x38, 0,
    0x11, 0x215d, 0x35, 0x2044, 0x38, 0,
    0x11, 0x215e, 0x37, 0x2044, 0x38, 0,
    0x11, 0x215f, 0x31, 0x2044, 0,
    0x10, 0x2160, 0x49, 0,
    0x10, 0x2161, 0x49, 0x49, 0,
    0x10, 0x2162, 0x49, 0x49, 0x49, 0,
    0x10, 0x2163, 0x49, 0x56, 0,
    0x10, 0x2164, 0x56, 0,
    0x10, 0x2165, 0x56, 0x49, 0,
    0x10, 0x2166, 0x56, 0x49, 0x49, 0,
    0x10, 0x2167, 0x56, 0x49, 0x49, 0x49, 0,
    0x10, 0x2168, 0x49, 0x58, 0,
    0x10, 0x2169, 0x58, 0,
    0x10, 0x216a, 0x58, 0x49, 0,
    0x10, 0x216b, 0x58, 0x49, 0x49, 0,
    0x10, 0x216c, 0x4c, 0,
    0x10, 0x216d, 0x43, 0,
    0x10, 0x216e, 0x44, 0,
    0x10, 0x216f, 0x4d, 0,
    0x10, 0x2170, 0x69, 0,
    0x10, 0x2171, 0x69, 0x69, 0,
    0x10, 0x2172, 0x69, 0x69, 0x69, 0,
    0x10, 0x2173, 0x69, 0x76, 0,
    0x10, 0x2174, 0x76, 0,
    0x10, 0x2175, 0x76, 0x69, 0,
    0x10, 0x2176, 0x76, 0x69, 0x69, 0,
    0x10, 0x2177, 0x76, 0x69, 0x69, 0x69, 0,
    0x10, 0x2178, 0x69, 0x78, 0,
    0x10, 0x2179, 0x78, 0,
    0x10, 0x217a, 0x78, 0x69, 0,
    0x10, 0x217b, 0x78, 0x69, 0x69, 0,
    0x10, 0x217c, 0x6c, 0,
    0x10, 0x217d, 0x63, 0,
    0x10, 0x217e, 0x64, 0,
    0x10, 0x217f, 0x6d, 0,
    0x1, 0x2204, 0x2203, 0x338, 0,
    0x1, 0x2209, 0x2208, 0x338, 0,
    0x1, 0x220c, 0x220b, 0x338, 0,
    0x1, 0x2224, 0x2223, 0x338, 0,
    0x1, 0x2226, 0x2225, 0x338, 0,
    0x10, 0x222c, 0x222b, 0x222b, 0,
    0x10, 0x222d, 0x222b, 0x222b, 0x222b, 0,
    0x10, 0x222f, 0x222e, 0x222e, 0,
    0x10, 0x2230, 0x222e, 0x222e, 0x222e, 0,
    0x1, 0x2241, 0x7e, 0x338, 0,
    0x1, 0x2244, 0x2243, 0x338, 0,
    0x1, 0x2247, 0x2245, 0x338, 0,
    0x1, 0x2249, 0x2248, 0x338, 0,
    0x1, 0x2260, 0x3d, 0x338, 0,
    0x1, 0x2262, 0x2261, 0x338, 0,
    0x1, 0x226d, 0x224d, 0x338, 0,
    0x1, 0x226e, 0x3c, 0x338, 0,
    0x1, 0x226f, 0x3e, 0x338, 0,
    0x1, 0x2270, 0x2264, 0x338, 0,
    0x1, 0x2271, 0x2265, 0x338, 0,
    0x1, 0x2274, 0x2272, 0x338, 0,
    0x1, 0x2275, 0x2273, 0x338, 0,
    0x1, 0x2278, 0x2276, 0x338, 0,
    0x1, 0x2279, 0x2277, 0x338, 0,
    0x1, 0x2280, 0x227a, 0x338, 0,
    0x1, 0x2281, 0x227b, 0x338, 0,
    0x1, 0x2284, 0x2282, 0x338, 0,
    0x1, 0x2285, 0x2283, 0x338, 0,
    0x1, 0x2288, 0x2286, 0x338, 0,
    0x1, 0x2289, 0x2287, 0x338, 0,
    0x1, 0x22ac, 0x22a2, 0x338, 0,
    0x1, 0x22ad, 0x22a8, 0x338, 0,
    0x1, 0x22ae, 0x22a9, 0x338, 0,
    0x1, 0x22af, 0x22ab, 0x338, 0,
    0x1, 0x22e0, 0x227c, 0x338, 0,
    0x1, 0x22e1, 0x227d, 0x338, 0,
    0x1, 0x22e2, 0x2291, 0x338, 0,
    0x1, 0x22e3, 0x2292, 0x338, 0,
    0x1, 0x22ea, 0x22b2, 0x338, 0,
    0x1, 0x22eb, 0x22b3, 0x338, 0,
    0x1, 0x22ec, 0x22b4, 0x338, 0,
    0x1, 0x22ed, 0x22b5, 0x338, 0,
    0x1, 0x2329, 0x3008, 0,
    0x1, 0x232a, 0x3009, 0,
    0x8, 0x2460, 0x31, 0,
    0x8, 0x2461, 0x32, 0,
    0x8, 0x2462, 0x33, 0,
    0x8, 0x2463, 0x34, 0,
    0x8, 0x2464, 0x35, 0,
    0x8, 0x2465, 0x36, 0,
    0x8, 0x2466, 0x37, 0,
    0x8, 0x2467, 0x38, 0,
    0x8, 0x2468, 0x39, 0,
    0x8, 0x2469, 0x31, 0x30, 0,
    0x8, 0x246a, 0x31, 0x31, 0,
    0x8, 0x246b, 0x31, 0x32, 0,
    0x8, 0x246c, 0x31, 0x33, 0,
    0x8, 0x246d, 0x31, 0x34, 0,
    0x8, 0x246e, 0x31, 0x35, 0,
    0x8, 0x246f, 0x31, 0x36, 0,
    0x8, 0x2470, 0x31, 0x37, 0,
    0x8, 0x2471, 0x31, 0x38, 0,
    0x8, 0x2472, 0x31, 0x39, 0,
    0x8, 0x2473, 0x32, 0x30, 0,
    0x10, 0x2474, 0x28, 0x31, 0x29, 0,
    0x10, 0x2475, 0x28, 0x32, 0x29, 0,
    0x10, 0x2476, 0x28, 0x33, 0x29, 0,
    0x10, 0x2477, 0x28, 0x34, 0x29, 0,
    0x10, 0x2478, 0x28, 0x35, 0x29, 0,
    0x10, 0x2479, 0x28, 0x36, 0x29, 0,
    0x10, 0x247a, 0x28, 0x37, 0x29, 0,
    0x10, 0x247b, 0x28, 0x38, 0x29, 0,
    0x10, 0x247c, 0x28, 0x39, 0x29, 0,
    0x10, 0x247d, 0x28, 0x31, 0x30, 0x29, 0,
    0x10, 0x247e, 0x28, 0x31, 0x31, 0x29, 0,
    0x10, 0x247f, 0x28, 0x31, 0x32, 0x29, 0,
    0x10, 0x2480, 0x28, 0x31, 0x33, 0x29, 0,
    0x10, 0x2481, 0x28, 0x31, 0x34, 0x29, 0,
    0x10, 0x2482, 0x28, 0x31, 0x35, 0x29, 0,
    0x10, 0x2483, 0x28, 0x31, 0x36, 0x29, 0,
    0x10, 0x2484, 0x28, 0x31, 0x37, 0x29, 0,
    0x10, 0x2485, 0x28, 0x31, 0x38, 0x29, 0,
    0x10, 0x2486, 0x28, 0x31, 0x39, 0x29, 0,
    0x10, 0x2487, 0x28, 0x32, 0x30, 0x29, 0,
    0x10, 0x2488, 0x31, 0x2e, 0,
    0x10, 0x2489, 0x32, 0x2e, 0,
    0x10, 0x248a, 0x33, 0x2e, 0,
    0x10, 0x248b, 0x34, 0x2e, 0,
    0x10, 0x248c, 0x35, 0x2e, 0,
    0x10, 0x248d, 0x36, 0x2e, 0,
    0x10, 0x248e, 0x37, 0x2e, 0,
    0x10, 0x248f, 0x38, 0x2e, 0,
    0x10, 0x2490, 0x39, 0x2e, 0,
    0x10, 0x2491, 0x31, 0x30, 0x2e, 0,
    0x10, 0x2492, 0x31, 0x31, 0x2e, 0,
    0x10, 0x2493, 0x31, 0x32, 0x2e, 0,
    0x10, 0x2494, 0x31, 0x33, 0x2e, 0,
    0x10, 0x2495, 0x31, 0x34, 0x2e, 0,
    0x10, 0x2496, 0x31, 0x35, 0x2e, 0,
    0x10, 0x2497, 0x31, 0x36, 0x2e, 0,
    0x10, 0x2498, 0x31, 0x37, 0x2e, 0,
    0x10, 0x2499, 0x31, 0x38, 0x2e, 0,
    0x10, 0x249a, 0x31, 0x39, 0x2e, 0,
    0x10, 0x249b, 0x32, 0x30, 0x2e, 0,
    0x10, 0x249c, 0x28, 0x61, 0x29, 0,
    0x10, 0x249d, 0x28, 0x62, 0x29, 0,
    0x10, 0x249e, 0x28, 0x63, 0x29, 0,
    0x10, 0x249f, 0x28, 0x64, 0x29, 0,
    0x10, 0x24a0, 0x28, 0x65, 0x29, 0,
    0x10, 0x24a1, 0x28, 0x66, 0x29, 0,
    0x10, 0x24a2, 0x28, 0x67, 0x29, 0,
    0x10, 0x24a3, 0x28, 0x68, 0x29, 0,
    0x10, 0x24a4, 0x28, 0x69, 0x29, 0,
    0x10, 0x24a5, 0x28, 0x6a, 0x29, 0,
    0x10, 0x24a6, 0x28, 0x6b, 0x29, 0,
    0x10, 0x24a7, 0x28, 0x6c, 0x29, 0,
    0x10, 0x24a8, 0x28, 0x6d, 0x29, 0,
    0x10, 0x24a9, 0x28, 0x6e, 0x29, 0,
    0x10, 0x24aa, 0x28, 0x6f, 0x29, 0,
    0x10, 0x24ab, 0x28, 0x70, 0x29, 0,
    0x10, 0x24ac, 0x28, 0x71, 0x29, 0,
    0x10, 0x24ad, 0x28, 0x72, 0x29, 0,
    0x10, 0x24ae, 0x28, 0x73, 0x29, 0,
    0x10, 0x24af, 0x28, 0x74, 0x29, 0,
    0x10, 0x24b0, 0x28, 0x75, 0x29, 0,
    0x10, 0x24b1, 0x28, 0x76, 0x29, 0,
    0x10, 0x24b2, 0x28, 0x77, 0x29, 0,
    0x10, 0x24b3, 0x28, 0x78, 0x29, 0,
    0x10, 0x24b4, 0x28, 0x79, 0x29, 0,
    0x10, 0x24b5, 0x28, 0x7a, 0x29, 0,
    0x8, 0x24b6, 0x41, 0,
    0x8, 0x24b7, 0x42, 0,
    0x8, 0x24b8, 0x43, 0,
    0x8, 0x24b9, 0x44, 0,
    0x8, 0x24ba, 0x45, 0,
    0x8, 0x24bb, 0x46, 0,
    0x8, 0x24bc, 0x47, 0,
    0x8, 0x24bd, 0x48, 0,
    0x8, 0x24be, 0x49, 0,
    0x8, 0x24bf, 0x4a, 0,
    0x8, 0x24c0, 0x4b, 0,
    0x8, 0x24c1, 0x4c, 0,
    0x8, 0x24c2, 0x4d, 0,
    0x8, 0x24c3, 0x4e, 0,
    0x8, 0x24c4, 0x4f, 0,
    0x8, 0x24c5, 0x50, 0,
    0x8, 0x24c6, 0x51, 0,
    0x8, 0x24c7, 0x52, 0,
    0x8, 0x24c8, 0x53, 0,
    0x8, 0x24c9, 0x54, 0,
    0x8, 0x24ca, 0x55, 0,
    0x8, 0x24cb, 0x56, 0,
    0x8, 0x24cc, 0x57, 0,
    0x8, 0x24cd, 0x58, 0,
    0x8, 0x24ce, 0x59, 0,
    0x8, 0x24cf, 0x5a, 0,
    0x8, 0x24d0, 0x61, 0,
    0x8, 0x24d1, 0x62, 0,
    0x8, 0x24d2, 0x63, 0,
    0x8, 0x24d3, 0x64, 0,
    0x8, 0x24d4, 0x65, 0,
    0x8, 0x24d5, 0x66, 0,
    0x8, 0x24d6, 0x67, 0,
    0x8, 0x24d7, 0x68, 0,
    0x8, 0x24d8, 0x69, 0,
    0x8, 0x24d9, 0x6a, 0,
    0x8, 0x24da, 0x6b, 0,
    0x8, 0x24db, 0x6c, 0,
    0x8, 0x24dc, 0x6d, 0,
    0x8, 0x24dd, 0x6e, 0,
    0x8, 0x24de, 0x6f, 0,
    0x8, 0x24df, 0x70, 0,
    0x8, 0x24e0, 0x71, 0,
    0x8, 0x24e1, 0x72, 0,
    0x8, 0x24e2, 0x73, 0,
    0x8, 0x24e3, 0x74, 0,
    0x8, 0x24e4, 0x75, 0,
    0x8, 0x24e5, 0x76, 0,
    0x8, 0x24e6, 0x77, 0,
    0x8, 0x24e7, 0x78, 0,
    0x8, 0x24e8, 0x79, 0,
    0x8, 0x24e9, 0x7a, 0,
    0x8, 0x24ea, 0x30, 0,
    0xc, 0x3000, 0x20, 0,
    0x10, 0x3036, 0x3012, 0,
    0x1, 0x304c, 0x304b, 0x3099, 0,
    0x1, 0x304e, 0x304d, 0x3099, 0,
    0x1, 0x3050, 0x304f, 0x3099, 0,
    0x1, 0x3052, 0x3051, 0x3099, 0,
    0x1, 0x3054, 0x3053, 0x3099, 0,
    0x1, 0x3056, 0x3055, 0x3099, 0,
    0x1, 0x3058, 0x3057, 0x3099, 0,
    0x1, 0x305a, 0x3059, 0x3099, 0,
    0x1, 0x305c, 0x305b, 0x3099, 0,
    0x1, 0x305e, 0x305d, 0x3099, 0,
    0x1, 0x3060, 0x305f, 0x3099, 0,
    0x1, 0x3062, 0x3061, 0x3099, 0,
    0x1, 0x3065, 0x3064, 0x3099, 0,
    0x1, 0x3067, 0x3066, 0x3099, 0,
    0x1, 0x3069, 0x3068, 0x3099, 0,
    0x1, 0x3070, 0x306f, 0x3099, 0,
    0x1, 0x3071, 0x306f, 0x309a, 0,
    0x1, 0x3073, 0x3072, 0x3099, 0,
    0x1, 0x3074, 0x3072, 0x309a, 0,
    0x1, 0x3076, 0x3075, 0x3099, 0,
    0x1, 0x3077, 0x3075, 0x309a, 0,
    0x1, 0x3079, 0x3078, 0x3099, 0,
    0x1, 0x307a, 0x3078, 0x309a, 0,
    0x1, 0x307c, 0x307b, 0x3099, 0,
    0x1, 0x307d, 0x307b, 0x309a, 0,
    0x1, 0x3094, 0x3046, 0x3099, 0,
    0x10, 0x309b, 0x20, 0x3099, 0,
    0x10, 0x309c, 0x20, 0x309a, 0,
    0x1, 0x309e, 0x309d, 0x3099, 0,
    0x1, 0x30ac, 0x30ab, 0x3099, 0,
    0x1, 0x30ae, 0x30ad, 0x3099, 0,
    0x1, 0x30b0, 0x30af, 0x3099, 0,
    0x1, 0x30b2, 0x30b1, 0x3099, 0,
    0x1, 0x30b4, 0x30b3, 0x3099, 0,
    0x1, 0x30b6, 0x30b5, 0x3099, 0,
    0x1, 0x30b8, 0x30b7, 0x3099, 0,
    0x1, 0x30ba, 0x30b9, 0x3099, 0,
    0x1, 0x30bc, 0x30bb, 0x3099, 0,
    0x1, 0x30be, 0x30bd, 0x3099, 0,
    0x1, 0x30c0, 0x30bf, 0x3099, 0,
    0x1, 0x30c2, 0x30c1, 0x3099, 0,
    0x1, 0x30c5, 0x30c4, 0x3099, 0,
    0x1, 0x30c7, 0x30c6, 0x3099, 0,
    0x1, 0x30c9, 0x30c8, 0x3099, 0,
    0x1, 0x30d0, 0x30cf, 0x3099, 0,
    0x1, 0x30d1, 0x30cf, 0x309a, 0,
    0x1, 0x30d3, 0x30d2, 0x3099, 0,
    0x1, 0x30d4, 0x30d2, 0x309a, 0,
    0x1, 0x30d6, 0x30d5, 0x3099, 0,
    0x1, 0x30d7, 0x30d5, 0x309a, 0,
    0x1, 0x30d9, 0x30d8, 0x3099, 0,
    0x1, 0x30da, 0x30d8, 0x309a, 0,
    0x1, 0x30dc, 0x30db, 0x3099, 0,
    0x1, 0x30dd, 0x30db, 0x309a, 0,
    0x1, 0x30f4, 0x30a6, 0x3099, 0,
    0x1, 0x30f7, 0x30ef, 0x3099, 0,
    0x1, 0x30f8, 0x30f0, 0x3099, 0,
    0x1, 0x30f9, 0x30f1, 0x3099, 0,
    0x1, 0x30fa, 0x30f2, 0x3099, 0,
    0x1, 0x30fe, 0x30fd, 0x3099, 0,
    0x10, 0x3131, 0x1100, 0,
    0x10, 0x3132, 0x1101, 0,
    0x10, 0x3133, 0x11aa, 0,
    0x10, 0x3134, 0x1102, 0,
    0x10, 0x3135, 0x11ac, 0,
    0x10, 0x3136, 0x11ad, 0,
    0x10, 0x3137, 0x1103, 0,
    0x10, 0x3138, 0x1104, 0,
    0x10, 0x3139, 0x1105, 0,
    0x10, 0x313a, 0x11b0, 0,
    0x10, 0x313b, 0x11b1, 0,
    0x10, 0x313c, 0x11b2, 0,
    0x10, 0x313d, 0x11b3, 0,
    0x10, 0x313e, 0x11b4, 0,
    0x10, 0x313f, 0x11b5, 0,
    0x10, 0x3140, 0x111a, 0,
    0x10, 0x3141, 0x1106, 0,
    0x10, 0x3142, 0x1107, 0,
    0x10, 0x3143, 0x1108, 0,
    0x10, 0x3144, 0x1121, 0,
    0x10, 0x3145, 0x1109, 0,
    0x10, 0x3146, 0x110a, 0,
    0x10, 0x3147, 0x110b, 0,
    0x10, 0x3148, 0x110c, 0,
    0x10, 0x3149, 0x110d, 0,
    0x10, 0x314a, 0x110e, 0,
    0x10, 0x314b, 0x110f, 0,
    0x10, 0x314c, 0x1110, 0,
    0x10, 0x314d, 0x1111, 0,
    0x10, 0x314e, 0x1112, 0,
    0x10, 0x314f, 0x1161, 0,
    0x10, 0x3150, 0x1162, 0,
    0x10, 0x3151, 0x1163, 0,
    0x10, 0x3152, 0x1164, 0,
    0x10, 0x3153, 0x1165, 0,
    0x10, 0x3154, 0x1166, 0,
    0x10, 0x3155, 0x1167, 0,
    0x10, 0x3156, 0x1168, 0,
    0x10, 0x3157, 0x1169, 0,
    0x10, 0x3158, 0x116a, 0,
    0x10, 0x3159, 0x116b, 0,
    0x10, 0x315a, 0x116c, 0,
    0x10, 0x315b, 0x116d, 0,
    0x10, 0x315c, 0x116e, 0,
    0x10, 0x315d, 0x116f, 0,
    0x10, 0x315e, 0x1170, 0,
    0x10, 0x315f, 0x1171, 0,
    0x10, 0x3160, 0x1172, 0,
    0x10, 0x3161, 0x1173, 0,
    0x10, 0x3162, 0x1174, 0,
    0x10, 0x3163, 0x1175, 0,
    0x10, 0x3164, 0x1160, 0,
    0x10, 0x3165, 0x1114, 0,
    0x10, 0x3166, 0x1115, 0,
    0x10, 0x3167, 0x11c7, 0,
    0x10, 0x3168, 0x11c8, 0,
    0x10, 0x3169, 0x11cc, 0,
    0x10, 0x316a, 0x11ce, 0,
    0x10, 0x316b, 0x11d3, 0,
    0x10, 0x316c, 0x11d7, 0,
    0x10, 0x316d, 0x11d9, 0,
    0x10, 0x316e, 0x111c, 0,
    0x10, 0x316f, 0x11dd, 0,
    0x10, 0x3170, 0x11df, 0,
    0x10, 0x3171, 0x111d, 0,
    0x10, 0x3172, 0x111e, 0,
    0x10, 0x3173, 0x1120, 0,
    0x10, 0x3174, 0x1122, 0,
    0x10, 0x3175, 0x1123, 0,
    0x10, 0x3176, 0x1127, 0,
    0x10, 0x3177, 0x1129, 0,
    0x10, 0x3178, 0x112b, 0,
    0x10, 0x3179, 0x112c, 0,
    0x10, 0x317a, 0x112d, 0,
    0x10, 0x317b, 0x112e, 0,
    0x10, 0x317c, 0x112f, 0,
    0x10, 0x317d, 0x1132, 0,
    0x10, 0x317e, 0x1136, 0,
    0x10, 0x317f, 0x1140, 0,
    0x10, 0x3180, 0x1147, 0,
    0x10, 0x3181, 0x114c, 0,
    0x10, 0x3182, 0x11f1, 0,
    0x10, 0x3183, 0x11f2, 0,
    0x10, 0x3184, 0x1157, 0,
    0x10, 0x3185, 0x1158, 0,
    0x10, 0x3186, 0x1159, 0,
    0x10, 0x3187, 0x1184, 0,
    0x10, 0x3188, 0x1185, 0,
    0x10, 0x3189, 0x1188, 0,
    0x10, 0x318a, 0x1191, 0,
    0x10, 0x318b, 0x1192, 0,
    0x10, 0x318c, 0x1194, 0,
    0x10, 0x318d, 0x119e, 0,
    0x10, 0x318e, 0x11a1, 0,
    0x9, 0x3192, 0x4e00, 0,
    0x9, 0x3193, 0x4e8c, 0,
    0x9, 0x3194, 0x4e09, 0,
    0x9, 0x3195, 0x56db, 0,
    0x9, 0x3196, 0x4e0a, 0,
    0x9, 0x3197, 0x4e2d, 0,
    0x9, 0x3198, 0x4e0b, 0,
    0x9, 0x3199, 0x7532, 0,
    0x9, 0x319a, 0x4e59, 0,
    0x9, 0x319b, 0x4e19, 0,
    0x9, 0x319c, 0x4e01, 0,
    0x9, 0x319d, 0x5929, 0,
    0x9, 0x319e, 0x5730, 0,
    0x9, 0x319f, 0x4eba, 0,
    0x10, 0x3200, 0x28, 0x1100, 0x29, 0,
    0x10, 0x3201, 0x28, 0x1102, 0x29, 0,
    0x10, 0x3202, 0x28, 0x1103, 0x29, 0,
    0x10, 0x3203, 0x28, 0x1105, 0x29, 0,
    0x10, 0x3204, 0x28, 0x1106, 0x29, 0,
    0x10, 0x3205, 0x28, 0x1107, 0x29, 0,
    0x10, 0x3206, 0x28, 0x1109, 0x29, 0,
    0x10, 0x3207, 0x28, 0x110b, 0x29, 0,
    0x10, 0x3208, 0x28, 0x110c, 0x29, 0,
    0x10, 0x3209, 0x28, 0x110e, 0x29, 0,
    0x10, 0x320a, 0x28, 0x110f, 0x29, 0,
    0x10, 0x320b, 0x28, 0x1110, 0x29, 0,
    0x10, 0x320c, 0x28, 0x1111, 0x29, 0,
    0x10, 0x320d, 0x28, 0x1112, 0x29, 0,
    0x10, 0x320e, 0x28, 0x1100, 0x1161, 0x29, 0,
    0x10, 0x320f, 0x28, 0x1102, 0x1161, 0x29, 0,
    0x10, 0x3210, 0x28, 0x1103, 0x1161, 0x29, 0,
    0x10, 0x3211, 0x28, 0x1105, 0x1161, 0x29, 0,
    0x10, 0x3212, 0x28, 0x1106, 0x1161, 0x29, 0,
    0x10, 0x3213, 0x28, 0x1107, 0x1161, 0x29, 0,
    0x10, 0x3214, 0x28, 0x1109, 0x1161, 0x29, 0,
    0x10, 0x3215, 0x28, 0x110b, 0x1161, 0x29, 0,
    0x10, 0x3216, 0x28, 0x110c, 0x1161, 0x29, 0,
    0x10, 0x3217, 0x28, 0x110e, 0x1161, 0x29, 0,
    0x10, 0x3218, 0x28, 0x110f, 0x1161, 0x29, 0,
    0x10, 0x3219, 0x28, 0x1110, 0x1161, 0x29, 0,
    0x10, 0x321a, 0x28, 0x1111, 0x1161, 0x29, 0,
    0x10, 0x321b, 0x28, 0x1112, 0x1161, 0x29, 0,
    0x10, 0x321c, 0x28, 0x110c, 0x116e, 0x29, 0,
    0x10, 0x3220, 0x28, 0x4e00, 0x29, 0,
    0x10, 0x3221, 0x28, 0x4e8c, 0x29, 0,
    0x10, 0x3222, 0x28, 0x4e09, 0x29, 0,
    0x10, 0x3223, 0x28, 0x56db, 0x29, 0,
    0x10, 0x3224, 0x28, 0x4e94, 0x29, 0,
    0x10, 0x3225, 0x28, 0x516d, 0x29, 0,
    0x10, 0x3226, 0x28, 0x4e03, 0x29, 0,
    0x10, 0x3227, 0x28, 0x516b, 0x29, 0,
    0x10, 0x3228, 0x28, 0x4e5d, 0x29, 0,
    0x10, 0x3229, 0x28, 0x5341, 0x29, 0,
    0x10, 0x322a, 0x28, 0x6708, 0x29, 0,
    0x10, 0x322b, 0x28, 0x706b, 0x29, 0,
    0x10, 0x322c, 0x28, 0x6c34, 0x29, 0,
    0x10, 0x322d, 0x28, 0x6728, 0x29, 0,
    0x10, 0x322e, 0x28, 0x91d1, 0x29, 0,
    0x10, 0x322f, 0x28, 0x571f, 0x29, 0,
    0x10, 0x3230, 0x28, 0x65e5, 0x29, 0,
    0x10, 0x3231, 0x28, 0x682a, 0x29, 0,
    0x10, 0x3232, 0x28, 0x6709, 0x29, 0,
    0x10, 0x3233, 0x28, 0x793e, 0x29, 0,
    0x10, 0x3234, 0x28, 0x540d, 0x29, 0,
    0x10, 0x3235, 0x28, 0x7279, 0x29, 0,
    0x10, 0x3236, 0x28, 0x8ca1, 0x29, 0,
    0x10, 0x3237, 0x28, 0x795d, 0x29, 0,
    0x10, 0x3238, 0x28, 0x52b4, 0x29, 0,
    0x10, 0x3239, 0x28, 0x4ee3, 0x29, 0,
    0x10, 0x323a, 0x28, 0x547c, 0x29, 0,
    0x10, 0x323b, 0x28, 0x5b66, 0x29, 0,
    0x10, 0x323c, 0x28, 0x76e3, 0x29, 0,
    0x10, 0x323d, 0x28, 0x4f01, 0x29, 0,
    0x10, 0x323e, 0x28, 0x8cc7, 0x29, 0,
    0x10, 0x323f, 0x28, 0x5354, 0x29, 0,
    0x10, 0x3240, 0x28, 0x796d, 0x29, 0,
    0x10, 0x3241, 0x28, 0x4f11, 0x29, 0,
    0x10, 0x3242, 0x28, 0x81ea, 0x29, 0,
    0x10, 0x3243, 0x28, 0x81f3, 0x29, 0,
    0x8, 0x3260, 0x1100, 0,
    0x8, 0x3261, 0x1102, 0,
    0x8, 0x3262, 0x1103, 0,
    0x8, 0x3263, 0x1105, 0,
    0x8, 0x3264, 0x1106, 0,
    0x8, 0x3265, 0x1107, 0,
    0x8, 0x3266, 0x1109, 0,
    0x8, 0x3267, 0x110b, 0,
    0x8, 0x3268, 0x110c, 0,
    0x8, 0x3269, 0x110e, 0,
    0x8, 0x326a, 0x110f, 0,
    0x8, 0x326b, 0x1110, 0,
    0x8, 0x326c, 0x1111, 0,
    0x8, 0x326d, 0x1112, 0,
    0x8, 0x326e, 0x1100, 0x1161, 0,
    0x8, 0x326f, 0x1102, 0x1161, 0,
    0x8, 0x3270, 0x1103, 0x1161, 0,
    0x8, 0x3271, 0x1105, 0x1161, 0,
    0x8, 0x3272, 0x1106, 0x1161, 0,
    0x8, 0x3273, 0x1107, 0x1161, 0,
    0x8, 0x3274, 0x1109, 0x1161, 0,
    0x8, 0x3275, 0x110b, 0x1161, 0,
    0x8, 0x3276, 0x110c, 0x1161, 0,
    0x8, 0x3277, 0x110e, 0x1161, 0,
    0x8, 0x3278, 0x110f, 0x1161, 0,
    0x8, 0x3279, 0x1110, 0x1161, 0,
    0x8, 0x327a, 0x1111, 0x1161, 0,
    0x8, 0x327b, 0x1112, 0x1161, 0,
    0x8, 0x3280, 0x4e00, 0,
    0x8, 0x3281, 0x4e8c, 0,
    0x8, 0x3282, 0x4e09, 0,
    0x8, 0x3283, 0x56db, 0,
    0x8, 0x3284, 0x4e94, 0,
    0x8, 0x3285, 0x516d, 0,
    0x8, 0x3286, 0x4e03, 0,
    0x8, 0x3287, 0x516b, 0,
    0x8, 0x3288, 0x4e5d, 0,
    0x8, 0x3289, 0x5341, 0,
    0x8, 0x328a, 0x6708, 0,
    0x8, 0x328b, 0x706b, 0,
    0x8, 0x328c, 0x6c34, 0,
    0x8, 0x328d, 0x6728, 0,
    0x8, 0x328e, 0x91d1, 0,
    0x8, 0x328f, 0x571f, 0,
    0x8, 0x3290, 0x65e5, 0,
    0x8, 0x3291, 0x682a, 0,
    0x8, 0x3292, 0x6709, 0,
    0x8, 0x3293, 0x793e, 0,
    0x8, 0x3294, 0x540d, 0,
    0x8, 0x3295, 0x7279, 0,
    0x8, 0x3296, 0x8ca1, 0,
    0x8, 0x3297, 0x795d, 0,
    0x8, 0x3298, 0x52b4, 0,
    0x8, 0x3299, 0x79d8, 0,
    0x8, 0x329a, 0x7537, 0,
    0x8, 0x329b, 0x5973, 0,
    0x8, 0x329c, 0x9069, 0,
    0x8, 0x329d, 0x512a, 0,
    0x8, 0x329e, 0x5370, 0,
    0x8, 0x329f, 0x6ce8, 0,
    0x8, 0x32a0, 0x9805, 0,
    0x8, 0x32a1, 0x4f11, 0,
    0x8, 0x32a2, 0x5199, 0,
    0x8, 0x32a3, 0x6b63, 0,
    0x8, 0x32a4, 0x4e0a, 0,
    0x8, 0x32a5, 0x4e2d, 0,
    0x8, 0x32a6, 0x4e0b, 0,
    0x8, 0x32a7, 0x5de6, 0,
    0x8, 0x32a8, 0x53f3, 0,
    0x8, 0x32a9, 0x533b, 0,
    0x8, 0x32aa, 0x5b97, 0,
    0x8, 0x32ab, 0x5b66, 0,
    0x8, 0x32ac, 0x76e3, 0,
    0x8, 0x32ad, 0x4f01, 0,
    0x8, 0x32ae, 0x8cc7, 0,
    0x8, 0x32af, 0x5354, 0,
    0x8, 0x32b0, 0x591c, 0,
    0x10, 0x32c0, 0x31, 0x6708, 0,
    0x10, 0x32c1, 0x32, 0x6708, 0,
    0x10, 0x32c2, 0x33, 0x6708, 0,
    0x10, 0x32c3, 0x34, 0x6708, 0,
    0x10, 0x32c4, 0x35, 0x6708, 0,
    0x10, 0x32c5, 0x36, 0x6708, 0,
    0x10, 0x32c6, 0x37, 0x6708, 0,
    0x10, 0x32c7, 0x38, 0x6708, 0,
    0x10, 0x32c8, 0x39, 0x6708, 0,
    0x10, 0x32c9, 0x31, 0x30, 0x6708, 0,
    0x10, 0x32ca, 0x31, 0x31, 0x6708, 0,
    0x10, 0x32cb, 0x31, 0x32, 0x6708, 0,
    0x8, 0x32d0, 0x30a2, 0,
    0x8, 0x32d1, 0x30a4, 0,
    0x8, 0x32d2, 0x30a6, 0,
    0x8, 0x32d3, 0x30a8, 0,
    0x8, 0x32d4, 0x30aa, 0,
    0x8, 0x32d5, 0x30ab, 0,
    0x8, 0x32d6, 0x30ad, 0,
    0x8, 0x32d7, 0x30af, 0,
    0x8, 0x32d8, 0x30b1, 0,
    0x8, 0x32d9, 0x30b3, 0,
    0x8, 0x32da, 0x30b5, 0,
    0x8, 0x32db, 0x30b7, 0,
    0x8, 0x32dc, 0x30b9, 0,
    0x8, 0x32dd, 0x30bb, 0,
    0x8, 0x32de, 0x30bd, 0,
    0x8, 0x32df, 0x30bf, 0,
    0x8, 0x32e0, 0x30c1, 0,
    0x8, 0x32e1, 0x30c4, 0,
    0x8, 0x32e2, 0x30c6, 0,
    0x8, 0x32e3, 0x30c8, 0,
    0x8, 0x32e4, 0x30ca, 0,
    0x8, 0x32e5, 0x30cb, 0,
    0x8, 0x32e6, 0x30cc, 0,
    0x8, 0x32e7, 0x30cd, 0,
    0x8, 0x32e8, 0x30ce, 0,
    0x8, 0x32e9, 0x30cf, 0,
    0x8, 0x32ea, 0x30d2, 0,
    0x8, 0x32eb, 0x30d5, 0,
    0x8, 0x32ec, 0x30d8, 0,
    0x8, 0x32ed, 0x30db, 0,
    0x8, 0x32ee, 0x30de, 0,
    0x8, 0x32ef, 0x30df, 0,
    0x8, 0x32f0, 0x30e0, 0,
    0x8, 0x32f1, 0x30e1, 0,
    0x8, 0x32f2, 0x30e2, 0,
    0x8, 0x32f3, 0x30e4, 0,
    0x8, 0x32f4, 0x30e6, 0,
    0x8, 0x32f5, 0x30e8, 0,
    0x8, 0x32f6, 0x30e9, 0,
    0x8, 0x32f7, 0x30ea, 0,
    0x8, 0x32f8, 0x30eb, 0,
    0x8, 0x32f9, 0x30ec, 0,
    0x8, 0x32fa, 0x30ed, 0,
    0x8, 0x32fb, 0x30ef, 0,
    0x8, 0x32fc, 0x30f0, 0,
    0x8, 0x32fd, 0x30f1, 0,
    0x8, 0x32fe, 0x30f2, 0,
    0xf, 0x3300, 0x30a2, 0x30d1, 0x30fc, 0x30c8, 0,
    0xf, 0x3301, 0x30a2, 0x30eb, 0x30d5, 0x30a1, 0,
    0xf, 0x3302, 0x30a2, 0x30f3, 0x30da, 0x30a2, 0,
    0xf, 0x3303, 0x30a2, 0x30fc, 0x30eb, 0,
    0xf, 0x3304, 0x30a4, 0x30cb, 0x30f3, 0x30b0, 0,
    0xf, 0x3305, 0x30a4, 0x30f3, 0x30c1, 0,
    0xf, 0x3306, 0x30a6, 0x30a9, 0x30f3, 0,
    0xf, 0x3307, 0x30a8, 0x30b9, 0x30af, 0x30fc, 0x30c9, 0,
    0xf, 0x3308, 0x30a8, 0x30fc, 0x30ab, 0x30fc, 0,
    0xf, 0x3309, 0x30aa, 0x30f3, 0x30b9, 0,
    0xf, 0x330a, 0x30aa, 0x30fc, 0x30e0, 0,
    0xf, 0x330b, 0x30ab, 0x30a4, 0x30ea, 0,
    0xf, 0x330c, 0x30ab, 0x30e9, 0x30c3, 0x30c8, 0,
    0xf, 0x330d, 0x30ab, 0x30ed, 0x30ea, 0x30fc, 0,
    0xf, 0x330e, 0x30ac, 0x30ed, 0x30f3, 0,
    0xf, 0x330f, 0x30ac, 0x30f3, 0x30de, 0,
    0xf, 0x3310, 0x30ae, 0x30ac, 0,
    0xf, 0x3311, 0x30ae, 0x30cb, 0x30fc, 0,
    0xf, 0x3312, 0x30ad, 0x30e5, 0x30ea, 0x30fc, 0,
    0xf, 0x3313, 0x30ae, 0x30eb, 0x30c0, 0x30fc, 0,
    0xf, 0x3314, 0x30ad, 0x30ed, 0,
    0xf, 0x3315, 0x30ad, 0x30ed, 0x30b0, 0x30e9, 0x30e0, 0,
    0xf, 0x3316, 0x30ad, 0x30ed, 0x30e1, 0x30fc, 0x30c8, 0x30eb, 0,
    0xf, 0x3317, 0x30ad, 0x30ed, 0x30ef, 0x30c3, 0x30c8, 0,
    0xf, 0x3318, 0x30b0, 0x30e9, 0x30e0, 0,
    0xf, 0x3319, 0x30b0, 0x30e9, 0x30e0, 0x30c8, 0x30f3, 0,
    0xf, 0x331a, 0x30af, 0x30eb, 0x30bc, 0x30a4, 0x30ed, 0,
    0xf, 0x331b, 0x30af, 0x30ed, 0x30fc, 0x30cd, 0,
    0xf, 0x331c, 0x30b1, 0x30fc, 0x30b9, 0,
    0xf, 0x331d, 0x30b3, 0x30eb, 0x30ca, 0,
    0xf, 0x331e, 0x30b3, 0x30fc, 0x30dd, 0,
    0xf, 0x331f, 0x30b5, 0x30a4, 0x30af, 0x30eb, 0,
    0xf, 0x3320, 0x30b5, 0x30f3, 0x30c1, 0x30fc, 0x30e0, 0,
    0xf, 0x3321, 0x30b7, 0x30ea, 0x30f3, 0x30b0, 0,
    0xf, 0x3322, 0x30bb, 0x30f3, 0x30c1, 0,
    0xf, 0x3323, 0x30bb, 0x30f3, 0x30c8, 0,
    0xf, 0x3324, 0x30c0, 0x30fc, 0x30b9, 0,
    0xf, 0x3325, 0x30c7, 0x30b7, 0,
    0xf, 0x3326, 0x30c9, 0x30eb, 0,
    0xf, 0x3327, 0x30c8, 0x30f3, 0,
    0xf, 0x3328, 0x30ca, 0x30ce, 0,
    0xf, 0x3329, 0x30ce, 0x30c3, 0x30c8, 0,
    0xf, 0x332a, 0x30cf, 0x30a4, 0x30c4, 0,
    0xf, 0x332b, 0x30d1, 0x30fc, 0x30bb, 0x30f3, 0x30c8, 0,
    0xf, 0x332c, 0x30d1, 0x30fc, 0x30c4, 0,
    0xf, 0x332d, 0x30d0, 0x30fc, 0x30ec, 0x30eb, 0,
    0xf, 0x332e, 0x30d4, 0x30a2, 0x30b9, 0x30c8, 0x30eb, 0,
    0xf, 0x332f, 0x30d4, 0x30af, 0x30eb, 0,
    0xf, 0x3330, 0x30d4, 0x30b3, 0,
    0xf, 0x3331, 0x30d3, 0x30eb, 0,
    0xf, 0x3332, 0x30d5, 0x30a1, 0x30e9, 0x30c3, 0x30c9, 0,
    0xf, 0x3333, 0x30d5, 0x30a3, 0x30fc, 0x30c8, 0,
    0xf, 0x3334, 0x30d6, 0x30c3, 0x30b7, 0x30a7, 0x30eb, 0,
    0xf, 0x3335, 0x30d5, 0x30e9, 0x30f3, 0,
    0xf, 0x3336, 0x30d8, 0x30af, 0x30bf, 0x30fc, 0x30eb, 0,
    0xf, 0x3337, 0x30da, 0x30bd, 0,
    0xf, 0x3338, 0x30da, 0x30cb, 0x30d2, 0,
    0xf, 0x3339, 0x30d8, 0x30eb, 0x30c4, 0,
    0xf, 0x333a, 0x30da, 0x30f3, 0x30b9, 0,
    0xf, 0x333b, 0x30da, 0x30fc, 0x30b8, 0,
    0xf, 0x333c, 0x30d9, 0x30fc, 0x30bf, 0,
    0xf, 0x333d, 0x30dd, 0x30a4, 0x30f3, 0x30c8, 0,
    0xf, 0x333e, 0x30dc, 0x30eb, 0x30c8, 0,
    0xf, 0x333f, 0x30db, 0x30f3, 0,
    0xf, 0x3340, 0x30dd, 0x30f3, 0x30c9, 0,
    0xf, 0x3341, 0x30db, 0x30fc, 0x30eb, 0,
    0xf, 0x3342, 0x30db, 0x30fc, 0x30f3, 0,
    0xf, 0x3343, 0x30de, 0x30a4, 0x30af, 0x30ed, 0,
    0xf, 0x3344, 0x30de, 0x30a4, 0x30eb, 0,
    0xf, 0x3345, 0x30de, 0x30c3, 0x30cf, 0,
    0xf, 0x3346, 0x30de, 0x30eb, 0x30af, 0,
    0xf, 0x3347, 0x30de, 0x30f3, 0x30b7, 0x30e7, 0x30f3, 0,
    0xf, 0x3348, 0x30df, 0x30af, 0x30ed, 0x30f3, 0,
    0xf, 0x3349, 0x30df, 0x30ea, 0,
    0xf, 0x334a, 0x30df, 0x30ea, 0x30d0, 0x30fc, 0x30eb, 0,
    0xf, 0x334b, 0x30e1, 0x30ac, 0,
    0xf, 0x334c, 0x30e1, 0x30ac, 0x30c8, 0x30f3, 0,
    0xf, 0x334d, 0x30e1, 0x30fc, 0x30c8, 0x30eb, 0,
    0xf, 0x334e, 0x30e4, 0x30fc, 0x30c9, 0,
    0xf, 0x334f, 0x30e4, 0x30fc, 0x30eb, 0,
    0xf, 0x3350, 0x30e6, 0x30a2, 0x30f3, 0,
    0xf, 0x3351, 0x30ea, 0x30c3, 0x30c8, 0x30eb, 0,
    0xf, 0x3352, 0x30ea, 0x30e9, 0,
    0xf, 0x3353, 0x30eb, 0x30d4, 0x30fc, 0,
    0xf, 0x3354, 0x30eb, 0x30fc, 0x30d6, 0x30eb, 0,
    0xf, 0x3355, 0x30ec, 0x30e0, 0,
    0xf, 0x3356, 0x30ec, 0x30f3, 0x30c8, 0x30b2, 0x30f3, 0,
    0xf, 0x3357, 0x30ef, 0x30c3, 0x30c8, 0,
    0x10, 0x3358, 0x30, 0x70b9, 0,
    0x10, 0x3359, 0x31, 0x70b9, 0,
    0x10, 0x335a, 0x32, 0x70b9, 0,
    0x10, 0x335b, 0x33, 0x70b9, 0,
    0x10, 0x335c, 0x34, 0x70b9, 0,
    0x10, 0x335d, 0x35, 0x70b9, 0,
    0x10, 0x335e, 0x36, 0x70b9, 0,
    0x10, 0x335f, 0x37, 0x70b9, 0,
    0x10, 0x3360, 0x38, 0x70b9, 0,
    0x10, 0x3361, 0x39, 0x70b9, 0,
    0x10, 0x3362, 0x31, 0x30, 0x70b9, 0,
    0x10, 0x3363, 0x31, 0x31, 0x70b9, 0,
    0x10, 0x3364, 0x31, 0x32, 0x70b9, 0,
    0x10, 0x3365, 0x31, 0x33, 0x70b9, 0,
    0x10, 0x3366, 0x31, 0x34, 0x70b9, 0,
    0x10, 0x3367, 0x31, 0x35, 0x70b9, 0,
    0x10, 0x3368, 0x31, 0x36, 0x70b9, 0,
    0x10, 0x3369, 0x31, 0x37, 0x70b9, 0,
    0x10, 0x336a, 0x31, 0x38, 0x70b9, 0,
    0x10, 0x336b, 0x31, 0x39, 0x70b9, 0,
    0x10, 0x336c, 0x32, 0x30, 0x70b9, 0,
    0x10, 0x336d, 0x32, 0x31, 0x70b9, 0,
    0x10, 0x336e, 0x32, 0x32, 0x70b9, 0,
    0x10, 0x336f, 0x32, 0x33, 0x70b9, 0,
    0x10, 0x3370, 0x32, 0x34, 0x70b9, 0,
    0xf, 0x3371, 0x68, 0x50, 0x61, 0,
    0xf, 0x3372, 0x64, 0x61, 0,
    0xf, 0x3373, 0x41, 0x55, 0,
    0xf, 0x3374, 0x62, 0x61, 0x72, 0,
    0xf, 0x3375, 0x6f, 0x56, 0,
    0xf, 0x3376, 0x70, 0x63, 0,
    0xf, 0x337b, 0x5e73, 0x6210, 0,
    0xf, 0x337c, 0x662d, 0x548c, 0,
    0xf, 0x337d, 0x5927, 0x6b63, 0,
    0xf, 0x337e, 0x660e, 0x6cbb, 0,
    0xf, 0x337f, 0x682a, 0x5f0f, 0x4f1a, 0x793e, 0,
    0xf, 0x3380, 0x70, 0x41, 0,
    0xf, 0x3381, 0x6e, 0x41, 0,
    0xf, 0x3382, 0x3bc, 0x41, 0,
    0xf, 0x3383, 0x6d, 0x41, 0,
    0xf, 0x3384, 0x6b, 0x41, 0,
    0xf, 0x3385, 0x4b, 0x42, 0,
    0xf, 0x3386, 0x4d, 0x42, 0,
    0xf, 0x3387, 0x47, 0x42, 0,
    0xf, 0x3388, 0x63, 0x61, 0x6c, 0,
    0xf, 0x3389, 0x6b, 0x63, 0x61, 0x6c, 0,
    0xf, 0x338a, 0x70, 0x46, 0,
    0xf, 0x338b, 0x6e, 0x46, 0,
    0xf, 0x338c, 0x3bc, 0x46, 0,
    0xf, 0x338d, 0x3bc, 0x67, 0,
    0xf, 0x338e, 0x6d, 0x67, 0,
    0xf, 0x338f, 0x6b, 0x67, 0,
    0xf, 0x3390, 0x48, 0x7a, 0,
    0xf, 0x3391, 0x6b, 0x48, 0x7a, 0,
    0xf, 0x3392, 0x4d, 0x48, 0x7a, 0,
    0xf, 0x3393, 0x47, 0x48, 0x7a, 0,
    0xf, 0x3394, 0x54, 0x48, 0x7a, 0,
    0xf, 0x3395, 0x3bc, 0x2113, 0,
    0xf, 0x3396, 0x6d, 0x2113, 0,
    0xf, 0x3397, 0x64, 0x2113, 0,
    0xf, 0x3398, 0x6b, 0x2113, 0,
    0xf, 0x3399, 0x66, 0x6d, 0,
    0xf, 0x339a, 0x6e, 0x6d, 0,
    0xf, 0x339b, 0x3bc, 0x6d, 0,
    0xf, 0x339c, 0x6d, 0x6d, 0,
    0xf, 0x339d, 0x63, 0x6d, 0,
    0xf, 0x339e, 0x6b, 0x6d, 0,
    0xf, 0x339f, 0x6d, 0x6d, 0xb2, 0,
    0xf, 0x33a0, 0x63, 0x6d, 0xb2, 0,
    0xf, 0x33a1, 0x6d, 0xb2, 0,
    0xf, 0x33a2, 0x6b, 0x6d, 0xb2, 0,
    0xf, 0x33a3, 0x6d, 0x6d, 0xb3, 0,
    0xf, 0x33a4, 0x63, 0x6d, 0xb3, 0,
    0xf, 0x33a5, 0x6d, 0xb3, 0,
    0xf, 0x33a6, 0x6b, 0x6d, 0xb3, 0,
    0xf, 0x33a7, 0x6d, 0x2215, 0x73, 0,
    0xf, 0x33a8, 0x6d, 0x2215, 0x73, 0xb2, 0,
    0xf, 0x33a9, 0x50, 0x61, 0,
    0xf, 0x33aa, 0x6b, 0x50, 0x61, 0,
    0xf, 0x33ab, 0x4d, 0x50, 0x61, 0,
    0xf, 0x33ac, 0x47, 0x50, 0x61, 0,
    0xf, 0x33ad, 0x72, 0x61, 0x64, 0,
    0xf, 0x33ae, 0x72, 0x61, 0x64, 0x2215, 0x73, 0,
    0xf, 0x33af, 0x72, 0x61, 0x64, 0x2215, 0x73, 0xb2, 0,
    0xf, 0x33b0, 0x70, 0x73, 0,
    0xf, 0x33b1, 0x6e, 0x73, 0,
    0xf, 0x33b2, 0x3bc, 0x73, 0,
    0xf, 0x33b3, 0x6d, 0x73, 0,
    0xf, 0x33b4, 0x70, 0x56, 0,
    0xf, 0x33b5, 0x6e, 0x56, 0,
    0xf, 0x33b6, 0x3bc, 0x56, 0,
    0xf, 0x33b7, 0x6d, 0x56, 0,
    0xf, 0x33b8, 0x6b, 0x56, 0,
    0xf, 0x33b9, 0x4d, 0x56, 0,
    0xf, 0x33ba, 0x70, 0x57, 0,
    0xf, 0x33bb, 0x6e, 0x57, 0,
    0xf, 0x33bc, 0x3bc, 0x57, 0,
    0xf, 0x33bd, 0x6d, 0x57, 0,
    0xf, 0x33be, 0x6b, 0x57, 0,
    0xf, 0x33bf, 0x4d, 0x57, 0,
    0xf, 0x33c0, 0x6b, 0x3a9, 0,
    0xf, 0x33c1, 0x4d, 0x3a9, 0,
    0xf, 0x33c2, 0x61, 0x2e, 0x6d, 0x2e, 0,
    0xf, 0x33c3, 0x42, 0x71, 0,
    0xf, 0x33c4, 0x63, 0x63, 0,
    0xf, 0x33c5, 0x63, 0x64, 0,
    0xf, 0x33c6, 0x43, 0x2215, 0x6b, 0x67, 0,
    0xf, 0x33c7, 0x43, 0x6f, 0x2e, 0,
    0xf, 0x33c8, 0x64, 0x42, 0,
    0xf, 0x33c9, 0x47, 0x79, 0,
    0xf, 0x33ca, 0x68, 0x61, 0,
    0xf, 0x33cb, 0x48, 0x50, 0,
    0xf, 0x33cc, 0x69, 0x6e, 0,
    0xf, 0x33cd, 0x4b, 0x4b, 0,
    0xf, 0x33ce, 0x4b, 0x4d, 0,
    0xf, 0x33cf, 0x6b, 0x74, 0,
    0xf, 0x33d0, 0x6c, 0x6d, 0,
    0xf, 0x33d1, 0x6c, 0x6e, 0,
    0xf, 0x33d2, 0x6c, 0x6f, 0x67, 0,
    0xf, 0x33d3, 0x6c, 0x78, 0,
    0xf, 0x33d4, 0x6d, 0x62, 0,
    0xf, 0x33d5, 0x6d, 0x69, 0x6c, 0,
    0xf, 0x33d6, 0x6d, 0x6f, 0x6c, 0,
    0xf, 0x33d7, 0x50, 0x48, 0,
    0xf, 0x33d8, 0x70, 0x2e, 0x6d, 0x2e, 0,
    0xf, 0x33d9, 0x50, 0x50, 0x4d, 0,
    0xf, 0x33da, 0x50, 0x52, 0,
    0xf, 0x33db, 0x73, 0x72, 0,
    0xf, 0x33dc, 0x53, 0x76, 0,
    0xf, 0x33dd, 0x57, 0x62, 0,
    0x10, 0x33e0, 0x31, 0x65e5, 0,
    0x10, 0x33e1, 0x32, 0x65e5, 0,
    0x10, 0x33e2, 0x33, 0x65e5, 0,
    0x10, 0x33e3, 0x34, 0x65e5, 0,
    0x10, 0x33e4, 0x35, 0x65e5, 0,
    0x10, 0x33e5, 0x36, 0x65e5, 0,
    0x10, 0x33e6, 0x37, 0x65e5, 0,
    0x10, 0x33e7, 0x38, 0x65e5, 0,
    0x10, 0x33e8, 0x39, 0x65e5, 0,
    0x10, 0x33e9, 0x31, 0x30, 0x65e5, 0,
    0x10, 0x33ea, 0x31, 0x31, 0x65e5, 0,
    0x10, 0x33eb, 0x31, 0x32, 0x65e5, 0,
    0x10, 0x33ec, 0x31, 0x33, 0x65e5, 0,
    0x10, 0x33ed, 0x31, 0x34, 0x65e5, 0,
    0x10, 0x33ee, 0x31, 0x35, 0x65e5, 0,
    0x10, 0x33ef, 0x31, 0x36, 0x65e5, 0,
    0x10, 0x33f0, 0x31, 0x37, 0x65e5, 0,
    0x10, 0x33f1, 0x31, 0x38, 0x65e5, 0,
    0x10, 0x33f2, 0x31, 0x39, 0x65e5, 0,
    0x10, 0x33f3, 0x32, 0x30, 0x65e5, 0,
    0x10, 0x33f4, 0x32, 0x31, 0x65e5, 0,
    0x10, 0x33f5, 0x32, 0x32, 0x65e5, 0,
    0x10, 0x33f6, 0x32, 0x33, 0x65e5, 0,
    0x10, 0x33f7, 0x32, 0x34, 0x65e5, 0,
    0x10, 0x33f8, 0x32, 0x35, 0x65e5, 0,
    0x10, 0x33f9, 0x32, 0x36, 0x65e5, 0,
    0x10, 0x33fa, 0x32, 0x37, 0x65e5, 0,
    0x10, 0x33fb, 0x32, 0x38, 0x65e5, 0,
    0x10, 0x33fc, 0x32, 0x39, 0x65e5, 0,
    0x10, 0x33fd, 0x33, 0x30, 0x65e5, 0,
    0x10, 0x33fe, 0x33, 0x31, 0x65e5, 0,
    0x1, 0xf900, 0x8c48, 0,
    0x1, 0xf901, 0x66f4, 0,
    0x1, 0xf902, 0x8eca, 0,
    0x1, 0xf903, 0x8cc8, 0,
    0x1, 0xf904, 0x6ed1, 0,
    0x1, 0xf905, 0x4e32, 0,
    0x1, 0xf906, 0x53e5, 0,
    0x1, 0xf907, 0x9f9c, 0,
    0x1, 0xf908, 0x9f9c, 0,
    0x1, 0xf909, 0x5951, 0,
    0x1, 0xf90a, 0x91d1, 0,
    0x1, 0xf90b, 0x5587, 0,
    0x1, 0xf90c, 0x5948, 0,
    0x1, 0xf90d, 0x61f6, 0,
    0x1, 0xf90e, 0x7669, 0,
    0x1, 0xf90f, 0x7f85, 0,
    0x1, 0xf910, 0x863f, 0,
    0x1, 0xf911, 0x87ba, 0,
    0x1, 0xf912, 0x88f8, 0,
    0x1, 0xf913, 0x908f, 0,
    0x1, 0xf914, 0x6a02, 0,
    0x1, 0xf915, 0x6d1b, 0,
    0x1, 0xf916, 0x70d9, 0,
    0x1, 0xf917, 0x73de, 0,
    0x1, 0xf918, 0x843d, 0,
    0x1, 0xf919, 0x916a, 0,
    0x1, 0xf91a, 0x99f1, 0,
    0x1, 0xf91b, 0x4e82, 0,
    0x1, 0xf91c, 0x5375, 0,
    0x1, 0xf91d, 0x6b04, 0,
    0x1, 0xf91e, 0x721b, 0,
    0x1, 0xf91f, 0x862d, 0,
    0x1, 0xf920, 0x9e1e, 0,
    0x1, 0xf921, 0x5d50, 0,
    0x1, 0xf922, 0x6feb, 0,
    0x1, 0xf923, 0x85cd, 0,
    0x1, 0xf924, 0x8964, 0,
    0x1, 0xf925, 0x62c9, 0,
    0x1, 0xf926, 0x81d8, 0,
    0x1, 0xf927, 0x881f, 0,
    0x1, 0xf928, 0x5eca, 0,
    0x1, 0xf929, 0x6717, 0,
    0x1, 0xf92a, 0x6d6a, 0,
    0x1, 0xf92b, 0x72fc, 0,
    0x1, 0xf92c, 0x90ce, 0,
    0x1, 0xf92d, 0x4f86, 0,
    0x1, 0xf92e, 0x51b7, 0,
    0x1, 0xf92f, 0x52de, 0,
    0x1, 0xf930, 0x64c4, 0,
    0x1, 0xf931, 0x6ad3, 0,
    0x1, 0xf932, 0x7210, 0,
    0x1, 0xf933, 0x76e7, 0,
    0x1, 0xf934, 0x8001, 0,
    0x1, 0xf935, 0x8606, 0,
    0x1, 0xf936, 0x865c, 0,
    0x1, 0xf937, 0x8def, 0,
    0x1, 0xf938, 0x9732, 0,
    0x1, 0xf939, 0x9b6f, 0,
    0x1, 0xf93a, 0x9dfa, 0,
    0x1, 0xf93b, 0x788c, 0,
    0x1, 0xf93c, 0x797f, 0,
    0x1, 0xf93d, 0x7da0, 0,
    0x1, 0xf93e, 0x83c9, 0,
    0x1, 0xf93f, 0x9304, 0,
    0x1, 0xf940, 0x9e7f, 0,
    0x1, 0xf941, 0x8ad6, 0,
    0x1, 0xf942, 0x58df, 0,
    0x1, 0xf943, 0x5f04, 0,
    0x1, 0xf944, 0x7c60, 0,
    0x1, 0xf945, 0x807e, 0,
    0x1, 0xf946, 0x7262, 0,
    0x1, 0xf947, 0x78ca, 0,
    0x1, 0xf948, 0x8cc2, 0,
    0x1, 0xf949, 0x96f7, 0,
    0x1, 0xf94a, 0x58d8, 0,
    0x1, 0xf94b, 0x5c62, 0,
    0x1, 0xf94c, 0x6a13, 0,
    0x1, 0xf94d, 0x6dda, 0,
    0x1, 0xf94e, 0x6f0f, 0,
    0x1, 0xf94f, 0x7d2f, 0,
    0x1, 0xf950, 0x7e37, 0,
    0x1, 0xf951, 0x96fb, 0,
    0x1, 0xf952, 0x52d2, 0,
    0x1, 0xf953, 0x808b, 0,
    0x1, 0xf954, 0x51dc, 0,
    0x1, 0xf955, 0x51cc, 0,
    0x1, 0xf956, 0x7a1c, 0,
    0x1, 0xf957, 0x7dbe, 0,
    0x1, 0xf958, 0x83f1, 0,
    0x1, 0xf959, 0x9675, 0,
    0x1, 0xf95a, 0x8b80, 0,
    0x1, 0xf95b, 0x62cf, 0,
    0x1, 0xf95c, 0x6a02, 0,
    0x1, 0xf95d, 0x8afe, 0,
    0x1, 0xf95e, 0x4e39, 0,
    0x1, 0xf95f, 0x5be7, 0,
    0x1, 0xf960, 0x6012, 0,
    0x1, 0xf961, 0x7387, 0,
    0x1, 0xf962, 0x7570, 0,
    0x1, 0xf963, 0x5317, 0,
    0x1, 0xf964, 0x78fb, 0,
    0x1, 0xf965, 0x4fbf, 0,
    0x1, 0xf966, 0x5fa9, 0,
    0x1, 0xf967, 0x4e0d, 0,
    0x1, 0xf968, 0x6ccc, 0,
    0x1, 0xf969, 0x6578, 0,
    0x1, 0xf96a, 0x7d22, 0,
    0x1, 0xf96b, 0x53c3, 0,
    0x1, 0xf96c, 0x585e, 0,
    0x1, 0xf96d, 0x7701, 0,
    0x1, 0xf96e, 0x8449, 0,
    0x1, 0xf96f, 0x8aaa, 0,
    0x1, 0xf970, 0x6bba, 0,
    0x1, 0xf971, 0x8fb0, 0,
    0x1, 0xf972, 0x6c88, 0,
    0x1, 0xf973, 0x62fe, 0,
    0x1, 0xf974, 0x82e5, 0,
    0x1, 0xf975, 0x63a0, 0,
    0x1, 0xf976, 0x7565, 0,
    0x1, 0xf977, 0x4eae, 0,
    0x1, 0xf978, 0x5169, 0,
    0x1, 0xf979, 0x51c9, 0,
    0x1, 0xf97a, 0x6881, 0,
    0x1, 0xf97b, 0x7ce7, 0,
    0x1, 0xf97c, 0x826f, 0,
    0x1, 0xf97d, 0x8ad2, 0,
    0x1, 0xf97e, 0x91cf, 0,
    0x1, 0xf97f, 0x52f5, 0,
    0x1, 0xf980, 0x5442, 0,
    0x1, 0xf981, 0x5973, 0,
    0x1, 0xf982, 0x5eec, 0,
    0x1, 0xf983, 0x65c5, 0,
    0x1, 0xf984, 0x6ffe, 0,
    0x1, 0xf985, 0x792a, 0,
    0x1, 0xf986, 0x95ad, 0,
    0x1, 0xf987, 0x9a6a, 0,
    0x1, 0xf988, 0x9e97, 0,
    0x1, 0xf989, 0x9ece, 0,
    0x1, 0xf98a, 0x529b, 0,
    0x1, 0xf98b, 0x66c6, 0,
    0x1, 0xf98c, 0x6b77, 0,
    0x1, 0xf98d, 0x8f62, 0,
    0x1, 0xf98e, 0x5e74, 0,
    0x1, 0xf98f, 0x6190, 0,
    0x1, 0xf990, 0x6200, 0,
    0x1, 0xf991, 0x649a, 0,
    0x1, 0xf992, 0x6f23, 0,
    0x1, 0xf993, 0x7149, 0,
    0x1, 0xf994, 0x7489, 0,
    0x1, 0xf995, 0x79ca, 0,
    0x1, 0xf996, 0x7df4, 0,
    0x1, 0xf997, 0x806f, 0,
    0x1, 0xf998, 0x8f26, 0,
    0x1, 0xf999, 0x84ee, 0,
    0x1, 0xf99a, 0x9023, 0,
    0x1, 0xf99b, 0x934a, 0,
    0x1, 0xf99c, 0x5217, 0,
    0x1, 0xf99d, 0x52a3, 0,
    0x1, 0xf99e, 0x54bd, 0,
    0x1, 0xf99f, 0x70c8, 0,
    0x1, 0xf9a0, 0x88c2, 0,
    0x1, 0xf9a1, 0x8aaa, 0,
    0x1, 0xf9a2, 0x5ec9, 0,
    0x1, 0xf9a3, 0x5ff5, 0,
    0x1, 0xf9a4, 0x637b, 0,
    0x1, 0xf9a5, 0x6bae, 0,
    0x1, 0xf9a6, 0x7c3e, 0,
    0x1, 0xf9a7, 0x7375, 0,
    0x1, 0xf9a8, 0x4ee4, 0,
    0x1, 0xf9a9, 0x56f9, 0,
    0x1, 0xf9aa, 0x5be7, 0,
    0x1, 0xf9ab, 0x5dba, 0,
    0x1, 0xf9ac, 0x601c, 0,
    0x1, 0xf9ad, 0x73b2, 0,
    0x1, 0xf9ae, 0x7469, 0,
    0x1, 0xf9af, 0x7f9a, 0,
    0x1, 0xf9b0, 0x8046, 0,
    0x1, 0xf9b1, 0x9234, 0,
    0x1, 0xf9b2, 0x96f6, 0,
    0x1, 0xf9b3, 0x9748, 0,
    0x1, 0xf9b4, 0x9818, 0,
    0x1, 0xf9b5, 0x4f8b, 0,
    0x1, 0xf9b6, 0x79ae, 0,
    0x1, 0xf9b7, 0x91b4, 0,
    0x1, 0xf9b8, 0x96b8, 0,
    0x1, 0xf9b9, 0x60e1, 0,
    0x1, 0xf9ba, 0x4e86, 0,
    0x1, 0xf9bb, 0x50da, 0,
    0x1, 0xf9bc, 0x5bee, 0,
    0x1, 0xf9bd, 0x5c3f, 0,
    0x1, 0xf9be, 0x6599, 0,
    0x1, 0xf9bf, 0x6a02, 0,
    0x1, 0xf9c0, 0x71ce, 0,
    0x1, 0xf9c1, 0x7642, 0,
    0x1, 0xf9c2, 0x84fc, 0,
    0x1, 0xf9c3, 0x907c, 0,
    0x1, 0xf9c4, 0x9f8d, 0,
    0x1, 0xf9c5, 0x6688, 0,
    0x1, 0xf9c6, 0x962e, 0,
    0x1, 0xf9c7, 0x5289, 0,
    0x1, 0xf9c8, 0x677b, 0,
    0x1, 0xf9c9, 0x67f3, 0,
    0x1, 0xf9ca, 0x6d41, 0,
    0x1, 0xf9cb, 0x6e9c, 0,
    0x1, 0xf9cc, 0x7409, 0,
    0x1, 0xf9cd, 0x7559, 0,
    0x1, 0xf9ce, 0x786b, 0,
    0x1, 0xf9cf, 0x7d10, 0,
    0x1, 0xf9d0, 0x985e, 0,
    0x1, 0xf9d1, 0x516d, 0,
    0x1, 0xf9d2, 0x622e, 0,
    0x1, 0xf9d3, 0x9678, 0,
    0x1, 0xf9d4, 0x502b, 0,
    0x1, 0xf9d5, 0x5d19, 0,
    0x1, 0xf9d6, 0x6dea, 0,
    0x1, 0xf9d7, 0x8f2a, 0,
    0x1, 0xf9d8, 0x5f8b, 0,
    0x1, 0xf9d9, 0x6144, 0,
    0x1, 0xf9da, 0x6817, 0,
    0x1, 0xf9db, 0x7387, 0,
    0x1, 0xf9dc, 0x9686, 0,
    0x1, 0xf9dd, 0x5229, 0,
    0x1, 0xf9de, 0x540f, 0,
    0x1, 0xf9df, 0x5c65, 0,
    0x1, 0xf9e0, 0x6613, 0,
    0x1, 0xf9e1, 0x674e, 0,
    0x1, 0xf9e2, 0x68a8, 0,
    0x1, 0xf9e3, 0x6ce5, 0,
    0x1, 0xf9e4, 0x7406, 0,
    0x1, 0xf9e5, 0x75e2, 0,
    0x1, 0xf9e6, 0x7f79, 0,
    0x1, 0xf9e7, 0x88cf, 0,
    0x1, 0xf9e8, 0x88e1, 0,
    0x1, 0xf9e9, 0x91cc, 0,
    0x1, 0xf9ea, 0x96e2, 0,
    0x1, 0xf9eb, 0x533f, 0,
    0x1, 0xf9ec, 0x6eba, 0,
    0x1, 0xf9ed, 0x541d, 0,
    0x1, 0xf9ee, 0x71d0, 0,
    0x1, 0xf9ef, 0x7498, 0,
    0x1, 0xf9f0, 0x85fa, 0,
    0x1, 0xf9f1, 0x96a3, 0,
    0x1, 0xf9f2, 0x9c57, 0,
    0x1, 0xf9f3, 0x9e9f, 0,
    0x1, 0xf9f4, 0x6797, 0,
    0x1, 0xf9f5, 0x6dcb, 0,
    0x1, 0xf9f6, 0x81e8, 0,
    0x1, 0xf9f7, 0x7acb, 0,
    0x1, 0xf9f8, 0x7b20, 0,
    0x1, 0xf9f9, 0x7c92, 0,
    0x1, 0xf9fa, 0x72c0, 0,
    0x1, 0xf9fb, 0x7099, 0,
    0x1, 0xf9fc, 0x8b58, 0,
    0x1, 0xf9fd, 0x4ec0, 0,
    0x1, 0xf9fe, 0x8336, 0,
    0x1, 0xf9ff, 0x523a, 0,
    0x1, 0xfa00, 0x5207, 0,
    0x1, 0xfa01, 0x5ea6, 0,
    0x1, 0xfa02, 0x62d3, 0,
    0x1, 0xfa03, 0x7cd6, 0,
    0x1, 0xfa04, 0x5b85, 0,
    0x1, 0xfa05, 0x6d1e, 0,
    0x1, 0xfa06, 0x66b4, 0,
    0x1, 0xfa07, 0x8f3b, 0,
    0x1, 0xfa08, 0x884c, 0,
    0x1, 0xfa09, 0x964d, 0,
    0x1, 0xfa0a, 0x898b, 0,
    0x1, 0xfa0b, 0x5ed3, 0,
    0x1, 0xfa0c, 0x5140, 0,
    0x1, 0xfa0d, 0x55c0, 0,
    0x1, 0xfa10, 0x585a, 0,
    0x1, 0xfa12, 0x6674, 0,
    0x1, 0xfa15, 0x51de, 0,
    0x1, 0xfa16, 0x732a, 0,
    0x1, 0xfa17, 0x76ca, 0,
    0x1, 0xfa18, 0x793c, 0,
    0x1, 0xfa19, 0x795e, 0,
    0x1, 0xfa1a, 0x7965, 0,
    0x1, 0xfa1b, 0x798f, 0,
    0x1, 0xfa1c, 0x9756, 0,
    0x1, 0xfa1d, 0x7cbe, 0,
    0x1, 0xfa1e, 0x7fbd, 0,
    0x1, 0xfa20, 0x8612, 0,
    0x1, 0xfa22, 0x8af8, 0,
    0x1, 0xfa25, 0x9038, 0,
    0x1, 0xfa26, 0x90fd, 0,
    0x1, 0xfa2a, 0x98ef, 0,
    0x1, 0xfa2b, 0x98fc, 0,
    0x1, 0xfa2c, 0x9928, 0,
    0x1, 0xfa2d, 0x9db4, 0,
    0x10, 0xfb00, 0x66, 0x66, 0,
    0x10, 0xfb01, 0x66, 0x69, 0,
    0x10, 0xfb02, 0x66, 0x6c, 0,
    0x10, 0xfb03, 0x66, 0x66, 0x69, 0,
    0x10, 0xfb04, 0x66, 0x66, 0x6c, 0,
    0x10, 0xfb05, 0x17f, 0x74, 0,
    0x10, 0xfb06, 0x73, 0x74, 0,
    0x10, 0xfb13, 0x574, 0x576, 0,
    0x10, 0xfb14, 0x574, 0x565, 0,
    0x10, 0xfb15, 0x574, 0x56b, 0,
    0x10, 0xfb16, 0x57e, 0x576, 0,
    0x10, 0xfb17, 0x574, 0x56d, 0,
    0x1, 0xfb1f, 0x5f2, 0x5b7, 0,
    0x2, 0xfb20, 0x5e2, 0,
    0x2, 0xfb21, 0x5d0, 0,
    0x2, 0xfb22, 0x5d3, 0,
    0x2, 0xfb23, 0x5d4, 0,
    0x2, 0xfb24, 0x5db, 0,
    0x2, 0xfb25, 0x5dc, 0,
    0x2, 0xfb26, 0x5dd, 0,
    0x2, 0xfb27, 0x5e8, 0,
    0x2, 0xfb28, 0x5ea, 0,
    0x2, 0xfb29, 0x2b, 0,
    0x1, 0xfb2a, 0x5e9, 0x5c1, 0,
    0x1, 0xfb2b, 0x5e9, 0x5c2, 0,
    0x1, 0xfb2c, 0xfb49, 0x5c1, 0,
    0x1, 0xfb2d, 0xfb49, 0x5c2, 0,
    0x1, 0xfb2e, 0x5d0, 0x5b7, 0,
    0x1, 0xfb2f, 0x5d0, 0x5b8, 0,
    0x1, 0xfb30, 0x5d0, 0x5bc, 0,
    0x1, 0xfb31, 0x5d1, 0x5bc, 0,
    0x1, 0xfb32, 0x5d2, 0x5bc, 0,
    0x1, 0xfb33, 0x5d3, 0x5bc, 0,
    0x1, 0xfb34, 0x5d4, 0x5bc, 0,
    0x1, 0xfb35, 0x5d5, 0x5bc, 0,
    0x1, 0xfb36, 0x5d6, 0x5bc, 0,
    0x1, 0xfb38, 0x5d8, 0x5bc, 0,
    0x1, 0xfb39, 0x5d9, 0x5bc, 0,
    0x1, 0xfb3a, 0x5da, 0x5bc, 0,
    0x1, 0xfb3b, 0x5db, 0x5bc, 0,
    0x1, 0xfb3c, 0x5dc, 0x5bc, 0,
    0x1, 0xfb3e, 0x5de, 0x5bc, 0,
    0x1, 0xfb40, 0x5e0, 0x5bc, 0,
    0x1, 0xfb41, 0x5e1, 0x5bc, 0,
    0x1, 0xfb43, 0x5e3, 0x5bc, 0,
    0x1, 0xfb44, 0x5e4, 0x5bc, 0,
    0x1, 0xfb46, 0x5e6, 0x5bc, 0,
    0x1, 0xfb47, 0x5e7, 0x5bc, 0,
    0x1, 0xfb48, 0x5e8, 0x5bc, 0,
    0x1, 0xfb49, 0x5e9, 0x5bc, 0,
    0x1, 0xfb4a, 0x5ea, 0x5bc, 0,
    0x1, 0xfb4b, 0x5d5, 0x5b9, 0,
    0x1, 0xfb4c, 0x5d1, 0x5bf, 0,
    0x1, 0xfb4d, 0x5db, 0x5bf, 0,
    0x1, 0xfb4e, 0x5e4, 0x5bf, 0,
    0x10, 0xfb4f, 0x5d0, 0x5dc, 0,
    0x7, 0xfb50, 0x671, 0,
    0x6, 0xfb51, 0x671, 0,
    0x7, 0xfb52, 0x67b, 0,
    0x6, 0xfb53, 0x67b, 0,
    0x4, 0xfb54, 0x67b, 0,
    0x5, 0xfb55, 0x67b, 0,
    0x7, 0xfb56, 0x67e, 0,
    0x6, 0xfb57, 0x67e, 0,
    0x4, 0xfb58, 0x67e, 0,
    0x5, 0xfb59, 0x67e, 0,
    0x7, 0xfb5a, 0x680, 0,
    0x6, 0xfb5b, 0x680, 0,
    0x4, 0xfb5c, 0x680, 0,
    0x5, 0xfb5d, 0x680, 0,
    0x7, 0xfb5e, 0x67a, 0,
    0x6, 0xfb5f, 0x67a, 0,
    0x4, 0xfb60, 0x67a, 0,
    0x5, 0xfb61, 0x67a, 0,
    0x7, 0xfb62, 0x67f, 0,
    0x6, 0xfb63, 0x67f, 0,
    0x4, 0xfb64, 0x67f, 0,
    0x5, 0xfb65, 0x67f, 0,
    0x7, 0xfb66, 0x679, 0,
    0x6, 0xfb67, 0x679, 0,
    0x4, 0xfb68, 0x679, 0,
    0x5, 0xfb69, 0x679, 0,
    0x7, 0xfb6a, 0x6a4, 0,
    0x6, 0xfb6b, 0x6a4, 0,
    0x4, 0xfb6c, 0x6a4, 0,
    0x5, 0xfb6d, 0x6a4, 0,
    0x7, 0xfb6e, 0x6a6, 0,
    0x6, 0xfb6f, 0x6a6, 0,
    0x4, 0xfb70, 0x6a6, 0,
    0x5, 0xfb71, 0x6a6, 0,
    0x7, 0xfb72, 0x684, 0,
    0x6, 0xfb73, 0x684, 0,
    0x4, 0xfb74, 0x684, 0,
    0x5, 0xfb75, 0x684, 0,
    0x7, 0xfb76, 0x683, 0,
    0x6, 0xfb77, 0x683, 0,
    0x4, 0xfb78, 0x683, 0,
    0x5, 0xfb79, 0x683, 0,
    0x7, 0xfb7a, 0x686, 0,
    0x6, 0xfb7b, 0x686, 0,
    0x4, 0xfb7c, 0x686, 0,
    0x5, 0xfb7d, 0x686, 0,
    0x7, 0xfb7e, 0x687, 0,
    0x6, 0xfb7f, 0x687, 0,
    0x4, 0xfb80, 0x687, 0,
    0x5, 0xfb81, 0x687, 0,
    0x7, 0xfb82, 0x68d, 0,
    0x6, 0xfb83, 0x68d, 0,
    0x7, 0xfb84, 0x68c, 0,
    0x6, 0xfb85, 0x68c, 0,
    0x7, 0xfb86, 0x68e, 0,
    0x6, 0xfb87, 0x68e, 0,
    0x7, 0xfb88, 0x688, 0,
    0x6, 0xfb89, 0x688, 0,
    0x7, 0xfb8a, 0x698, 0,
    0x6, 0xfb8b, 0x698, 0,
    0x7, 0xfb8c, 0x691, 0,
    0x6, 0xfb8d, 0x691, 0,
    0x7, 0xfb8e, 0x6a9, 0,
    0x6, 0xfb8f, 0x6a9, 0,
    0x4, 0xfb90, 0x6a9, 0,
    0x5, 0xfb91, 0x6a9, 0,
    0x7, 0xfb92, 0x6af, 0,
    0x6, 0xfb93, 0x6af, 0,
    0x4, 0xfb94, 0x6af, 0,
    0x5, 0xfb95, 0x6af, 0,
    0x7, 0xfb96, 0x6b3, 0,
    0x6, 0xfb97, 0x6b3, 0,
    0x4, 0xfb98, 0x6b3, 0,
    0x5, 0xfb99, 0x6b3, 0,
    0x7, 0xfb9a, 0x6b1, 0,
    0x6, 0xfb9b, 0x6b1, 0,
    0x4, 0xfb9c, 0x6b1, 0,
    0x5, 0xfb9d, 0x6b1, 0,
    0x7, 0xfb9e, 0x6ba, 0,
    0x6, 0xfb9f, 0x6ba, 0,
    0x7, 0xfba0, 0x6bb, 0,
    0x6, 0xfba1, 0x6bb, 0,
    0x4, 0xfba2, 0x6bb, 0,
    0x5, 0xfba3, 0x6bb, 0,
    0x7, 0xfba4, 0x6c0, 0,
    0x6, 0xfba5, 0x6c0, 0,
    0x7, 0xfba6, 0x6c1, 0,
    0x6, 0xfba7, 0x6c1, 0,
    0x4, 0xfba8, 0x6c1, 0,
    0x5, 0xfba9, 0x6c1, 0,
    0x7, 0xfbaa, 0x6be, 0,
    0x6, 0xfbab, 0x6be, 0,
    0x4, 0xfbac, 0x6be, 0,
    0x5, 0xfbad, 0x6be, 0,
    0x7, 0xfbae, 0x6d2, 0,
    0x6, 0xfbaf, 0x6d2, 0,
    0x7, 0xfbb0, 0x6d3, 0,
    0x6, 0xfbb1, 0x6d3, 0,
    0x7, 0xfbd3, 0x6ad, 0,
    0x6, 0xfbd4, 0x6ad, 0,
    0x4, 0xfbd5, 0x6ad, 0,
    0x5, 0xfbd6, 0x6ad, 0,
    0x7, 0xfbd7, 0x6c7, 0,
    0x6, 0xfbd8, 0x6c7, 0,
    0x7, 0xfbd9, 0x6c6, 0,
    0x6, 0xfbda, 0x6c6, 0,
    0x7, 0xfbdb, 0x6c8, 0,
    0x6, 0xfbdc, 0x6c8, 0,
    0x7, 0xfbdd, 0x677, 0,
    0x7, 0xfbde, 0x6cb, 0,
    0x6, 0xfbdf, 0x6cb, 0,
    0x7, 0xfbe0, 0x6c5, 0,
    0x6, 0xfbe1, 0x6c5, 0,
    0x7, 0xfbe2, 0x6c9, 0,
    0x6, 0xfbe3, 0x6c9, 0,
    0x7, 0xfbe4, 0x6d0, 0,
    0x6, 0xfbe5, 0x6d0, 0,
    0x4, 0xfbe6, 0x6d0, 0,
    0x5, 0xfbe7, 0x6d0, 0,
    0x4, 0xfbe8, 0x649, 0,
    0x5, 0xfbe9, 0x649, 0,
    0x7, 0xfbea, 0x626, 0x627, 0,
    0x6, 0xfbeb, 0x626, 0x627, 0,
    0x7, 0xfbec, 0x626, 0x6d5, 0,
    0x6, 0xfbed, 0x626, 0x6d5, 0,
    0x7, 0xfbee, 0x626, 0x648, 0,
    0x6, 0xfbef, 0x626, 0x648, 0,
    0x7, 0xfbf0, 0x626, 0x6c7, 0,
    0x6, 0xfbf1, 0x626, 0x6c7, 0,
    0x7, 0xfbf2, 0x626, 0x6c6, 0,
    0x6, 0xfbf3, 0x626, 0x6c6, 0,
    0x7, 0xfbf4, 0x626, 0x6c8, 0,
    0x6, 0xfbf5, 0x626, 0x6c8, 0,
    0x7, 0xfbf6, 0x626, 0x6d0, 0,
    0x6, 0xfbf7, 0x626, 0x6d0, 0,
    0x4, 0xfbf8, 0x626, 0x6d0, 0,
    0x7, 0xfbf9, 0x626, 0x649, 0,
    0x6, 0xfbfa, 0x626, 0x649, 0,
    0x4, 0xfbfb, 0x626, 0x649, 0,
    0x7, 0xfbfc, 0x6cc, 0,
    0x6, 0xfbfd, 0x6cc, 0,
    0x4, 0xfbfe, 0x6cc, 0,
    0x5, 0xfbff, 0x6cc, 0,
    0x7, 0xfc00, 0x626, 0x62c, 0,
    0x7, 0xfc01, 0x626, 0x62d, 0,
    0x7, 0xfc02, 0x626, 0x645, 0,
    0x7, 0xfc03, 0x626, 0x649, 0,
    0x7, 0xfc04, 0x626, 0x64a, 0,
    0x7, 0xfc05, 0x628, 0x62c, 0,
    0x7, 0xfc06, 0x628, 0x62d, 0,
    0x7, 0xfc07, 0x628, 0x62e, 0,
    0x7, 0xfc08, 0x628, 0x645, 0,
    0x7, 0xfc09, 0x628, 0x649, 0,
    0x7, 0xfc0a, 0x628, 0x64a, 0,
    0x7, 0xfc0b, 0x62a, 0x62c, 0,
    0x7, 0xfc0c, 0x62a, 0x62d, 0,
    0x7, 0xfc0d, 0x62a, 0x62e, 0,
    0x7, 0xfc0e, 0x62a, 0x645, 0,
    0x7, 0xfc0f, 0x62a, 0x649, 0,
    0x7, 0xfc10, 0x62a, 0x64a, 0,
    0x7, 0xfc11, 0x62b, 0x62c, 0,
    0x7, 0xfc12, 0x62b, 0x645, 0,
    0x7, 0xfc13, 0x62b, 0x649, 0,
    0x7, 0xfc14, 0x62b, 0x64a, 0,
    0x7, 0xfc15, 0x62c, 0x62d, 0,
    0x7, 0xfc16, 0x62c, 0x645, 0,
    0x7, 0xfc17, 0x62d, 0x62c, 0,
    0x7, 0xfc18, 0x62d, 0x645, 0,
    0x7, 0xfc19, 0x62e, 0x62c, 0,
    0x7, 0xfc1a, 0x62e, 0x62d, 0,
    0x7, 0xfc1b, 0x62e, 0x645, 0,
    0x7, 0xfc1c, 0x633, 0x62c, 0,
    0x7, 0xfc1d, 0x633, 0x62d, 0,
    0x7, 0xfc1e, 0x633, 0x62e, 0,
    0x7, 0xfc1f, 0x633, 0x645, 0,
    0x7, 0xfc20, 0x635, 0x62d, 0,
    0x7, 0xfc21, 0x635, 0x645, 0,
    0x7, 0xfc22, 0x636, 0x62c, 0,
    0x7, 0xfc23, 0x636, 0x62d, 0,
    0x7, 0xfc24, 0x636, 0x62e, 0,
    0x7, 0xfc25, 0x636, 0x645, 0,
    0x7, 0xfc26, 0x637, 0x62d, 0,
    0x7, 0xfc27, 0x637, 0x645, 0,
    0x7, 0xfc28, 0x638, 0x645, 0,
    0x7, 0xfc29, 0x639, 0x62c, 0,
    0x7, 0xfc2a, 0x639, 0x645, 0,
    0x7, 0xfc2b, 0x63a, 0x62c, 0,
    0x7, 0xfc2c, 0x63a, 0x645, 0,
    0x7, 0xfc2d, 0x641, 0x62c, 0,
    0x7, 0xfc2e, 0x641, 0x62d, 0,
    0x7, 0xfc2f, 0x641, 0x62e, 0,
    0x7, 0xfc30, 0x641, 0x645, 0,
    0x7, 0xfc31, 0x641, 0x649, 0,
    0x7, 0xfc32, 0x641, 0x64a, 0,
    0x7, 0xfc33, 0x642, 0x62d, 0,
    0x7, 0xfc34, 0x642, 0x645, 0,
    0x7, 0xfc35, 0x642, 0x649, 0,
    0x7, 0xfc36, 0x642, 0x64a, 0,
    0x7, 0xfc37, 0x643, 0x627, 0,
    0x7, 0xfc38, 0x643, 0x62c, 0,
    0x7, 0xfc39, 0x643, 0x62d, 0,
    0x7, 0xfc3a, 0x643, 0x62e, 0,
    0x7, 0xfc3b, 0x643, 0x644, 0,
    0x7, 0xfc3c, 0x643, 0x645, 0,
    0x7, 0xfc3d, 0x643, 0x649, 0,
    0x7, 0xfc3e, 0x643, 0x64a, 0,
    0x7, 0xfc3f, 0x644, 0x62c, 0,
    0x7, 0xfc40, 0x644, 0x62d, 0,
    0x7, 0xfc41, 0x644, 0x62e, 0,
    0x7, 0xfc42, 0x644, 0x645, 0,
    0x7, 0xfc43, 0x644, 0x649, 0,
    0x7, 0xfc44, 0x644, 0x64a, 0,
    0x7, 0xfc45, 0x645, 0x62c, 0,
    0x7, 0xfc46, 0x645, 0x62d, 0,
    0x7, 0xfc47, 0x645, 0x62e, 0,
    0x7, 0xfc48, 0x645, 0x645, 0,
    0x7, 0xfc49, 0x645, 0x649, 0,
    0x7, 0xfc4a, 0x645, 0x64a, 0,
    0x7, 0xfc4b, 0x646, 0x62c, 0,
    0x7, 0xfc4c, 0x646, 0x62d, 0,
    0x7, 0xfc4d, 0x646, 0x62e, 0,
    0x7, 0xfc4e, 0x646, 0x645, 0,
    0x7, 0xfc4f, 0x646, 0x649, 0,
    0x7, 0xfc50, 0x646, 0x64a, 0,
    0x7, 0xfc51, 0x647, 0x62c, 0,
    0x7, 0xfc52, 0x647, 0x645, 0,
    0x7, 0xfc53, 0x647, 0x649, 0,
    0x7, 0xfc54, 0x647, 0x64a, 0,
    0x7, 0xfc55, 0x64a, 0x62c, 0,
    0x7, 0xfc56, 0x64a, 0x62d, 0,
    0x7, 0xfc57, 0x64a, 0x62e, 0,
    0x7, 0xfc58, 0x64a, 0x645, 0,
    0x7, 0xfc59, 0x64a, 0x649, 0,
    0x7, 0xfc5a, 0x64a, 0x64a, 0,
    0x7, 0xfc5b, 0x630, 0x670, 0,
    0x7, 0xfc5c, 0x631, 0x670, 0,
    0x7, 0xfc5d, 0x649, 0x670, 0,
    0x7, 0xfc5e, 0x20, 0x651, 0x64c, 0,
    0x7, 0xfc5f, 0x20, 0x651, 0x64d, 0,
    0x7, 0xfc60, 0x20, 0x651, 0x64e, 0,
    0x7, 0xfc61, 0x20, 0x651, 0x64f, 0,
    0x7, 0xfc62, 0x20, 0x651, 0x650, 0,
    0x7, 0xfc63, 0x20, 0x651, 0x670, 0,
    0x6, 0xfc64, 0x626, 0x631, 0,
    0x6, 0xfc65, 0x626, 0x632, 0,
    0x6, 0xfc66, 0x626, 0x645, 0,
    0x6, 0xfc67, 0x626, 0x646, 0,
    0x6, 0xfc68, 0x626, 0x649, 0,
    0x6, 0xfc69, 0x626, 0x64a, 0,
    0x6, 0xfc6a, 0x628, 0x631, 0,
    0x6, 0xfc6b, 0x628, 0x632, 0,
    0x6, 0xfc6c, 0x628, 0x645, 0,
    0x6, 0xfc6d, 0x628, 0x646, 0,
    0x6, 0xfc6e, 0x628, 0x649, 0,
    0x6, 0xfc6f, 0x628, 0x64a, 0,
    0x6, 0xfc70, 0x62a, 0x631, 0,
    0x6, 0xfc71, 0x62a, 0x632, 0,
    0x6, 0xfc72, 0x62a, 0x645, 0,
    0x6, 0xfc73, 0x62a, 0x646, 0,
    0x6, 0xfc74, 0x62a, 0x649, 0,
    0x6, 0xfc75, 0x62a, 0x64a, 0,
    0x6, 0xfc76, 0x62b, 0x631, 0,
    0x6, 0xfc77, 0x62b, 0x632, 0,
    0x6, 0xfc78, 0x62b, 0x645, 0,
    0x6, 0xfc79, 0x62b, 0x646, 0,
    0x6, 0xfc7a, 0x62b, 0x649, 0,
    0x6, 0xfc7b, 0x62b, 0x64a, 0,
    0x6, 0xfc7c, 0x641, 0x649, 0,
    0x6, 0xfc7d, 0x641, 0x64a, 0,
    0x6, 0xfc7e, 0x642, 0x649, 0,
    0x6, 0xfc7f, 0x642, 0x64a, 0,
    0x6, 0xfc80, 0x643, 0x627, 0,
    0x6, 0xfc81, 0x643, 0x644, 0,
    0x6, 0xfc82, 0x643, 0x645, 0,
    0x6, 0xfc83, 0x643, 0x649, 0,
    0x6, 0xfc84, 0x643, 0x64a, 0,
    0x6, 0xfc85, 0x644, 0x645, 0,
    0x6, 0xfc86, 0x644, 0x649, 0,
    0x6, 0xfc87, 0x644, 0x64a, 0,
    0x6, 0xfc88, 0x645, 0x627, 0,
    0x6, 0xfc89, 0x645, 0x645, 0,
    0x6, 0xfc8a, 0x646, 0x631, 0,
    0x6, 0xfc8b, 0x646, 0x632, 0,
    0x6, 0xfc8c, 0x646, 0x645, 0,
    0x6, 0xfc8d, 0x646, 0x646, 0,
    0x6, 0xfc8e, 0x646, 0x649, 0,
    0x6, 0xfc8f, 0x646, 0x64a, 0,
    0x6, 0xfc90, 0x649, 0x670, 0,
    0x6, 0xfc91, 0x64a, 0x631, 0,
    0x6, 0xfc92, 0x64a, 0x632, 0,
    0x6, 0xfc93, 0x64a, 0x645, 0,
    0x6, 0xfc94, 0x64a, 0x646, 0,
    0x6, 0xfc95, 0x64a, 0x649, 0,
    0x6, 0xfc96, 0x64a, 0x64a, 0,
    0x4, 0xfc97, 0x626, 0x62c, 0,
    0x4, 0xfc98, 0x626, 0x62d, 0,
    0x4, 0xfc99, 0x626, 0x62e, 0,
    0x4, 0xfc9a, 0x626, 0x645, 0,
    0x4, 0xfc9b, 0x626, 0x647, 0,
    0x4, 0xfc9c, 0x628, 0x62c, 0,
    0x4, 0xfc9d, 0x628, 0x62d, 0,
    0x4, 0xfc9e, 0x628, 0x62e, 0,
    0x4, 0xfc9f, 0x628, 0x645, 0,
    0x4, 0xfca0, 0x628, 0x647, 0,
    0x4, 0xfca1, 0x62a, 0x62c, 0,
    0x4, 0xfca2, 0x62a, 0x62d, 0,
    0x4, 0xfca3, 0x62a, 0x62e, 0,
    0x4, 0xfca4, 0x62a, 0x645, 0,
    0x4, 0xfca5, 0x62a, 0x647, 0,
    0x4, 0xfca6, 0x62b, 0x645, 0,
    0x4, 0xfca7, 0x62c, 0x62d, 0,
    0x4, 0xfca8, 0x62c, 0x645, 0,
    0x4, 0xfca9, 0x62d, 0x62c, 0,
    0x4, 0xfcaa, 0x62d, 0x645, 0,
    0x4, 0xfcab, 0x62e, 0x62c, 0,
    0x4, 0xfcac, 0x62e, 0x645, 0,
    0x4, 0xfcad, 0x633, 0x62c, 0,
    0x4, 0xfcae, 0x633, 0x62d, 0,
    0x4, 0xfcaf, 0x633, 0x62e, 0,
    0x4, 0xfcb0, 0x633, 0x645, 0,
    0x4, 0xfcb1, 0x635, 0x62d, 0,
    0x4, 0xfcb2, 0x635, 0x62e, 0,
    0x4, 0xfcb3, 0x635, 0x645, 0,
    0x4, 0xfcb4, 0x636, 0x62c, 0,
    0x4, 0xfcb5, 0x636, 0x62d, 0,
    0x4, 0xfcb6, 0x636, 0x62e, 0,
    0x4, 0xfcb7, 0x636, 0x645, 0,
    0x4, 0xfcb8, 0x637, 0x62d, 0,
    0x4, 0xfcb9, 0x638, 0x645, 0,
    0x4, 0xfcba, 0x639, 0x62c, 0,
    0x4, 0xfcbb, 0x639, 0x645, 0,
    0x4, 0xfcbc, 0x63a, 0x62c, 0,
    0x4, 0xfcbd, 0x63a, 0x645, 0,
    0x4, 0xfcbe, 0x641, 0x62c, 0,
    0x4, 0xfcbf, 0x641, 0x62d, 0,
    0x4, 0xfcc0, 0x641, 0x62e, 0,
    0x4, 0xfcc1, 0x641, 0x645, 0,
    0x4, 0xfcc2, 0x642, 0x62d, 0,
    0x4, 0xfcc3, 0x642, 0x645, 0,
    0x4, 0xfcc4, 0x643, 0x62c, 0,
    0x4, 0xfcc5, 0x643, 0x62d, 0,
    0x4, 0xfcc6, 0x643, 0x62e, 0,
    0x4, 0xfcc7, 0x643, 0x644, 0,
    0x4, 0xfcc8, 0x643, 0x645, 0,
    0x4, 0xfcc9, 0x644, 0x62c, 0,
    0x4, 0xfcca, 0x644, 0x62d, 0,
    0x4, 0xfccb, 0x644, 0x62e, 0,
    0x4, 0xfccc, 0x644, 0x645, 0,
    0x4, 0xfccd, 0x644, 0x647, 0,
    0x4, 0xfcce, 0x645, 0x62c, 0,
    0x4, 0xfccf, 0x645, 0x62d, 0,
    0x4, 0xfcd0, 0x645, 0x62e, 0,
    0x4, 0xfcd1, 0x645, 0x645, 0,
    0x4, 0xfcd2, 0x646, 0x62c, 0,
    0x4, 0xfcd3, 0x646, 0x62d, 0,
    0x4, 0xfcd4, 0x646, 0x62e, 0,
    0x4, 0xfcd5, 0x646, 0x645, 0,
    0x4, 0xfcd6, 0x646, 0x647, 0,
    0x4, 0xfcd7, 0x647, 0x62c, 0,
    0x4, 0xfcd8, 0x647, 0x645, 0,
    0x4, 0xfcd9, 0x647, 0x670, 0,
    0x4, 0xfcda, 0x64a, 0x62c, 0,
    0x4, 0xfcdb, 0x64a, 0x62d, 0,
    0x4, 0xfcdc, 0x64a, 0x62e, 0,
    0x4, 0xfcdd, 0x64a, 0x645, 0,
    0x4, 0xfcde, 0x64a, 0x647, 0,
    0x5, 0xfcdf, 0x626, 0x645, 0,
    0x5, 0xfce0, 0x626, 0x647, 0,
    0x5, 0xfce1, 0x628, 0x645, 0,
    0x5, 0xfce2, 0x628, 0x647, 0,
    0x5, 0xfce3, 0x62a, 0x645, 0,
    0x5, 0xfce4, 0x62a, 0x647, 0,
    0x5, 0xfce5, 0x62b, 0x645, 0,
    0x5, 0xfce6, 0x62b, 0x647, 0,
    0x5, 0xfce7, 0x633, 0x645, 0,
    0x5, 0xfce8, 0x633, 0x647, 0,
    0x5, 0xfce9, 0x634, 0x645, 0,
    0x5, 0xfcea, 0x634, 0x647, 0,
    0x5, 0xfceb, 0x643, 0x644, 0,
    0x5, 0xfcec, 0x643, 0x645, 0,
    0x5, 0xfced, 0x644, 0x645, 0,
    0x5, 0xfcee, 0x646, 0x645, 0,
    0x5, 0xfcef, 0x646, 0x647, 0,
    0x5, 0xfcf0, 0x64a, 0x645, 0,
    0x5, 0xfcf1, 0x64a, 0x647, 0,
    0x5, 0xfcf2, 0x640, 0x651, 0x64e, 0,
    0x5, 0xfcf3, 0x640, 0x651, 0x64f, 0,
    0x5, 0xfcf4, 0x640, 0x651, 0x650, 0,
    0x7, 0xfcf5, 0x637, 0x649, 0,
    0x7, 0xfcf6, 0x637, 0x64a, 0,
    0x7, 0xfcf7, 0x639, 0x649, 0,
    0x7, 0xfcf8, 0x639, 0x64a, 0,
    0x7, 0xfcf9, 0x63a, 0x649, 0,
    0x7, 0xfcfa, 0x63a, 0x64a, 0,
    0x7, 0xfcfb, 0x633, 0x649, 0,
    0x7, 0xfcfc, 0x633, 0x64a, 0,
    0x7, 0xfcfd, 0x634, 0x649, 0,
    0x7, 0xfcfe, 0x634, 0x64a, 0,
    0x7, 0xfcff, 0x62d, 0x649, 0,
    0x7, 0xfd00, 0x62d, 0x64a, 0,
    0x7, 0xfd01, 0x62c, 0x649, 0,
    0x7, 0xfd02, 0x62c, 0x64a, 0,
    0x7, 0xfd03, 0x62e, 0x649, 0,
    0x7, 0xfd04, 0x62e, 0x64a, 0,
    0x7, 0xfd05, 0x635, 0x649, 0,
    0x7, 0xfd06, 0x635, 0x64a, 0,
    0x7, 0xfd07, 0x636, 0x649, 0,
    0x7, 0xfd08, 0x636, 0x64a, 0,
    0x7, 0xfd09, 0x634, 0x62c, 0,
    0x7, 0xfd0a, 0x634, 0x62d, 0,
    0x7, 0xfd0b, 0x634, 0x62e, 0,
    0x7, 0xfd0c, 0x634, 0x645, 0,
    0x7, 0xfd0d, 0x634, 0x631, 0,
    0x7, 0xfd0e, 0x633, 0x631, 0,
    0x7, 0xfd0f, 0x635, 0x631, 0,
    0x7, 0xfd10, 0x636, 0x631, 0,
    0x6, 0xfd11, 0x637, 0x649, 0,
    0x6, 0xfd12, 0x637, 0x64a, 0,
    0x6, 0xfd13, 0x639, 0x649, 0,
    0x6, 0xfd14, 0x639, 0x64a, 0,
    0x6, 0xfd15, 0x63a, 0x649, 0,
    0x6, 0xfd16, 0x63a, 0x64a, 0,
    0x6, 0xfd17, 0x633, 0x649, 0,
    0x6, 0xfd18, 0x633, 0x64a, 0,
    0x6, 0xfd19, 0x634, 0x649, 0,
    0x6, 0xfd1a, 0x634, 0x64a, 0,
    0x6, 0xfd1b, 0x62d, 0x649, 0,
    0x6, 0xfd1c, 0x62d, 0x64a, 0,
    0x6, 0xfd1d, 0x62c, 0x649, 0,
    0x6, 0xfd1e, 0x62c, 0x64a, 0,
    0x6, 0xfd1f, 0x62e, 0x649, 0,
    0x6, 0xfd20, 0x62e, 0x64a, 0,
    0x6, 0xfd21, 0x635, 0x649, 0,
    0x6, 0xfd22, 0x635, 0x64a, 0,
    0x6, 0xfd23, 0x636, 0x649, 0,
    0x6, 0xfd24, 0x636, 0x64a, 0,
    0x6, 0xfd25, 0x634, 0x62c, 0,
    0x6, 0xfd26, 0x634, 0x62d, 0,
    0x6, 0xfd27, 0x634, 0x62e, 0,
    0x6, 0xfd28, 0x634, 0x645, 0,
    0x6, 0xfd29, 0x634, 0x631, 0,
    0x6, 0xfd2a, 0x633, 0x631, 0,
    0x6, 0xfd2b, 0x635, 0x631, 0,
    0x6, 0xfd2c, 0x636, 0x631, 0,
    0x4, 0xfd2d, 0x634, 0x62c, 0,
    0x4, 0xfd2e, 0x634, 0x62d, 0,
    0x4, 0xfd2f, 0x634, 0x62e, 0,
    0x4, 0xfd30, 0x634, 0x645, 0,
    0x4, 0xfd31, 0x633, 0x647, 0,
    0x4, 0xfd32, 0x634, 0x647, 0,
    0x4, 0xfd33, 0x637, 0x645, 0,
    0x5, 0xfd34, 0x633, 0x62c, 0,
    0x5, 0xfd35, 0x633, 0x62d, 0,
    0x5, 0xfd36, 0x633, 0x62e, 0,
    0x5, 0xfd37, 0x634, 0x62c, 0,
    0x5, 0xfd38, 0x634, 0x62d, 0,
    0x5, 0xfd39, 0x634, 0x62e, 0,
    0x5, 0xfd3a, 0x637, 0x645, 0,
    0x5, 0xfd3b, 0x638, 0x645, 0,
    0x6, 0xfd3c, 0x627, 0x64b, 0,
    0x7, 0xfd3d, 0x627, 0x64b, 0,
    0x4, 0xfd50, 0x62a, 0x62c, 0x645, 0,
    0x6, 0xfd51, 0x62a, 0x62d, 0x62c, 0,
    0x4, 0xfd52, 0x62a, 0x62d, 0x62c, 0,
    0x4, 0xfd53, 0x62a, 0x62d, 0x645, 0,
    0x4, 0xfd54, 0x62a, 0x62e, 0x645, 0,
    0x4, 0xfd55, 0x62a, 0x645, 0x62c, 0,
    0x4, 0xfd56, 0x62a, 0x645, 0x62d, 0,
    0x4, 0xfd57, 0x62a, 0x645, 0x62e, 0,
    0x6, 0xfd58, 0x62c, 0x645, 0x62d, 0,
    0x4, 0xfd59, 0x62c, 0x645, 0x62d, 0,
    0x6, 0xfd5a, 0x62d, 0x645, 0x64a, 0,
    0x6, 0xfd5b, 0x62d, 0x645, 0x649, 0,
    0x4, 0xfd5c, 0x633, 0x62d, 0x62c, 0,
    0x4, 0xfd5d, 0x633, 0x62c, 0x62d, 0,
    0x6, 0xfd5e, 0x633, 0x62c, 0x649, 0,
    0x6, 0xfd5f, 0x633, 0x645, 0x62d, 0,
    0x4, 0xfd60, 0x633, 0x645, 0x62d, 0,
    0x4, 0xfd61, 0x633, 0x645, 0x62c, 0,
    0x6, 0xfd62, 0x633, 0x645, 0x645, 0,
    0x4, 0xfd63, 0x633, 0x645, 0x645, 0,
    0x6, 0xfd64, 0x635, 0x62d, 0x62d, 0,
    0x4, 0xfd65, 0x635, 0x62d, 0x62d, 0,
    0x6, 0xfd66, 0x635, 0x645, 0x645, 0,
    0x6, 0xfd67, 0x634, 0x62d, 0x645, 0,
    0x4, 0xfd68, 0x634, 0x62d, 0x645, 0,
    0x6, 0xfd69, 0x634, 0x62c, 0x64a, 0,
    0x6, 0xfd6a, 0x634, 0x645, 0x62e, 0,
    0x4, 0xfd6b, 0x634, 0x645, 0x62e, 0,
    0x6, 0xfd6c, 0x634, 0x645, 0x645, 0,
    0x4, 0xfd6d, 0x634, 0x645, 0x645, 0,
    0x6, 0xfd6e, 0x636, 0x62d, 0x649, 0,
    0x6, 0xfd6f, 0x636, 0x62e, 0x645, 0,
    0x4, 0xfd70, 0x636, 0x62e, 0x645, 0,
    0x6, 0xfd71, 0x637, 0x645, 0x62d, 0,
    0x4, 0xfd72, 0x637, 0x645, 0x62d, 0,
    0x4, 0xfd73, 0x637, 0x645, 0x645, 0,
    0x6, 0xfd74, 0x637, 0x645, 0x64a, 0,
    0x6, 0xfd75, 0x639, 0x62c, 0x645, 0,
    0x6, 0xfd76, 0x639, 0x645, 0x645, 0,
    0x4, 0xfd77, 0x639, 0x645, 0x645, 0,
    0x6, 0xfd78, 0x639, 0x645, 0x649, 0,
    0x6, 0xfd79, 0x63a, 0x645, 0x645, 0,
    0x6, 0xfd7a, 0x63a, 0x645, 0x64a, 0,
    0x6, 0xfd7b, 0x63a, 0x645, 0x649, 0,
    0x6, 0xfd7c, 0x641, 0x62e, 0x645, 0,
    0x4, 0xfd7d, 0x641, 0x62e, 0x645, 0,
    0x6, 0xfd7e, 0x642, 0x645, 0x62d, 0,
    0x6, 0xfd7f, 0x642, 0x645, 0x645, 0,
    0x6, 0xfd80, 0x644, 0x62d, 0x645, 0,
    0x6, 0xfd81, 0x644, 0x62d, 0x64a, 0,
    0x6, 0xfd82, 0x644, 0x62d, 0x649, 0,
    0x4, 0xfd83, 0x644, 0x62c, 0x62c, 0,
    0x6, 0xfd84, 0x644, 0x62c, 0x62c, 0,
    0x6, 0xfd85, 0x644, 0x62e, 0x645, 0,
    0x4, 0xfd86, 0x644, 0x62e, 0x645, 0,
    0x6, 0xfd87, 0x644, 0x645, 0x62d, 0,
    0x4, 0xfd88, 0x644, 0x645, 0x62d, 0,
    0x4, 0xfd89, 0x645, 0x62d, 0x62c, 0,
    0x4, 0xfd8a, 0x645, 0x62d, 0x645, 0,
    0x6, 0xfd8b, 0x645, 0x62d, 0x64a, 0,
    0x4, 0xfd8c, 0x645, 0x62c, 0x62d, 0,
    0x4, 0xfd8d, 0x645, 0x62c, 0x645, 0,
    0x4, 0xfd8e, 0x645, 0x62e, 0x62c, 0,
    0x4, 0xfd8f, 0x645, 0x62e, 0x645, 0,
    0x4, 0xfd92, 0x645, 0x62c, 0x62e, 0,
    0x4, 0xfd93, 0x647, 0x645, 0x62c, 0,
    0x4, 0xfd94, 0x647, 0x645, 0x645, 0,
    0x4, 0xfd95, 0x646, 0x62d, 0x645, 0,
    0x6, 0xfd96, 0x646, 0x62d, 0x649, 0,
    0x6, 0xfd97, 0x646, 0x62c, 0x645, 0,
    0x4, 0xfd98, 0x646, 0x62c, 0x645, 0,
    0x6, 0xfd99, 0x646, 0x62c, 0x649, 0,
    0x6, 0xfd9a, 0x646, 0x645, 0x64a, 0,
    0x6, 0xfd9b, 0x646, 0x645, 0x649, 0,
    0x6, 0xfd9c, 0x64a, 0x645, 0x645, 0,
    0x4, 0xfd9d, 0x64a, 0x645, 0x645, 0,
    0x6, 0xfd9e, 0x628, 0x62e, 0x64a, 0,
    0x6, 0xfd9f, 0x62a, 0x62c, 0x64a, 0,
    0x6, 0xfda0, 0x62a, 0x62c, 0x649, 0,
    0x6, 0xfda1, 0x62a, 0x62e, 0x64a, 0,
    0x6, 0xfda2, 0x62a, 0x62e, 0x649, 0,
    0x6, 0xfda3, 0x62a, 0x645, 0x64a, 0,
    0x6, 0xfda4, 0x62a, 0x645, 0x649, 0,
    0x6, 0xfda5, 0x62c, 0x645, 0x64a, 0,
    0x6, 0xfda6, 0x62c, 0x62d, 0x649, 0,
    0x6, 0xfda7, 0x62c, 0x645, 0x649, 0,
    0x6, 0xfda8, 0x633, 0x62e, 0x649, 0,
    0x6, 0xfda9, 0x635, 0x62d, 0x64a, 0,
    0x6, 0xfdaa, 0x634, 0x62d, 0x64a, 0,
    0x6, 0xfdab, 0x636, 0x62d, 0x64a, 0,
    0x6, 0xfdac, 0x644, 0x62c, 0x64a, 0,
    0x6, 0xfdad, 0x644, 0x645, 0x64a, 0,
    0x6, 0xfdae, 0x64a, 0x62d, 0x64a, 0,
    0x6, 0xfdaf, 0x64a, 0x62c, 0x64a, 0,
    0x6, 0xfdb0, 0x64a, 0x645, 0x64a, 0,
    0x6, 0xfdb1, 0x645, 0x645, 0x64a, 0,
    0x6, 0xfdb2, 0x642, 0x645, 0x64a, 0,
    0x6, 0xfdb3, 0x646, 0x62d, 0x64a, 0,
    0x4, 0xfdb4, 0x642, 0x645, 0x62d, 0,
    0x4, 0xfdb5, 0x644, 0x62d, 0x645, 0,
    0x6, 0xfdb6, 0x639, 0x645, 0x64a, 0,
    0x6, 0xfdb7, 0x643, 0x645, 0x64a, 0,
    0x4, 0xfdb8, 0x646, 0x62c, 0x62d, 0,
    0x6, 0xfdb9, 0x645, 0x62e, 0x64a, 0,
    0x4, 0xfdba, 0x644, 0x62c, 0x645, 0,
    0x6, 0xfdbb, 0x643, 0x645, 0x645, 0,
    0x6, 0xfdbc, 0x644, 0x62c, 0x645, 0,
    0x6, 0xfdbd, 0x646, 0x62c, 0x62d, 0,
    0x6, 0xfdbe, 0x62c, 0x62d, 0x64a, 0,
    0x6, 0xfdbf, 0x62d, 0x62c, 0x64a, 0,
    0x6, 0xfdc0, 0x645, 0x62c, 0x64a, 0,
    0x6, 0xfdc1, 0x641, 0x645, 0x64a, 0,
    0x6, 0xfdc2, 0x628, 0x62d, 0x64a, 0,
    0x4, 0xfdc3, 0x643, 0x645, 0x645, 0,
    0x4, 0xfdc4, 0x639, 0x62c, 0x645, 0,
    0x4, 0xfdc5, 0x635, 0x645, 0x645, 0,
    0x6, 0xfdc6, 0x633, 0x62e, 0x64a, 0,
    0x6, 0xfdc7, 0x646, 0x62c, 0x64a, 0,
    0x7, 0xfdf0, 0x635, 0x644, 0x6d2, 0,
    0x7, 0xfdf1, 0x642, 0x644, 0x6d2, 0,
    0x7, 0xfdf2, 0x627, 0x644, 0x644, 0x647, 0,
    0x7, 0xfdf3, 0x627, 0x643, 0x628, 0x631, 0,
    0x7, 0xfdf4, 0x645, 0x62d, 0x645, 0x62f, 0,
    0x7, 0xfdf5, 0x635, 0x644, 0x639, 0x645, 0,
    0x7, 0xfdf6, 0x631, 0x633, 0x648, 0x644, 0,
    0x7, 0xfdf7, 0x639, 0x644, 0x64a, 0x647, 0,
    0x7, 0xfdf8, 0x648, 0x633, 0x644, 0x645, 0,
    0x7, 0xfdf9, 0x635, 0x644, 0x649, 0,
    0x7, 0xfdfa, 0x635, 0x644, 0x649, 0x20, 0x627, 0x644, 0x644, 0x647, 0x20, 0x639, 0x644, 0x64a, 0x647, 0x20, 0x648, 0x633, 0x644, 0x645, 0,
    0x7, 0xfdfb, 0x62c, 0x644, 0x20, 0x62c, 0x644, 0x627, 0x644, 0x647, 0,
    0xb, 0xfe30, 0x2025, 0,
    0xb, 0xfe31, 0x2014, 0,
    0xb, 0xfe32, 0x2013, 0,
    0xb, 0xfe33, 0x5f, 0,
    0xb, 0xfe34, 0x5f, 0,
    0xb, 0xfe35, 0x28, 0,
    0xb, 0xfe36, 0x29, 0,
    0xb, 0xfe37, 0x7b, 0,
    0xb, 0xfe38, 0x7d, 0,
    0xb, 0xfe39, 0x3014, 0,
    0xb, 0xfe3a, 0x3015, 0,
    0xb, 0xfe3b, 0x3010, 0,
    0xb, 0xfe3c, 0x3011, 0,
    0xb, 0xfe3d, 0x300a, 0,
    0xb, 0xfe3e, 0x300b, 0,
    0xb, 0xfe3f, 0x3008, 0,
    0xb, 0xfe40, 0x3009, 0,
    0xb, 0xfe41, 0x300c, 0,
    0xb, 0xfe42, 0x300d, 0,
    0xb, 0xfe43, 0x300e, 0,
    0xb, 0xfe44, 0x300f, 0,
    0x10, 0xfe49, 0x203e, 0,
    0x10, 0xfe4a, 0x203e, 0,
    0x10, 0xfe4b, 0x203e, 0,
    0x10, 0xfe4c, 0x203e, 0,
    0x10, 0xfe4d, 0x5f, 0,
    0x10, 0xfe4e, 0x5f, 0,
    0x10, 0xfe4f, 0x5f, 0,
    0xe, 0xfe50, 0x2c, 0,
    0xe, 0xfe51, 0x3001, 0,
    0xe, 0xfe52, 0x2e, 0,
    0xe, 0xfe54, 0x3b, 0,
    0xe, 0xfe55, 0x3a, 0,
    0xe, 0xfe56, 0x3f, 0,
    0xe, 0xfe57, 0x21, 0,
    0xe, 0xfe58, 0x2014, 0,
    0xe, 0xfe59, 0x28, 0,
    0xe, 0xfe5a, 0x29, 0,
    0xe, 0xfe5b, 0x7b, 0,
    0xe, 0xfe5c, 0x7d, 0,
    0xe, 0xfe5d, 0x3014, 0,
    0xe, 0xfe5e, 0x3015, 0,
    0xe, 0xfe5f, 0x23, 0,
    0xe, 0xfe60, 0x26, 0,
    0xe, 0xfe61, 0x2a, 0,
    0xe, 0xfe62, 0x2b, 0,
    0xe, 0xfe63, 0x2d, 0,
    0xe, 0xfe64, 0x3c, 0,
    0xe, 0xfe65, 0x3e, 0,
    0xe, 0xfe66, 0x3d, 0,
    0xe, 0xfe68, 0x5c, 0,
    0xe, 0xfe69, 0x24, 0,
    0xe, 0xfe6a, 0x25, 0,
    0xe, 0xfe6b, 0x40, 0,
    0x7, 0xfe70, 0x20, 0x64b, 0,
    0x5, 0xfe71, 0x640, 0x64b, 0,
    0x7, 0xfe72, 0x20, 0x64c, 0,
    0x7, 0xfe74, 0x20, 0x64d, 0,
    0x7, 0xfe76, 0x20, 0x64e, 0,
    0x5, 0xfe77, 0x640, 0x64e, 0,
    0x7, 0xfe78, 0x20, 0x64f, 0,
    0x5, 0xfe79, 0x640, 0x64f, 0,
    0x7, 0xfe7a, 0x20, 0x650, 0,
    0x5, 0xfe7b, 0x640, 0x650, 0,
    0x7, 0xfe7c, 0x20, 0x651, 0,
    0x5, 0xfe7d, 0x640, 0x651, 0,
    0x7, 0xfe7e, 0x20, 0x652, 0,
    0x5, 0xfe7f, 0x640, 0x652, 0,
    0x7, 0xfe80, 0x621, 0,
    0x7, 0xfe81, 0x622, 0,
    0x6, 0xfe82, 0x622, 0,
    0x7, 0xfe83, 0x623, 0,
    0x6, 0xfe84, 0x623, 0,
    0x7, 0xfe85, 0x624, 0,
    0x6, 0xfe86, 0x624, 0,
    0x7, 0xfe87, 0x625, 0,
    0x6, 0xfe88, 0x625, 0,
    0x7, 0xfe89, 0x626, 0,
    0x6, 0xfe8a, 0x626, 0,
    0x4, 0xfe8b, 0x626, 0,
    0x5, 0xfe8c, 0x626, 0,
    0x7, 0xfe8d, 0x627, 0,
    0x6, 0xfe8e, 0x627, 0,
    0x7, 0xfe8f, 0x628, 0,
    0x6, 0xfe90, 0x628, 0,
    0x4, 0xfe91, 0x628, 0,
    0x5, 0xfe92, 0x628, 0,
    0x7, 0xfe93, 0x629, 0,
    0x6, 0xfe94, 0x629, 0,
    0x7, 0xfe95, 0x62a, 0,
    0x6, 0xfe96, 0x62a, 0,
    0x4, 0xfe97, 0x62a, 0,
    0x5, 0xfe98, 0x62a, 0,
    0x7, 0xfe99, 0x62b, 0,
    0x6, 0xfe9a, 0x62b, 0,
    0x4, 0xfe9b, 0x62b, 0,
    0x5, 0xfe9c, 0x62b, 0,
    0x7, 0xfe9d, 0x62c, 0,
    0x6, 0xfe9e, 0x62c, 0,
    0x4, 0xfe9f, 0x62c, 0,
    0x5, 0xfea0, 0x62c, 0,
    0x7, 0xfea1, 0x62d, 0,
    0x6, 0xfea2, 0x62d, 0,
    0x4, 0xfea3, 0x62d, 0,
    0x5, 0xfea4, 0x62d, 0,
    0x7, 0xfea5, 0x62e, 0,
    0x6, 0xfea6, 0x62e, 0,
    0x4, 0xfea7, 0x62e, 0,
    0x5, 0xfea8, 0x62e, 0,
    0x7, 0xfea9, 0x62f, 0,
    0x6, 0xfeaa, 0x62f, 0,
    0x7, 0xfeab, 0x630, 0,
    0x6, 0xfeac, 0x630, 0,
    0x7, 0xfead, 0x631, 0,
    0x6, 0xfeae, 0x631, 0,
    0x7, 0xfeaf, 0x632, 0,
    0x6, 0xfeb0, 0x632, 0,
    0x7, 0xfeb1, 0x633, 0,
    0x6, 0xfeb2, 0x633, 0,
    0x4, 0xfeb3, 0x633, 0,
    0x5, 0xfeb4, 0x633, 0,
    0x7, 0xfeb5, 0x634, 0,
    0x6, 0xfeb6, 0x634, 0,
    0x4, 0xfeb7, 0x634, 0,
    0x5, 0xfeb8, 0x634, 0,
    0x7, 0xfeb9, 0x635, 0,
    0x6, 0xfeba, 0x635, 0,
    0x4, 0xfebb, 0x635, 0,
    0x5, 0xfebc, 0x635, 0,
    0x7, 0xfebd, 0x636, 0,
    0x6, 0xfebe, 0x636, 0,
    0x4, 0xfebf, 0x636, 0,
    0x5, 0xfec0, 0x636, 0,
    0x7, 0xfec1, 0x637, 0,
    0x6, 0xfec2, 0x637, 0,
    0x4, 0xfec3, 0x637, 0,
    0x5, 0xfec4, 0x637, 0,
    0x7, 0xfec5, 0x638, 0,
    0x6, 0xfec6, 0x638, 0,
    0x4, 0xfec7, 0x638, 0,
    0x5, 0xfec8, 0x638, 0,
    0x7, 0xfec9, 0x639, 0,
    0x6, 0xfeca, 0x639, 0,
    0x4, 0xfecb, 0x639, 0,
    0x5, 0xfecc, 0x639, 0,
    0x7, 0xfecd, 0x63a, 0,
    0x6, 0xfece, 0x63a, 0,
    0x4, 0xfecf, 0x63a, 0,
    0x5, 0xfed0, 0x63a, 0,
    0x7, 0xfed1, 0x641, 0,
    0x6, 0xfed2, 0x641, 0,
    0x4, 0xfed3, 0x641, 0,
    0x5, 0xfed4, 0x641, 0,
    0x7, 0xfed5, 0x642, 0,
    0x6, 0xfed6, 0x642, 0,
    0x4, 0xfed7, 0x642, 0,
    0x5, 0xfed8, 0x642, 0,
    0x7, 0xfed9, 0x643, 0,
    0x6, 0xfeda, 0x643, 0,
    0x4, 0xfedb, 0x643, 0,
    0x5, 0xfedc, 0x643, 0,
    0x7, 0xfedd, 0x644, 0,
    0x6, 0xfede, 0x644, 0,
    0x4, 0xfedf, 0x644, 0,
    0x5, 0xfee0, 0x644, 0,
    0x7, 0xfee1, 0x645, 0,
    0x6, 0xfee2, 0x645, 0,
    0x4, 0xfee3, 0x645, 0,
    0x5, 0xfee4, 0x645, 0,
    0x7, 0xfee5, 0x646, 0,
    0x6, 0xfee6, 0x646, 0,
    0x4, 0xfee7, 0x646, 0,
    0x5, 0xfee8, 0x646, 0,
    0x7, 0xfee9, 0x647, 0,
    0x6, 0xfeea, 0x647, 0,
    0x4, 0xfeeb, 0x647, 0,
    0x5, 0xfeec, 0x647, 0,
    0x7, 0xfeed, 0x648, 0,
    0x6, 0xfeee, 0x648, 0,
    0x7, 0xfeef, 0x649, 0,
    0x6, 0xfef0, 0x649, 0,
    0x7, 0xfef1, 0x64a, 0,
    0x6, 0xfef2, 0x64a, 0,
    0x4, 0xfef3, 0x64a, 0,
    0x5, 0xfef4, 0x64a, 0,
    0x7, 0xfef5, 0x644, 0x622, 0,
    0x6, 0xfef6, 0x644, 0x622, 0,
    0x7, 0xfef7, 0x644, 0x623, 0,
    0x6, 0xfef8, 0x644, 0x623, 0,
    0x7, 0xfef9, 0x644, 0x625, 0,
    0x6, 0xfefa, 0x644, 0x625, 0,
    0x7, 0xfefb, 0x644, 0x627, 0,
    0x6, 0xfefc, 0x644, 0x627, 0,
    0xc, 0xff01, 0x21, 0,
    0xc, 0xff02, 0x22, 0,
    0xc, 0xff03, 0x23, 0,
    0xc, 0xff04, 0x24, 0,
    0xc, 0xff05, 0x25, 0,
    0xc, 0xff06, 0x26, 0,
    0xc, 0xff07, 0x27, 0,
    0xc, 0xff08, 0x28, 0,
    0xc, 0xff09, 0x29, 0,
    0xc, 0xff0a, 0x2a, 0,
    0xc, 0xff0b, 0x2b, 0,
    0xc, 0xff0c, 0x2c, 0,
    0xc, 0xff0d, 0x2d, 0,
    0xc, 0xff0e, 0x2e, 0,
    0xc, 0xff0f, 0x2f, 0,
    0xc, 0xff10, 0x30, 0,
    0xc, 0xff11, 0x31, 0,
    0xc, 0xff12, 0x32, 0,
    0xc, 0xff13, 0x33, 0,
    0xc, 0xff14, 0x34, 0,
    0xc, 0xff15, 0x35, 0,
    0xc, 0xff16, 0x36, 0,
    0xc, 0xff17, 0x37, 0,
    0xc, 0xff18, 0x38, 0,
    0xc, 0xff19, 0x39, 0,
    0xc, 0xff1a, 0x3a, 0,
    0xc, 0xff1b, 0x3b, 0,
    0xc, 0xff1c, 0x3c, 0,
    0xc, 0xff1d, 0x3d, 0,
    0xc, 0xff1e, 0x3e, 0,
    0xc, 0xff1f, 0x3f, 0,
    0xc, 0xff20, 0x40, 0,
    0xc, 0xff21, 0x41, 0,
    0xc, 0xff22, 0x42, 0,
    0xc, 0xff23, 0x43, 0,
    0xc, 0xff24, 0x44, 0,
    0xc, 0xff25, 0x45, 0,
    0xc, 0xff26, 0x46, 0,
    0xc, 0xff27, 0x47, 0,
    0xc, 0xff28, 0x48, 0,
    0xc, 0xff29, 0x49, 0,
    0xc, 0xff2a, 0x4a, 0,
    0xc, 0xff2b, 0x4b, 0,
    0xc, 0xff2c, 0x4c, 0,
    0xc, 0xff2d, 0x4d, 0,
    0xc, 0xff2e, 0x4e, 0,
    0xc, 0xff2f, 0x4f, 0,
    0xc, 0xff30, 0x50, 0,
    0xc, 0xff31, 0x51, 0,
    0xc, 0xff32, 0x52, 0,
    0xc, 0xff33, 0x53, 0,
    0xc, 0xff34, 0x54, 0,
    0xc, 0xff35, 0x55, 0,
    0xc, 0xff36, 0x56, 0,
    0xc, 0xff37, 0x57, 0,
    0xc, 0xff38, 0x58, 0,
    0xc, 0xff39, 0x59, 0,
    0xc, 0xff3a, 0x5a, 0,
    0xc, 0xff3b, 0x5b, 0,
    0xc, 0xff3c, 0x5c, 0,
    0xc, 0xff3d, 0x5d, 0,
    0xc, 0xff3e, 0x5e, 0,
    0xc, 0xff3f, 0x5f, 0,
    0xc, 0xff40, 0x60, 0,
    0xc, 0xff41, 0x61, 0,
    0xc, 0xff42, 0x62, 0,
    0xc, 0xff43, 0x63, 0,
    0xc, 0xff44, 0x64, 0,
    0xc, 0xff45, 0x65, 0,
    0xc, 0xff46, 0x66, 0,
    0xc, 0xff47, 0x67, 0,
    0xc, 0xff48, 0x68, 0,
    0xc, 0xff49, 0x69, 0,
    0xc, 0xff4a, 0x6a, 0,
    0xc, 0xff4b, 0x6b, 0,
    0xc, 0xff4c, 0x6c, 0,
    0xc, 0xff4d, 0x6d, 0,
    0xc, 0xff4e, 0x6e, 0,
    0xc, 0xff4f, 0x6f, 0,
    0xc, 0xff50, 0x70, 0,
    0xc, 0xff51, 0x71, 0,
    0xc, 0xff52, 0x72, 0,
    0xc, 0xff53, 0x73, 0,
    0xc, 0xff54, 0x74, 0,
    0xc, 0xff55, 0x75, 0,
    0xc, 0xff56, 0x76, 0,
    0xc, 0xff57, 0x77, 0,
    0xc, 0xff58, 0x78, 0,
    0xc, 0xff59, 0x79, 0,
    0xc, 0xff5a, 0x7a, 0,
    0xc, 0xff5b, 0x7b, 0,
    0xc, 0xff5c, 0x7c, 0,
    0xc, 0xff5d, 0x7d, 0,
    0xc, 0xff5e, 0x7e, 0,
    0xd, 0xff61, 0x3002, 0,
    0xd, 0xff62, 0x300c, 0,
    0xd, 0xff63, 0x300d, 0,
    0xd, 0xff64, 0x3001, 0,
    0xd, 0xff65, 0x30fb, 0,
    0xd, 0xff66, 0x30f2, 0,
    0xd, 0xff67, 0x30a1, 0,
    0xd, 0xff68, 0x30a3, 0,
    0xd, 0xff69, 0x30a5, 0,
    0xd, 0xff6a, 0x30a7, 0,
    0xd, 0xff6b, 0x30a9, 0,
    0xd, 0xff6c, 0x30e3, 0,
    0xd, 0xff6d, 0x30e5, 0,
    0xd, 0xff6e, 0x30e7, 0,
    0xd, 0xff6f, 0x30c3, 0,
    0xd, 0xff70, 0x30fc, 0,
    0xd, 0xff71, 0x30a2, 0,
    0xd, 0xff72, 0x30a4, 0,
    0xd, 0xff73, 0x30a6, 0,
    0xd, 0xff74, 0x30a8, 0,
    0xd, 0xff75, 0x30aa, 0,
    0xd, 0xff76, 0x30ab, 0,
    0xd, 0xff77, 0x30ad, 0,
    0xd, 0xff78, 0x30af, 0,
    0xd, 0xff79, 0x30b1, 0,
    0xd, 0xff7a, 0x30b3, 0,
    0xd, 0xff7b, 0x30b5, 0,
    0xd, 0xff7c, 0x30b7, 0,
    0xd, 0xff7d, 0x30b9, 0,
    0xd, 0xff7e, 0x30bb, 0,
    0xd, 0xff7f, 0x30bd, 0,
    0xd, 0xff80, 0x30bf, 0,
    0xd, 0xff81, 0x30c1, 0,
    0xd, 0xff82, 0x30c4, 0,
    0xd, 0xff83, 0x30c6, 0,
    0xd, 0xff84, 0x30c8, 0,
    0xd, 0xff85, 0x30ca, 0,
    0xd, 0xff86, 0x30cb, 0,
    0xd, 0xff87, 0x30cc, 0,
    0xd, 0xff88, 0x30cd, 0,
    0xd, 0xff89, 0x30ce, 0,
    0xd, 0xff8a, 0x30cf, 0,
    0xd, 0xff8b, 0x30d2, 0,
    0xd, 0xff8c, 0x30d5, 0,
    0xd, 0xff8d, 0x30d8, 0,
    0xd, 0xff8e, 0x30db, 0,
    0xd, 0xff8f, 0x30de, 0,
    0xd, 0xff90, 0x30df, 0,
    0xd, 0xff91, 0x30e0, 0,
    0xd, 0xff92, 0x30e1, 0,
    0xd, 0xff93, 0x30e2, 0,
    0xd, 0xff94, 0x30e4, 0,
    0xd, 0xff95, 0x30e6, 0,
    0xd, 0xff96, 0x30e8, 0,
    0xd, 0xff97, 0x30e9, 0,
    0xd, 0xff98, 0x30ea, 0,
    0xd, 0xff99, 0x30eb, 0,
    0xd, 0xff9a, 0x30ec, 0,
    0xd, 0xff9b, 0x30ed, 0,
    0xd, 0xff9c, 0x30ef, 0,
    0xd, 0xff9d, 0x30f3, 0,
    0xd, 0xff9e, 0x3099, 0,
    0xd, 0xff9f, 0x309a, 0,
    0xd, 0xffa0, 0x3164, 0,
    0xd, 0xffa1, 0x3131, 0,
    0xd, 0xffa2, 0x3132, 0,
    0xd, 0xffa3, 0x3133, 0,
    0xd, 0xffa4, 0x3134, 0,
    0xd, 0xffa5, 0x3135, 0,
    0xd, 0xffa6, 0x3136, 0,
    0xd, 0xffa7, 0x3137, 0,
    0xd, 0xffa8, 0x3138, 0,
    0xd, 0xffa9, 0x3139, 0,
    0xd, 0xffaa, 0x313a, 0,
    0xd, 0xffab, 0x313b, 0,
    0xd, 0xffac, 0x313c, 0,
    0xd, 0xffad, 0x313d, 0,
    0xd, 0xffae, 0x313e, 0,
    0xd, 0xffaf, 0x313f, 0,
    0xd, 0xffb0, 0x3140, 0,
    0xd, 0xffb1, 0x3141, 0,
    0xd, 0xffb2, 0x3142, 0,
    0xd, 0xffb3, 0x3143, 0,
    0xd, 0xffb4, 0x3144, 0,
    0xd, 0xffb5, 0x3145, 0,
    0xd, 0xffb6, 0x3146, 0,
    0xd, 0xffb7, 0x3147, 0,
    0xd, 0xffb8, 0x3148, 0,
    0xd, 0xffb9, 0x3149, 0,
    0xd, 0xffba, 0x314a, 0,
    0xd, 0xffbb, 0x314b, 0,
    0xd, 0xffbc, 0x314c, 0,
    0xd, 0xffbd, 0x314d, 0,
    0xd, 0xffbe, 0x314e, 0,
    0xd, 0xffc2, 0x314f, 0,
    0xd, 0xffc3, 0x3150, 0,
    0xd, 0xffc4, 0x3151, 0,
    0xd, 0xffc5, 0x3152, 0,
    0xd, 0xffc6, 0x3153, 0,
    0xd, 0xffc7, 0x3154, 0,
    0xd, 0xffca, 0x3155, 0,
    0xd, 0xffcb, 0x3156, 0,
    0xd, 0xffcc, 0x3157, 0,
    0xd, 0xffcd, 0x3158, 0,
    0xd, 0xffce, 0x3159, 0,
    0xd, 0xffcf, 0x315a, 0,
    0xd, 0xffd2, 0x315b, 0,
    0xd, 0xffd3, 0x315c, 0,
    0xd, 0xffd4, 0x315d, 0,
    0xd, 0xffd5, 0x315e, 0,
    0xd, 0xffd6, 0x315f, 0,
    0xd, 0xffd7, 0x3160, 0,
    0xd, 0xffda, 0x3161, 0,
    0xd, 0xffdb, 0x3162, 0,
    0xd, 0xffdc, 0x3163, 0,
    0xc, 0xffe0, 0xa2, 0,
    0xc, 0xffe1, 0xa3, 0,
    0xc, 0xffe2, 0xac, 0,
    0xc, 0xffe3, 0xaf, 0,
    0xc, 0xffe4, 0xa6, 0,
    0xc, 0xffe5, 0xa5, 0,
    0xc, 0xffe6, 0x20a9, 0,
    0xd, 0xffe8, 0x2502, 0,
    0xd, 0xffe9, 0x2190, 0,
    0xd, 0xffea, 0x2191, 0,
    0xd, 0xffeb, 0x2192, 0,
    0xd, 0xffec, 0x2193, 0,
    0xd, 0xffed, 0x25a0, 0,
    0xd, 0xffee, 0x25cb, 0,
};

static const Q_UINT16 dec_row0 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x1, 0x6,
    0xb, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x10, 0, 0, 0, 0, 0, 0, 0,
    0x14, 0, 0x19, 0, 0, 0, 0, 0x1d,
    0, 0, 0x22, 0x26, 0x2a, 0x2f, 0, 0,
    0x33, 0x38, 0x3c, 0, 0x40, 0x46, 0x4c, 0,
    0x52, 0x57, 0x5c, 0x61, 0x66, 0x6b, 0, 0x70,
    0x75, 0x7a, 0x7f, 0x84, 0x89, 0x8e, 0x93, 0x98,
    0, 0x9d, 0xa2, 0xa7, 0xac, 0xb1, 0xb6, 0,
    0, 0xbb, 0xc0, 0xc5, 0xca, 0xcf, 0, 0,
    0xd4, 0xd9, 0xde, 0xe3, 0xe8, 0xed, 0, 0xf2,
    0xf7, 0xfc, 0x101, 0x106, 0x10b, 0x110, 0x115, 0x11a,
    0, 0x11f, 0x124, 0x129, 0x12e, 0x133, 0x138, 0,
    0, 0x13d, 0x142, 0x147, 0x14c, 0x151, 0, 0x156,
};

static const Q_UINT16 dec_row1 [] = {
    0x15b, 0x160, 0x165, 0x16a, 0x16f, 0x174, 0x179, 0x17e,
    0x183, 0x188, 0x18d, 0x192, 0x197, 0x19c, 0x1a1, 0x1a6,
    0, 0, 0x1ab, 0x1b0, 0x1b5, 0x1ba, 0x1bf, 0x1c4,
    0x1c9, 0x1ce, 0x1d3, 0x1d8, 0x1dd, 0x1e2, 0x1e7, 0x1ec,
    0x1f1, 0x1f6, 0x1fb, 0x200, 0x205, 0x20a, 0, 0,
    0x20f, 0x214, 0x219, 0x21e, 0x223, 0x228, 0x22d, 0x232,
    0x237, 0, 0x23c, 0x241, 0x246, 0x24b, 0x250, 0x255,
    0, 0x25a, 0x25f, 0x264, 0x269, 0x26e, 0x273, 0x278,
    0x27d, 0, 0, 0x282, 0x287, 0x28c, 0x291, 0x296,
    0x29b, 0x2a0, 0, 0, 0x2a5, 0x2aa, 0x2af, 0x2b4,
    0x2b9, 0x2be, 0, 0, 0x2c3, 0x2c8, 0x2cd, 0x2d2,
    0x2d7, 0x2dc, 0x2e1, 0x2e6, 0x2eb, 0x2f0, 0x2f5, 0x2fa,
    0x2ff, 0x304, 0x309, 0x30e, 0x313, 0x318, 0, 0,
    0x31d, 0x322, 0x327, 0x32c, 0x331, 0x336, 0x33b, 0x340,
    0x345, 0x34a, 0x34f, 0x354, 0x359, 0x35e, 0x363, 0x368,
    0x36d, 0x372, 0x377, 0x37c, 0x381, 0x386, 0x38b, 0x390,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x394, 0x399, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x39e,
    0x3a3, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x3a8, 0x3ad, 0x3b2, 0x3b7,
    0x3bc, 0x3c1, 0x3c6, 0x3cb, 0x3d0, 0x3d5, 0x3da, 0x3df,
    0x3e4, 0x3e9, 0x3ee, 0x3f3, 0x3f8, 0x3fd, 0x402, 0x407,
    0x40c, 0x411, 0x416, 0x41b, 0x420, 0, 0x425, 0x42a,
    0x42f, 0x435, 0x43b, 0x440, 0, 0, 0x445, 0x44a,
    0x44f, 0x454, 0x459, 0x45e, 0x463, 0x468, 0x46d, 0x472,
    0x477, 0x47c, 0x481, 0x486, 0x48b, 0x490, 0, 0,
    0, 0, 0x495, 0x49a, 0x49f, 0x4a4, 0x4a9, 0x4ae,
};

static const Q_UINT16 dec_row2 [] = {
    0x4b3, 0x4b8, 0x4bd, 0x4c2, 0x4c7, 0x4cc, 0x4d1, 0x4d6,
    0x4db, 0x4e0, 0x4e5, 0x4ea, 0x4ef, 0x4f4, 0x4f9, 0x4fe,
    0x503, 0x508, 0x50d, 0x512, 0x517, 0x51c, 0x521, 0x526,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x52b, 0x52f, 0x533, 0x537, 0x53b, 0x53f, 0x543, 0x547,
    0x54b, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x54f, 0x554, 0x559, 0x55e, 0x563, 0x568, 0, 0,
    0x56d, 0x571, 0x575, 0x579, 0x57d, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_row3 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x581, 0x585, 0, 0x589, 0x58d, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x592, 0, 0, 0,
    0, 0, 0x596, 0, 0, 0, 0x59b, 0,
    0, 0, 0, 0, 0x59f, 0x5a4, 0x5a9, 0x5ae,
    0x5b2, 0x5b7, 0x5bc, 0, 0x5c1, 0, 0x5c6, 0x5cb,
    0x5d0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x5d5, 0x5da, 0x5df, 0x5e4, 0x5e9, 0x5ee,
    0x5f3, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x5f8, 0x5fd, 0x602, 0x607, 0x60c, 0,
    0, 0, 0, 0x611, 0x616, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_row4 [] = {
    0, 0x61b, 0, 0x620, 0, 0, 0, 0x625,
    0, 0, 0, 0, 0x62a, 0, 0x62f, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x634, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x639, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x63e, 0, 0x643, 0, 0, 0, 0x648,
    0, 0, 0, 0, 0x64d, 0, 0x652, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x657, 0x65c,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x661, 0x666, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x66b, 0x670, 0x675, 0x67a, 0, 0, 0x67f, 0x684,
    0, 0, 0x689, 0x68e, 0x693, 0x698, 0x69d, 0x6a2,
    0, 0, 0x6a7, 0x6ac, 0x6b1, 0x6b6, 0x6bb, 0x6c0,
    0, 0, 0x6c5, 0x6ca, 0, 0, 0x6cf, 0x6d4,
    0x6d9, 0x6de, 0x6e3, 0x6e8, 0x6ed, 0x6f2, 0, 0,
    0x6f7, 0x6fc, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_row5 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x701,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_row9 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x706, 0, 0, 0, 0, 0, 0,
    0, 0x70b, 0, 0, 0x710, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x715, 0x71a, 0x71f, 0x724, 0x729, 0x72e, 0x733, 0x738,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x73d, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x742, 0x747, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x74c, 0x751, 0, 0x756,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_rowa [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x75b, 0x760, 0x765, 0x76a, 0, 0x76f, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_rowb [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x774, 0, 0, 0x779, 0x77e, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x783, 0x788, 0, 0x78d,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x792, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x797, 0x79c, 0x7a1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_rowc [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x7a6, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x7ab, 0, 0, 0, 0, 0, 0, 0x7b0,
    0x7b5, 0, 0x7ba, 0x7bf, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_rowd [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x7c4, 0x7c9, 0x7ce, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_rowe [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x7d3, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x7d8, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x7dd, 0x7e2, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_rowf [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x7e7, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x7ec, 0, 0,
    0, 0, 0x7f1, 0, 0, 0, 0, 0x7f6,
    0, 0, 0, 0, 0x7fb, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x800, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x805, 0, 0x80a, 0x80f, 0x814,
    0x819, 0x81e, 0, 0, 0, 0, 0, 0,
    0, 0x823, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x828, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x82d, 0, 0,
    0, 0, 0x832, 0, 0, 0, 0, 0x837,
    0, 0, 0, 0, 0x83c, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x841, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_row11 [] = {
    0, 0x846, 0, 0, 0x84b, 0, 0, 0,
    0x850, 0, 0x855, 0, 0, 0x85a, 0, 0,
    0, 0, 0, 0x85f, 0x864, 0x869, 0x86e, 0x873,
    0x878, 0x87d, 0x882, 0x887, 0x88c, 0x891, 0x896, 0x89b,
    0x8a0, 0x8a5, 0x8aa, 0x8b0, 0x8b6, 0x8bc, 0x8c2, 0x8c8,
    0x8cd, 0x8d2, 0x8d7, 0x8dc, 0x8e1, 0x8e7, 0x8ec, 0x8f1,
    0x8f6, 0x8fb, 0x900, 0x905, 0x90b, 0x911, 0x916, 0x91b,
    0x920, 0x925, 0x92a, 0x92f, 0, 0x934, 0, 0x939,
    0, 0x93e, 0x943, 0x948, 0x94d, 0x952, 0x957, 0x95c,
    0x961, 0x966, 0x96b, 0x970, 0, 0x975, 0, 0x97a,
    0, 0x97f, 0x984, 0x989, 0, 0, 0x98e, 0x993,
    0x998, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x99d, 0, 0x9a2, 0, 0x9a7, 0,
    0x9ac, 0, 0x9b1, 0x9b6, 0x9bc, 0, 0, 0x9c1,
    0x9c6, 0x9cc, 0, 0, 0x9d1, 0, 0x9d6, 0x9db,
    0x9e0, 0x9e5, 0x9ea, 0x9ef, 0x9f4, 0x9f9, 0x9fe, 0xa03,
    0xa08, 0xa0d, 0xa12, 0xa17, 0xa1c, 0xa21, 0xa26, 0xa2b,
    0xa30, 0xa35, 0xa3a, 0xa3f, 0xa45, 0xa4a, 0xa4f, 0xa54,
    0xa59, 0xa5e, 0xa63, 0xa68, 0xa6d, 0xa72, 0xa77, 0xa7c,
    0xa81, 0xa86, 0xa8b, 0xa90, 0xa95, 0xa9a, 0, 0xa9f,
    0xaa4, 0xaa9, 0xaae, 0, 0, 0, 0, 0,
    0, 0xab3, 0xab8, 0, 0xabd, 0xac2, 0, 0,
    0xac7, 0xacc, 0xad1, 0xad6, 0xadb, 0xae0, 0xae5, 0,
    0, 0xaea, 0, 0xaef, 0, 0, 0, 0,
    0, 0, 0, 0xaf4, 0xaf9, 0xaff, 0xb04, 0xb09,
    0xb0e, 0xb13, 0xb18, 0xb1d, 0xb22, 0xb28, 0xb2d, 0xb32,
    0xb38, 0xb3d, 0xb43, 0xb49, 0xb4f, 0xb55, 0xb5b, 0xb61,
    0xb66, 0xb6b, 0xb70, 0xb75, 0xb7a, 0xb7f, 0xb84, 0xb8a,
    0xb8f, 0xb94, 0xb99, 0xb9e, 0xba3, 0xba8, 0xbad, 0xbb2,
    0xbb7, 0xbbc, 0xbc1, 0, 0xbc6, 0xbcb, 0xbd1, 0xbd6,
    0, 0xbdb, 0xbe0, 0xbe5, 0xbea, 0xbef, 0xbf4, 0xbf9,
    0xbfe, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_row1e [] = {
    0xc03, 0xc08, 0xc0d, 0xc12, 0xc17, 0xc1c, 0xc21, 0xc26,
    0xc2b, 0xc30, 0xc35, 0xc3a, 0xc3f, 0xc44, 0xc49, 0xc4e,
    0xc53, 0xc58, 0xc5d, 0xc62, 0xc67, 0xc6c, 0xc71, 0xc76,
    0xc7b, 0xc80, 0xc85, 0xc8a, 0xc8f, 0xc94, 0xc99, 0xc9e,
    0xca3, 0xca8, 0xcad, 0xcb2, 0xcb7, 0xcbc, 0xcc1, 0xcc6,
    0xccb, 0xcd0, 0xcd5, 0xcda, 0xcdf, 0xce4, 0xce9, 0xcee,
    0xcf3, 0xcf8, 0xcfd, 0xd02, 0xd07, 0xd0c, 0xd11, 0xd16,
    0xd1b, 0xd20, 0xd25, 0xd2a, 0xd2f, 0xd34, 0xd39, 0xd3e,
    0xd43, 0xd48, 0xd4d, 0xd52, 0xd57, 0xd5c, 0xd61, 0xd66,
    0xd6b, 0xd70, 0xd75, 0xd7a, 0xd7f, 0xd84, 0xd89, 0xd8e,
    0xd93, 0xd98, 0xd9d, 0xda2, 0xda7, 0xdac, 0xdb1, 0xdb6,
    0xdbb, 0xdc0, 0xdc5, 0xdca, 0xdcf, 0xdd4, 0xdd9, 0xdde,
    0xde3, 0xde8, 0xded, 0xdf2, 0xdf7, 0xdfc, 0xe01, 0xe06,
    0xe0b, 0xe10, 0xe15, 0xe1a, 0xe1f, 0xe24, 0xe29, 0xe2e,
    0xe33, 0xe38, 0xe3d, 0xe42, 0xe47, 0xe4c, 0xe51, 0xe56,
    0xe5b, 0xe60, 0xe65, 0xe6a, 0xe6f, 0xe74, 0xe79, 0xe7e,
    0xe83, 0xe88, 0xe8d, 0xe92, 0xe97, 0xe9c, 0xea1, 0xea6,
    0xeab, 0xeb0, 0xeb5, 0xeba, 0xebf, 0xec4, 0xec9, 0xece,
    0xed3, 0xed8, 0xedd, 0xee2, 0xee7, 0xeec, 0xef1, 0xef6,
    0xefb, 0xf00, 0xf05, 0xf0a, 0, 0, 0, 0,
    0xf0f, 0xf14, 0xf19, 0xf1e, 0xf23, 0xf28, 0xf2d, 0xf32,
    0xf37, 0xf3c, 0xf41, 0xf46, 0xf4b, 0xf50, 0xf55, 0xf5a,
    0xf5f, 0xf64, 0xf69, 0xf6e, 0xf73, 0xf78, 0xf7d, 0xf82,
    0xf87, 0xf8c, 0xf91, 0xf96, 0xf9b, 0xfa0, 0xfa5, 0xfaa,
    0xfaf, 0xfb4, 0xfb9, 0xfbe, 0xfc3, 0xfc8, 0xfcd, 0xfd2,
    0xfd7, 0xfdc, 0xfe1, 0xfe6, 0xfeb, 0xff0, 0xff5, 0xffa,
    0xfff, 0x1004, 0x1009, 0x100e, 0x1013, 0x1018, 0x101d, 0x1022,
    0x1027, 0x102c, 0x1031, 0x1036, 0x103b, 0x1040, 0x1045, 0x104a,
    0x104f, 0x1054, 0x1059, 0x105e, 0x1063, 0x1068, 0x106d, 0x1072,
    0x1077, 0x107c, 0x1081, 0x1086, 0x108b, 0x1090, 0x1095, 0x109a,
    0x109f, 0x10a4, 0x10a9, 0x10ae, 0x10b3, 0x10b8, 0x10bd, 0x10c2,
    0x10c7, 0x10cc, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_row1f [] = {
    0x10d1, 0x10d6, 0x10db, 0x10e0, 0x10e5, 0x10ea, 0x10ef, 0x10f4,
    0x10f9, 0x10fe, 0x1103, 0x1108, 0x110d, 0x1112, 0x1117, 0x111c,
    0x1121, 0x1126, 0x112b, 0x1130, 0x1135, 0x113a, 0, 0,
    0x113f, 0x1144, 0x1149, 0x114e, 0x1153, 0x1158, 0, 0,
    0x115d, 0x1162, 0x1167, 0x116c, 0x1171, 0x1176, 0x117b, 0x1180,
    0x1185, 0x118a, 0x118f, 0x1194, 0x1199, 0x119e, 0x11a3, 0x11a8,
    0x11ad, 0x11b2, 0x11b7, 0x11bc, 0x11c1, 0x11c6, 0x11cb, 0x11d0,
    0x11d5, 0x11da, 0x11df, 0x11e4, 0x11e9, 0x11ee, 0x11f3, 0x11f8,
    0x11fd, 0x1202, 0x1207, 0x120c, 0x1211, 0x1216, 0, 0,
    0x121b, 0x1220, 0x1225, 0x122a, 0x122f, 0x1234, 0, 0,
    0x1239, 0x123e, 0x1243, 0x1248, 0x124d, 0x1252, 0x1257, 0x125c,
    0, 0x1261, 0, 0x1266, 0, 0x126b, 0, 0x1270,
    0x1275, 0x127a, 0x127f, 0x1284, 0x1289, 0x128e, 0x1293, 0x1298,
    0x129d, 0x12a2, 0x12a7, 0x12ac, 0x12b1, 0x12b6, 0x12bb, 0x12c0,
    0x12c5, 0x12ca, 0x12ce, 0x12d3, 0x12d7, 0x12dc, 0x12e0, 0x12e5,
    0x12e9, 0x12ee, 0x12f2, 0x12f7, 0x12fb, 0x1300, 0, 0,
    0x1304, 0x1309, 0x130e, 0x1313, 0x1318, 0x131d, 0x1322, 0x1327,
    0x132c, 0x1331, 0x1336, 0x133b, 0x1340, 0x1345, 0x134a, 0x134f,
    0x1354, 0x1359, 0x135e, 0x1363, 0x1368, 0x136d, 0x1372, 0x1377,
    0x137c, 0x1381, 0x1386, 0x138b, 0x1390, 0x1395, 0x139a, 0x139f,
    0x13a4, 0x13a9, 0x13ae, 0x13b3, 0x13b8, 0x13bd, 0x13c2, 0x13c7,
    0x13cc, 0x13d1, 0x13d6, 0x13db, 0x13e0, 0x13e5, 0x13ea, 0x13ef,
    0x13f4, 0x13f9, 0x13fe, 0x1403, 0x1408, 0, 0x140d, 0x1412,
    0x1417, 0x141c, 0x1421, 0x1426, 0x142a, 0x142f, 0x1434, 0x1438,
    0x143d, 0x1442, 0x1447, 0x144c, 0x1451, 0, 0x1456, 0x145b,
    0x1460, 0x1465, 0x1469, 0x146e, 0x1472, 0x1477, 0x147c, 0x1481,
    0x1486, 0x148b, 0x1490, 0x1495, 0, 0, 0x1499, 0x149e,
    0x14a3, 0x14a8, 0x14ad, 0x14b2, 0, 0x14b6, 0x14bb, 0x14c0,
    0x14c5, 0x14ca, 0x14cf, 0x14d4, 0x14d8, 0x14dd, 0x14e2, 0x14e7,
    0x14ec, 0x14f1, 0x14f6, 0x14fb, 0x14ff, 0x1504, 0x1509, 0x150d,
    0, 0, 0x1511, 0x1516, 0x151b, 0, 0x1520, 0x1525,
    0x152a, 0x152f, 0x1533, 0x1538, 0x153c, 0x1541, 0x1545, 0,
};

static const Q_UINT16 dec_row20 [] = {
    0x154a, 0x154e, 0x1552, 0x1556, 0x155a, 0x155e, 0x1562, 0x1566,
    0x156a, 0x156e, 0x1572, 0, 0, 0, 0, 0,
    0, 0x1576, 0, 0, 0, 0, 0, 0x157a,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x157f, 0x1583, 0x1588, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x158e, 0x1593, 0, 0x1599, 0x159e,
    0, 0, 0, 0, 0x15a4, 0, 0x15a9, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x15ae, 0, 0, 0, 0x15b2, 0x15b6, 0x15ba, 0x15be,
    0x15c2, 0x15c6, 0x15ca, 0x15ce, 0x15d2, 0x15d6, 0x15da, 0x15de,
    0x15e2, 0x15e6, 0x15ea, 0x15ee, 0x15f2, 0x15f6, 0x15fa, 0x15fe,
    0x1602, 0x1606, 0x160a, 0x160e, 0x1612, 0x1616, 0x161a, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x161e, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_row21 [] = {
    0x1623, 0x1629, 0x162f, 0x1633, 0, 0x1638, 0x163e, 0x1644,
    0, 0x1648, 0x164d, 0x1651, 0x1655, 0x1659, 0x165d, 0x1661,
    0x1665, 0x1669, 0x166d, 0x1671, 0, 0x1675, 0x1679, 0,
    0, 0x167e, 0x1682, 0x1686, 0x168a, 0x168e, 0, 0,
    0x1692, 0x1697, 0x169d, 0, 0x16a2, 0, 0x16a6, 0,
    0x16aa, 0, 0x16ae, 0x16b2, 0x16b6, 0x16ba, 0, 0x16be,
    0x16c2, 0x16c6, 0, 0x16ca, 0x16ce, 0x16d2, 0x16d6, 0x16da,
    0x16de, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x16e2, 0x16e8, 0x16ee, 0x16f4, 0x16fa,
    0x1700, 0x1706, 0x170c, 0x1712, 0x1718, 0x171e, 0x1724, 0x172a,
    0x172f, 0x1733, 0x1738, 0x173e, 0x1743, 0x1747, 0x174c, 0x1752,
    0x1759, 0x175e, 0x1762, 0x1767, 0x176d, 0x1771, 0x1775, 0x1779,
    0x177d, 0x1781, 0x1786, 0x178c, 0x1791, 0x1795, 0x179a, 0x17a0,
    0x17a7, 0x17ac, 0x17b0, 0x17b5, 0x17bb, 0x17bf, 0x17c3, 0x17c7,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_row22 [] = {
    0, 0, 0, 0, 0x17cb, 0, 0, 0,
    0, 0x17d0, 0, 0, 0x17d5, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x17da, 0, 0x17df, 0,
    0, 0, 0, 0, 0x17e4, 0x17e9, 0, 0x17ef,
    0x17f4, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x17fa, 0, 0, 0x17ff, 0, 0, 0x1804,
    0, 0x1809, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x180e, 0, 0x1813, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x1818, 0x181d, 0x1822,
    0x1827, 0x182c, 0, 0, 0x1831, 0x1836, 0, 0,
    0x183b, 0x1840, 0, 0, 0, 0, 0, 0,
    0x1845, 0x184a, 0, 0, 0x184f, 0x1854, 0, 0,
    0x1859, 0x185e, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x1863, 0x1868, 0x186d, 0x1872,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x1877, 0x187c, 0x1881, 0x1886, 0, 0, 0, 0,
    0, 0, 0x188b, 0x1890, 0x1895, 0x189a, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_row23 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x189f, 0x18a3, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_row24 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x18a7, 0x18ab, 0x18af, 0x18b3, 0x18b7, 0x18bb, 0x18bf, 0x18c3,
    0x18c7, 0x18cb, 0x18d0, 0x18d5, 0x18da, 0x18df, 0x18e4, 0x18e9,
    0x18ee, 0x18f3, 0x18f8, 0x18fd, 0x1902, 0x1908, 0x190e, 0x1914,
    0x191a, 0x1920, 0x1926, 0x192c, 0x1932, 0x1938, 0x193f, 0x1946,
    0x194d, 0x1954, 0x195b, 0x1962, 0x1969, 0x1970, 0x1977, 0x197e,
    0x1985, 0x198a, 0x198f, 0x1994, 0x1999, 0x199e, 0x19a3, 0x19a8,
    0x19ad, 0x19b2, 0x19b8, 0x19be, 0x19c4, 0x19ca, 0x19d0, 0x19d6,
    0x19dc, 0x19e2, 0x19e8, 0x19ee, 0x19f4, 0x19fa, 0x1a00, 0x1a06,
    0x1a0c, 0x1a12, 0x1a18, 0x1a1e, 0x1a24, 0x1a2a, 0x1a30, 0x1a36,
    0x1a3c, 0x1a42, 0x1a48, 0x1a4e, 0x1a54, 0x1a5a, 0x1a60, 0x1a66,
    0x1a6c, 0x1a72, 0x1a78, 0x1a7e, 0x1a84, 0x1a8a, 0x1a90, 0x1a94,
    0x1a98, 0x1a9c, 0x1aa0, 0x1aa4, 0x1aa8, 0x1aac, 0x1ab0, 0x1ab4,
    0x1ab8, 0x1abc, 0x1ac0, 0x1ac4, 0x1ac8, 0x1acc, 0x1ad0, 0x1ad4,
    0x1ad8, 0x1adc, 0x1ae0, 0x1ae4, 0x1ae8, 0x1aec, 0x1af0, 0x1af4,
    0x1af8, 0x1afc, 0x1b00, 0x1b04, 0x1b08, 0x1b0c, 0x1b10, 0x1b14,
    0x1b18, 0x1b1c, 0x1b20, 0x1b24, 0x1b28, 0x1b2c, 0x1b30, 0x1b34,
    0x1b38, 0x1b3c, 0x1b40, 0x1b44, 0x1b48, 0x1b4c, 0x1b50, 0x1b54,
    0x1b58, 0x1b5c, 0x1b60, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_row30 [] = {
    0x1b64, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x1b68, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x1b6c, 0, 0x1b71, 0,
    0x1b76, 0, 0x1b7b, 0, 0x1b80, 0, 0x1b85, 0,
    0x1b8a, 0, 0x1b8f, 0, 0x1b94, 0, 0x1b99, 0,
    0x1b9e, 0, 0x1ba3, 0, 0, 0x1ba8, 0, 0x1bad,
    0, 0x1bb2, 0, 0, 0, 0, 0, 0,
    0x1bb7, 0x1bbc, 0, 0x1bc1, 0x1bc6, 0, 0x1bcb, 0x1bd0,
    0, 0x1bd5, 0x1bda, 0, 0x1bdf, 0x1be4, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x1be9, 0, 0, 0,
    0, 0, 0, 0x1bee, 0x1bf3, 0, 0x1bf8, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x1bfd, 0, 0x1c02, 0,
    0x1c07, 0, 0x1c0c, 0, 0x1c11, 0, 0x1c16, 0,
    0x1c1b, 0, 0x1c20, 0, 0x1c25, 0, 0x1c2a, 0,
    0x1c2f, 0, 0x1c34, 0, 0, 0x1c39, 0, 0x1c3e,
    0, 0x1c43, 0, 0, 0, 0, 0, 0,
    0x1c48, 0x1c4d, 0, 0x1c52, 0x1c57, 0, 0x1c5c, 0x1c61,
    0, 0x1c66, 0x1c6b, 0, 0x1c70, 0x1c75, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x1c7a, 0, 0, 0x1c7f,
    0x1c84, 0x1c89, 0x1c8e, 0, 0, 0, 0x1c93, 0,
};

static const Q_UINT16 dec_row31 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x1c98, 0x1c9c, 0x1ca0, 0x1ca4, 0x1ca8, 0x1cac, 0x1cb0,
    0x1cb4, 0x1cb8, 0x1cbc, 0x1cc0, 0x1cc4, 0x1cc8, 0x1ccc, 0x1cd0,
    0x1cd4, 0x1cd8, 0x1cdc, 0x1ce0, 0x1ce4, 0x1ce8, 0x1cec, 0x1cf0,
    0x1cf4, 0x1cf8, 0x1cfc, 0x1d00, 0x1d04, 0x1d08, 0x1d0c, 0x1d10,
    0x1d14, 0x1d18, 0x1d1c, 0x1d20, 0x1d24, 0x1d28, 0x1d2c, 0x1d30,
    0x1d34, 0x1d38, 0x1d3c, 0x1d40, 0x1d44, 0x1d48, 0x1d4c, 0x1d50,
    0x1d54, 0x1d58, 0x1d5c, 0x1d60, 0x1d64, 0x1d68, 0x1d6c, 0x1d70,
    0x1d74, 0x1d78, 0x1d7c, 0x1d80, 0x1d84, 0x1d88, 0x1d8c, 0x1d90,
    0x1d94, 0x1d98, 0x1d9c, 0x1da0, 0x1da4, 0x1da8, 0x1dac, 0x1db0,
    0x1db4, 0x1db8, 0x1dbc, 0x1dc0, 0x1dc4, 0x1dc8, 0x1dcc, 0x1dd0,
    0x1dd4, 0x1dd8, 0x1ddc, 0x1de0, 0x1de4, 0x1de8, 0x1dec, 0x1df0,
    0x1df4, 0x1df8, 0x1dfc, 0x1e00, 0x1e04, 0x1e08, 0x1e0c, 0,
    0, 0, 0x1e10, 0x1e14, 0x1e18, 0x1e1c, 0x1e20, 0x1e24,
    0x1e28, 0x1e2c, 0x1e30, 0x1e34, 0x1e38, 0x1e3c, 0x1e40, 0x1e44,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_row32 [] = {
    0x1e48, 0x1e4e, 0x1e54, 0x1e5a, 0x1e60, 0x1e66, 0x1e6c, 0x1e72,
    0x1e78, 0x1e7e, 0x1e84, 0x1e8a, 0x1e90, 0x1e96, 0x1e9c, 0x1ea3,
    0x1eaa, 0x1eb1, 0x1eb8, 0x1ebf, 0x1ec6, 0x1ecd, 0x1ed4, 0x1edb,
    0x1ee2, 0x1ee9, 0x1ef0, 0x1ef7, 0x1efe, 0, 0, 0,
    0x1f05, 0x1f0b, 0x1f11, 0x1f17, 0x1f1d, 0x1f23, 0x1f29, 0x1f2f,
    0x1f35, 0x1f3b, 0x1f41, 0x1f47, 0x1f4d, 0x1f53, 0x1f59, 0x1f5f,
    0x1f65, 0x1f6b, 0x1f71, 0x1f77, 0x1f7d, 0x1f83, 0x1f89, 0x1f8f,
    0x1f95, 0x1f9b, 0x1fa1, 0x1fa7, 0x1fad, 0x1fb3, 0x1fb9, 0x1fbf,
    0x1fc5, 0x1fcb, 0x1fd1, 0x1fd7, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x1fdd, 0x1fe1, 0x1fe5, 0x1fe9, 0x1fed, 0x1ff1, 0x1ff5, 0x1ff9,
    0x1ffd, 0x2001, 0x2005, 0x2009, 0x200d, 0x2011, 0x2015, 0x201a,
    0x201f, 0x2024, 0x2029, 0x202e, 0x2033, 0x2038, 0x203d, 0x2042,
    0x2047, 0x204c, 0x2051, 0x2056, 0, 0, 0, 0,
    0x205b, 0x205f, 0x2063, 0x2067, 0x206b, 0x206f, 0x2073, 0x2077,
    0x207b, 0x207f, 0x2083, 0x2087, 0x208b, 0x208f, 0x2093, 0x2097,
    0x209b, 0x209f, 0x20a3, 0x20a7, 0x20ab, 0x20af, 0x20b3, 0x20b7,
    0x20bb, 0x20bf, 0x20c3, 0x20c7, 0x20cb, 0x20cf, 0x20d3, 0x20d7,
    0x20db, 0x20df, 0x20e3, 0x20e7, 0x20eb, 0x20ef, 0x20f3, 0x20f7,
    0x20fb, 0x20ff, 0x2103, 0x2107, 0x210b, 0x210f, 0x2113, 0x2117,
    0x211b, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x211f, 0x2124, 0x2129, 0x212e, 0x2133, 0x2138, 0x213d, 0x2142,
    0x2147, 0x214c, 0x2152, 0x2158, 0, 0, 0, 0,
    0x215e, 0x2162, 0x2166, 0x216a, 0x216e, 0x2172, 0x2176, 0x217a,
    0x217e, 0x2182, 0x2186, 0x218a, 0x218e, 0x2192, 0x2196, 0x219a,
    0x219e, 0x21a2, 0x21a6, 0x21aa, 0x21ae, 0x21b2, 0x21b6, 0x21ba,
    0x21be, 0x21c2, 0x21c6, 0x21ca, 0x21ce, 0x21d2, 0x21d6, 0x21da,
    0x21de, 0x21e2, 0x21e6, 0x21ea, 0x21ee, 0x21f2, 0x21f6, 0x21fa,
    0x21fe, 0x2202, 0x2206, 0x220a, 0x220e, 0x2212, 0x2216, 0,
};

static const Q_UINT16 dec_row33 [] = {
    0x221a, 0x2221, 0x2228, 0x222f, 0x2235, 0x223c, 0x2242, 0x2248,
    0x2250, 0x2257, 0x225d, 0x2263, 0x2269, 0x2270, 0x2277, 0x227d,
    0x2283, 0x2288, 0x228e, 0x2295, 0x229c, 0x22a1, 0x22a9, 0x22b2,
    0x22ba, 0x22c0, 0x22c8, 0x22d0, 0x22d7, 0x22dd, 0x22e3, 0x22e9,
    0x22f0, 0x22f8, 0x22ff, 0x2305, 0x230b, 0x2311, 0x2316, 0x231b,
    0x2320, 0x2325, 0x232b, 0x2331, 0x2339, 0x233f, 0x2346, 0x234e,
    0x2354, 0x2359, 0x235e, 0x2366, 0x236d, 0x2375, 0x237b, 0x2383,
    0x2388, 0x238e, 0x2394, 0x239a, 0x23a0, 0x23a6, 0x23ad, 0x23b3,
    0x23b8, 0x23be, 0x23c4, 0x23ca, 0x23d1, 0x23d7, 0x23dd, 0x23e3,
    0x23eb, 0x23f2, 0x23f7, 0x23ff, 0x2404, 0x240b, 0x2412, 0x2418,
    0x241e, 0x2424, 0x242b, 0x2430, 0x2436, 0x243d, 0x2442, 0x244a,
    0x2450, 0x2455, 0x245a, 0x245f, 0x2464, 0x2469, 0x246e, 0x2473,
    0x2478, 0x247d, 0x2482, 0x2488, 0x248e, 0x2494, 0x249a, 0x24a0,
    0x24a6, 0x24ac, 0x24b2, 0x24b8, 0x24be, 0x24c4, 0x24ca, 0x24d0,
    0x24d6, 0x24dc, 0x24e2, 0x24e7, 0x24ec, 0x24f2, 0x24f7, 0,
    0, 0, 0, 0x24fc, 0x2501, 0x2506, 0x250b, 0x2510,
    0x2517, 0x251c, 0x2521, 0x2526, 0x252b, 0x2530, 0x2535, 0x253a,
    0x253f, 0x2545, 0x254c, 0x2551, 0x2556, 0x255b, 0x2560, 0x2565,
    0x256a, 0x256f, 0x2575, 0x257b, 0x2581, 0x2587, 0x258c, 0x2591,
    0x2596, 0x259b, 0x25a0, 0x25a5, 0x25aa, 0x25af, 0x25b4, 0x25b9,
    0x25bf, 0x25c5, 0x25ca, 0x25d0, 0x25d6, 0x25dc, 0x25e1, 0x25e7,
    0x25ed, 0x25f4, 0x25f9, 0x25ff, 0x2605, 0x260b, 0x2611, 0x2619,
    0x2622, 0x2627, 0x262c, 0x2631, 0x2636, 0x263b, 0x2640, 0x2645,
    0x264a, 0x264f, 0x2654, 0x2659, 0x265e, 0x2663, 0x2668, 0x266d,
    0x2672, 0x2677, 0x267c, 0x2683, 0x2688, 0x268d, 0x2692, 0x2699,
    0x269f, 0x26a4, 0x26a9, 0x26ae, 0x26b3, 0x26b8, 0x26bd, 0x26c2,
    0x26c7, 0x26cc, 0x26d1, 0x26d7, 0x26dc, 0x26e1, 0x26e7, 0x26ed,
    0x26f2, 0x26f9, 0x26ff, 0x2704, 0x2709, 0x270e, 0, 0,
    0x2713, 0x2718, 0x271d, 0x2722, 0x2727, 0x272c, 0x2731, 0x2736,
    0x273b, 0x2740, 0x2746, 0x274c, 0x2752, 0x2758, 0x275e, 0x2764,
    0x276a, 0x2770, 0x2776, 0x277c, 0x2782, 0x2788, 0x278e, 0x2794,
    0x279a, 0x27a0, 0x27a6, 0x27ac, 0x27b2, 0x27b8, 0x27be, 0,
};

static const Q_UINT16 dec_rowf9 [] = {
    0x27c4, 0x27c8, 0x27cc, 0x27d0, 0x27d4, 0x27d8, 0x27dc, 0x27e0,
    0x27e4, 0x27e8, 0x27ec, 0x27f0, 0x27f4, 0x27f8, 0x27fc, 0x2800,
    0x2804, 0x2808, 0x280c, 0x2810, 0x2814, 0x2818, 0x281c, 0x2820,
    0x2824, 0x2828, 0x282c, 0x2830, 0x2834, 0x2838, 0x283c, 0x2840,
    0x2844, 0x2848, 0x284c, 0x2850, 0x2854, 0x2858, 0x285c, 0x2860,
    0x2864, 0x2868, 0x286c, 0x2870, 0x2874, 0x2878, 0x287c, 0x2880,
    0x2884, 0x2888, 0x288c, 0x2890, 0x2894, 0x2898, 0x289c, 0x28a0,
    0x28a4, 0x28a8, 0x28ac, 0x28b0, 0x28b4, 0x28b8, 0x28bc, 0x28c0,
    0x28c4, 0x28c8, 0x28cc, 0x28d0, 0x28d4, 0x28d8, 0x28dc, 0x28e0,
    0x28e4, 0x28e8, 0x28ec, 0x28f0, 0x28f4, 0x28f8, 0x28fc, 0x2900,
    0x2904, 0x2908, 0x290c, 0x2910, 0x2914, 0x2918, 0x291c, 0x2920,
    0x2924, 0x2928, 0x292c, 0x2930, 0x2934, 0x2938, 0x293c, 0x2940,
    0x2944, 0x2948, 0x294c, 0x2950, 0x2954, 0x2958, 0x295c, 0x2960,
    0x2964, 0x2968, 0x296c, 0x2970, 0x2974, 0x2978, 0x297c, 0x2980,
    0x2984, 0x2988, 0x298c, 0x2990, 0x2994, 0x2998, 0x299c, 0x29a0,
    0x29a4, 0x29a8, 0x29ac, 0x29b0, 0x29b4, 0x29b8, 0x29bc, 0x29c0,
    0x29c4, 0x29c8, 0x29cc, 0x29d0, 0x29d4, 0x29d8, 0x29dc, 0x29e0,
    0x29e4, 0x29e8, 0x29ec, 0x29f0, 0x29f4, 0x29f8, 0x29fc, 0x2a00,
    0x2a04, 0x2a08, 0x2a0c, 0x2a10, 0x2a14, 0x2a18, 0x2a1c, 0x2a20,
    0x2a24, 0x2a28, 0x2a2c, 0x2a30, 0x2a34, 0x2a38, 0x2a3c, 0x2a40,
    0x2a44, 0x2a48, 0x2a4c, 0x2a50, 0x2a54, 0x2a58, 0x2a5c, 0x2a60,
    0x2a64, 0x2a68, 0x2a6c, 0x2a70, 0x2a74, 0x2a78, 0x2a7c, 0x2a80,
    0x2a84, 0x2a88, 0x2a8c, 0x2a90, 0x2a94, 0x2a98, 0x2a9c, 0x2aa0,
    0x2aa4, 0x2aa8, 0x2aac, 0x2ab0, 0x2ab4, 0x2ab8, 0x2abc, 0x2ac0,
    0x2ac4, 0x2ac8, 0x2acc, 0x2ad0, 0x2ad4, 0x2ad8, 0x2adc, 0x2ae0,
    0x2ae4, 0x2ae8, 0x2aec, 0x2af0, 0x2af4, 0x2af8, 0x2afc, 0x2b00,
    0x2b04, 0x2b08, 0x2b0c, 0x2b10, 0x2b14, 0x2b18, 0x2b1c, 0x2b20,
    0x2b24, 0x2b28, 0x2b2c, 0x2b30, 0x2b34, 0x2b38, 0x2b3c, 0x2b40,
    0x2b44, 0x2b48, 0x2b4c, 0x2b50, 0x2b54, 0x2b58, 0x2b5c, 0x2b60,
    0x2b64, 0x2b68, 0x2b6c, 0x2b70, 0x2b74, 0x2b78, 0x2b7c, 0x2b80,
    0x2b84, 0x2b88, 0x2b8c, 0x2b90, 0x2b94, 0x2b98, 0x2b9c, 0x2ba0,
    0x2ba4, 0x2ba8, 0x2bac, 0x2bb0, 0x2bb4, 0x2bb8, 0x2bbc, 0x2bc0,
};

static const Q_UINT16 dec_rowfa [] = {
    0x2bc4, 0x2bc8, 0x2bcc, 0x2bd0, 0x2bd4, 0x2bd8, 0x2bdc, 0x2be0,
    0x2be4, 0x2be8, 0x2bec, 0x2bf0, 0x2bf4, 0x2bf8, 0, 0,
    0x2bfc, 0, 0x2c00, 0, 0, 0x2c04, 0x2c08, 0x2c0c,
    0x2c10, 0x2c14, 0x2c18, 0x2c1c, 0x2c20, 0x2c24, 0x2c28, 0,
    0x2c2c, 0, 0x2c30, 0, 0, 0x2c34, 0x2c38, 0,
    0, 0, 0x2c3c, 0x2c40, 0x2c44, 0x2c48, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 dec_rowfb [] = {
    0x2c4c, 0x2c51, 0x2c56, 0x2c5b, 0x2c61, 0x2c67, 0x2c6c, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x2c71, 0x2c76, 0x2c7b, 0x2c80, 0x2c85,
    0, 0, 0, 0, 0, 0, 0, 0x2c8a,
    0x2c8f, 0x2c93, 0x2c97, 0x2c9b, 0x2c9f, 0x2ca3, 0x2ca7, 0x2cab,
    0x2caf, 0x2cb3, 0x2cb7, 0x2cbc, 0x2cc1, 0x2cc6, 0x2ccb, 0x2cd0,
    0x2cd5, 0x2cda, 0x2cdf, 0x2ce4, 0x2ce9, 0x2cee, 0x2cf3, 0,
    0x2cf8, 0x2cfd, 0x2d02, 0x2d07, 0x2d0c, 0, 0x2d11, 0,
    0x2d16, 0x2d1b, 0, 0x2d20, 0x2d25, 0, 0x2d2a, 0x2d2f,
    0x2d34, 0x2d39, 0x2d3e, 0x2d43, 0x2d48, 0x2d4d, 0x2d52, 0x2d57,
    0x2d5c, 0x2d60, 0x2d64, 0x2d68, 0x2d6c, 0x2d70, 0x2d74, 0x2d78,
    0x2d7c, 0x2d80, 0x2d84, 0x2d88, 0x2d8c, 0x2d90, 0x2d94, 0x2d98,
    0x2d9c, 0x2da0, 0x2da4, 0x2da8, 0x2dac, 0x2db0, 0x2db4, 0x2db8,
    0x2dbc, 0x2dc0, 0x2dc4, 0x2dc8, 0x2dcc, 0x2dd0, 0x2dd4, 0x2dd8,
    0x2ddc, 0x2de0, 0x2de4, 0x2de8, 0x2dec, 0x2df0, 0x2df4, 0x2df8,
    0x2dfc, 0x2e00, 0x2e04, 0x2e08, 0x2e0c, 0x2e10, 0x2e14, 0x2e18,
    0x2e1c, 0x2e20, 0x2e24, 0x2e28, 0x2e2c, 0x2e30, 0x2e34, 0x2e38,
    0x2e3c, 0x2e40, 0x2e44, 0x2e48, 0x2e4c, 0x2e50, 0x2e54, 0x2e58,
    0x2e5c, 0x2e60, 0x2e64, 0x2e68, 0x2e6c, 0x2e70, 0x2e74, 0x2e78,
    0x2e7c, 0x2e80, 0x2e84, 0x2e88, 0x2e8c, 0x2e90, 0x2e94, 0x2e98,
    0x2e9c, 0x2ea0, 0x2ea4, 0x2ea8, 0x2eac, 0x2eb0, 0x2eb4, 0x2eb8,
    0x2ebc, 0x2ec0, 0x2ec4, 0x2ec8, 0x2ecc, 0x2ed0, 0x2ed4, 0x2ed8,
    0x2edc, 0x2ee0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x2ee4, 0x2ee8, 0x2eec, 0x2ef0, 0x2ef4,
    0x2ef8, 0x2efc, 0x2f00, 0x2f04, 0x2f08, 0x2f0c, 0x2f10, 0x2f14,
    0x2f18, 0x2f1c, 0x2f20, 0x2f24, 0x2f28, 0x2f2c, 0x2f30, 0x2f34,
    0x2f38, 0x2f3c, 0x2f40, 0x2f45, 0x2f4a, 0x2f4f, 0x2f54, 0x2f59,
    0x2f5e, 0x2f63, 0x2f68, 0x2f6d, 0x2f72, 0x2f77, 0x2f7c, 0x2f81,
    0x2f86, 0x2f8b, 0x2f90, 0x2f95, 0x2f9a, 0x2f9e, 0x2fa2, 0x2fa6,
};

static const Q_UINT16 dec_rowfc [] = {
    0x2faa, 0x2faf, 0x2fb4, 0x2fb9, 0x2fbe, 0x2fc3, 0x2fc8, 0x2fcd,
    0x2fd2, 0x2fd7, 0x2fdc, 0x2fe1, 0x2fe6, 0x2feb, 0x2ff0, 0x2ff5,
    0x2ffa, 0x2fff, 0x3004, 0x3009, 0x300e, 0x3013, 0x3018, 0x301d,
    0x3022, 0x3027, 0x302c, 0x3031, 0x3036, 0x303b, 0x3040, 0x3045,
    0x304a, 0x304f, 0x3054, 0x3059, 0x305e, 0x3063, 0x3068, 0x306d,
    0x3072, 0x3077, 0x307c, 0x3081, 0x3086, 0x308b, 0x3090, 0x3095,
    0x309a, 0x309f, 0x30a4, 0x30a9, 0x30ae, 0x30b3, 0x30b8, 0x30bd,
    0x30c2, 0x30c7, 0x30cc, 0x30d1, 0x30d6, 0x30db, 0x30e0, 0x30e5,
    0x30ea, 0x30ef, 0x30f4, 0x30f9, 0x30fe, 0x3103, 0x3108, 0x310d,
    0x3112, 0x3117, 0x311c, 0x3121, 0x3126, 0x312b, 0x3130, 0x3135,
    0x313a, 0x313f, 0x3144, 0x3149, 0x314e, 0x3153, 0x3158, 0x315d,
    0x3162, 0x3167, 0x316c, 0x3171, 0x3176, 0x317b, 0x3180, 0x3186,
    0x318c, 0x3192, 0x3198, 0x319e, 0x31a4, 0x31a9, 0x31ae, 0x31b3,
    0x31b8, 0x31bd, 0x31c2, 0x31c7, 0x31cc, 0x31d1, 0x31d6, 0x31db,
    0x31e0, 0x31e5, 0x31ea, 0x31ef, 0x31f4, 0x31f9, 0x31fe, 0x3203,
    0x3208, 0x320d, 0x3212, 0x3217, 0x321c, 0x3221, 0x3226, 0x322b,
    0x3230, 0x3235, 0x323a, 0x323f, 0x3244, 0x3249, 0x324e, 0x3253,
    0x3258, 0x325d, 0x3262, 0x3267, 0x326c, 0x3271, 0x3276, 0x327b,
    0x3280, 0x3285, 0x328a, 0x328f, 0x3294, 0x3299, 0x329e, 0x32a3,
    0x32a8, 0x32ad, 0x32b2, 0x32b7, 0x32bc, 0x32c1, 0x32c6, 0x32cb,
    0x32d0, 0x32d5, 0x32da, 0x32df, 0x32e4, 0x32e9, 0x32ee, 0x32f3,
    0x32f8, 0x32fd, 0x3302, 0x3307, 0x330c, 0x3311, 0x3316, 0x331b,
    0x3320, 0x3325, 0x332a, 0x332f, 0x3334, 0x3339, 0x333e, 0x3343,
    0x3348, 0x334d, 0x3352, 0x3357, 0x335c, 0x3361, 0x3366, 0x336b,
    0x3370, 0x3375, 0x337a, 0x337f, 0x3384, 0x3389, 0x338e, 0x3393,
    0x3398, 0x339d, 0x33a2, 0x33a7, 0x33ac, 0x33b1, 0x33b6, 0x33bb,
    0x33c0, 0x33c5, 0x33ca, 0x33cf, 0x33d4, 0x33d9, 0x33de, 0x33e3,
    0x33e8, 0x33ed, 0x33f2, 0x33f7, 0x33fc, 0x3401, 0x3406, 0x340b,
    0x3410, 0x3415, 0x341a, 0x341f, 0x3424, 0x3429, 0x342e, 0x3433,
    0x3438, 0x343d, 0x3442, 0x3447, 0x344c, 0x3451, 0x3456, 0x345b,
    0x3460, 0x3465, 0x346a, 0x3470, 0x3476, 0x347c, 0x3481, 0x3486,
    0x348b, 0x3490, 0x3495, 0x349a, 0x349f, 0x34a4, 0x34a9, 0x34ae,
};

static const Q_UINT16 dec_rowfd [] = {
    0x34b3, 0x34b8, 0x34bd, 0x34c2, 0x34c7, 0x34cc, 0x34d1, 0x34d6,
    0x34db, 0x34e0, 0x34e5, 0x34ea, 0x34ef, 0x34f4, 0x34f9, 0x34fe,
    0x3503, 0x3508, 0x350d, 0x3512, 0x3517, 0x351c, 0x3521, 0x3526,
    0x352b, 0x3530, 0x3535, 0x353a, 0x353f, 0x3544, 0x3549, 0x354e,
    0x3553, 0x3558, 0x355d, 0x3562, 0x3567, 0x356c, 0x3571, 0x3576,
    0x357b, 0x3580, 0x3585, 0x358a, 0x358f, 0x3594, 0x3599, 0x359e,
    0x35a3, 0x35a8, 0x35ad, 0x35b2, 0x35b7, 0x35bc, 0x35c1, 0x35c6,
    0x35cb, 0x35d0, 0x35d5, 0x35da, 0x35df, 0x35e4, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x35e9, 0x35ef, 0x35f5, 0x35fb, 0x3601, 0x3607, 0x360d, 0x3613,
    0x3619, 0x361f, 0x3625, 0x362b, 0x3631, 0x3637, 0x363d, 0x3643,
    0x3649, 0x364f, 0x3655, 0x365b, 0x3661, 0x3667, 0x366d, 0x3673,
    0x3679, 0x367f, 0x3685, 0x368b, 0x3691, 0x3697, 0x369d, 0x36a3,
    0x36a9, 0x36af, 0x36b5, 0x36bb, 0x36c1, 0x36c7, 0x36cd, 0x36d3,
    0x36d9, 0x36df, 0x36e5, 0x36eb, 0x36f1, 0x36f7, 0x36fd, 0x3703,
    0x3709, 0x370f, 0x3715, 0x371b, 0x3721, 0x3727, 0x372d, 0x3733,
    0x3739, 0x373f, 0x3745, 0x374b, 0x3751, 0x3757, 0x375d, 0x3763,
    0, 0, 0x3769, 0x376f, 0x3775, 0x377b, 0x3781, 0x3787,
    0x378d, 0x3793, 0x3799, 0x379f, 0x37a5, 0x37ab, 0x37b1, 0x37b7,
    0x37bd, 0x37c3, 0x37c9, 0x37cf, 0x37d5, 0x37db, 0x37e1, 0x37e7,
    0x37ed, 0x37f3, 0x37f9, 0x37ff, 0x3805, 0x380b, 0x3811, 0x3817,
    0x381d, 0x3823, 0x3829, 0x382f, 0x3835, 0x383b, 0x3841, 0x3847,
    0x384d, 0x3853, 0x3859, 0x385f, 0x3865, 0x386b, 0x3871, 0x3877,
    0x387d, 0x3883, 0x3889, 0x388f, 0x3895, 0x389b, 0x38a1, 0x38a7,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x38ad, 0x38b3, 0x38b9, 0x38c0, 0x38c7, 0x38ce, 0x38d5, 0x38dc,
    0x38e3, 0x38ea, 0x38f0, 0x3905, 0, 0, 0, 0,
};

static const Q_UINT16 dec_rowfe [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x3910, 0x3914, 0x3918, 0x391c, 0x3920, 0x3924, 0x3928, 0x392c,
    0x3930, 0x3934, 0x3938, 0x393c, 0x3940, 0x3944, 0x3948, 0x394c,
    0x3950, 0x3954, 0x3958, 0x395c, 0x3960, 0, 0, 0,
    0, 0x3964, 0x3968, 0x396c, 0x3970, 0x3974, 0x3978, 0x397c,
    0x3980, 0x3984, 0x3988, 0, 0x398c, 0x3990, 0x3994, 0x3998,
    0x399c, 0x39a0, 0x39a4, 0x39a8, 0x39ac, 0x39b0, 0x39b4, 0x39b8,
    0x39bc, 0x39c0, 0x39c4, 0x39c8, 0x39cc, 0x39d0, 0x39d4, 0,
    0x39d8, 0x39dc, 0x39e0, 0x39e4, 0, 0, 0, 0,
    0x39e8, 0x39ed, 0x39f2, 0, 0x39f7, 0, 0x39fc, 0x3a01,
    0x3a06, 0x3a0b, 0x3a10, 0x3a15, 0x3a1a, 0x3a1f, 0x3a24, 0x3a29,
    0x3a2e, 0x3a32, 0x3a36, 0x3a3a, 0x3a3e, 0x3a42, 0x3a46, 0x3a4a,
    0x3a4e, 0x3a52, 0x3a56, 0x3a5a, 0x3a5e, 0x3a62, 0x3a66, 0x3a6a,
    0x3a6e, 0x3a72, 0x3a76, 0x3a7a, 0x3a7e, 0x3a82, 0x3a86, 0x3a8a,
    0x3a8e, 0x3a92, 0x3a96, 0x3a9a, 0x3a9e, 0x3aa2, 0x3aa6, 0x3aaa,
    0x3aae, 0x3ab2, 0x3ab6, 0x3aba, 0x3abe, 0x3ac2, 0x3ac6, 0x3aca,
    0x3ace, 0x3ad2, 0x3ad6, 0x3ada, 0x3ade, 0x3ae2, 0x3ae6, 0x3aea,
    0x3aee, 0x3af2, 0x3af6, 0x3afa, 0x3afe, 0x3b02, 0x3b06, 0x3b0a,
    0x3b0e, 0x3b12, 0x3b16, 0x3b1a, 0x3b1e, 0x3b22, 0x3b26, 0x3b2a,
    0x3b2e, 0x3b32, 0x3b36, 0x3b3a, 0x3b3e, 0x3b42, 0x3b46, 0x3b4a,
    0x3b4e, 0x3b52, 0x3b56, 0x3b5a, 0x3b5e, 0x3b62, 0x3b66, 0x3b6a,
    0x3b6e, 0x3b72, 0x3b76, 0x3b7a, 0x3b7e, 0x3b82, 0x3b86, 0x3b8a,
    0x3b8e, 0x3b92, 0x3b96, 0x3b9a, 0x3b9e, 0x3ba2, 0x3ba6, 0x3baa,
    0x3bae, 0x3bb2, 0x3bb6, 0x3bba, 0x3bbe, 0x3bc2, 0x3bc6, 0x3bca,
    0x3bce, 0x3bd2, 0x3bd6, 0x3bda, 0x3bde, 0x3be2, 0x3be6, 0x3bea,
    0x3bee, 0x3bf2, 0x3bf6, 0x3bfa, 0x3bfe, 0x3c02, 0x3c07, 0x3c0c,
    0x3c11, 0x3c16, 0x3c1b, 0x3c20, 0x3c25, 0, 0, 0,
};

static const Q_UINT16 dec_rowff [] = {
    0, 0x3c2a, 0x3c2e, 0x3c32, 0x3c36, 0x3c3a, 0x3c3e, 0x3c42,
    0x3c46, 0x3c4a, 0x3c4e, 0x3c52, 0x3c56, 0x3c5a, 0x3c5e, 0x3c62,
    0x3c66, 0x3c6a, 0x3c6e, 0x3c72, 0x3c76, 0x3c7a, 0x3c7e, 0x3c82,
    0x3c86, 0x3c8a, 0x3c8e, 0x3c92, 0x3c96, 0x3c9a, 0x3c9e, 0x3ca2,
    0x3ca6, 0x3caa, 0x3cae, 0x3cb2, 0x3cb6, 0x3cba, 0x3cbe, 0x3cc2,
    0x3cc6, 0x3cca, 0x3cce, 0x3cd2, 0x3cd6, 0x3cda, 0x3cde, 0x3ce2,
    0x3ce6, 0x3cea, 0x3cee, 0x3cf2, 0x3cf6, 0x3cfa, 0x3cfe, 0x3d02,
    0x3d06, 0x3d0a, 0x3d0e, 0x3d12, 0x3d16, 0x3d1a, 0x3d1e, 0x3d22,
    0x3d26, 0x3d2a, 0x3d2e, 0x3d32, 0x3d36, 0x3d3a, 0x3d3e, 0x3d42,
    0x3d46, 0x3d4a, 0x3d4e, 0x3d52, 0x3d56, 0x3d5a, 0x3d5e, 0x3d62,
    0x3d66, 0x3d6a, 0x3d6e, 0x3d72, 0x3d76, 0x3d7a, 0x3d7e, 0x3d82,
    0x3d86, 0x3d8a, 0x3d8e, 0x3d92, 0x3d96, 0x3d9a, 0x3d9e, 0,
    0, 0x3da2, 0x3da6, 0x3daa, 0x3dae, 0x3db2, 0x3db6, 0x3dba,
    0x3dbe, 0x3dc2, 0x3dc6, 0x3dca, 0x3dce, 0x3dd2, 0x3dd6, 0x3dda,
    0x3dde, 0x3de2, 0x3de6, 0x3dea, 0x3dee, 0x3df2, 0x3df6, 0x3dfa,
    0x3dfe, 0x3e02, 0x3e06, 0x3e0a, 0x3e0e, 0x3e12, 0x3e16, 0x3e1a,
    0x3e1e, 0x3e22, 0x3e26, 0x3e2a, 0x3e2e, 0x3e32, 0x3e36, 0x3e3a,
    0x3e3e, 0x3e42, 0x3e46, 0x3e4a, 0x3e4e, 0x3e52, 0x3e56, 0x3e5a,
    0x3e5e, 0x3e62, 0x3e66, 0x3e6a, 0x3e6e, 0x3e72, 0x3e76, 0x3e7a,
    0x3e7e, 0x3e82, 0x3e86, 0x3e8a, 0x3e8e, 0x3e92, 0x3e96, 0x3e9a,
    0x3e9e, 0x3ea2, 0x3ea6, 0x3eaa, 0x3eae, 0x3eb2, 0x3eb6, 0x3eba,
    0x3ebe, 0x3ec2, 0x3ec6, 0x3eca, 0x3ece, 0x3ed2, 0x3ed6, 0x3eda,
    0x3ede, 0x3ee2, 0x3ee6, 0x3eea, 0x3eee, 0x3ef2, 0x3ef6, 0x3efa,
    0x3efe, 0x3f02, 0x3f06, 0x3f0a, 0x3f0e, 0x3f12, 0x3f16, 0,
    0, 0, 0x3f1a, 0x3f1e, 0x3f22, 0x3f26, 0x3f2a, 0x3f2e,
    0, 0, 0x3f32, 0x3f36, 0x3f3a, 0x3f3e, 0x3f42, 0x3f46,
    0, 0, 0x3f4a, 0x3f4e, 0x3f52, 0x3f56, 0x3f5a, 0x3f5e,
    0, 0, 0x3f62, 0x3f66, 0x3f6a, 0, 0, 0,
    0x3f6e, 0x3f72, 0x3f76, 0x3f7a, 0x3f7e, 0x3f82, 0x3f86, 0,
    0x3f8a, 0x3f8e, 0x3f92, 0x3f96, 0x3f9a, 0x3f9e, 0x3fa2, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 *decomp_info [256] = {
    dec_row0, dec_row1, dec_row2, dec_row3, dec_row4, dec_row5, 0, 0,
    0, dec_row9, dec_rowa, dec_rowb, dec_rowc, dec_rowd, dec_rowe, dec_rowf,
    0, dec_row11, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, dec_row1e, dec_row1f,
    dec_row20, dec_row21, dec_row22, dec_row23, dec_row24, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    dec_row30, dec_row31, dec_row32, dec_row33, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, dec_rowf9, dec_rowfa, dec_rowfb, dec_rowfc, dec_rowfd, dec_rowfe, dec_rowff,
};

static const Q_UINT16 ligature_map [] = {
    0,
    0x3a24, 0x3a1a, 0x3a10, 0x3a06, 0x39fc, 0x39f7, 0x39f2, 0x39e8, 0x319e, 0x3198, 0x3192, 0x318c, 0x3186, 0x3180, 0,
    0xf19, 0xf0f, 0xc03, 0x4bd, 0x4b3, 0x42f, 0x3d5, 0x16f, 0x165, 0x15b, 0x6b, 0x66, 0x61, 0x5c, 0x57, 0x52, 0,
    0xc21, 0xc17, 0xc0d, 0,
    0x197, 0x18d, 0x183, 0x179, 0x70, 0,
    0xc5d, 0xc53, 0xc49, 0xc3f, 0xc35, 0x1a1, 0,
    0xf9b, 0xf91, 0xf87, 0xc85, 0xc7b, 0x4d1, 0x4c7, 0x1d3, 0x1c9, 0x1bf, 0x1b5, 0x1ab, 0x84, 0x7f, 0x7a, 0x75, 0,
    0xc99, 0,
    0xca3, 0x48b, 0x445, 0x1fb, 0x1f1, 0x1e7, 0x1dd, 0,
    0xcd5, 0xccb, 0xcc1, 0xcb7, 0xcad, 0x205, 0,
    0xfe1, 0xfd7, 0xcdf, 0x4e5, 0x4db, 0x3df, 0x237, 0x22d, 0x223, 0x219, 0x20f, 0x98, 0x93, 0x8e, 0x89, 0,
    0x246, 0,
    0x16ae, 0xd07, 0xcfd, 0xcf3, 0x44f, 0x250, 0,
    0xd2f, 0xd25, 0xd11, 0x26e, 0x264, 0x25a, 0,
    0xd4d, 0xd43, 0xd39, 0,
    0xd75, 0xd6b, 0xd61, 0xd57, 0x296, 0x28c, 0x282, 0x9d, 0,
    0xff5, 0xfeb, 0x4f9, 0x4ef, 0x459, 0x3e9, 0x394, 0x2b9, 0x2af, 0x2a5, 0xb6, 0xb1, 0xac, 0xa7, 0xa2, 0,
    0xdb1, 0xda7, 0,
    0xdd9, 0xdc5, 0xdbb, 0x50d, 0x503, 0x2d7, 0x2cd, 0x2c3, 0,
    0xded, 0xde3, 0x2ff, 0x2f5, 0x2eb, 0x2e1, 0,
    0xe33, 0xe29, 0xe1f, 0xe15, 0x313, 0x309, 0,
    0x106d, 0x1063, 0xe51, 0xe47, 0xe3d, 0x521, 0x517, 0x3f3, 0x39e, 0x34f, 0x345, 0x33b, 0x331, 0x327, 0x31d, 0xca, 0xc5, 0xc0, 0xbb, 0,
    0xe79, 0xe6f, 0,
    0xeab, 0xea1, 0xe97, 0xe8d, 0xe83, 0x359, 0,
    0xebf, 0xeb5, 0,
    0x10c7, 0x10bd, 0x10b3, 0x10a9, 0xec9, 0x36d, 0x363, 0xcf, 0,
    0xee7, 0xedd, 0xed3, 0x386, 0x37c, 0x372, 0,
    0xf1e, 0xf14, 0xc08, 0x4c2, 0x4b8, 0x435, 0x3da, 0x174, 0x16a, 0x160, 0xed, 0xe8, 0xe3, 0xde, 0xd9, 0xd4, 0,
    0xc26, 0xc1c, 0xc12, 0,
    0x19c, 0x192, 0x188, 0x17e, 0xf2, 0,
    0xc62, 0xc58, 0xc4e, 0xc44, 0xc3a, 0x1a6, 0,
    0xfa0, 0xf96, 0xf8c, 0xc8a, 0xc80, 0x4d6, 0x4cc, 0x1d8, 0x1ce, 0x1c4, 0x1ba, 0x1b0, 0x106, 0x101, 0xfc, 0xf7, 0,
    0xc9e, 0,
    0xca8, 0x490, 0x44a, 0x200, 0x1f6, 0x1ec, 0x1e2, 0,
    0xef1, 0xcda, 0xcd0, 0xcc6, 0xcbc, 0xcb2, 0x20a, 0,
    0xfe6, 0xfdc, 0xce4, 0x4ea, 0x4e0, 0x3e4, 0x232, 0x228, 0x21e, 0x214, 0x11a, 0x115, 0x110, 0x10b, 0,
    0x477, 0x24b, 0,
    0xd0c, 0xd02, 0xcf8, 0x454, 0x255, 0,
    0xd34, 0xd2a, 0xd16, 0x273, 0x269, 0x25f, 0,
    0xd52, 0xd48, 0xd3e, 0,
    0xd7a, 0xd70, 0xd66, 0xd5c, 0x29b, 0x291, 0x287, 0x11f, 0,
    0xffa, 0xff0, 0x4fe, 0x4f4, 0x45e, 0x3ee, 0x399, 0x2be, 0x2b4, 0x2aa, 0x138, 0x133, 0x12e, 0x129, 0x124, 0,
    0xdb6, 0xdac, 0,
    0xdde, 0xdca, 0xdc0, 0x512, 0x508, 0x2dc, 0x2d2, 0x2c8, 0,
    0xdf2, 0xde8, 0x304, 0x2fa, 0x2f0, 0x2e6, 0,
    0xef6, 0xe38, 0xe2e, 0xe24, 0xe1a, 0x318, 0x30e, 0,
    0x1072, 0x1068, 0xe56, 0xe4c, 0xe42, 0x526, 0x51c, 0x3f8, 0x3a3, 0x354, 0x34a, 0x340, 0x336, 0x32c, 0x322, 0x14c, 0x147, 0x142, 0x13d, 0,
    0xe7e, 0xe74, 0,
    0xefb, 0xeb0, 0xea6, 0xe9c, 0xe92, 0xe88, 0x35e, 0,
    0xec4, 0xeba, 0,
    0x10cc, 0x10c2, 0x10b8, 0x10ae, 0xf00, 0xece, 0x368, 0x156, 0x151, 0,
    0xeec, 0xee2, 0xed8, 0x38b, 0x381, 0x377, 0,
    0xf4b, 0xf41, 0xf37, 0xf2d, 0xf23, 0,
    0x425, 0,
    0x16b2, 0x495, 0,
    0x49f, 0x43b, 0,
    0xc2b, 0,
    0xfcd, 0xfc3, 0xfb9, 0xfaf, 0xfa5, 0,
    0xce9, 0,
    0x1027, 0x101d, 0x1013, 0x1009, 0xfff, 0,
    0xd89, 0xd7f, 0,
    0x4a9, 0,
    0x41b, 0x411, 0x407, 0x3fd, 0,
    0xf50, 0xf46, 0xf3c, 0xf32, 0xf28, 0,
    0x42a, 0,
    0x49a, 0,
    0x4a4, 0x440, 0,
    0xc30, 0,
    0xfd2, 0xfc8, 0xfbe, 0xfb4, 0xfaa, 0,
    0xcee, 0,
    0x102c, 0x1022, 0x1018, 0x100e, 0x1004, 0,
    0xd8e, 0xd84, 0,
    0x4ae, 0,
    0x420, 0x416, 0x40c, 0x402, 0,
    0xf7d, 0xf73, 0xf69, 0xf5f, 0xf55, 0,
    0xf82, 0xf78, 0xf6e, 0xf64, 0xf5a, 0,
    0xc71, 0xc67, 0,
    0xc76, 0xc6c, 0,
    0xc8f, 0,
    0xc94, 0,
    0xd9d, 0xd93, 0,
    0xda2, 0xd98, 0,
    0xdf7, 0,
    0xdfc, 0,
    0xe01, 0,
    0xe06, 0,
    0xe5b, 0,
    0xe60, 0,
    0xe65, 0,
    0xe6a, 0,
    0xf0a, 0,
    0x1059, 0x104f, 0x1045, 0x103b, 0x1031, 0,
    0x105e, 0x1054, 0x104a, 0x1040, 0x1036, 0,
    0x109f, 0x1095, 0x108b, 0x1081, 0x1077, 0,
    0x10a4, 0x109a, 0x1090, 0x1086, 0x107c, 0,
    0x46d, 0,
    0x463, 0,
    0x468, 0,
    0x472, 0,
    0x1426, 0,
    0x1465, 0,
    0x146e, 0,
    0x14b2, 0,
    0x152f, 0,
    0x14fb, 0,
    0x1538, 0,
    0x1495, 0,
    0x142a, 0x1421, 0x141c, 0x1417, 0x10fe, 0x10f9, 0x5a9, 0,
    0x1460, 0x1144, 0x113f, 0x5b2, 0,
    0x1472, 0x1469, 0x118a, 0x1185, 0x5b7, 0,
    0x14ad, 0x14a8, 0x14a3, 0x11da, 0x11d5, 0x5d5, 0x5bc, 0,
    0x152a, 0x1220, 0x121b, 0x5c1, 0,
    0x14ff, 0,
    0x14f6, 0x14f1, 0x14ec, 0x1261, 0x5da, 0x5c6, 0,
    0x16a6, 0x153c, 0x1533, 0x12a2, 0x129d, 0x5cb, 0,
    0x1408, 0x12ca, 0,
    0x12d3, 0,
    0x1451, 0x12dc, 0,
    0x12e5, 0,
    0x14d4, 0,
    0x140d, 0x1403, 0x13f9, 0x13f4, 0x12c5, 0x10d6, 0x10d1, 0x5df, 0,
    0x12ce, 0x1126, 0x1121, 0x5e4, 0,
    0x1456, 0x144c, 0x12d7, 0x1162, 0x115d, 0x5e9, 0,
    0x1499, 0x148b, 0x1486, 0x1434, 0x12e0, 0x11b2, 0x11ad, 0x5f8, 0x5ee, 0,
    0x12e9, 0x1202, 0x11fd, 0x602, 0,
    0x14dd, 0x14d8, 0,
    0x14e2, 0x14ca, 0x14c5, 0x12f2, 0x123e, 0x1239, 0x607, 0x5fd, 0,
    0x1520, 0x1516, 0x12fb, 0x127a, 0x1275, 0x60c, 0,
    0x149e, 0x1490, 0x5d0, 0,
    0x14e7, 0x14cf, 0x5f3, 0,
    0x12ee, 0,
    0x12f7, 0,
    0x151b, 0x1300, 0,
    0x616, 0x611, 0,
    0x625, 0,
    0x675, 0x66b, 0,
    0x620, 0,
    0x67f, 0x61b, 0,
    0x693, 0x661, 0,
    0x69d, 0,
    0x6b1, 0x6a7, 0x634, 0,
    0x62a, 0,
    0x6bb, 0,
    0x6e3, 0x6d9, 0x6cf, 0x62f, 0,
    0x6ed, 0,
    0x6f7, 0,
    0x67a, 0x670, 0,
    0x643, 0,
    0x684, 0x63e, 0,
    0x698, 0x666, 0,
    0x6a2, 0,
    0x6b6, 0x6ac, 0x639, 0,
    0x64d, 0,
    0x6c0, 0,
    0x6e8, 0x6de, 0x6d4, 0x652, 0,
    0x6f2, 0,
    0x6fc, 0,
    0x648, 0,
    0x657, 0,
    0x65c, 0,
    0x689, 0,
    0x68e, 0,
    0x6c5, 0,
    0x6ca, 0,
    0x2cd5, 0x2cd0, 0x2ccb, 0,
    0x2d48, 0x2cda, 0,
    0x2cdf, 0,
    0x2ce4, 0,
    0x2ce9, 0,
    0x2d43, 0x2cee, 0,
    0x2cf3, 0,
    0x2cf8, 0,
    0x2cfd, 0,
    0x2d02, 0,
    0x2d4d, 0x2d07, 0,
    0x2d0c, 0,
    0x2d11, 0,
    0x2d16, 0,
    0x2d1b, 0,
    0x2d20, 0,
    0x2d52, 0x2d25, 0,
    0x2d2a, 0,
    0x2d2f, 0,
    0x2d34, 0,
    0x2d39, 0x2cbc, 0x2cb7, 0,
    0x2d3e, 0,
    0x2c8a, 0,
    0x3a2e, 0,
    0x3a36, 0x3a32, 0,
    0x3a3e, 0x3a3a, 0,
    0x3a46, 0x3a42, 0,
    0x3a4e, 0x3a4a, 0,
    0x3a5e, 0x3a5a, 0x3a56, 0x3a52, 0x3410, 0x340b, 0x32b7, 0x32b2, 0x32ad, 0x32a8, 0x32a3, 0x31bd, 0x31b8, 0x31b3, 0x31ae, 0x31a9, 0x31a4, 0x2fbe, 0x2fb9, 0x2fb4, 0x2faf, 0x2faa, 0x2f95, 0x2f90, 0x2f8b, 0x2f86, 0x2f81, 0x2f7c, 0x2f77, 0x2f72, 0x2f6d, 0x2f68, 0x2f63, 0x2f5e, 0x2f59, 0x2f54, 0x2f4f, 0x2f4a, 0x2f45, 0x2f40, 0,
    0x3a66, 0x3a62, 0x38c0, 0x38b9, 0x35e4, 0x35df, 0,
    0x3a76, 0x3a72, 0x3a6e, 0x3a6a, 0x3889, 0x37b1, 0x341a, 0x3415, 0x32d0, 0x32cb, 0x32c6, 0x32c1, 0x32bc, 0x31db, 0x31d6, 0x31d1, 0x31cc, 0x31c7, 0x31c2, 0x2fdc, 0x2fd7, 0x2fd2, 0x2fcd, 0x2fc8, 0x2fc3, 0,
    0x3a7e, 0x3a7a, 0,
    0x3a8e, 0x3a8a, 0x3a86, 0x3a82, 0x37d5, 0x37cf, 0x37c9, 0x37c3, 0x37bd, 0x37b7, 0x3613, 0x360d, 0x3607, 0x3601, 0x35fb, 0x35f5, 0x35ef, 0x35e9, 0x3424, 0x341f, 0x32e9, 0x32e4, 0x32df, 0x32da, 0x32d5, 0x31f9, 0x31f4, 0x31ef, 0x31ea, 0x31e5, 0x31e0, 0x2ffa, 0x2ff5, 0x2ff0, 0x2feb, 0x2fe6, 0x2fe1, 0,
    0x3a9e, 0x3a9a, 0x3a96, 0x3a92, 0x342e, 0x3429, 0x32ee, 0x3217, 0x3212, 0x320d, 0x3208, 0x3203, 0x31fe, 0x300e, 0x3009, 0x3004, 0x2fff, 0,
    0x3aae, 0x3aaa, 0x3aa6, 0x3aa2, 0x3905, 0x3871, 0x37e7, 0x37e1, 0x37db, 0x361f, 0x3619, 0x3549, 0x3544, 0x34bd, 0x34b8, 0x32f8, 0x32f3, 0x3018, 0x3013, 0,
    0x3abe, 0x3aba, 0x3ab6, 0x3ab2, 0x3877, 0x362b, 0x3625, 0x353f, 0x353a, 0x34b3, 0x34ae, 0x3302, 0x32fd, 0x3022, 0x301d, 0,
    0x3ace, 0x3aca, 0x3ac6, 0x3ac2, 0x3553, 0x354e, 0x34c7, 0x34c2, 0x330c, 0x3307, 0x3031, 0x302c, 0x3027, 0,
    0x3ad6, 0x3ad2, 0,
    0x3ade, 0x3ada, 0x3171, 0,
    0x3ae6, 0x3ae2, 0x38d5, 0x3176, 0,
    0x3aee, 0x3aea, 0,
    0x3afe, 0x3afa, 0x3af6, 0x3af2, 0x38a1, 0x37ed, 0x365b, 0x3655, 0x364f, 0x3649, 0x3643, 0x363d, 0x3637, 0x3631, 0x35c1, 0x35bc, 0x35b7, 0x35a8, 0x3585, 0x352b, 0x3526, 0x34f9, 0x349f, 0x349a, 0x3438, 0x3433, 0x3320, 0x331b, 0x3316, 0x3311, 0x3045, 0x3040, 0x303b, 0x3036, 0,
    0x3b0e, 0x3b0a, 0x3b06, 0x3b02, 0x37f9, 0x3697, 0x3691, 0x368b, 0x3685, 0x367f, 0x3679, 0x3673, 0x35d0, 0x35cb, 0x35c6, 0x35ad, 0x35a3, 0x359e, 0x3599, 0x3594, 0x3580, 0x357b, 0x3576, 0x3571, 0x356c, 0x3535, 0x3530, 0x34f4, 0x34ef, 0x34ea, 0x34e5, 0x34e0, 0x34a9, 0x34a4, 0x3442, 0x343d, 0,
    0x3b1e, 0x3b1a, 0x3b16, 0x3b12, 0x38f0, 0x38ea, 0x38ce, 0x38ad, 0x389b, 0x37f3, 0x366d, 0x3667, 0x3661, 0x358a, 0x355d, 0x3558, 0x34fe, 0x34d1, 0x34cc, 0x332f, 0x332a, 0x3325, 0x304f, 0x304a, 0,
    0x3b2e, 0x3b2a, 0x3b26, 0x3b22, 0x37ff, 0x36a9, 0x36a3, 0x369d, 0x358f, 0x3567, 0x3562, 0x3503, 0x34db, 0x34d6, 0x3343, 0x333e, 0x3339, 0x3334, 0x3063, 0x305e, 0x3059, 0x3054, 0,
    0x3b3e, 0x3b3a, 0x3b36, 0x3b32, 0x36c1, 0x36bb, 0x36b5, 0x36af, 0x35d5, 0x35b2, 0x350d, 0x3508, 0x3481, 0x347c, 0x3348, 0x306d, 0x3068, 0,
    0x3b4e, 0x3b4a, 0x3b46, 0x3b42, 0x35da, 0x334d, 0x3072, 0,
    0x3b5e, 0x3b5a, 0x3b56, 0x3b52, 0x38dc, 0x3895, 0x3841, 0x36d9, 0x36d3, 0x36cd, 0x36c7, 0x3517, 0x3512, 0x348b, 0x3486, 0x3357, 0x3352, 0x307c, 0x3077, 0,
    0x3b6e, 0x3b6a, 0x3b66, 0x3b62, 0x36eb, 0x36e5, 0x36df, 0x3521, 0x351c, 0x3495, 0x3490, 0x3361, 0x335c, 0x3086, 0x3081, 0,
    0x3a29, 0x3a1f, 0x3a15, 0x3a0b, 0x3a01, 0x39ed, 0x3476, 0x3470, 0x346a, 0,
    0x3b7e, 0x3b7a, 0x3b76, 0x3b72, 0x3883, 0x36f7, 0x36f1, 0x3375, 0x3370, 0x336b, 0x3366, 0x3221, 0x321c, 0x30a4, 0x309f, 0x309a, 0x3095, 0x3090, 0x308b, 0,
    0x3b8e, 0x3b8a, 0x3b86, 0x3b82, 0x38b3, 0x3835, 0x3829, 0x3703, 0x36fd, 0x337f, 0x337a, 0x322b, 0x3226, 0x30b8, 0x30b3, 0x30ae, 0x30a9, 0,
    0x3b9e, 0x3b9a, 0x3b96, 0x3b92, 0x388f, 0x385f, 0x3847, 0x344c, 0x3447, 0x3398, 0x3393, 0x338e, 0x3389, 0x3384, 0x3244, 0x323f, 0x323a, 0x3235, 0x3230, 0x30e0, 0x30db, 0x30d6, 0x30d1, 0x30cc, 0x30c7, 0x30c2, 0x30bd, 0,
    0x3c25, 0x3c20, 0x3c1b, 0x3c16, 0x3c11, 0x3c0c, 0x3c07, 0x3c02, 0x3bae, 0x3baa, 0x3ba6, 0x3ba2, 0x3865, 0x3859, 0x383b, 0x380b, 0x3805, 0x3739, 0x3733, 0x372d, 0x3727, 0x3721, 0x371b, 0x3715, 0x370f, 0x3709, 0x3451, 0x33b1, 0x33ac, 0x33a7, 0x33a2, 0x339d, 0x3253, 0x324e, 0x3249, 0x30fe, 0x30f9, 0x30f4, 0x30ef, 0x30ea, 0x30e5, 0,
    0x3bbe, 0x3bba, 0x3bb6, 0x3bb2, 0x38c7, 0x387d, 0x3853, 0x3823, 0x3769, 0x3763, 0x375d, 0x3757, 0x3751, 0x374b, 0x3745, 0x373f, 0x33c5, 0x33c0, 0x33bb, 0x33b6, 0x325d, 0x3258, 0x311c, 0x3117, 0x3112, 0x310d, 0x3108, 0x3103, 0,
    0x3bce, 0x3bca, 0x3bc6, 0x3bc2, 0x38a7, 0x386b, 0x384d, 0x382f, 0x379f, 0x3799, 0x3793, 0x378d, 0x3787, 0x3781, 0x377b, 0x345b, 0x3456, 0x33de, 0x33d9, 0x33d4, 0x33cf, 0x33ca, 0x327b, 0x3276, 0x3271, 0x326c, 0x3267, 0x3262, 0x313a, 0x3135, 0x3130, 0x312b, 0x3126, 0x3121, 0,
    0x3bde, 0x3bda, 0x3bd6, 0x3bd2, 0x3775, 0x376f, 0x33ed, 0x33e8, 0x33e3, 0x314e, 0x3149, 0x3144, 0x313f, 0,
    0x3be6, 0x3be2, 0x38e3, 0,
    0x3bee, 0x3bea, 0x3280, 0x317b, 0x2f3c, 0x2f38, 0,
    0x3bfe, 0x3bfa, 0x3bf6, 0x3bf2, 0x381d, 0x3817, 0x3811, 0x37ab, 0x37a5, 0x3465, 0x3460, 0x3406, 0x3401, 0x33fc, 0x33f7, 0x33f2, 0x329e, 0x3299, 0x3294, 0x328f, 0x328a, 0x3285, 0x316c, 0x3167, 0x3162, 0x315d, 0x3158, 0x3153, 0,
    0x2d60, 0x2d5c, 0,
    0x2f0c, 0,
    0x2dc0, 0x2dbc, 0x2db8, 0x2db4, 0,
    0x2da0, 0x2d9c, 0x2d98, 0x2d94, 0,
    0x2d70, 0x2d6c, 0x2d68, 0x2d64, 0,
    0x2d80, 0x2d7c, 0x2d78, 0x2d74, 0,
    0x2db0, 0x2dac, 0x2da8, 0x2da4, 0,
    0x2d90, 0x2d8c, 0x2d88, 0x2d84, 0,
    0x2e00, 0x2dfc, 0x2df8, 0x2df4, 0,
    0x2df0, 0x2dec, 0x2de8, 0x2de4, 0,
    0x2e10, 0x2e0c, 0x2e08, 0x2e04, 0,
    0x2e20, 0x2e1c, 0x2e18, 0x2e14, 0,
    0x2e40, 0x2e3c, 0,
    0x2e30, 0x2e2c, 0,
    0x2e28, 0x2e24, 0,
    0x2e38, 0x2e34, 0,
    0x2e50, 0x2e4c, 0,
    0x2e48, 0x2e44, 0,
    0x2dd0, 0x2dcc, 0x2dc8, 0x2dc4, 0,
    0x2de0, 0x2ddc, 0x2dd8, 0x2dd4, 0,
    0x2e60, 0x2e5c, 0x2e58, 0x2e54, 0,
    0x2ef0, 0x2eec, 0x2ee8, 0x2ee4, 0,
    0x2e70, 0x2e6c, 0x2e68, 0x2e64, 0,
    0x2e90, 0x2e8c, 0x2e88, 0x2e84, 0,
    0x2e80, 0x2e7c, 0x2e78, 0x2e74, 0,
    0x2e98, 0x2e94, 0,
    0x2ea8, 0x2ea4, 0x2ea0, 0x2e9c, 0,
    0x2ed0, 0x2ecc, 0x2ec8, 0x2ec4, 0,
    0x2eb0, 0x2eac, 0,
    0x2ec0, 0x2ebc, 0x2eb8, 0x2eb4, 0,
    0x2f1c, 0x2f18, 0,
    0x2f00, 0x2efc, 0,
    0x2ef8, 0x2ef4, 0,
    0x2f08, 0x2f04, 0,
    0x2f24, 0x2f20, 0,
    0x2f14, 0x2f10, 0,
    0x2fa6, 0x2fa2, 0x2f9e, 0x2f9a, 0,
    0x2f34, 0x2f30, 0x2f2c, 0x2f28, 0,
    0x2ed8, 0x2ed4, 0,
    0x2ee0, 0x2edc, 0,
    0x715, 0,
    0x71a, 0,
    0x71f, 0,
    0x724, 0,
    0x729, 0,
    0x72e, 0,
    0x706, 0,
    0x733, 0,
    0x738, 0,
    0x70b, 0,
    0x710, 0,
    0x74c, 0,
    0x751, 0,
    0x73d, 0,
    0x756, 0,
    0x75b, 0,
    0x760, 0,
    0x765, 0,
    0x76a, 0,
    0x76f, 0,
    0x783, 0,
    0x788, 0,
    0x78d, 0,
    0x792, 0,
    0x7d3, 0,
    0x7d8, 0,
    0x800, 0,
    0x7e7, 0,
    0x7ec, 0,
    0x7f1, 0,
    0x7f6, 0,
    0x7fb, 0,
    0xd1b, 0,
    0xd20, 0,
    0xdcf, 0,
    0xdd4, 0,
    0xe0b, 0,
    0xe10, 0,
    0x1304, 0x10ef, 0x10e5, 0x10db, 0,
    0x1309, 0x10f4, 0x10ea, 0x10e0, 0,
    0x130e, 0,
    0x1313, 0,
    0x1318, 0,
    0x131d, 0,
    0x1322, 0,
    0x1327, 0,
    0x132c, 0x1117, 0x110d, 0x1103, 0,
    0x1331, 0x111c, 0x1112, 0x1108, 0,
    0x1336, 0,
    0x133b, 0,
    0x1340, 0,
    0x1345, 0,
    0x134a, 0,
    0x134f, 0,
    0x1135, 0x112b, 0,
    0x113a, 0x1130, 0,
    0x1153, 0x1149, 0,
    0x1158, 0x114e, 0,
    0x1354, 0x117b, 0x1171, 0x1167, 0,
    0x1359, 0x1180, 0x1176, 0x116c, 0,
    0x135e, 0,
    0x1363, 0,
    0x1368, 0,
    0x136d, 0,
    0x1372, 0,
    0x1377, 0,
    0x137c, 0x11a3, 0x1199, 0x118f, 0,
    0x1381, 0x11a8, 0x119e, 0x1194, 0,
    0x1386, 0,
    0x138b, 0,
    0x1390, 0,
    0x1395, 0,
    0x139a, 0,
    0x139f, 0,
    0x11cb, 0x11c1, 0x11b7, 0,
    0x11d0, 0x11c6, 0x11bc, 0,
    0x11f3, 0x11e9, 0x11df, 0,
    0x11f8, 0x11ee, 0x11e4, 0,
    0x1211, 0x1207, 0,
    0x1216, 0x120c, 0,
    0x122f, 0x1225, 0,
    0x1234, 0x122a, 0,
    0x1257, 0x124d, 0x1243, 0,
    0x125c, 0x1252, 0x1248, 0,
    0x1270, 0x126b, 0x1266, 0,
    0x13a4, 0x1293, 0x1289, 0x127f, 0,
    0x13a9, 0x1298, 0x128e, 0x1284, 0,
    0x13ae, 0,
    0x13b3, 0,
    0x13b8, 0,
    0x13bd, 0,
    0x13c2, 0,
    0x13c7, 0,
    0x13cc, 0x12bb, 0x12b1, 0x12a7, 0,
    0x13d1, 0x12c0, 0x12b6, 0x12ac, 0,
    0x13d6, 0,
    0x13db, 0,
    0x13e0, 0,
    0x13e5, 0,
    0x13ea, 0,
    0x13ef, 0,
    0x13fe, 0,
    0x1447, 0,
    0x1511, 0,
    0x1412, 0,
    0x145b, 0,
    0x1525, 0,
    0x1be9, 0,
    0x1b6c, 0,
    0x1b71, 0,
    0x1b76, 0,
    0x1b7b, 0,
    0x1b80, 0,
    0x1b85, 0,
    0x1b8a, 0,
    0x1b8f, 0,
    0x1b94, 0,
    0x1b99, 0,
    0x1b9e, 0,
    0x1ba3, 0,
    0x1ba8, 0,
    0x1bad, 0,
    0x1bb2, 0,
    0x1bbc, 0x1bb7, 0,
    0x1bc6, 0x1bc1, 0,
    0x1bd0, 0x1bcb, 0,
    0x1bda, 0x1bd5, 0,
    0x1be4, 0x1bdf, 0,
    0x1bf8, 0,
    0x1c7a, 0,
    0x1bfd, 0,
    0x1c02, 0,
    0x1c07, 0,
    0x1c0c, 0,
    0x1c11, 0,
    0x1c16, 0,
    0x1c1b, 0,
    0x1c20, 0,
    0x1c25, 0,
    0x1c2a, 0,
    0x1c2f, 0,
    0x1c34, 0,
    0x1c39, 0,
    0x1c3e, 0,
    0x1c43, 0,
    0x1c4d, 0x1c48, 0,
    0x1c57, 0x1c52, 0,
    0x1c61, 0x1c5c, 0,
    0x1c6b, 0x1c66, 0,
    0x1c75, 0x1c70, 0,
    0x1c7f, 0,
    0x1c84, 0,
    0x1c89, 0,
    0x1c8e, 0,
    0x1c93, 0,
    0x2960, 0,
    0x27d8, 0,
    0x293c, 0,
    0x2830, 0,
    0x2aac, 0,
    0x29a0, 0,
    0x2bb8, 0,
    0x2a64, 0,
    0x2878, 0,
    0x2a98, 0,
    0x2958, 0,
    0x2b14, 0,
    0x2ab0, 0,
    0x2bf4, 0,
    0x29a4, 0,
    0x2b08, 0,
    0x287c, 0,
    0x29a8, 0,
    0x2918, 0,
    0x2914, 0,
    0x2c04, 0,
    0x2bc4, 0,
    0x2a34, 0,
    0x2b38, 0,
    0x2bc0, 0,
    0x2ae0, 0,
    0x29ec, 0,
    0x2a38, 0,
    0x290c, 0,
    0x2880, 0,
    0x29c0, 0,
    0x2950, 0,
    0x2b70, 0,
    0x2834, 0,
    0x2970, 0,
    0x27dc, 0,
    0x2b3c, 0,
    0x2b78, 0,
    0x29c4, 0,
    0x2a3c, 0,
    0x27f0, 0,
    0x2bf8, 0,
    0x2a68, 0,
    0x2bfc, 0,
    0x2974, 0,
    0x28ec, 0,
    0x28cc, 0,
    0x27f4, 0,
    0x27e8, 0,
    0x29c8, 0,
    0x2bd4, 0,
    0x2a6c, 0x2940, 0,
    0x2ab4, 0,
    0x2ab8, 0,
    0x28f0, 0,
    0x2b40, 0,
    0x2b18, 0,
    0x2848, 0,
    0x2a70, 0,
    0x29fc, 0,
    0x2bc8, 0,
    0x2a4c, 0,
    0x2864, 0,
    0x2bf0, 0,
    0x29cc, 0,
    0x28d0, 0,
    0x2b24, 0,
    0x295c, 0,
    0x2a50, 0,
    0x2944, 0,
    0x2a74, 0,
    0x2aa8, 0,
    0x2b28, 0,
    0x2a00, 0,
    0x27f8, 0,
    0x2a04, 0,
    0x2b0c, 0,
    0x2858, 0,
    0x2930, 0,
    0x2bcc, 0,
    0x2990, 0,
    0x2a54, 0,
    0x2998, 0,
    0x2a08, 0,
    0x2884, 0,
    0x2968, 0,
    0x2abc, 0,
    0x29d0, 0,
    0x2b44, 0,
    0x2c00, 0,
    0x2ad8, 0,
    0x2bdc, 0,
    0x29f0, 0,
    0x27c8, 0,
    0x2868, 0,
    0x2b48, 0,
    0x2ae4, 0,
    0x2b94, 0,
    0x2ae8, 0,
    0x2b2c, 0,
    0x29ac, 0,
    0x2b4c, 0,
    0x2ac0, 0x2934, 0x2814, 0,
    0x28f4, 0,
    0x2888, 0,
    0x2838, 0,
    0x29f4, 0,
    0x2a58, 0,
    0x2984, 0,
    0x298c, 0,
    0x2964, 0,
    0x2b50, 0,
    0x2818, 0,
    0x2bd8, 0,
    0x2aec, 0,
    0x286c, 0,
    0x2b98, 0,
    0x28f8, 0,
    0x2b1c, 0,
    0x2af0, 0,
    0x2b74, 0,
    0x27d4, 0,
    0x28fc, 0,
    0x2a0c, 0,
    0x284c, 0,
    0x29d4, 0,
    0x2bb0, 0,
    0x2a40, 0,
    0x281c, 0,
    0x2a10, 0,
    0x2ac4, 0,
    0x2b7c, 0,
    0x288c, 0,
    0x283c, 0,
    0x28dc, 0,
    0x2bac, 0,
    0x2870, 0,
    0x2c08, 0,
    0x2a60, 0,
    0x2b30, 0x2948, 0,
    0x2a78, 0,
    0x2820, 0,
    0x2b54, 0,
    0x2af4, 0,
    0x2a7c, 0,
    0x2a14, 0,
    0x2b80, 0,
    0x2af8, 0,
    0x299c, 0,
    0x294c, 0,
    0x2b58, 0,
    0x2ac8, 0,
    0x27fc, 0,
    0x2c0c, 0,
    0x2890, 0,
    0x2978, 0,
    0x2afc, 0,
    0x28b0, 0,
    0x28e0, 0,
    0x2954, 0,
    0x29d8, 0,
    0x2c10, 0,
    0x2c14, 0,
    0x2c18, 0,
    0x28b4, 0,
    0x2c1c, 0,
    0x2a9c, 0,
    0x2a18, 0,
    0x291c, 0,
    0x2ba0, 0,
    0x2ba4, 0,
    0x2a5c, 0,
    0x28d4, 0,
    0x2ba8, 0,
    0x2c24, 0,
    0x2bd0, 0,
    0x29b0, 0,
    0x2b00, 0,
    0x296c, 0,
    0x2900, 0,
    0x28b8, 0,
    0x2920, 0,
    0x2a1c, 0,
    0x2904, 0,
    0x2b5c, 0,
    0x2800, 0,
    0x2a80, 0,
    0x2c28, 0,
    0x2894, 0,
    0x2a84, 0,
    0x2a20, 0,
    0x28d8, 0,
    0x2910, 0,
    0x285c, 0,
    0x2b9c, 0,
    0x29b4, 0,
    0x2994, 0,
    0x2bbc, 0,
    0x28bc, 0,
    0x2924, 0,
    0x2824, 0,
    0x297c, 0,
    0x2a28, 0,
    0x2acc, 0,
    0x2850, 0,
    0x2b84, 0,
    0x2898, 0,
    0x2c2c, 0,
    0x2840, 0,
    0x2804, 0,
    0x289c, 0,
    0x2808, 0,
    0x2860, 0,
    0x2be4, 0,
    0x2a44, 0,
    0x2b60, 0,
    0x2b64, 0,
    0x280c, 0,
    0x2854, 0,
    0x2bec, 0,
    0x2a48, 0x2980, 0,
    0x29b8, 0,
    0x28c8, 0,
    0x2c30, 0,
    0x2938, 0,
    0x2bb4, 0,
    0x292c, 0,
    0x27c4, 0,
    0x28e4, 0,
    0x27d0, 0,
    0x28a0, 0,
    0x27cc, 0,
    0x2a24, 0,
    0x2b20, 0,
    0x2be0, 0,
    0x29f8, 0,
    0x2988, 0,
    0x2a2c, 0,
    0x2c34, 0,
    0x2ad0, 0,
    0x2810, 0,
    0x2874, 0,
    0x2c38, 0,
    0x2828, 0,
    0x2aa0, 0,
    0x2b68, 0,
    0x29bc, 0,
    0x27ec, 0,
    0x2a88, 0,
    0x28c0, 0,
    0x2a30, 0,
    0x29dc, 0,
    0x2adc, 0,
    0x2be8, 0,
    0x2928, 0,
    0x2b10, 0,
    0x2b34, 0,
    0x2b88, 0,
    0x2aa4, 0,
    0x2b6c, 0,
    0x2a8c, 0,
    0x28e8, 0,
    0x2908, 0,
    0x28a4, 0,
    0x2a90, 0,
    0x2c20, 0,
    0x2a94, 0,
    0x2b04, 0,
    0x2c3c, 0,
    0x2c40, 0,
    0x2c44, 0,
    0x282c, 0,
    0x29e0, 0,
    0x28a8, 0,
    0x2b8c, 0,
    0x2c48, 0,
    0x28ac, 0,
    0x2844, 0,
    0x28c4, 0,
    0x29e4, 0,
    0x2b90, 0,
    0x29e8, 0,
    0x2ad4, 0,
    0x27e4, 0x27e0, 0,
    0x2cc6, 0x2cc1, 0,
   };

static const Q_UINT16 lig_row0 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x10, 0x21, 0x25, 0x2b, 0x32, 0x43, 0x45,
    0x4d, 0x54, 0x64, 0x66, 0x6d, 0x74, 0x78, 0x81,
    0x91, 0, 0x94, 0x9d, 0xa4, 0xab, 0xbf, 0xc2,
    0xc9, 0xcc, 0xd5, 0, 0, 0, 0, 0,
    0, 0xdc, 0xed, 0xf1, 0xf7, 0xfe, 0x10f, 0x111,
    0x119, 0x121, 0x130, 0x133, 0x139, 0x140, 0x144, 0x14d,
    0x15d, 0, 0x160, 0x169, 0x170, 0x178, 0x18c, 0x18f,
    0x197, 0x19a, 0x1a4, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x1ab, 0, 0x1b1, 0x1b3, 0x1b6, 0x1b9,
    0, 0, 0x1bb, 0, 0, 0, 0, 0x1c1,
    0, 0, 0, 0, 0x1c3, 0x1c9, 0, 0,
    0x1cc, 0, 0, 0, 0x1ce, 0, 0, 0,
    0, 0, 0x1d3, 0, 0x1d9, 0x1db, 0x1dd, 0x1e0,
    0, 0, 0x1e2, 0, 0, 0, 0, 0x1e8,
    0, 0, 0, 0, 0x1ea, 0x1f0, 0, 0,
    0x1f3, 0, 0, 0, 0x1f5, 0, 0, 0,
};

static const Q_UINT16 lig_row1 [] = {
    0, 0, 0x1fa, 0x200, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x206, 0x209, 0x20c, 0x20e, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x210, 0x213, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x216, 0x218, 0, 0, 0, 0,
    0x21a, 0x21c, 0, 0, 0, 0, 0, 0,
    0x21e, 0x220, 0x222, 0x224, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x226,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x228, 0x22e, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x234,
    0x23a, 0, 0, 0, 0, 0, 0, 0x240,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x242, 0x244, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row2 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x246, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row3 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x248, 0,
    0x24a, 0x24c, 0x24e, 0, 0x250, 0, 0x252, 0x254,
    0x256, 0x258, 0, 0, 0, 0x260, 0, 0x265,
    0, 0x26b, 0, 0, 0, 0, 0, 0x273,
    0, 0x278, 0, 0, 0, 0x27a, 0, 0,
    0, 0x281, 0, 0, 0x288, 0x28b, 0x28d, 0x290,
    0x292, 0x294, 0, 0, 0, 0x29d, 0, 0x2a2,
    0, 0x2a9, 0, 0, 0, 0, 0, 0x2b3,
    0, 0x2b8, 0, 0, 0, 0x2bb, 0, 0,
    0, 0x2c4, 0x2cb, 0x2cf, 0x2d3, 0x2d5, 0x2d7, 0,
    0, 0, 0x2da, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row4 [] = {
    0, 0, 0, 0, 0, 0, 0x2dd, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x2df, 0, 0, 0x2e2, 0, 0x2e4, 0x2e7, 0x2ea,
    0x2ec, 0, 0x2f0, 0, 0, 0, 0x2f2, 0,
    0, 0, 0, 0x2f4, 0, 0, 0, 0x2f9,
    0, 0, 0, 0x2fb, 0, 0, 0, 0,
    0x2fd, 0, 0, 0x300, 0, 0x302, 0x305, 0x308,
    0x30a, 0, 0x30e, 0, 0, 0, 0x310, 0,
    0, 0, 0, 0x312, 0, 0, 0, 0x317,
    0, 0, 0, 0x319, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x31b, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x31d, 0x31f, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x321, 0x323, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x325, 0x327, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row5 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x329, 0x32d, 0x330, 0x332, 0x334, 0x336, 0x339, 0,
    0x33b, 0x33d, 0x33f, 0x341, 0x344, 0, 0x346, 0,
    0x348, 0x34a, 0, 0x34c, 0x34e, 0, 0x351, 0x353,
    0x355, 0x357, 0x35b, 0, 0, 0, 0, 0,
    0, 0, 0x35d, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row6 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x35f, 0x361, 0x364, 0x367, 0x36a, 0x36d, 0x396,
    0x39d, 0x3b7, 0x3ba, 0x3e0, 0x3f2, 0x406, 0x416, 0x424,
    0x427, 0x42b, 0x430, 0x433, 0x456, 0x47b, 0x494, 0x4ab,
    0x4bd, 0x4c5, 0x4d9, 0, 0, 0, 0, 0,
    0x4e9, 0x4f3, 0x507, 0x519, 0x535, 0x55f, 0x57c, 0x59f,
    0x5ad, 0x5b1, 0x5b8, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x5d5, 0, 0, 0, 0, 0, 0x5d8,
    0, 0x5da, 0x5df, 0x5e4, 0, 0, 0x5e9, 0x5ee,
    0x5f3, 0, 0, 0x5f8, 0x5fd, 0, 0x602, 0x607,
    0x60c, 0, 0, 0, 0x60f, 0x612, 0x615, 0,
    0, 0x618, 0, 0, 0, 0, 0, 0,
    0x61b, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x61e, 0, 0x623, 0,
    0, 0x628, 0, 0, 0, 0x62d, 0, 0x632,
    0, 0x637, 0, 0x63c, 0, 0, 0, 0,
    0, 0, 0x641, 0x644, 0, 0, 0x649, 0,
    0x64e, 0x651, 0, 0, 0, 0x656, 0x659, 0x65c,
    0x65f, 0x662, 0, 0x665, 0x668, 0, 0, 0,
    0x66d, 0, 0x672, 0x675, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row9 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x678, 0x67a, 0x67c,
    0, 0, 0, 0, 0x67e, 0, 0, 0,
    0, 0x680, 0x682, 0, 0, 0, 0, 0,
    0x684, 0, 0, 0x686, 0, 0, 0, 0x688,
    0x68a, 0, 0, 0x68c, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x68e, 0x690, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x692, 0, 0, 0x694,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_rowa [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x696, 0x698,
    0, 0, 0, 0, 0x69a, 0, 0, 0,
    0, 0x69c, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x69e, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_rowb [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x6a0, 0x6a2, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x6a4,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x6a6, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_rowe [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x6a8, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x6aa, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_rowf [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x6ac, 0, 0x6ae, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x6b0, 0, 0, 0,
    0, 0x6b2, 0, 0, 0, 0, 0x6b4, 0,
    0, 0, 0, 0x6b6, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row1e [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x6b8, 0x6ba,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x6bc, 0x6be, 0, 0, 0, 0,
    0, 0, 0x6c0, 0x6c2, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row1f [] = {
    0x6c4, 0x6c9, 0x6ce, 0x6d0, 0x6d2, 0x6d4, 0x6d6, 0x6d8,
    0x6da, 0x6df, 0x6e4, 0x6e6, 0x6e8, 0x6ea, 0x6ec, 0x6ee,
    0x6f0, 0x6f3, 0, 0, 0, 0, 0, 0,
    0x6f6, 0x6f9, 0, 0, 0, 0, 0, 0,
    0x6fc, 0x701, 0x706, 0x708, 0x70a, 0x70c, 0x70e, 0x710,
    0x712, 0x717, 0x71c, 0x71e, 0x720, 0x722, 0x724, 0x726,
    0x728, 0x72c, 0, 0, 0, 0, 0, 0,
    0x730, 0x734, 0, 0, 0, 0, 0, 0,
    0x738, 0x73b, 0, 0, 0, 0, 0, 0,
    0x73e, 0x741, 0, 0, 0, 0, 0, 0,
    0x744, 0x748, 0, 0, 0, 0, 0, 0,
    0, 0x74c, 0, 0, 0, 0, 0, 0,
    0x750, 0x755, 0x75a, 0x75c, 0x75e, 0x760, 0x762, 0x764,
    0x766, 0x76b, 0x770, 0x772, 0x774, 0x776, 0x778, 0x77a,
    0x77c, 0, 0, 0, 0x77e, 0, 0, 0,
    0, 0, 0, 0, 0x780, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x782, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x784, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x786, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row30 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x788, 0,
    0, 0, 0, 0x78a, 0, 0x78c, 0, 0x78e,
    0, 0x790, 0, 0x792, 0, 0x794, 0, 0x796,
    0, 0x798, 0, 0x79a, 0, 0x79c, 0, 0x79e,
    0, 0x7a0, 0, 0, 0x7a2, 0, 0x7a4, 0,
    0x7a6, 0, 0, 0, 0, 0, 0, 0x7a8,
    0, 0, 0x7ab, 0, 0, 0x7ae, 0, 0,
    0x7b1, 0, 0, 0x7b4, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x7b7, 0, 0,
    0, 0, 0, 0, 0, 0, 0x7b9, 0,
    0, 0, 0, 0x7bb, 0, 0x7bd, 0, 0x7bf,
    0, 0x7c1, 0, 0x7c3, 0, 0x7c5, 0, 0x7c7,
    0, 0x7c9, 0, 0x7cb, 0, 0x7cd, 0, 0x7cf,
    0, 0x7d1, 0, 0, 0x7d3, 0, 0x7d5, 0,
    0x7d7, 0, 0, 0, 0, 0, 0, 0x7d9,
    0, 0, 0x7dc, 0, 0, 0x7df, 0, 0,
    0x7e2, 0, 0, 0x7e5, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x7e8,
    0x7ea, 0x7ec, 0x7ee, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x7f0, 0, 0,
};

static const Q_UINT16 lig_row4e [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x7f2, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x7f4, 0, 0, 0, 0, 0,
    0, 0x7f6, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x7f8, 0, 0, 0, 0x7fa, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x7fc, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x7fe, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x800, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row4f [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x802, 0,
    0, 0, 0, 0x804, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x806,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row50 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x808, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x80a, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row51 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x80c, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x80e, 0, 0, 0, 0x810, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x812,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x814, 0, 0, 0x816, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x818, 0, 0x81a, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row52 [] = {
    0, 0, 0, 0, 0, 0, 0, 0x81c,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x81e,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x820, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x822, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x824, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x826, 0, 0, 0, 0,
    0, 0, 0, 0x828, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x82a, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x82c, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x82e, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row53 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x830,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x832,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x834, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x836, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x838, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row54 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x83a,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x83c, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x83e, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x840, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row55 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x842,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x844, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row56 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x846, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row58 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x848, 0, 0, 0, 0x84a, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x84c, 0, 0, 0, 0, 0, 0, 0x84e,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row59 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x850, 0, 0, 0, 0, 0, 0, 0,
    0, 0x852, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x854, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row5b [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x856, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x858,
    0, 0, 0, 0, 0, 0, 0x85b, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row5c [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x85d,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x85f, 0, 0, 0x861, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row5d [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x863, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x865, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x867, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row5e [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x869, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x86b, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x86d, 0x86f, 0, 0, 0, 0, 0,
    0, 0, 0, 0x871, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x873, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row5f [] = {
    0, 0, 0, 0, 0x875, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x877, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x879, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x87b, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row60 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x87d, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x87f, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x881, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row61 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x883, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x885, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x887, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row62 [] = {
    0x889, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x88b, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x88d, 0, 0, 0, 0, 0, 0x88f,
    0, 0, 0, 0x891, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x893, 0,
};

static const Q_UINT16 lig_row63 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x895, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x897, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row64 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x899, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x89b, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row65 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x89d, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x89f, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x8a1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row66 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x8a3, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x8a5, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x8a7, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x8a9, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x8ab, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x8ad, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row67 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x8af,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x8b1, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x8b3, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x8b5,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x8b7, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row68 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x8b9,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x8bb, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x8bd, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row6a [] = {
    0, 0, 0x8bf, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x8c3, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x8c5, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row6b [] = {
    0, 0, 0, 0, 0x8c7, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x8c9,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x8cb, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x8cd, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row6c [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x8cf, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x8d1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x8d3, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row6d [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x8d5, 0, 0, 0x8d7, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x8d9, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x8db, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x8dd, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x8df, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x8e1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row6e [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x8e3, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x8e5, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x8e7, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row6f [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x8e9,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x8eb, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x8ed, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x8ef, 0,
};

static const Q_UINT16 lig_row70 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x8f1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x8f3, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x8f5, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row71 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x8f7, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x8f9, 0,
    0x8fb, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row72 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x8fd, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x8ff, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x901, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x903, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x905, 0, 0, 0,
};

static const Q_UINT16 lig_row73 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x907, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x909, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x90b,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x90e, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x910, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row74 [] = {
    0, 0, 0, 0, 0, 0, 0x912, 0,
    0, 0x914, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x916, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x918, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x91a, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row75 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x91c, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x91e, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x920, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x922, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row76 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x924, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x926, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x928, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x92a,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row77 [] = {
    0, 0x92c, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row78 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x92e, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x930, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x932, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x934, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row79 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x936, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x938, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x93a, 0,
    0, 0, 0, 0, 0, 0x93c, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x93e,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x940,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x942, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x944, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row7a [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x946, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x948, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row7b [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x94a, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row7c [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x94c, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x94e, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x950, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x952, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x954, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x956,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row7d [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x958, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x95a, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x95c,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x95e, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x960, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x962, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row7e [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x964,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row7f [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x966, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x968, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x96a, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x96c, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row80 [] = {
    0, 0x96e, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x970, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x972,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x974, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x976, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row81 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x978, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x97a, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row82 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x97c,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x97e, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row83 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x980, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x982, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x984, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row84 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x986, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x988, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x98a, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x98c, 0, 0, 0,
};

static const Q_UINT16 lig_row85 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x98e, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x990, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row86 [] = {
    0, 0, 0, 0, 0, 0, 0x992, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x994, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x996, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x998,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x99a, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row87 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x99c, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row88 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x99e,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x9a0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x9a2, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x9a4,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x9a6, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x9a8, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row89 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x9aa, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x9ac, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row8a [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x9ae, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x9b1, 0, 0, 0, 0x9b3, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x9b5, 0, 0, 0, 0, 0, 0x9b7, 0,
};

static const Q_UINT16 lig_row8b [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x9b9, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x9bb, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row8c [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x9bd, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x9bf, 0, 0, 0, 0, 0,
    0x9c1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row8d [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x9c3,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row8e [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x9c5, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row8f [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x9c7, 0,
    0, 0, 0x9c9, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x9cb, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x9cd, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x9cf, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row90 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x9d1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x9d3, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x9d5, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x9d7,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x9d9, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x9db, 0, 0,
};

static const Q_UINT16 lig_row91 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x9dd, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x9df, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x9e1, 0, 0, 0x9e3,
    0, 0x9e5, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row92 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x9e7, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row93 [] = {
    0, 0, 0, 0, 0x9e9, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x9eb, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row95 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x9ed, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row96 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x9ef, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x9f1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x9f3, 0, 0,
    0x9f5, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x9f7, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x9f9, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x9fb, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x9fd, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x9ff, 0xa01,
    0, 0, 0, 0xa03, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row97 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0xa05, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0xa07, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0xa09, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row98 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0xa0b, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0xa0d, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0xa0f,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0xa11, 0, 0, 0,
};

static const Q_UINT16 lig_row99 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0xa13, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0xa15, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row9a [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0xa17, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row9b [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0xa19,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row9c [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0xa1b,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row9d [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0xa1d, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0xa1f, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row9e [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0xa21, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0xa23,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0xa25,
    0, 0, 0, 0, 0, 0, 0, 0xa27,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0xa29, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_row9f [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0xa2b, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0xa2d, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 lig_rowfb [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0xa30, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 *ligature_info [256] = {

 lig_row0, lig_row1, lig_row2, lig_row3, lig_row4, lig_row5, lig_row6, 0,
 0, lig_row9, lig_rowa, lig_rowb, 0, 0, lig_rowe, lig_rowf,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, lig_row1e, lig_row1f,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 lig_row30, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, lig_row4e, lig_row4f,
 lig_row50, lig_row51, lig_row52, lig_row53, lig_row54, lig_row55, lig_row56, 0,
 lig_row58, lig_row59, 0, lig_row5b, lig_row5c, lig_row5d, lig_row5e, lig_row5f,
 lig_row60, lig_row61, lig_row62, lig_row63, lig_row64, lig_row65, lig_row66, lig_row67,
 lig_row68, 0, lig_row6a, lig_row6b, lig_row6c, lig_row6d, lig_row6e, lig_row6f,
 lig_row70, lig_row71, lig_row72, lig_row73, lig_row74, lig_row75, lig_row76, lig_row77,
 lig_row78, lig_row79, lig_row7a, lig_row7b, lig_row7c, lig_row7d, lig_row7e, lig_row7f,
 lig_row80, lig_row81, lig_row82, lig_row83, lig_row84, lig_row85, lig_row86, lig_row87,
 lig_row88, lig_row89, lig_row8a, lig_row8b, lig_row8c, lig_row8d, lig_row8e, lig_row8f,
 lig_row90, lig_row91, lig_row92, lig_row93, 0, lig_row95, lig_row96, lig_row97,
 lig_row98, lig_row99, lig_row9a, lig_row9b, lig_row9c, lig_row9d, lig_row9e, lig_row9f,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, lig_rowfb, 0, 0, 0, 0,};

static const Q_UINT16 case_0 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
    0x78, 0x79, 0x7a, 0, 0, 0, 0, 0,
    0, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
    0x58, 0x59, 0x5a, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0x0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0x0, 0, 0,
    0, 0, 0x0, 0, 0, 0, 0, 0,
    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0,
    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0x0,
    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
    0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0,
    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0x178,
};

static const Q_UINT16 case_1 [] = {
    0x101, 0x100, 0x103, 0x102, 0x105, 0x104, 0x107, 0x106,
    0x109, 0x108, 0x10b, 0x10a, 0x10d, 0x10c, 0x10f, 0x10e,
    0x111, 0x110, 0x113, 0x112, 0x115, 0x114, 0x117, 0x116,
    0x119, 0x118, 0x11b, 0x11a, 0x11d, 0x11c, 0x11f, 0x11e,
    0x121, 0x120, 0x123, 0x122, 0x125, 0x124, 0x127, 0x126,
    0x129, 0x128, 0x12b, 0x12a, 0x12d, 0x12c, 0x12f, 0x12e,
    0x69, 0x49, 0x133, 0x132, 0x135, 0x134, 0x137, 0x136,
    0x0, 0x13a, 0x139, 0x13c, 0x13b, 0x13e, 0x13d, 0x140,
    0x13f, 0x142, 0x141, 0x144, 0x143, 0x146, 0x145, 0x148,
    0x147, 0x0, 0x14b, 0x14a, 0x14d, 0x14c, 0x14f, 0x14e,
    0x151, 0x150, 0x153, 0x152, 0x155, 0x154, 0x157, 0x156,
    0x159, 0x158, 0x15b, 0x15a, 0x15d, 0x15c, 0x15f, 0x15e,
    0x161, 0x160, 0x163, 0x162, 0x165, 0x164, 0x167, 0x166,
    0x169, 0x168, 0x16b, 0x16a, 0x16d, 0x16c, 0x16f, 0x16e,
    0x171, 0x170, 0x173, 0x172, 0x175, 0x174, 0x177, 0x176,
    0xff, 0x17a, 0x179, 0x17c, 0x17b, 0x17e, 0x17d, 0x53,
    0x0, 0x253, 0x183, 0x182, 0x185, 0x184, 0x254, 0x188,
    0x187, 0x256, 0x257, 0x18c, 0x18b, 0x0, 0x1dd, 0x259,
    0x25b, 0x192, 0x191, 0x260, 0x263, 0x3d9, 0x269, 0x268,
    0x199, 0x198, 0x51, 0x0, 0x26f, 0x272, 0x0, 0x275,
    0x1a1, 0x1a0, 0x1a3, 0x1a2, 0x1a5, 0x1a4, 0x280, 0x1a8,
    0x1a7, 0x283, 0, 0x0, 0x1ad, 0x1ac, 0x288, 0x1b0,
    0x1af, 0x28a, 0x28b, 0x1b4, 0x1b3, 0x1b6, 0x1b5, 0x292,
    0x1b9, 0x1b8, 0x0, 0, 0x1bd, 0x1bc, 0, 0,
    0, 0, 0, 0, 0x1c6, 0, 0x1c4, 0x1c9,
    0, 0x1c7, 0x1cc, 0, 0x1ca, 0x1ce, 0x1cd, 0x1d0,
    0x1cf, 0x1d2, 0x1d1, 0x1d4, 0x1d3, 0x1d6, 0x1d5, 0x1d8,
    0x1d7, 0x1da, 0x1d9, 0x1dc, 0x1db, 0x18e, 0x1df, 0x1de,
    0x1e1, 0x1e0, 0x1e3, 0x1e2, 0x1e5, 0x1e4, 0x1e7, 0x1e6,
    0x1e9, 0x1e8, 0x1eb, 0x1ea, 0x1ed, 0x1ec, 0x1ef, 0x1ee,
    0x0, 0x1f3, 0, 0x1f1, 0x1f5, 0x1f4, 0, 0,
    0, 0, 0x1fb, 0x1fa, 0x1fd, 0x1fc, 0x1ff, 0x1fe,
};

static const Q_UINT16 case_2 [] = {
    0x201, 0x200, 0x203, 0x202, 0x205, 0x204, 0x207, 0x206,
    0x209, 0x208, 0x20b, 0x20a, 0x20d, 0x20c, 0x20f, 0x20e,
    0x211, 0x210, 0x213, 0x212, 0x215, 0x214, 0x217, 0x216,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x0, 0x0, 0x0, 0x181, 0x186, 0x0, 0x189, 0x18a,
    0x0, 0x18f, 0x0, 0x190, 0x0, 0x0, 0x0, 0x0,
    0x193, 0x0, 0x0, 0x194, 0x0, 0x0, 0x631, 0x579,
    0x197, 0x196, 0x0, 0x0, 0x0, 0x0, 0x0, 0x19c,
    0x0, 0x0, 0x19d, 0x0, 0x0, 0x19f, 0x0, 0x0,
    0x0, 0x0, 0x7e1, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x1a6, 0x0, 0x0, 0x1a9, 0x0, 0x0, 0x0, 0x0,
    0x1ae, 0x0, 0x1b1, 0x1b2, 0x0, 0xa21, 0x971, 0x0,
    0x0, 0x0, 0x1b7, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 case_3 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0x3ac, 0,
    0x3ad, 0x3ae, 0x3af, 0, 0x3cc, 0, 0x3cd, 0x3ce,
    0x0, 0x3b1, 0x3b2, 0x3b3, 0x3b4, 0x3b5, 0x3b6, 0x3b7,
    0x3b8, 0x3b9, 0x3ba, 0x3bb, 0x3bc, 0x3bd, 0x3be, 0x3bf,
    0x3c0, 0x3c1, 0, 0x3c3, 0x3c4, 0x3c5, 0x3c6, 0x3c7,
    0x3c8, 0x3c9, 0x3ca, 0x3cb, 0x386, 0x388, 0x389, 0x38a,
    0x0, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397,
    0x398, 0x399, 0x39a, 0x39b, 0x39c, 0x39d, 0x39e, 0x39f,
    0x3a0, 0x3a1, 0x3a3, 0x3a3, 0x3a4, 0x3a5, 0x3a6, 0x3a7,
    0x3a8, 0x3a9, 0x3aa, 0x3ab, 0x38c, 0x38e, 0x38f, 0,
    0x392, 0x398, 0x0, 0x0, 0x0, 0x3a6, 0x3a0, 0,
    0, 0, 0x0, 0, 0x0, 0, 0x0, 0,
    0x0, 0, 0x3e3, 0x3e2, 0x3e5, 0x3e4, 0x3e7, 0x3e6,
    0x3e9, 0x3e8, 0x3eb, 0x3ea, 0x3ed, 0x3ec, 0x3ef, 0x3ee,
    0x39a, 0x3a1, 0x3a3, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 case_4 [] = {
    0, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457,
    0x458, 0x459, 0x45a, 0x45b, 0x45c, 0, 0x45e, 0x45f,
    0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437,
    0x438, 0x439, 0x43a, 0x43b, 0x43c, 0x43d, 0x43e, 0x43f,
    0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447,
    0x448, 0x449, 0x44a, 0x44b, 0x44c, 0x44d, 0x44e, 0x44f,
    0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417,
    0x418, 0x419, 0x41a, 0x41b, 0x41c, 0x41d, 0x41e, 0x41f,
    0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427,
    0x428, 0x429, 0x42a, 0x42b, 0x42c, 0x42d, 0x42e, 0x42f,
    0, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407,
    0x408, 0x409, 0x40a, 0x40b, 0x40c, 0, 0x40e, 0x40f,
    0x461, 0x460, 0x463, 0x462, 0x465, 0x464, 0x467, 0x466,
    0x469, 0x468, 0x46b, 0x46a, 0x46d, 0x46c, 0x46f, 0x46e,
    0x471, 0x470, 0x473, 0x472, 0x475, 0x474, 0x477, 0x476,
    0x479, 0x478, 0x47b, 0x47a, 0x47d, 0x47c, 0x47f, 0x47e,
    0x481, 0x480, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x491, 0x490, 0x493, 0x492, 0x495, 0x494, 0x497, 0x496,
    0x499, 0x498, 0x49b, 0x49a, 0x49d, 0x49c, 0x49f, 0x49e,
    0x4a1, 0x4a0, 0x4a3, 0x4a2, 0x4a5, 0x4a4, 0x4a7, 0x4a6,
    0x4a9, 0x4a8, 0x4ab, 0x4aa, 0x4ad, 0x4ac, 0x4af, 0x4ae,
    0x4b1, 0x4b0, 0x4b3, 0x4b2, 0x4b5, 0x4b4, 0x4b7, 0x4b6,
    0x4b9, 0x4b8, 0x4bb, 0x4ba, 0x4bd, 0x4bc, 0x4bf, 0x4be,
    0, 0x4c2, 0x4c1, 0x4c4, 0x4c3, 0, 0, 0x4c8,
    0x4c7, 0, 0, 0x4cc, 0x4cb, 0, 0, 0,
    0x4d1, 0x4d0, 0x4d3, 0x4d2, 0x4d5, 0x4d4, 0x4d7, 0x4d6,
    0x4d9, 0x4d8, 0x4db, 0x4da, 0x4dd, 0x4dc, 0x4df, 0x4de,
    0x4e1, 0x4e0, 0x4e3, 0x4e2, 0x4e5, 0x4e4, 0x4e7, 0x4e6,
    0x4e9, 0x4e8, 0x4eb, 0x4ea, 0, 0, 0x4ef, 0x4ee,
    0x4f1, 0x4f0, 0x4f3, 0x4f2, 0x4f5, 0x4f4, 0, 0,
    0x4f9, 0x4f8, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 case_5 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x561, 0x562, 0x563, 0x564, 0x565, 0x566, 0x567,
    0x568, 0x569, 0x56a, 0x56b, 0x56c, 0x56d, 0x56e, 0x56f,
    0x570, 0x571, 0x572, 0x573, 0x574, 0x575, 0x576, 0x577,
    0x578, 0x579, 0x57a, 0x57b, 0x57c, 0x57d, 0x57e, 0x57f,
    0x580, 0x581, 0x582, 0x583, 0x584, 0x585, 0x586, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0x531, 0x532, 0x533, 0x534, 0x535, 0x536, 0x537,
    0x538, 0x539, 0x53a, 0x53b, 0x53c, 0x53d, 0x53e, 0x53f,
    0x540, 0x541, 0x542, 0x543, 0x544, 0x545, 0x546, 0x547,
    0x548, 0x549, 0x54a, 0x54b, 0x54c, 0x54d, 0x54e, 0x54f,
    0x550, 0x551, 0x552, 0x553, 0x554, 0x555, 0x556, 0x0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 case_10 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x10d0, 0x10d1, 0x10d2, 0x10d3, 0x10d4, 0x10d5, 0x10d6, 0x10d7,
    0x10d8, 0x10d9, 0x10da, 0x10db, 0x10dc, 0x10dd, 0x10de, 0x10df,
    0x10e0, 0x10e1, 0x10e2, 0x10e3, 0x10e4, 0x10e5, 0x10e6, 0x10e7,
    0x10e8, 0x10e9, 0x10ea, 0x10eb, 0x10ec, 0x10ed, 0x10ee, 0x10ef,
    0x10f0, 0x10f1, 0x10f2, 0x10f3, 0x10f4, 0x10f5, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 case_1e [] = {
    0x1e01, 0x1e00, 0x1e03, 0x1e02, 0x1e05, 0x1e04, 0x1e07, 0x1e06,
    0x1e09, 0x1e08, 0x1e0b, 0x1e0a, 0x1e0d, 0x1e0c, 0x1e0f, 0x1e0e,
    0x1e11, 0x1e10, 0x1e13, 0x1e12, 0x1e15, 0x1e14, 0x1e17, 0x1e16,
    0x1e19, 0x1e18, 0x1e1b, 0x1e1a, 0x1e1d, 0x1e1c, 0x1e1f, 0x1e1e,
    0x1e21, 0x1e20, 0x1e23, 0x1e22, 0x1e25, 0x1e24, 0x1e27, 0x1e26,
    0x1e29, 0x1e28, 0x1e2b, 0x1e2a, 0x1e2d, 0x1e2c, 0x1e2f, 0x1e2e,
    0x1e31, 0x1e30, 0x1e33, 0x1e32, 0x1e35, 0x1e34, 0x1e37, 0x1e36,
    0x1e39, 0x1e38, 0x1e3b, 0x1e3a, 0x1e3d, 0x1e3c, 0x1e3f, 0x1e3e,
    0x1e41, 0x1e40, 0x1e43, 0x1e42, 0x1e45, 0x1e44, 0x1e47, 0x1e46,
    0x1e49, 0x1e48, 0x1e4b, 0x1e4a, 0x1e4d, 0x1e4c, 0x1e4f, 0x1e4e,
    0x1e51, 0x1e50, 0x1e53, 0x1e52, 0x1e55, 0x1e54, 0x1e57, 0x1e56,
    0x1e59, 0x1e58, 0x1e5b, 0x1e5a, 0x1e5d, 0x1e5c, 0x1e5f, 0x1e5e,
    0x1e61, 0x1e60, 0x1e63, 0x1e62, 0x1e65, 0x1e64, 0x1e67, 0x1e66,
    0x1e69, 0x1e68, 0x1e6b, 0x1e6a, 0x1e6d, 0x1e6c, 0x1e6f, 0x1e6e,
    0x1e71, 0x1e70, 0x1e73, 0x1e72, 0x1e75, 0x1e74, 0x1e77, 0x1e76,
    0x1e79, 0x1e78, 0x1e7b, 0x1e7a, 0x1e7d, 0x1e7c, 0x1e7f, 0x1e7e,
    0x1e81, 0x1e80, 0x1e83, 0x1e82, 0x1e85, 0x1e84, 0x1e87, 0x1e86,
    0x1e89, 0x1e88, 0x1e8b, 0x1e8a, 0x1e8d, 0x1e8c, 0x1e8f, 0x1e8e,
    0x1e91, 0x1e90, 0x1e93, 0x1e92, 0x1e95, 0x1e94, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x1e60, 0, 0, 0, 0,
    0x1ea1, 0x1ea0, 0x1ea3, 0x1ea2, 0x1ea5, 0x1ea4, 0x1ea7, 0x1ea6,
    0x1ea9, 0x1ea8, 0x1eab, 0x1eaa, 0x1ead, 0x1eac, 0x1eaf, 0x1eae,
    0x1eb1, 0x1eb0, 0x1eb3, 0x1eb2, 0x1eb5, 0x1eb4, 0x1eb7, 0x1eb6,
    0x1eb9, 0x1eb8, 0x1ebb, 0x1eba, 0x1ebd, 0x1ebc, 0x1ebf, 0x1ebe,
    0x1ec1, 0x1ec0, 0x1ec3, 0x1ec2, 0x1ec5, 0x1ec4, 0x1ec7, 0x1ec6,
    0x1ec9, 0x1ec8, 0x1ecb, 0x1eca, 0x1ecd, 0x1ecc, 0x1ecf, 0x1ece,
    0x1ed1, 0x1ed0, 0x1ed3, 0x1ed2, 0x1ed5, 0x1ed4, 0x1ed7, 0x1ed6,
    0x1ed9, 0x1ed8, 0x1edb, 0x1eda, 0x1edd, 0x1edc, 0x1edf, 0x1ede,
    0x1ee1, 0x1ee0, 0x1ee3, 0x1ee2, 0x1ee5, 0x1ee4, 0x1ee7, 0x1ee6,
    0x1ee9, 0x1ee8, 0x1eeb, 0x1eea, 0x1eed, 0x1eec, 0x1eef, 0x1eee,
    0x1ef1, 0x1ef0, 0x1ef3, 0x1ef2, 0x1ef5, 0x1ef4, 0x1ef7, 0x1ef6,
    0x1ef9, 0x1ef8, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 case_1f [] = {
    0x1f08, 0x1f09, 0x1f0a, 0x1f0b, 0x1f0c, 0x1f0d, 0x1f0e, 0x1f0f,
    0x1f00, 0x1f01, 0x1f02, 0x1f03, 0x1f04, 0x1f05, 0x1f06, 0x1f07,
    0x1f18, 0x1f19, 0x1f1a, 0x1f1b, 0x1f1c, 0x1f1d, 0, 0,
    0x1f10, 0x1f11, 0x1f12, 0x1f13, 0x1f14, 0x1f15, 0, 0,
    0x1f28, 0x1f29, 0x1f2a, 0x1f2b, 0x1f2c, 0x1f2d, 0x1f2e, 0x1f2f,
    0x1f20, 0x1f21, 0x1f22, 0x1f23, 0x1f24, 0x1f25, 0x1f26, 0x1f27,
    0x1f38, 0x1f39, 0x1f3a, 0x1f3b, 0x1f3c, 0x1f3d, 0x1f3e, 0x1f3f,
    0x1f30, 0x1f31, 0x1f32, 0x1f33, 0x1f34, 0x1f35, 0x1f36, 0x1f37,
    0x1f48, 0x1f49, 0x1f4a, 0x1f4b, 0x1f4c, 0x1f4d, 0, 0,
    0x1f40, 0x1f41, 0x1f42, 0x1f43, 0x1f44, 0x1f45, 0, 0,
    0x0, 0x1f59, 0x0, 0x1f5b, 0x0, 0x1f5d, 0x0, 0x1f5f,
    0, 0x1f51, 0, 0x1f53, 0, 0x1f55, 0, 0x1f57,
    0x1f68, 0x1f69, 0x1f6a, 0x1f6b, 0x1f6c, 0x1f6d, 0x1f6e, 0x1f6f,
    0x1f60, 0x1f61, 0x1f62, 0x1f63, 0x1f64, 0x1f65, 0x1f66, 0x1f67,
    0x1fba, 0x1fbb, 0x1fc8, 0x1fc9, 0x1fca, 0x1fcb, 0x1fda, 0x1fdb,
    0x1ff8, 0x1ff9, 0x1fea, 0x1feb, 0x1ffa, 0x1ffb, 0, 0,
    0x1f88, 0x1f89, 0x1f8a, 0x1f8b, 0x1f8c, 0x1f8d, 0x1f8e, 0x1f8f,
    0x1f80, 0x1f81, 0x1f82, 0x1f83, 0x1f84, 0x1f85, 0x1f86, 0x1f87,
    0x1f98, 0x1f99, 0x1f9a, 0x1f9b, 0x1f9c, 0x1f9d, 0x1f9e, 0x1f9f,
    0x1f90, 0x1f91, 0x1f92, 0x1f93, 0x1f94, 0x1f95, 0x1f96, 0x1f97,
    0x1fa8, 0x1fa9, 0x1faa, 0x1fab, 0x1fac, 0x1fad, 0x1fae, 0x1faf,
    0x1fa0, 0x1fa1, 0x1fa2, 0x1fa3, 0x1fa4, 0x1fa5, 0x1fa6, 0x1fa7,
    0x1fb8, 0x1fb9, 0x0, 0x1fbc, 0x0, 0, 0x0, 0x0,
    0x1fb0, 0x1fb1, 0x1f70, 0x1f71, 0x1fb3, 0, 0x399, 0,
    0, 0, 0x0, 0x1fcc, 0x0, 0, 0x0, 0x0,
    0x1f72, 0x1f73, 0x1f74, 0x1f75, 0x1fc3, 0, 0, 0,
    0x1fd8, 0x1fd9, 0x0, 0x0, 0, 0, 0x0, 0x0,
    0x1fd0, 0x1fd1, 0x1f76, 0x1f77, 0, 0, 0, 0,
    0x1fe8, 0x1fe9, 0x0, 0x0, 0x0, 0x1fec, 0x0, 0x0,
    0x1fe0, 0x1fe1, 0x1f7a, 0x1f7b, 0x1fe5, 0, 0, 0,
    0, 0, 0x0, 0x1ffc, 0x0, 0, 0x0, 0x0,
    0x1f78, 0x1f79, 0x1f7c, 0x1f7d, 0x1ff3, 0, 0, 0,
};

static const Q_UINT16 case_20 [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0x0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 case_21 [] = {
    0, 0, 0x0, 0, 0, 0, 0, 0x0,
    0, 0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0, 0x0, 0, 0,
    0x761, 0x0, 0x0, 0x0, 0x0, 0x0, 0, 0,
    0, 0, 0, 0, 0x0, 0, 0x0, 0,
    0x0, 0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0, 0x0, 0x0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 case_fb [] = {
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 case_ff [] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0xff41, 0xff42, 0xff43, 0xff44, 0xff45, 0xff46, 0xff47,
    0xff48, 0xff49, 0xff4a, 0xff4b, 0xff4c, 0xff4d, 0xff4e, 0xff4f,
    0xff50, 0xff51, 0xff52, 0xff53, 0xff54, 0xff55, 0xff56, 0xff57,
    0xff58, 0xff59, 0xff5a, 0, 0, 0, 0, 0,
    0, 0xff21, 0xff22, 0xff23, 0xff24, 0xff25, 0xff26, 0xff27,
    0xff28, 0xff29, 0xff2a, 0xff2b, 0xff2c, 0xff2d, 0xff2e, 0xff2f,
    0xff30, 0xff31, 0xff32, 0xff33, 0xff34, 0xff35, 0xff36, 0xff37,
    0xff38, 0xff39, 0xff3a, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const Q_UINT16 *case_info [256] = {

    case_0, case_1, case_2, case_3, case_4, case_5, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    case_10, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, case_1e, case_1f,
    case_20, case_21, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, case_fb, 0, 0, 0, case_ff,
};

static const Q_INT8 num_0 [] = {
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 2, 3, 4, 5, 6, 7,
    8, 9, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, 2, 3, -1, -1, -1, -1,
    -1, 1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
};

static const Q_INT8 num_6 [] = {
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 2, 3, 4, 5, 6, 7,
    8, 9, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 2, 3, 4, 5, 6, 7,
    8, 9, -1, -1, -1, -1, -1, -1,
};

static const Q_INT8 num_9 [] = {
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, 0, 1,
    2, 3, 4, 5, 6, 7, 8, 9,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, 0, 1,
    2, 3, 4, 5, 6, 7, 8, 9,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
};

static const Q_INT8 num_b [] = {
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, 0, 1,
    2, 3, 4, 5, 6, 7, 8, 9,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, 1,
    2, 3, 4, 5, 6, 7, 8, 9,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
};

static const Q_INT8 num_d [] = {
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, 0, 1,
    2, 3, 4, 5, 6, 7, 8, 9,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
};

static const Q_INT8 num_e [] = {
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 2, 3, 4, 5, 6, 7,
    8, 9, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 2, 3, 4, 5, 6, 7,
    8, 9, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
};

static const Q_INT8 num_f [] = {
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 2, 3, 4, 5, 6, 7,
    8, 9, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
};

static const Q_INT8 num_20 [] = {
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    0, -1, -1, -1, 4, 5, 6, 7,
    8, 9, -1, -1, -1, -1, -1, -1,
    0, 1, 2, 3, 4, 5, 6, 7,
    8, 9, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
};

static const Q_INT8 num_ff [] = {
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 2, 3, 4, 5, 6, 7,
    8, 9, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
};

static const Q_INT8 *decimal_info [256] = {
     num_0, 0, 0, 0, 0, 0, num_6, 0,
     0, num_9, num_9, num_b, num_9, num_d, num_e, num_f,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     num_20, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, num_ff,
};


/*
 * ----------------------------------------------------------------------
 * End of unicode tables
 * ----------------------------------------------------------------------
 */




static
int ucstrcmp( const QString &as, const QString &bs )
{
    const QChar *a = as.unicode();
    const QChar *b = bs.unicode();
    if ( a == b )
	return 0;
    int l=QMIN(as.length(),bs.length());
    while ( l-- && *a == *b )
	a++,b++;
    if ( l==-1 )
	return ( as.length()-bs.length() );
    return a->unicode() - b->unicode();
}
static
int ucstrncmp( const QChar *a, const QChar *b, int l )
{
    while ( l-- && *a == *b )
	a++,b++;
    if ( l==-1 )
	return 0;
    return *a - *b;
}
static
int ucstrnicmp( const QChar *a, const QChar *b, int l )
{
    while ( l-- && a->lower() == b->lower() )
	a++,b++;
    if ( l==-1 )
	return 0;
    QChar al = a->lower();
    QChar bl = b->lower();
    return al.row() == bl.row() ? al.cell() - bl.cell() : al.row() - bl.row();
}


/*!
  \class QChar qstring.h
  \brief A Unicode character.

  A QChar is a simple 16-bit value representing a Unicode character.
  Most C++ compilers will process them much as they would a "short int".

  QChar values are normally used in combination with QString.

  They can be trivially constructed from:
   <dl>
    <dt>\c char
      <dd>the char is assumed to be a Latin-1 character,
	    for example QChar('Q') is the Unicode character U0051
	    and QChar('t') is the Unicode character U0074.
    <dt>\c short
      <dd>the MSB is the high-order byte (row) of the Unicode character,
	    for example QChar(ushort(0x6817)) is the Unicode character
	    U6817 meaning <em>kuri</em> - chestnut tree - in Japanese.
    <dt>\c char, \c char
      <dd>the characters are LSB and MSB respectively,
	    for example QChar(0x25,0x04) is the Unicode character U0425
	    which is the Cyrillic letter YA which looks like a mirrored R.
   </dl>
*/


/*!
  Returns whether the character is a printable character.  This is
  and character of category Cc or Cn.  Note that this gives no indication
  of whether the character is available in some font.
*/
bool QChar::isPrint() const
{
    Category c = category();
    return !(c == Cc || c == Cn);
}

/*!
  Returns whether the character is a whitespace character.
*/
bool QChar::isSpace() const
{
    if( !row() )
	if( cell() >= 9 && cell() <=13 ) return TRUE;
    Category c = category();
    return c >= Zs && c <= Zp;
}

/*!
  Returns whether the character is a mark (category Mn or Mc).
*/
bool QChar::isMark() const
{
    Category c = category();
    return c >= Mn && c <= Me;
}

/*!
  Returns whether the character is puntuation (categories Pd, Ps, Pe, or Po).
*/
bool QChar::isPunct() const
{
    Category c = category();
    return (c >= Pc && c <= Po);
}

/*!
  Returns whether the character is a letter.
*/
bool QChar::isLetter() const
{
    Category c = category();
    return (c == Lu || c == Ll || c == Lo || c == Lt || c == Lm );
}

/*!
  Returns whether the character is a number (of any sort).

  \sa isDigit()
*/
bool QChar::isNumber() const
{
    Category c = category();
    return c >= Nd && c <= Nl;
}

/*!
  Returns whether the character is a decimal digit.
  */
bool QChar::isDigit() const
{
    return (category() == Nd);
}

/*!
  Returns the numeric value of the digit, or -1 if the character is not
  a digit.
*/
int QChar::digitValue() const
{
    const Q_INT8 *dec_row = decimal_info[row()];
    if( !dec_row ) return -1;
    return decimal_info[row()][cell()];
}

/*!
  Returns the character category.
  See the Unicode Standard for details.
*/
QChar::Category QChar::category() const
{
    return (Category) unicode_info[row()][cell()];
}

/*!
  Returns the characters directionality.
  See the Unicode Standard for details.
*/
QChar::Direction QChar::direction() const
{
  const Q_UINT8 *rowp = direction_info[row()];
  if(!rowp) return QChar::DirL;
  return (Direction) ( *(rowp+cell()) &0xf );
}

/*!
  This function is not supported (it may change to use Unicode
  character classes).

  Returns information about the joining properties of the
  character (needed for arabic).
*/
QChar::Joining QChar::joining() const
{
  const Q_UINT8 *rowp = direction_info[row()];
  if(!rowp) return QChar::OtherJoining;
  return (Joining) ((*(rowp+cell()) >> 4) &0x7);
}


/*!
  Returns whether the character is a mirrored character (one that
  should be reversed if the text direction is reversed).
*/
bool QChar::mirrored() const
{
  const Q_UINT8 *rowp = direction_info[row()];
  if(!rowp) return FALSE;
  return *(rowp+cell())>128;
}

/*!
  Decomposes a character into its parts. Returns QString::null if
  no decomposition exists.
*/
QString QChar::decomposition() const
{
    const Q_UINT16 *r = decomp_info[row()];
    if(!r) return QString::null;

    Q_UINT16 pos = r[cell()];
    if(!pos) return QString::null;
    pos+=2;

    QString s;
    Q_UINT16 c;
    while((c = decomp_map[pos++]) != 0) s += QChar(c);

    return s;
}

/*!
  Returns the tag defining the composition of the character.
  Returns QChar::Single if no decomposition exists.
*/
QChar::Decomposition QChar::decompositionTag() const
{
  const Q_UINT16 *r = decomp_info[row()];
  if(!r) return QChar::Single;

  Q_UINT16 pos = r[cell()];
  if(!pos) return QChar::Single;

  return (QChar::Decomposition) decomp_map[pos];
}

/*!
  Returns the lowercase equivalent if the character is uppercase,
  or the character itself otherwise.
*/
QChar QChar::lower() const
{
    if(category() != Lu) return *this;
    Q_UINT16 lower = *(case_info[row()]+cell());
    if(lower == 0) return *this;
    return lower;
}

/*!
  Returns the uppercase equivalent if the character is lowercase,
  or the character itself otherwise.
*/
QChar QChar::upper() const
{
    if(category() != Ll) return *this;
    Q_UINT16 upper = *(case_info[row()]+cell());
    if(upper == 0) return *this;
    return upper;
}

/*!
  \fn QChar::operator char() const

  Returns the Latin1 character equivalent to the QChar,
  or 0.  This is mainly useful for non-internationalized software.

  \sa unicode()
*/

/*!
  \fn ushort QChar::unicode() const

  Returns the numeric Unicode value equal to the QChar.  Normally, you
  should use QChar objects as they are equivalent, but for some low-level
  tasks (eg. indexing into an array of Unicode information), this function
  is useful.
*/

// small class used internally in QString::Compose()
class QLigature
{
public:
    QLigature( QChar c );

    Q_UINT16 first() { cur = ligatures; if(!cur) return 0; return *cur; }
    Q_UINT16 next() { if(!cur || *cur == 0) return 0; return *(cur++); }
    Q_UINT16 current() { if(!cur) return 0; return *cur; }

    int match(QString & str, unsigned int index);
    QChar head();
    QChar::Decomposition tag();

private:
    Q_UINT16 *ligatures;
    Q_UINT16 *cur;
};

QLigature::QLigature( QChar c )
{
    const Q_UINT16 *r = ligature_info[c.row()];
    if( !r )
	ligatures = 0;
    else
    {
	const Q_UINT16 pos = r[c.cell()];
	ligatures = (Q_UINT16 *)&(ligature_map[pos]);
    }
    cur = ligatures;
}

QChar QLigature::head()
{
    if(current())
	return QChar(decomp_map[current()+1]);

    return QChar::null;
}

QChar::Decomposition QLigature::tag()
{
    if(current())
	return (QChar::Decomposition) decomp_map[current()];
	
    return QChar::Canonical;
}

int QLigature::match(QString & str, unsigned int index)
{
    unsigned int i=index;
	
    if(!current()) return 0;
	
    Q_UINT16 lig = current() + 2;
    Q_UINT16 ch = 0;

    while ((i < str.length()) && (ch = decomp_map[lig])) {
	if (str[(int)i] != QChar(ch))
	    return 0;
	i++; lig++;
    }
	
    if (!decomp_map[lig])
    {
	return i-index;
    }
    return 0;
}

// this function is just used in QString::compose()
static inline QChar::Decomposition format(QChar ch, QString & str,
					  int index, int len)
{
    unsigned int l = index + len;
    unsigned int r = index;

    bool left = FALSE, right = FALSE;

    switch (ch.joining()) {
    case QChar::Dual:
	left = ((l < str.length()) &&
		((str[(int)l].joining() == QChar::Dual) ||
		 (str[(int)l].joining() == QChar::Right)));
	// fall through
    case QChar::Right:
	if (r > 0) {
	    r--;
	    right = (str[(int)r].joining() == QChar::Dual);
	}
	break;
    default:
	break;
    }
	
	
    if (left && right)
	return QChar::Medial;
    if (left)
	return QChar::Initial;
    if (right)
	return QChar::Final;
	
    return QChar::Isolated;
} // format()

/*!
  Note that this function is not supported in Qt 2.0, and is merely
  for experimental and illustrative purposes.  It is mainly of interest
  to those experimenting with Arabic and other composition-rich texts.

  Applies possible ligatures to a QString, useful when composition-rich
  text requires rendering with glyph-poor fonts, but also
  makes compositions such as QChar(0x0041) ('A') and QChar(0x0308)
  (Unicode accent diaresis) giving QChar(0x00c4) (German A Umlaut).
*/
void QString::compose()
{
    unsigned int index=0, len;

    QChar code, head;

    QArray<QChar> dia;

    while (index < length())
    {
	code = at(index);
	
	QLigature ligature(code);
	ligature.first();
	while(ligature.current())
	{
	    if ((len = ligature.match(*this, index)) != 0)
	    {
		head = ligature.head();

		// joining info is only needed for arabic
		if (!head.joining() ||
		    ligature.tag() == format(head, *this, index, len))
		{
		    // replace letter
		    replace(index, len, QChar(head));
		    break;
		}
	    }
	    ligature.next();
	}
	
	index++;
    }
}

static QChar LRM ((ushort)0x200e);
static QChar RLM ((ushort)0x200f);
static QChar LRE ((ushort)0x202a);
static QChar RLE ((ushort)0x202b);
static QChar RLO ((ushort)0x202e);
static QChar LRO ((ushort)0x202d);
static QChar PDF ((ushort)0x202c);

static inline bool is_arabic(unsigned short x) {
    return (((x >= 0x0600) && (x <= 0x07bf)) ||
	    ((x >= 0xfb50) && (x <= 0xfdff)) ||
	    ((x >= 0xfe70) && (x <= 0xfeff)));
}

static inline bool is_neutral(QChar ch) {
    QChar::Direction dir = ch.direction();
    return ((dir == QChar::DirB) ||
	    (dir == QChar::DirS) ||
	    (dir == QChar::DirWS) ||
	    (dir == QChar::DirON));
}

/*!
  This function returns the basic directionality of the string (QChar::DirR for
  right to left and QChar::DirL for left to right). Useful to find the right
  alignment.
  */
QChar::Direction QString::basicDirection()
{
    // find base direction
    unsigned int pos = 0;
    while ((pos < length()) &&
	   (at(pos) != RLE) &&
	   (at(pos) != LRE) &&
	   (at(pos) != RLO) &&
	   (at(pos) != LRO) &&
	   (at(pos).direction() > 1)) // not R and not L
	pos++;
	
    if ((at(pos).direction() == QChar::DirR) ||
	(at(pos) == RLE) ||
	(at(pos) == RLO))
	return QChar::DirR;

    return QChar::DirL;
}

// reverses part of the QChar array to get visual ordering
// called from QString::visual()
//
// ###### Test efficiency - why use QChar* rather than QString?
// ######    The call to this end up making a copy because of it.
static unsigned int reverse(QChar *chars, unsigned char *level,
		     unsigned int a, unsigned int b) {

    unsigned char lev = level[a];
	
    unsigned int c = a;
	
    lev = level[c];
	
    while ((c < b) && (level[c] >= lev)) {
	if (level[c] > lev)
	    c = reverse(chars, level, c, b);
	c++;
    }
	
    if (lev > 0) {
	QChar temp;
	unsigned int d = a, e = c-1;
	while (d < e) {
	    temp = chars[d];
	    chars[d] = chars[e];
	    chars[e] = temp;
			
	    d++; e--;
	}
    }

    return c;
}

// small class used for the ordering algorithm in QString::visual()
class QBidiState {
public:
    unsigned char level;
    signed   char override;
	
    QBidiState(unsigned char l, signed char o) : level(l), override(o) {};
};

/*!
  This function returns the QString ordered visually. Useful for
  painting the string or when transforming to a visually ordered
  encoding.
  */
QString QString::visual(int index, int len)
{
    // #### This needs much more optimizing - it is called for
    // #### every text operation.

    unsigned char *level;
    QChar::Direction *dir;
    unsigned char base = 0;

    unsigned int l = length();

    // check bounds
    if (len == -1)
	len = length()-index;
    if ((uint)index > l)
	return QString::null;

    // find base direction
    unsigned int pos = 0;
    while ((pos < length()) &&
	   (at(pos) != RLE) &&
	   (at(pos) != LRE) &&
	   (at(pos) != RLO) &&
	   (at(pos) != LRO) &&
	   (at(pos).direction() > 1)) // not R and not L
	pos++;
	
    if ((pos < length()) &&
	    ((at(pos).direction() == QChar::DirR) ||
	    (at(pos) == RLE) ||
	    (at(pos) == RLO)))
	base = 1;

    // is there any BiDi char at all?
    if ( base == 0 && pos == l ) {
	return mid(index, len);
    }


    level = new uchar[l];
    dir   = new QChar::Direction[l];

    // explicit override pass
    unsigned int code_count = 0;
	
    QStack<QBidiState> stack;
    stack.setAutoDelete(TRUE);

    unsigned char    clevel   = base;
    signed char      override = -1;

    for (pos = 0; pos < l; pos++) {
		
	if (at(pos) == RLE) {
	    code_count++;
	    stack.push(new QBidiState(clevel, override));
	    if (clevel < 254)
		clevel += 1 + clevel % 2;
	    override = -1;
	}
	else if (at(pos) == LRE) {
	    code_count++;
	    stack.push(new QBidiState(clevel, override));
	    if (clevel < 254)
		clevel += 2 - clevel % 2;
	    override = -1;
	}
	else if (at(pos) == RLO) {
	    code_count++;
	    stack.push(new QBidiState(clevel, override));
	    if (clevel < 254)
		clevel += 1 + clevel % 2;
	    override = QChar::DirR;
	}
	else if (at(pos) == LRO) {
	    code_count++;
	    stack.push(new QBidiState(clevel, override));
	    if (clevel < 254)
		clevel += 2 - clevel % 2;
	    override = QChar::DirL;
	}
	else if (at(pos) == PDF) {
	    code_count++;
	    if (!stack.isEmpty()) {
		override = stack.top()->override;
		clevel   = stack.top()->level;
		stack.remove();
	    }
	}

	// TODO: catch block separators (newlines, paras, etc.)

	level[pos] = clevel;
	if (override != -1)
	    dir[pos] = (QChar::Direction) override;
	else
	    dir[pos] = at(pos).direction();
    }
	
    // weak type pass
    for (pos = 0; pos < l; pos++) {

	int i;

	switch (at(pos).direction()) {
	case QChar::DirEN:
	    i   = pos-1;
	    while ((i >= 0) &&
		   !(at(i).direction() == QChar::DirAN) &&
		   !((at(i).direction() == QChar::DirR) &&
		     is_arabic(at(i).direction())) &&
		   !(at(i).direction() == QChar::DirB))
		i--;
			
	    if ((i >= 0) &&
		((at(i).direction() == QChar::DirAN) ||
		 is_arabic(at(i).direction())))
		dir[pos] = QChar::DirAN;
			
	    break;
	case QChar::DirES:
	case QChar::DirCS:
	    if ((pos > 0) && (pos < l-1) &&
		(dir[pos-1] == dir[pos+1]))
		dir[pos] = dir[pos-1];
	    else
		dir[pos] = QChar::DirON;
			
	    break;
	case QChar::DirET:
	    if (((pos > 0) && (dir[pos-1] == QChar::DirEN)) ||
		((pos < l-1) && (dir[pos+1] == QChar::DirEN)))
		dir[pos] = QChar::DirEN;
	    else
		dir[pos] = QChar::DirON;
			
	    break;
	default:
	    break;
	}
    }
	
    // neutral type pass
    for (pos = 0; pos < l; pos++) {
	QChar::Direction l,r;
		
	if (is_neutral(at(pos))) {
	    if (pos > 0)
		l = at(pos-1).direction();
	    else
		l = (base == 0 ? QChar::DirL : QChar::DirR);

	    int i = pos;
			
	    while ((i < (int)l-1) && is_neutral(at(i+1)))
		i++;
			
	    if (i < (int)l-1)
		r = at(i+1).direction();
	    else
		r = (base == 0 ? QChar::DirL : QChar::DirR);
			
	    for (int j=pos; j <= i; j++) {
		if (r == l)
		    dir[j] = l;
		else
		    dir[j] = (base == 0 ? QChar::DirL : QChar::DirR);
	    }
	}
    }
	
    // implicit level pass
    QChar::Direction prec = (base == 0 ? QChar::DirL : QChar::DirR);
	
    for (pos = 0; pos < l; pos++) {
	if (level[pos] % 2) {
	    switch (dir[pos]) {
	    case QChar::DirL:
	    case QChar::DirAN:
	    case QChar::DirEN:
		level[pos] += 1;
		break;
	    default:
		break;
	    }
	} else {
	    switch (dir[pos]) {
	    case QChar::DirL:
				// do nothing
		break;
	    case QChar::DirR:
		level[pos] += 1;
		break;
	    case QChar::DirEN:
		if (prec == QChar::DirL)
		    break;
				// fall through
	    case QChar::DirAN:
		level[pos] += 2;
		break;
	    default:
		break;
	    }
	}
		
	prec = dir[pos];
    }
	

    QChar *chars = new QChar[len];

    int i = 0;
    for ( pos = index; pos < (uint)(index+len); i++, pos++)
	chars[i] = at(pos);

    reverse(chars, level, index, index+len);

    delete [] level;
    delete [] dir;

    QString ret(chars, len);
    delete chars;
    return ret;
}



/*!
  This utility function converts the 8-bit string
  \a ba to Unicode, returning the result.

  The caller is responsible for deleting the return value with delete[].
*/

QChar* QString::asciiToUnicode( const QByteArray& ba, uint* len )
{
    int l = 0;
    while ( l < (int)ba.size() && ba[l] )
	l++;
    char* str = ba.data();
    QChar *uc = new QChar[l];
    QChar *result = uc;
    if ( len )
	*len = l;
    while (l--)
	*uc++ = *str++;
    return result;
}

/*!
  This utility function converts the NUL-terminated 8-bit string
  \a str to Unicode, returning the result and setting \a len to
  the length of the Unicode string.

  The caller is responsible for deleting the return value with delete[].
*/

QChar* QString::asciiToUnicode(const char *str, uint* len, uint maxlen )
{
    QChar* result = 0;
    uint l = 0;
    if ( str ) {
	if ( maxlen != (uint)-1 ) {
	    while (str[l] && l < maxlen)
		l++;
	} else {
	    // Faster?
	    l = strlen(str);
	}
	QChar *uc = new QChar[l];
	result = uc;
	uint i = l;
	while ( i-- )
	    *uc++ = *str++;
    }
    if ( len )
	*len = l;
    return result;
}

/*!
  This utility function converts \a l 16-bit characters from
  \a uc to ASCII, returning a NUL-terminated string.

  The caller is responsible for deleting the string with delete[].
*/
char* QString::unicodeToAscii(const QChar *uc, uint l)
{
    if (!uc) {
	return 0;
    }
    char *a = new char[l+1];
    char *result = a;
    while (l--)
	*a++ = *uc++;
    *a++ = '\0';
    return result;
}

/*****************************************************************************
  QString member functions
 *****************************************************************************/

/*!
  \class QString qstring.h

  \brief The QString class provides an abstraction of Unicode text and
          the classic C zero-terminated char array (<var>char*</var>).

  \ingroup tools
  \ingroup shared

  QString uses implicit
  \link shclass.html sharing\endlink, and so it is very efficient
  and easy to use.

  In all QString methods that take <var>const char*</var> parameters,
  the <var>const char*</var> is interpreted as a classic C-style
  0-terminated ASCII string. It is legal for the <var>const
  char*</var> parameter to be 0. The results are undefined if the
  <var>const char*</var> string is not 0-terminated. Functions that
  copy classic C strings into a QString will not copy the terminating
  0-character. The QChar array of the QString (as returned by
  unicode()) is not terminated by a null.

  A QString that has not been assigned to anything is \a null, i.e. both
  the length and data pointer is 0. A QString that references the empty
  string ("", a single '\0' char) is \a empty.	Both null and empty
  QStrings are legal parameters to the methods. Assigning <var>const char
  * 0</var> to QString gives a null QString.

  Note that if you find that you are mixing usage of QCString, QString,
  and QByteArray, this causes lots of unnecessary copying and might
  indicate that the true nature of the data you are dealing with is
  uncertain.  If the data is NUL-terminates 8-bit data, use QCString;
  if it is unterminated (ie. contains NULs) 8-bit daya, use QByteArray;
  if it is text, use QString.

  \sa \link shclass.html Shared classes\endlink
*/

Q_EXPORT QString::Data *QString::shared_null = 0;
QT_STATIC_CONST_IMPL QString QString::null;
QT_STATIC_CONST_IMPL QChar QChar::null;
QT_STATIC_CONST_IMPL QChar QChar::replacement((ushort)0xfffd);
QT_STATIC_CONST_IMPL QChar QChar::byteOrderMark((ushort)0xfeff);
QT_STATIC_CONST_IMPL QChar QChar::byteOrderSwapped((ushort)0xfffe);

QString::Data* QString::makeSharedNull()
{
    return shared_null=new Data;
}

// Uncomment this to get some useful statistics.
// #define Q2HELPER(x) x

#ifdef Q2HELPER
static int stat_construct_charstar=0;
static int stat_construct_charstar_size=0;
static int stat_construct_null=0;
static int stat_construct_int=0;
static int stat_construct_int_size=0;
static int stat_construct_ba=0;
static int stat_get_ascii=0;
static int stat_get_ascii_size=0;
static int stat_copy_on_write=0;
static int stat_copy_on_write_size=0;
static int stat_fast_copy=0;
void Q_EXPORT qt_qstring_stats()
{
	debug("construct_charstar = %d (%d chars)", stat_construct_charstar, stat_construct_charstar_size);
	debug("construct_null = %d", stat_construct_null);
	debug("construct_int = %d (%d chars)", stat_construct_int, stat_construct_int_size);
	debug("construct_ba = %d", stat_construct_ba);
	debug("get_ascii = %d (%d chars)", stat_get_ascii, stat_get_ascii_size);
	debug("copy_on_write = %d (%d chars)", stat_copy_on_write, stat_copy_on_write_size);
	debug("fast_copy = %d", stat_fast_copy);
}
#else
#define Q2HELPER(x)
#endif

/*!
  \fn QString::QString()

  Constructs a null string.
  \sa isNull()
*/

/*!
  Constructs a string containing the one character \a ch.
*/
QString::QString( QChar ch )
{
    d = new Data(new QChar[1],1,1);
    d->unicode[0] = ch;
}

/*!
  Constructs an implicitly-shared copy of \a s.
*/
QString::QString( const QString &s ) :
    d(s.d)
{
    Q2HELPER(stat_fast_copy++);
    d->ref();
}

/*!
  Private function.

  Constructs a string with preallocated space for \a size characters.

  The string is empty.

  \sa isNull()
*/

QString::QString( int size, bool /*dummy*/ )
{
    if ( size ) {
	Q2HELPER(stat_construct_int++);
	int l = size;
	Q2HELPER(stat_construct_int_size+=l);
	d = new Data(new QChar[l],0,l);
    } else {
	Q2HELPER(stat_construct_null++);
	d = shared_null ? shared_null : shared_null=new Data;
	d->ref();
    }
}

/*!
  Constructs a string that is a deep copy of \a ba interpreted as
  interpreted as a classic C string.
*/

QString::QString( const QByteArray& ba )
{
    Q2HELPER(stat_construct_ba++);
    uint l;
    QChar *uc = asciiToUnicode(ba,&l);
    d = new Data(uc,l,l);
}

/*!
  Constructs a string that is a deep copy of the
  first \a length QChar in the array \a unicode.

  \sa QString::make()
*/

QString::QString( const QChar* unicode, uint length )
{
    QChar* uc = new QChar[ length ];
    memcpy(uc, unicode, length*sizeof(QChar));
    d = new Data(uc,length,length);
}

/*!
  Constructs a string that is a deep copy of \a str, interpreted as a
  classic C string.

  If \a str is 0 a null string is created.

  This is a cast constructor.  You can disable this constructor by
  defining QT_NO_CAST_ASCII when you compile your applications.  This
  will allow you to be more vigilant about when you convert from 8-bit
  data.  You can still make QString objects by using fromLatin1(), or
  fromLocal8Bit(), fromUtf8(), or whatever encoding is appropriate for
  the 8-bit data you have.

  \sa isNull()
*/

QString::QString( const char *str )
{
    Q2HELPER(stat_construct_charstar++);
    uint l;
    QChar *uc = asciiToUnicode(str,&l);
    Q2HELPER(stat_construct_charstar_size+=l);
    d = new Data(uc,l,l);
}


/*!
  \internal

  Note: This method is obsolete and should not be used in new code. It
  is provided only as an aid for porting programs from Qt 1.x to Qt
  2.x.

  This function is obsolete - the semantics is too tricky.
  Use QString("helloworld").left(5) instead.

  Constructs a string that is a deep copy of \a str, interpreted as a
  classic C string. If the size (including the 0-terminator) of \a str
  is larger than \a maxSize, only the first \a maxSize - 1 characters
  will be copied.

  If \a str is 0 a null string is created.

  Example:
  \code
    QString s( "helloworld", 6 );  // s == "hello"
  \endcode

  \sa isNull()
*/

QString::QString( const char *str, uint maxSize )
{
    Q2HELPER(stat_construct_charstar++);
    uint l;
    QChar *uc = asciiToUnicode( str, &l, maxSize-1 );
    d = new Data(uc,l,l);
}

/*!
  Deallocates any space reserved solely by this QString.
*/

void QString::real_detach()
{
    setLength( length() );
}

void QString::deref()
{
    if ( d->deref() ) {
	delete d;
	d = 0; // helps debugging
    }
}

void QString::Data::deleteSelf()
{
    delete this;
}

/*!
  Assigns a shallow copy of \a s to this string and returns a
  reference to this string.
*/
QString &QString::operator=( const QString &s )
{
    Q2HELPER(stat_fast_copy++);
    s.d->ref();
    deref();
    d = s.d;
    return *this;
}

/*!
  Assigns a deep copy of \a cs, interpretted a classic C string, to
  this string and returns a reference to this string.
*/
QString &QString::operator=( const QCString& cs )
{
    deref();
    uint l;
    QChar *uc = asciiToUnicode(cs,&l);
    d = new Data(uc,l,l);
    return *this;
}


/*!
  Assigns a deep copy of \a str, interpretted a classic C string to
  this string and returns a reference to this string.

  If \a str is 0 a null string is created.

  \sa isNull()
*/
QString &QString::operator=( const char *str )
{
    deref();
    uint l;
    QChar *uc = asciiToUnicode(str,&l);
    d = new Data(uc,l,l);
    return *this;
}


/*!
  \fn bool QString::isNull() const

  Returns TRUE if the string is null.
  A null string is also an empty string.

  Example:
  \code
    QString a;		// a.unicode() == 0,  a.length() == 0
    QString b == "";	// b.unicode() == "", b.length() == 0
    a.isNull();		// TRUE, because a.unicode() == 0
    a.isEmpty();	// TRUE, because a.length() == 0
    b.isNull();		// FALSE, because b.unicode() != 0
    b.isEmpty();	// TRUE, because b.length() == 0
  \endcode

  \sa isEmpty(), length()
*/

/*!
  \fn bool QString::isEmpty() const

  Returns TRUE if the string is empty, i.e. if length() == 0.
  An empty string is not always a null string.

  See example in isNull().

  \sa isNull(), length()
*/

/*!
  \fn uint QString::length() const

  Returns the length of the string.

  Null strings and empty strings have zero length.

  \sa isNull(), isEmpty()
*/

/*!
  Truncates the string at position \a newLen. If newLen is less than the
  current length, this is equivalent to setLength( newLen ). Otherwise,
  nothing happens.

  Example:
  \code
    QString s = "truncate this string";
    s.truncate( 5 );				// s == "trunc"
  \endcode

  In Qt 1.x, it was possible to "truncate" a string to a longer
  length.  This is no longer possible.

  \sa setLength()
*/

void QString::truncate( uint newLen )
{
    if ( newLen < d->len )
	setLength( newLen );
}

/*!
  Ensures that at least \a len characters are allocated, and sets the
  length to \a len. Will detach. New space is \e not defined.

  If \a len is 0, this string becomes empty, unless this string is null,
  in which case it remains null.

  \sa truncate(), isNull(), isEmpty()
*/

void QString::setLength( uint newLen )
{
    if ( d->count != 1 || newLen > d->maxl || 		// detach, grow, or
	 ( newLen*4 < d->maxl && d->maxl > 4 ) ) {	// shrink
	Q2HELPER(stat_copy_on_write++);
	Q2HELPER(stat_copy_on_write_size+=d->len);
	uint newMax = 4;
	while ( newMax < newLen )
	    newMax *= 2;
	QChar* nd = new QChar[newMax];
	uint len = QMIN( d->len, newLen );
	if ( d->unicode )
	    memcpy( nd, d->unicode, sizeof(QChar)*len );
	deref();
	d = new Data( nd, newLen, newMax );
    } else {
	d->len = newLen;
	d->dirtyascii = 1;
    }
}

/*!
  Returns a string equal to this one, but with the first
  occurrence of <tt>%<em>digit</em></tt> replaced by the
  text \a a.  This is particularly useful for translations,
  as it allows the order of the replacements to be controlled by the
  translator.  For example:

  \code
    label.setText( tr("I have %1 to your %2").arg(mine).arg(yours) );
  \endcode

  If there is no <tt>%<em>digit</em></tt> pattern, a
  \link warning() warning message\endlink is printed and the
  text as appended with a space at the end of the string.
  This is error-recovery and should not be occur in correct code.

  \a fieldwidth is the minimum amount of space the text will be padded
  to.  A positive value produces right-aligned text, while a negative
  value produces left aligned text.

  \sa QObject::tr()
*/
QString QString::arg(const QString& a, int fieldwidth) const
{
    int pos, len;
    QString r = *this;

    if ( !findArg(pos,len) ) {
	warning("Argument missing");
	// Make sure the text at least appears SOMEWHERE
	r += ' ';
	pos = r.length();
	len = 0;
    }

    r.replace(pos,len,a);
    if ( fieldwidth < 0 ) {
	QString s;
	while ( (uint)-fieldwidth > a.length() ) {
	    s += ' ';
	    fieldwidth++;
	}
	r.insert(pos+a.length(),s);
    } else if ( fieldwidth ) {
	QString s;
	while ( (uint)fieldwidth > a.length() ) {
	    s += ' ';
	    fieldwidth--;
	}
	r.insert(pos,s);

    }
    return r;
}

/*!
  Returns a string equal to this one, but with the first
  occurrence of <tt>%<em>digit</em></tt> replaced by the
  integer value \a in base \a base (defaults to decimal).

  The value is converted to \a base notation (default is decimal).
  The base must be a value from 2 to 36.

  See arg(const QString&,int) for more details.
*/
QString QString::arg(long a, int fieldwidth, int base) const
{
    QString n;
    n.setNum(a,base);
    return arg(n,fieldwidth);
}

/*!
  Returns a string equal to this one, but with the first
  occurrence of <tt>%<em>digit</em></tt> replaced by the
  unsigned integer value \a in base \a base (defaults to decimal).

  The value is converted to \a base notation (default is decimal).
  The base must be a value from 2 to 36.

  See arg(const QString&,int) for more details.
*/
QString QString::arg(ulong a, int fieldwidth, int base) const
{
    QString n;
    n.setNum(a,base);
    return arg(n,fieldwidth);
}

/*!
  \fn QString QString::arg(int a, int fieldwidth, int base) const

  See QString::arg(long a, int fieldwidth, int base).
*/

/*!
  \fn QString QString::arg(uint a, int fieldwidth, int base) const

  See QString::arg(ulong a, int fieldwidth, int base).
*/


/*!
  Returns a string equal to this one, but with the first
  occurrence of <tt>%<em>digit</em></tt> replaced by the
  character \a a.

  See arg(const QString&,int) for more details.
*/
QString QString::arg(char a, int fieldwidth) const
{
    QString c;
    c += a;
    return arg(c,fieldwidth);
}

/*!
  Returns a string equal to this one, but with the first
  occurrence of <tt>%<em>digit</em></tt> replaced by the
  character \a a.

  See arg(const QString&,int) for more details.
*/
QString QString::arg(QChar a, int fieldwidth) const
{
    QString c;
    c += a;
    return arg(c,fieldwidth);
}

/*!
  Returns a string equal to this one, but with the first
  occurrence of <tt>%<em>digit</em></tt> replaced by the
  value \a a.

  See arg(const QString&,int) for more details.
*/
QString QString::arg(double a, int fieldwidth, char fmt, int prec) const
{
    QString dec;
    dec.setNum(a,fmt,prec);
    return arg(dec,fieldwidth);
}


/*!
  Just 1-digit arguments.
*/
bool QString::findArg(int& pos, int& len) const
{
    char lowest=0;
    for (uint i=0; i<length(); i++) {
	if ( at(i) == '%' && i+1<length() ) {
	    char d = at(i+1);
	    if ( d >= '0' && d <= '9' ) {
		if ( !lowest || d < lowest ) {
		    lowest = d;
		    pos = i;
		    len = 2;
		}
	    }
	}
    }
    return lowest != 0;
}

/*!
  Safely builds a formatted string from a format string and an
  arbitrary list of arguments.  The format string supports all
  the escape sequences of printf() in the standard C library.

  The %s escape sequence expects a
  \link utf8() UTF-8\endlink encoded string.
  For typesafe string building,
  with full Unicode support, you can use QTextOStream like this:

  \code
    QString str;
    QString s = ...;
    int x = ...;
    QTextOStream(str) << s << " : " << x;
  \endcode

  For \link QObject::tr() translations,\endlink especially if the
  strings contains more than one escape sequence, you should consider
  using the arg() function instead.  This allows the order of the
  replacements to be controlled by the translator, and has Unicode
  support.

  \sa arg(const QString&,int)
*/

QString &QString::sprintf( const char* cformat, ... )
{
    va_list ap;
    va_start( ap, cformat );

    if ( !cformat ) {
	// Qt 1.x compat
	*this = QString::fromLatin1("");
	return *this;
    }
    QString format = QString::fromLatin1(cformat);

    static QRegExp escape(
	QString::fromLatin1("%#?0?-? ?\\+?'?[0-9*]*\\.?[0-9*]*h?l?L?q?Z?"));

    QString result;
    uint last=0;

    int len=0;
    int pos=-1;
    while ( 1 ) {
	pos=escape.match( format, last, &len );
	// Non-escaped text
	if ( pos > (int)last ) {
	    result += format.mid(last,pos-last);
//debug("%d UNESCAPED from %d = %s",pos-last,last,format.mid(last,pos-last).latin1());
	}
	if ( pos < 0 ) {
	    // The rest
//debug("THE REST = %s",format.mid(last).latin1());
	    if ( last < format.length() )
		result += format.mid(last);
	    break;
	}
	last = pos + len + 1;

	// Escape
	QString f = format.mid(pos,len);
//debug("fmt=%s",f.latin1());
	uint width, decimals;
	int params=0;
	int wpos = f.find('*');
	if ( wpos >= 0 ) {
	    params++;
	    width = va_arg(ap, int);
//debug("pwidth=%d",width);
	    if ( f.find('*',wpos+1) >= 0 ) {
		decimals = va_arg(ap, int);
//debug("pdec=%d",decimals);
		params++;
	    } else {
		decimals = 0;
	    }
	} else {
	    decimals = width = 0;
	}
	QString replacement;
	if ( format[pos+len] == 's' ||
	     format[pos+len] == 'S' ||
	     format[pos+len] == 'c' )
	{
	    bool rightjust = ( f.find('-') < 0 );
	    // Yes, %-5s really means left adjust in sprintf
//if ( rightjust ) debug("rightjust");

	    if ( wpos < 0 ) {
		QRegExp num(QString::fromLatin1("[0-9]+"));
		int nlen;
		int p = num.match(f,0,&nlen);
		if ( p >= 0 ) {
		    width = f.mid(p,nlen).toInt();
		    /* not used
		    p = num.match(f,p+1,&nlen);
		    if ( p >= 0 ) {
			decimals = f.mid(p,nlen).toInt();
		    }
		    */
		}
	    }

	    if ( format[pos+len] == 's' ) {
		QString s = QString::fromUtf8(va_arg(ap, char*));
		replacement = s;
	    } else {
		int ch = va_arg(ap, int);
		replacement = QChar((ushort)ch);
	    }
	    if ( replacement.length() < width ) {
		replacement = rightjust
		    ? replacement.rightJustify(width)
		    : replacement.leftJustify(width);
	    }
//debug("rep=%s",replacement.latin1());
	} else if ( format[pos+len] == '%' ) {
	    replacement = '%';
	} else if ( format[pos+len] == 'n' ) {
	    int* n = va_arg(ap, int*);
	    *n = result.length();
	} else {
	    char in[64], out[128];
	    strncpy(in,f.latin1(),63);
	    char fch = format[pos+len].latin1();
	    in[f.length()] = fch;
	    switch ( fch ) {
	      case 'd': case 'i': case 'o': case 'u': case 'x': case 'X': {
		int value = va_arg(ap, int);
		switch (params) {
		  case 0: ::sprintf( out, in, value ); break;
		  case 1: ::sprintf( out, in, width, value ); break;
		  case 2: ::sprintf( out, in, width, decimals, value ); break;
		}
	      } break;
	      case 'e': case 'E': case 'f': case 'g': {
		double value = va_arg(ap, double);
		switch (params) {
		  case 0: ::sprintf( out, in, value ); break;
		  case 1: ::sprintf( out, in, width, value ); break;
		  case 2: ::sprintf( out, in, width, decimals, value ); break;
		}
	      } break;
	      case 'p': {
		void* value = va_arg(ap, void*);
		switch (params) {
		  case 0: ::sprintf( out, in, value ); break;
		  case 1: ::sprintf( out, in, width, value ); break;
		  case 2: ::sprintf( out, in, width, decimals, value ); break;
		}
	      } break;
	    }
//debug("  %s -> %s",in,out);
	    replacement = QString::fromLatin1(out);
	}
//debug("%s%c -> %s",f.latin1(),(char)format[pos+len],replacement.latin1());
	result += replacement;
//debug("now %s",result.latin1());
    }
    *this = result;

    va_end( ap );
    return *this;
}

/*!
  Fills the string with \a len characters of value \a c.

  If \a len is negative, the current string length is used.
*/

void QString::fill( QChar c, int len )
{
    if ( len < 0 )
	len = length();
    deref();
    QChar * nd = new QChar[len];
    d = new Data(nd,len,len);
    while (len--) *nd++ = c;
}


/*!
  \fn QString QString::copy() const

  Note: This method is obsolete and should not be used in new code. It
  is provided only as an aid for porting programs from Qt 1.x to Qt
  2.x.

  Returns a deep copy of this string.

  Doing this is redundant in Qt 2.x, since QString is implicitly
  shared, and so will automatically be deeply copied as necessary.
*/

/*!
  Finds the first occurrence of the character \a c, starting at
  position \a index.

  The search is case sensitive if \a cs is TRUE, or case insensitive
  if \a cs is FALSE.

  Returns the position of \a c, or -1 if \a c could not be found.
*/

int QString::find( QChar c, int index, bool cs ) const
{
    if ( (uint)index >= length() )		// index outside string
	return -1;
    register const QChar *uc;
    uc = unicode()+index;
    int n = length()-index;
    if ( cs ) {
	while ( n-- && *uc != c )
	    uc++;
    } else {
	c = c.lower();
	while ( n-- && uc->lower() != c )
	    uc++;
    }
    if ( uint(uc - unicode()) >= length() )
	return -1;
    return (int)(uc - unicode());
}

/*!
  Finds the first occurrence of the string \a str, starting at position
  \a index.

  The search is case sensitive if \a cs is TRUE, or case insensitive if \a
  cs is FALSE.

  Returns the position of \a str, or -1 if \a str could not be found.
*/

int QString::find( const QString& str, int index, bool cs ) const
{
    if ( (uint)index >= length() )		// index outside string
	return -1;
    register const QChar *uc;
    uc = unicode()+index;
    uint n = length()-index+1;
    uint strl = str.length();
    if ( cs ) {
	while ( n-- >= strl && ucstrncmp(uc,str.d->unicode,strl) )
	    uc++;
    } else {
	while ( n-- >= strl && ucstrnicmp(uc,str.d->unicode,strl) )
	    uc++;
    }
    return uc - unicode() <= int(length()-strl) ? int(uc - unicode()) : -1;
}

/*!
  \fn int QString::findRev( const char* str, int index ) const

  Equivalent to findRev(QString(str), index).
*/

/*!
  \fn int QString::find( const char* str, int index ) const

  Equivalent to find(QString(str), index).
*/

/*!
  Finds the first occurrence of the character \a c, starting at
  position \a index and searching backwards. If \a index is negative,
  the search starts at the end.

  The search is case sensitive if \a cs is TRUE, or case insensitive if \a
  cs is FALSE.

  Returns the position of \a c, or -1 if \a c could not be found.
*/

int QString::findRev( QChar c, int index, bool cs ) const
{
    QString t( c );
    return findRev( t, index, cs );
}

/*!
  Finds the first occurrence of the string \a str, starting at
  position \a index and searching backwards. If \a index is negative,
  the search starts at the end.

  The search is case sensitive if \a cs is TRUE, or case insensitive if \e
  cs is FALSE.

  Returns the position of \a str, or -1 if \a str could not be found.
*/

int QString::findRev( const QString& str, int index, bool cs ) const
{
    uint slen = str.length();
    if ( !slen )
	return index;
    if ( index < 0 )				// neg index ==> start from end
	index = length()-slen;
    else if ( (uint)index > length() )		// bad index
	return -1;
    else if ( (uint)index == length() )		// bad index, but accept it
	index--;
    else if ( (uint)(index + slen) > length() ) // str would be too long
	index = length() - slen;
    if ( index < 0 )
	return -1;

    register const QChar *uc = unicode() + index;
    if ( cs ) {					// case sensitive
	for ( int i=index; i>=0; i-- )
	    if ( ucstrncmp(uc--,str.unicode(),slen)==0 )
		return i;
    } else {					// case insensitive
	for ( int i=index; i>=0; i-- )
	    if ( ucstrnicmp(uc--,str.unicode(),slen)==0 )
		return i;
    }
    return -1;
}


/*!
  Returns the number of times the character \a c occurs in the string.

  The match is case sensitive if \a cs is TRUE, or case insensitive if \a cs
  if FALSE.
*/

int QString::contains( QChar c, bool cs ) const
{
    int count = 0;
    const QChar *uc = unicode();
    if ( !uc )
	return 0;
    int n = length();
    if ( cs ) {					// case sensitive
	while ( n-- )
	    if ( *uc++ == c )
		count++;
    } else {					// case insensitive
	c = c.lower();
	while ( n-- ) {
	    if ( uc->lower() == c )
		count++;
	    uc++;
	}
    }
    return count;
}

/*!
  \overload
*/
int QString::contains( const char* str, bool cs ) const
{
    return contains(QString(str),cs);
}

/*!
  \fn int QString::contains (char c, bool cs=TRUE) const
  \overload
*/

/*!
  \fn int QString::find (char c, int index=0, bool cs=TRUE) const
  \overload
*/

/*!
  \fn int QString::findRev (char c, int index=-1, bool cs=TRUE) const
  \overload
*/

/*!
  Returns the number of times \a str occurs in the string.

  The match is case sensitive if \a cs is TRUE, or case insensitive if \e
  cs if FALSE.

  This function counts overlapping substrings, for example, "banana"
  contains two occurrences of "ana".

  \sa findRev()
*/

int QString::contains( const QString &str, bool cs ) const
{
    int count = 0;
    const QChar *uc = unicode();
    if ( !uc )
	return 0;
    int len = str.length();
    int n = length();
    while ( n-- ) {				// counts overlapping strings
	// ### Doesn't account for length of this - searches over "end"
	if ( cs ) {
	    if ( ucstrncmp( uc, str.unicode(), len ) == 0 )
		count++;
	} else {
	    if ( ucstrnicmp(uc, str.unicode(), len) == 0 )
		count++;
	}
	uc++;
    }
    return count;
}

/*!
  Returns a substring that contains the \a len leftmost characters
  of the string.

  The whole string is returned if \a len exceeds the length of the
  string.


  Example:
  \code
    QString s = "Pineapple";
    QString t = s.left( 4 );			// t == "Pine"
  \endcode

  \sa right(), mid(), isEmpty()
*/

QString QString::left( uint len ) const
{
    if ( isEmpty() ) {
	return QString();
    } else if ( len == 0 ) {			// ## just for 1.x compat:
	return QString::fromLatin1("");
    } else if ( len > length() ) {
	return *this;
    } else {
	QString s( len, TRUE );
	memcpy( s.d->unicode, d->unicode, len*sizeof(QChar) );
	s.d->len = len;
	return s;
    }
}

/*!
  Returns a substring that contains the \a len rightmost characters
  of the string.

  The whole string is returned if \a len exceeds the length of the
  string.

  Example:
  \code
    QString s = "Pineapple";
    QString t = s.right( 5 );			// t == "apple"
  \endcode

  \sa left(), mid(), isEmpty()
*/

QString QString::right( uint len ) const
{
    if ( isEmpty() || len == 0 ) {
	return QString();
    } else {
	uint l = length();
	if ( len > l )
	    len = l;
	QString s( len, TRUE );
	memcpy( s.d->unicode, d->unicode+(l-len), len*sizeof(QChar) );
	s.d->len = len;
	return s;
    }
}

/*!
  Returns a substring that contains the \a len characters of this
  string, starting at position \a index.

  Returns a null string if the string is empty or \a index is out
  of range.  Returns the whole string from \a index if \a index+len exceeds
  the length of the string.

  Example:
  \code
    QString s = "Two pineapples";
    QString t = s.mid( 4, 4 );			// t == "pine"
  \endcode

  \sa left(), right()
*/

QString QString::mid( uint index, uint len ) const
{
    uint slen = length();
    if ( isEmpty() || index >= slen || len == 0 ) {
	return QString();
    } else {
	if ( len > slen-index )
	    len = slen - index;
	if ( index == 0 && len == length() )
	    return *this;
	register const QChar *p = unicode()+index;
	QString s( len, TRUE );
	memcpy( s.d->unicode, p, len*sizeof(QChar) );
	s.d->len = len;
	return s;
    }
}

/*!
  Returns a string of length \a width that contains this
  string and padded by the \a fill character.

  If the length of the string exceeds \a width and \a truncate is FALSE,
  then the returned string is a copy of the string.
  If the length of the string exceeds \a width and \a truncate is TRUE,
  then the returned string is a left(\a width).

  Example:
  \code
    QString s("apple");
    QString t = s.leftJustify(8, '.');		// t == "apple..."
  \endcode

  \sa rightJustify()
*/

QString QString::leftJustify( uint width, QChar fill, bool truncate ) const
{
    QString result;
    int len = length();
    int padlen = width - len;
    if ( padlen > 0 ) {
	result.setLength(len+padlen);
	if ( len )
	    memcpy( result.d->unicode, unicode(), sizeof(QChar)*len );
	QChar* uc = result.d->unicode + len;
	while (padlen--)
	    *uc++ = fill;
    } else {
	if ( truncate )
	    result = left( width );
	else
	    result = *this;
    }
    return result;
}

/*!
  Returns a string of length \a width that contains pad
  characters followed by the string.

  If the length of the string exceeds \a width and \a truncate is FALSE,
  then the returned string is a copy of the string.
  If the length of the string exceeds \a width and \a truncate is TRUE,
  then the returned string is a right(\a width).

  Example:
  \code
    QString s("pie");
    QString t = s.rightJustify(8, '.');		// t == ".....pie"
  \endcode

  \sa leftJustify()
*/

QString QString::rightJustify( uint width, QChar fill, bool truncate ) const
{
    QString result;
    int len = length();
    int padlen = width - len;
    if ( padlen > 0 ) {
	result.setLength( len+padlen );
	QChar* uc = result.d->unicode;
	while (padlen--)
	    *uc++ = fill;
	if ( len )
	    memcpy( uc, unicode(), sizeof(QChar)*len );
    } else {
	if ( truncate )
	    result = left( width );
	else
	    result = *this;
    }
    return result;
}

/*!
  Returns a new string that is the string converted to lower case.

  Example:
  \code
    QString s("TeX");
    QString t = s.lower();			// t == "tex"
  \endcode

  \sa upper()
*/

QString QString::lower() const
{
    QString s(*this);
    int l=length();
    s.real_detach(); // could do this only when we find a change
    register QChar *p=s.d->unicode;
    if ( p ) {
	while ( l-- ) {
	    *p = p->lower();
	    p++;
	}
    }
    return s;
}

/*!
  Returns a new string that is the string converted to upper case.

  Example:
  \code
    QString s("TeX");
    QString t = s.upper();			// t == "TEX"
  \endcode

  \sa lower()
*/

QString QString::upper() const
{
    QString s(*this);
    int l=length();
    s.real_detach(); // could do this only when we find a change
    register QChar *p=s.d->unicode;
    if ( p ) {
	while ( l-- ) {
	    *p = p->upper();
	    p++;
	}
    }
    return s;
}


/*!
  Returns a new string that has white space removed from the start and the end.

  White space means any character for which QChar::isSpace() returns
  TRUE. This includes ASCII characters 9 (TAB), 10 (LF), 11 (VT), 12
  (FF), 13 (CR), and 32 (Space).

  Example:
  \code
    QString s = " space ";
    QString t = s.stripWhiteSpace();		// t == "space"
  \endcode

  \sa simplifyWhiteSpace()
*/

QString QString::stripWhiteSpace() const
{
    if ( isEmpty() )				// nothing to do
	return *this;
    if ( !at(0).isSpace() && !at(length()-1).isSpace() )
	return *this;

    register const QChar *s = unicode();
    QString result;

    int start = 0;
    int end = length() - 1;
    while ( start<=end && s[start].isSpace() )	// skip white space from start
	start++;
    if ( start > end ) {			// only white space
	return result;
    }
    while ( end && s[end].isSpace() )		// skip white space from end
	end--;
    int l = end - start + 1;
    result.setLength( l );
    if ( l )
	memcpy( result.d->unicode, &s[start], sizeof(QChar)*l );
    return result;
}


/*!
  Returns a new string that has white space removed from the start and the end,
  plus any sequence of internal white space replaced with a single space
  (ASCII 32).

  White space means any character for which QChar::isSpace() returns
  TRUE. This includes ASCII characters 9 (TAB), 10 (LF), 11 (VT), 12
  (FF), 13 (CR), and 32 (Space).

  \code
    QString s = "  lots\t of\nwhite    space ";
    QString t = s.simplifyWhiteSpace();		// t == "lots of white space"
  \endcode

  \sa stripWhiteSpace()
*/

QString QString::simplifyWhiteSpace() const
{
    if ( isEmpty() )				// nothing to do
	return *this;
    QString result;
    result.setLength( length() );
    const QChar *from = unicode();
    const QChar *fromend = from+length();
    int outc=0;
    QChar *to	= result.d->unicode;
    while ( TRUE ) {
	while ( from!=fromend && from->isSpace() )
	    from++;
	while ( from!=fromend && !from->isSpace() )
	    to[outc++] = *from++;
	if ( from!=fromend )
	    to[outc++] = ' ';
	else
	    break;
    }
    if ( outc > 0 && to[outc-1] == ' ' )
	outc--;
    result.truncate( outc );
    return result;
}


/*!
  Insert \a s into the string before position \a index.

  If \a index is beyond the end of the string, the string is extended with
  spaces (ASCII 32) to length \a index and \a s is then appended.

  \code
    QString s = "I like fish";
    s.insert( 2, "don't ");			// s == "I don't like fish"
    s = "x";
    s.insert( 3, "yz" );			// s == "x  yz"
  \endcode
*/

QString &QString::insert( uint index, const QString &s )
{
    // the sub function takes care of &s == this case.
    return insert( index, s.unicode(), s.length() );
}

/*!
  Insert \a len units of QChar data from \a s into the string before
  position \a index.
*/

QString &QString::insert( uint index, const QChar* s, uint len )
{
    if ( len == 0 )
	return *this;
    uint olen = length();
    int nlen = olen + len;

    int df = d->unicode - s;
    if ( df >= 0 && (uint)df < d->maxl ) {
	// Part of me - take a copy.
	QChar *tmp = new QChar[len];
	memcpy(tmp,s,len*sizeof(QChar));
	insert(index,tmp,len);
	delete[] tmp;
	return *this;
    }

    if ( index >= olen ) {			// insert after end of string
	setLength( nlen+index-olen );
	int n = index-olen;
	QChar* uc = d->unicode+olen;
	while (n--)
	    *uc++ = ' ';
	memcpy( d->unicode+index, s, sizeof(QChar)*len );
    } else {					// normal insert
	setLength( nlen );
	memmove( d->unicode+index+len, unicode()+index,
		 sizeof(QChar)*(olen-index) );
	memcpy( d->unicode+index, s, sizeof(QChar)*len );
    }
    return *this;
}

/*!
  Insert \a c into the string at (before) position \a index and returns
  a reference to the string.

  If \a index is beyond the end of the string, the string is extended with
  spaces (ASCII 32) to length \a index and \a c is then appended.

  Example:
  \code
    QString s = "Ys";
    s.insert( 1, 'e' );				// s == "Yes"
    s.insert( 3, '!');				// s == "Yes!"
  \endcode

  \sa remove(), replace()
*/

QString &QString::insert( uint index, QChar c )	// insert char
{
    QString s( c );
    return insert( index, s );
}

/*!
  \fn QString& QString::insert( uint index, char c )
  \overload
*/

/*!
  \fn QString &QString::prepend( const QString &s )

  Prepend \s to the string. Equivalent to insert(0,s).

  \sa insert()
*/

/*!
  \fn QString& QString::prepend( char ch )
  Prepends \a ch to the string and returns a reference to the result.

  \sa insert()
 */


/*!
  Removes \a len characters starting at position \a index from the
  string and returns a reference to the string.

  If \a index is too big, nothing happens.  If \a index is valid, but
  \a len is too large, the rest of the string is removed.

  \code
    QString s = "Montreal";
    s.remove( 1, 4 );
    // s == "Meal"
  \endcode

  \sa insert(), replace()
*/

QString &QString::remove( uint index, uint len )
{
    uint olen = length();
    if ( index + len >= olen ) {		// range problems
	if ( index < olen ) {			// index ok
	    setLength( index );
	}
    } else if ( len != 0 ) {
	real_detach();
	memmove( d->unicode+index, d->unicode+index+len,
		 sizeof(QChar)*(olen-index-len) );
	setLength( olen-len );
    }
    return *this;
}

/*!
  Replaces \a len characters starting at position \a index from the
  string with \a s, and returns a reference to the string.

  If \a index is too big, nothing is deleted and \a s is inserted at the
  end of the string.  If \a index is valid, but \a len is too large, \e
  str replaces the rest of the string.

  \code
    QString s = "Say yes!";
    s.replace( 4, 3, "NO" );			// s == "Say NO!"
  \endcode

  \sa insert(), remove()
*/

QString &QString::replace( uint index, uint len, const QString &s )
{
    return replace( index, len, s.unicode(), s.length() );
}


/*!
  Replaces \a len characters starting at position \a index by
  \a slen units ot QChar data from \a s, and returns a reference to the string.

  \sa insert(), remove()
*/

QString &QString::replace( uint index, uint len, const QChar* s, uint slen )
{
    if ( len == slen && index + len <= length() ) {
	// Optimized common case: replace without size change
	real_detach();
	memcpy( d->unicode+index, s, len*sizeof(QChar) );
    } else {
	int df = d->unicode - s;
	if ( df >= 0 && (uint)df < d->maxl ) {
	    // Part of me - take a copy.
	    QChar *tmp = new QChar[slen];
	    memcpy(tmp,s,slen*sizeof(QChar));
	    replace(index,len,tmp,slen);
	    delete[] tmp;
	    return *this;
	}

	remove( index, len );
	insert( index, s, slen );
    }
    return *this;
}



/*!
  Finds the first occurrence of the regular expression \a rx, starting at
  position \a index.

  Returns the position of the next match, or -1 if \a rx was not found.
*/

int QString::find( const QRegExp &rx, int index ) const
{
    if ( (uint)index >= length() )
	return -1;
    else
	return rx.match( *this, index );
}

/*!
  Finds the first occurrence of the regular expression \a rx, starting at
  position \a index and searching backwards. If \a index is negative,
  the search starts at the end of this string.

  Returns the position of the next match (backwards), or -1 if \a rx was not
  found.
*/

int QString::findRev( const QRegExp &rx, int index ) const
{
    if ( index < 0 )				// neg index ==> start from end
	index = length() - 1;
    else if ( (uint)index >= length() )		// bad index
	return -1;
    while( index >= 0 ) {
	if ( rx.match( *this, index ) == index )
	    return index;
	index--;
    }
    return -1;
}

/*!
  Counts the number of overlapping occurrences of \a rx in the string.

  Example:
  \code
    QString s = "banana and panama";
    QRegExp r = QRegExp("a[nm]a", TRUE, FALSE);
    s.contains( r );				// 4 matches
  \endcode

  \sa find(), findRev()
*/

int QString::contains( const QRegExp &rx ) const
{
    if ( isEmpty() )
	return 0;
    int count = 0;
    int index = -1;
    int len = length();
    while ( index < len-1 ) {			// count overlapping matches
	index = rx.match( *this, index+1 );
	if ( index < 0 )
	    break;
	count++;
    }
    return count;
}


/*!
  Replaces every occurrence of \a rx in the string with \a str.
  Returns a reference to the string.

  Examples:
  \code
    QString s = "banana";
    s.replace( QRegExp("a.*a"), "" );		// becomes "b"

    QString s = "banana";
    s.replace( QRegExp("^[bn]a"), " " );	// becomes " nana"

    QString s = "banana";
    s.replace( QRegExp("^[bn]a"), "" );		// NOTE! becomes ""
  \endcode

*/

QString &QString::replace( const QRegExp &rx, const QString &str )
{
    if ( isEmpty() )
	return *this;
    int index = 0;
    int slen  = str.length();
    int len;
    while ( index < (int)length()-1 ) {
	index = rx.match( *this, index, &len, FALSE );
	if ( index >= 0 ) {
	    replace( index, len, str );
	    index += slen;
	    if ( !len )
		break;	// Avoid infinite loop on 0-length matches, e.g. [a-z]*
	}
	else
	    break;
    }
    return *this;
}

static bool
ok_in_base( QChar c, int base )
{
    if ( base <= 10 )
	return c.isDigit() && c.digitValue() < base;
    else
	return c.isDigit() || (c >= 'a' && c < char('a'+base-10))
	                   || (c >= 'A' && c < char('A'+base-10));
}

/*!
  Returns the string converted to a <code>long</code> value.

  If \a ok is non-null, \a *ok is set to TRUE if there are no
  conceivable errors, and FALSE if the string is not a number at all, or if
  it has trailing garbage.
*/

long QString::toLong( bool *ok, int base ) const
{
    const QChar *p = unicode();
    long val=0;
    int l = length();
    const long max_mult = INT_MAX / base;
    bool is_ok = FALSE;
    int neg = 0;
    if ( !p )
	goto bye;
    while ( l && p->isSpace() )			// skip leading space
	l--,p++;
    if ( l && *p == '-' ) {
	l--;
	p++;
	neg = 1;
    } else if ( *p == '+' ) {
	l--;
	p++;
    }

    // NOTE: toULong() code is similar
    if ( !l || !ok_in_base(*p,base) )
	goto bye;
    while ( l && ok_in_base(*p,base) ) {
	l--;
	int dv;
	if ( p->isDigit() ) {
	    dv = p->digitValue();
	} else {
	    if ( *p >= 'a' && *p <= 'z' )
		dv = *p - 'a' + 10;
	    else
		dv = *p - 'A' + 10;
	}
	if ( val > max_mult || (val == max_mult && dv > (INT_MAX%base)+neg) )
	    goto bye;
	val = base*val + dv;
	p++;
    }
    if ( neg )
	val = -val;
    while ( l && p->isSpace() )			// skip trailing space
	l--,p++;
    if ( !l )
	is_ok = TRUE;
bye:
    if ( ok )
	*ok = is_ok;
    return is_ok ? val : 0;
}

/*!
  Returns the string converted to an <code>unsigned long</code>
  value.

  If \a ok is non-null, \a *ok is set to TRUE if there are no
  conceivable errors, and FALSE if the string is not a number at all,
  or if it has trailing garbage.
*/

ulong QString::toULong( bool *ok, int base ) const
{
    const QChar *p = unicode();
    ulong val=0;
    int l = length();
    const ulong max_mult = 429496729;
    bool is_ok = FALSE;
    if ( !p )
	goto bye;
    while ( l && p->isSpace() )			// skip leading space
	l--,p++;
    if ( *p == '+' )
	l--,p++;

    // NOTE: toLong() code is similar
    if ( !l || !ok_in_base(*p,base) )
	goto bye;
    while ( l && ok_in_base(*p,base) ) {
	l--;
	uint dv;
	if ( p->isDigit() ) {
	    dv = p->digitValue();
	} else {
	    if ( *p >= 'a' && *p <= 'z' )
		dv = *p - 'a' + 10;
	    else
		dv = *p - 'A' + 10;
	}
	if ( val > max_mult || (val == max_mult && dv > (UINT_MAX%base)) )
	    goto bye;
	val = base*val + dv;
	p++;
    }

    while ( l && p->isSpace() )			// skip trailing space
	l--,p++;
    if ( !l )
	is_ok = TRUE;
bye:
    if ( ok )
	*ok = is_ok;
    return is_ok ? val : 0;
}

/*!
  Returns the string converted to a <code>short</code> value.

  If \a ok is non-null, \a *ok is set to TRUE if there are no
  conceivable errors, and FALSE if the string is not a number at all, or if
  it has trailing garbage.
*/

short QString::toShort( bool *ok, int base ) const
{
    long v = toLong( ok, base );
    if ( ok && *ok && (v < -32768 || v > 32767) ) {
	*ok = FALSE;
	v = 0;
    }
    return (short)v;
}

/*!
  Returns the string converted to an <code>unsigned short</code> value.

  If \a ok is non-null, \a *ok is set to TRUE if there are no
  conceivable errors, and FALSE if the string is not a number at all, or if
  it has trailing garbage.
*/

ushort QString::toUShort( bool *ok, int base ) const
{
    ulong v = toULong( ok, base );
    if ( ok && *ok && (v > 65535) ) {
	*ok = FALSE;
	v = 0;
    }
    return (ushort)v;
}


/*!
  Returns the string converted to a <code>int</code> value.

  If \a ok is non-null, \a *ok is set to TRUE if there are no
  conceivable errors, and FALSE if the string is not a number at all,
  or if it has trailing garbage.
*/

int QString::toInt( bool *ok, int base ) const
{
    return (int)toLong( ok, base );
}

/*!
  Returns the string converted to an <code>unsigned int</code> value.

  If \a ok is non-null, \a *ok is set to TRUE if there are no
  conceivable errors, and FALSE if the string is not a number at all,
  or if it has trailing garbage.
*/

uint QString::toUInt( bool *ok, int base ) const
{
    return (uint)toULong( ok, base );
}

/*!
  Returns the string converted to a <code>double</code> value.

  If \a ok is non-null, \a *ok is set to TRUE if there are no conceivable
  errors, and FALSE if the string is not a number at all, or if it has
  trailing garbage.
*/

double QString::toDouble( bool *ok ) const
{
    char *end;
    const char *a = latin1();
    double val = strtod( a ? a : "", &end );
    if ( ok )
	*ok = ( a && *a && ( end == 0 || *end == '\0' ) );
    return val;
}

/*!
  Returns the string converted to a <code>float</code> value.

  If \a ok is non-null, \a *ok is set to TRUE if there are no
  conceivable errors, and FALSE if the string is not a number at all,
  or if it has trailing garbage.
*/

float QString::toFloat( bool *ok ) const
{
    return (float)toDouble( ok );
}


/*!
  Sets the string to the printed value of \a n and returns a
  reference to the string.

  The value is converted to \a base notation (default is decimal).
  The base must be a value from 2 to 36.
*/

QString &QString::setNum( long n, int base )
{
#if defined(CHECK_RANGE)
    if ( base < 2 || base > 36 ) {
	warning( "QString::setNum: Invalid base %d", base );
	base = 10;
    }
#endif
    char buf[65];
    register char *p = &buf[64];
    bool neg;
    if ( n < 0 ) {
	neg = TRUE;
	n = -n;
    } else {
	neg = FALSE;
    }
    *p = '\0';
    do {
	*--p = "0123456789abcdefghijklmnopqrstuvwxyz"[((int)(n%base))];
	n /= base;
    } while ( n );
    if ( neg )
	*--p = '-';
    return *this = QString::fromLatin1(p);
}

/*!
  Sets the string to the printed unsigned value of \a n and
  returns a reference to the string.

  The value is converted to \a base notation (default is decimal).
  The base must be a value from 2 to 36.
*/

QString &QString::setNum( ulong n, int base )
{
#if defined(CHECK_RANGE)
    if ( base < 2 || base > 36 ) {
	warning( "QString::setNum: Invalid base %d", base );
	base = 10;
    }
#endif
    char buf[65];
    register char *p = &buf[64];
    *p = '\0';
    do {
	*--p = "0123456789abcdefghijklmnopqrstuvwxyz"[((int)(n%base))];
	n /= base;
    } while ( n );
    return *this = QString::fromLatin1(p);
}

/*!
  \fn QString &QString::setNum( int n, int base=10 )
  Sets the string to the printed value of \a n and returns a reference
  to the string.
*/

/*!
  \fn QString &QString::setNum( uint n, int base=10 )
  Sets the string to the printed unsigned value of \a n and returns a
  reference to the string.
*/

/*!
  \fn QString &QString::setNum( short n, int base=10 )
  Sets the string to the printed value of \a n and returns a reference
  to the string.
*/

/*!
  \fn QString &QString::setNum( ushort n, int base=10 )
  Sets the string to the printed unsigned value of \a n and returns a
  reference to the string.
*/

/*!
  Sets the string to the printed value of \a n.

  \arg \a f is the format specifier: 'f', 'F', 'e', 'E', 'g', 'G' (same
  as sprintf()).
  \arg \a prec is the precision.

  Returns a reference to the string.
*/

QString &QString::setNum( double n, char f, int prec )
{
#if defined(CHECK_RANGE)
    if ( !(f=='f' || f=='F' || f=='e' || f=='E' || f=='g' || f=='G') ) {
	warning( "QString::setNum: Invalid format char '%c'", f );
	f = 'f';
    }
#endif
    char format[20];
    register char *fs = format;			// generate format string
    *fs++ = '%';				//   "%.<prec>l<f>"
    if ( prec > 99 )
	prec = 99;
    *fs++ = '.';
    if ( prec >= 10 ) {
	*fs++ = prec / 10 + '0';
	*fs++ = prec % 10 + '0';
    } else {
	*fs++ = prec + '0';
    }
    *fs++ = 'l';
    *fs++ = f;
    *fs = '\0';
    return sprintf( format, n );
}

/*!
  \fn QString &QString::setNum( float n, char f, int prec )
  Sets the string to the printed value of \a n.

  \arg \a f is the format specifier: 'f', 'F', 'e', 'E', 'g', 'G' (same
  as sprintf()).
  \arg \a prec is the precision.

  Returns a reference to the string.
*/


/*!
  Note: This method is obsolete and should not be used in new code. It
  is provided only as an aid for porting programs from Qt 1.x to Qt
  2.x.

  Sets the character at position \a index to \a c and expands the
  string if necessary, filling with spaces.

  This method is redundant in Qt 2.x, because operator[] will
  expand the string as necessary, if you are assigning a value.
*/

void QString::setExpand( uint index, QChar c )
{
    int spaces = index - d->len;
    at(index) = c;
    while (spaces-->0)
	d->unicode[--index]=' ';
}


/*!
  \fn const char* QString::data() const

  Note: This method is obsolete and should not be used in new code. It
  is provided only as an aid for porting programs from Qt 1.x to Qt
  2.x.

  Returns a pointer to a 0-terminated classic C string.

  In Qt 1.x, this returned a char* allowing direct manipulation of the
  string as a sequence of bytes.  In Qt 2.x where QString is a Unicode
  string, char* conversion constructs a temporary string, and hence
  direct character operations are meaningless.
*/

/*!
  \fn bool QString::operator!() const
  Returns TRUE if it is a null string, otherwise FALSE.  Thus
  you can write:

\code
  QString name = getName();
  if ( !name )
    name = "Rodney";
\endcode

  Note that if you say:

\code
  QString name = getName();
  if ( name )
    doSomethingWith(name);
\endcode

  Then this will call <tt>operator const char*()</tt>, which will do what
  you want, but rather inefficiently - you may wish to define the macro
  QT_NO_ASCII_CAST when writing code which you wish to strictly remain
  Unicode-clean.

  When you want the above semantics, use <tt>!isNull()</tt>
  or even <tt>!!</tt>:

\code
  QString name = getName();
  if ( !!name )
    doSomethingWith(name);
\endcode
*/


/*!
  \fn QString& QString::append( const QString& str )
  Appends \a str to the string and returns a reference to the result.
  Equivalent to operator+=().
 */

/*!
  \fn QString& QString::append( char ch )
  Appends \a ch to the string and returns a reference to the result.
  Equivalent to operator+=().
 */

/*!
  Appends \a str to the string and returns a reference to the string.
*/
QString& QString::operator+=( const QString &str )
{
    uint len1 = length();
    uint len2 = str.length();
    if ( len2 ) {
	setLength(len1+len2);
	memcpy( d->unicode+len1, str.unicode(), sizeof(QChar)*len2 );
    }
    return *this;
}

/*!
  Appends \a c to the string and returns a reference to the string.
*/

QString &QString::operator+=( QChar c )
{
    setLength(length()+1);
    d->unicode[length()-1] = c;
    return *this;
}

/*!
  Appends \a c to the string and returns a reference to the string.
*/

QString &QString::operator+=( char c )
{
    setLength(length()+1);
    d->unicode[length()-1] = c;
    return *this;
}

/*!
  Returns a Latin-1 representation of the string. Note that the returned
  value is undefined if the string contains non-Latin-1 characters.  If you
  want to convert strings into formats other than Unicode, see the
  QTextCodec classes.

  This function is mainly useful for boot-strapping legacy code to
  use Unicode.

  The result remains valid so long as one unmodified
  copy of the string exists.

  \sa utf8(), local8Bit()
*/
const char* QString::latin1() const
{
    if ( d->ascii ) {
	if ( d->dirtyascii )
	    delete [] d->ascii;
	else
	    return d->ascii;
    }
    Q2HELPER(stat_get_ascii++);
    Q2HELPER(stat_get_ascii_size+=d->len);
    d->ascii = unicodeToAscii( d->unicode, d->len );
    d->dirtyascii = 0;
    return d->ascii;
}

const char* QString::ascii() const
{
    return latin1();
}

/*!
  Returns the string encoded in UTF8 format.

  See QTextCodec for more diverse coding/decoding of Unicode strings.

  \sa QString::fromUtf8(), local8Bit()
*/
QCString QString::utf8() const
{
    static QTextCodec* codec = QTextCodec::codecForMib(106);
    return codec
	    ? codec->fromUnicode(*this)
	    : QCString(latin1());
}

/*!
  Returns the unicode string decoded from the
  first \a len bytes of \a utf8.  If \a len is -1 (the default), the
  length of \a utf8 is used.  If trailing partial characters are in
  \a utf8, they are ignored.

  See QTextCodec for more diverse coding/decoding of Unicode strings.
*/
QString QString::fromUtf8(const char* utf8, int len)
{
    static QTextCodec* codec = QTextCodec::codecForMib(106);
    if ( len < 0 ) len = strlen(utf8);
    return codec
	    ? codec->toUnicode(utf8, len)
	    : QString(utf8,len+1);
}

/*!
  Creates a QString from Latin1 text.  This is the same as the
  QString(const char*) constructor, but you can make that constructor
  invisible if you compile with the define QT_NO_CAST_ASCII, in which
  case you can explicitly create a QString from Latin-1 text using
  this function.
*/
QString QString::fromLatin1(const char* chars, int len)
{
    if ( len < 0 ) {
	uint l;
	QChar *uc = asciiToUnicode(chars,&l);
	return QString(new Data(uc,l,l), TRUE);
    } else {
	return QString( chars, len+1 );
    }
}

/*!
  \fn const QChar* QString::unicode() const

  Returns the Unicode representation of the string.  The result
  remains valid until the string is modified.
*/

/*!
  Returns the string encoded in a locale-specific format.

  See QTextCodec for more diverse coding/decoding of Unicode strings.

  \sa QString::fromLocal8Bit(), local8Bit(), utf8()
*/
QCString QString::local8Bit() const
{
    static QTextCodec* codec = QTextCodec::codecForLocale();
    return codec
	    ? codec->fromUnicode(*this)
	    : QCString(latin1());
}

/*!
  Returns the unicode string decoded from the
  first \a len bytes of \a local8Bit.  If \a len is -1 (the default), the
  length of \a local8Bit is used.  If trailing partial characters are in
  \a local8Bit, they are ignored.

  \a local8Bit is assumed to be encoded in a locale-specific format.

  See QTextCodec for more diverse coding/decoding of Unicode strings.
*/
QString QString::fromLocal8Bit(const char* local8Bit, int len)
{
    static QTextCodec* codec = QTextCodec::codecForLocale();
    if ( len < 0 ) len = strlen(local8Bit);
    return codec
	    ? codec->toUnicode(local8Bit, len)
	    : QString(local8Bit,len+1);
}

/*!
  \fn const QChar* QString::unicode() const

  Returns the Unicode representation of the string.  The result
  remains valid until the string is modified.
*/

/*!
  \fn QString::operator const char *() const

  Returns latin1().  Be sure to see the warnings documented there.
  Note that for new code which you wish to be strictly Unicode-clean,
  you can define the macro QT_NO_ASCII_CAST when compiling your code
  to hide this function so that automatic casts are not done.  This
  has the added advantage that you catch the programming error
  described under operator!().
*/

/*!
  \fn QChar QString::at( uint ) const

  Returns the character at \a i, or 0 if \a i is beyond the length
  of the string.

  Note: If this QString is not const or const&, the non-const at()
  will be used instead, which will expand the string if \a i is beyond
  the length of the string.
*/

/*!
  \fn QChar QString::operator[](int) const

  Returns the character at \a i, or QChar::null if \a i is beyond the
  length of the string.

  Note: If this QString is not const or const&, the non-const operator[]
  will be used instead, which will expand the string if \a i is beyond
  the length of the string.
*/

/*!
  \fn QCharRef QString::operator[](int)

  Returns an object that references the character at \a i.
  This reference
  can then be assigned to, or otherwise used immediately, but
  becomes invalid once further modifications are made to the string.
  The QCharRef internal class can be used much like a constant QChar, but
  if you assign to it, you change the original string (which enlarges
  and detaches itself). You will get compilation errors if you try to
  use the result as anything but a QChar.
*/

/*!
  \fn QCharRef QString::at( uint i )
  Returns a reference to the character at \a i, expanding
  the string with QChar::null if necessary.  The resulting reference
  can then be assigned to, or otherwise used immediately, but
  becomes invalid once further modifications are made to the string.
*/

/*!
  Internal chunk of code to handle the
  uncommon cases of at() above.
*/
void QString::subat( uint i )
{
    uint olen = d->len;
    if ( i >= olen ) {
	setLength( i+1 );		// i is index; i+1 is needed length
	for ( uint j=olen; j<=i; j++ )
	    d->unicode[j] = QChar::null;
    } else {
	// Just be sure to detach
	real_detach();
    }
}


/*****************************************************************************
  QString stream functions
 *****************************************************************************/

/*!
  \relates QString
  Writes a string to the stream.

  Output format: [length (Q_UINT32) data...]
*/

QDataStream &operator<<( QDataStream &s, const QString &str )
{
    return s.writeBytes( (const char*)str.unicode(),
			 sizeof(QChar)*str.length() );
}

/*!
  \relates QString
  Reads a string from the stream.
*/

QDataStream &operator>>( QDataStream &s, QString &str )
{
    Q_UINT32 bytes;
    s >> bytes;					// read size of string
    str.setLength( bytes/2 );
    if ( bytes > 0 )				// not null array
	s.readRawBytes( (char*)str.d->unicode, bytes );
    return s;
}

/*!
  \fn int QString::compare (const QString & s1, const QString & s2)

  Compare \a s1 to \a s2 returning an integer less than, equal to, or
  greater than zero if s1 is, respectively, lexically less than, equal to,
  or greater than s2.
*/

/*!
  Compares this string to \a s, returning an integer less than, equal to, or
  greater than zero if it is, respectively, lexically less than, equal to,
  or greater than \a s.

*/
int QString::compare( const QString& s ) const
{
    return ucstrcmp(*this,s);
}

bool operator==( const QString &s1, const QString &s2 )
{ return s1.length()==s2.length() && ucstrcmp(s1,s2) == 0; }

bool operator!=( const QString &s1, const QString &s2 )
{ return !(s1==s2); }

bool operator<( const QString &s1, const QString &s2 )
{ return ucstrcmp(s1,s2) < 0; }

bool operator<=( const QString &s1, const QString &s2 )
{ return ucstrcmp(s1,s2) <= 0; }

bool operator>( const QString &s1, const QString &s2 )
{ return ucstrcmp(s1,s2) > 0; }

bool operator>=( const QString &s1, const QString &s2 )
{ return ucstrcmp(s1,s2) >= 0; }


bool operator==( const QString &s1, const char *s2 )
{ return s1==QString(s2); }

bool operator==( const char *s1, const QString &s2 )
{ return QString(s1)==s2; }

bool operator!=( const QString &s1, const char *s2 )
{ return !(s1==s2); }

bool operator!=( const char *s1, const QString &s2 )
{ return !(s1==s2); }

bool operator<( const QString &s1, const char *s2 )
{ return ucstrcmp(s1,s2) < 0; }

bool operator<( const char *s1, const QString &s2 )
{ return ucstrcmp(s1,s2) < 0; }

bool operator<=( const QString &s1, const char *s2 )
{ return ucstrcmp(s1,s2) <= 0; }

bool operator<=( const char *s1, const QString &s2 )
{ return ucstrcmp(s1,s2) <= 0; }

bool operator>( const QString &s1, const char *s2 )
{ return ucstrcmp(s1,s2) > 0; }

bool operator>( const char *s1, const QString &s2 )
{ return ucstrcmp(s1,s2) > 0; }

bool operator>=( const QString &s1, const char *s2 )
{ return ucstrcmp(s1,s2) >= 0; }

bool operator>=( const char *s1, const QString &s2 )
{ return ucstrcmp(s1,s2) >= 0; }


/*****************************************************************************
  Documentation for related functions
 *****************************************************************************/

/*!
  \fn bool operator==( const QString &s1, const QString &s2 )
  \relates QString
  Returns TRUE if the two strings are equal, or FALSE if they are different.

  Equivalent to <code>strcmp(s1,s2) == 0</code>.
*/

/*!
  \fn bool operator==( const QString &s1, const char *s2 )
  \relates QString
  Returns TRUE if the two strings are equal, or FALSE if they are different.

  Equivalent to <code>strcmp(s1,s2) == 0</code>.
*/

/*!
  \fn bool operator==( const char *s1, const QString &s2 )
  \relates QString
  Returns TRUE if the two strings are equal, or FALSE if they are different.

  Equivalent to <code>strcmp(s1,s2) == 0</code>.
*/

/*!
  \fn bool operator!=( const QString &s1, const QString &s2 )
  \relates QString
  Returns TRUE if the two strings are different, or FALSE if they are equal.

  Equivalent to <code>strcmp(s1,s2) != 0</code>.
*/

/*!
  \fn bool operator!=( const QString &s1, const char *s2 )
  \relates QString
  Returns TRUE if the two strings are different, or FALSE if they are equal.

  Equivalent to <code>strcmp(s1,s2) != 0</code>.
*/

/*!
  \fn bool operator!=( const char *s1, const QString &s2 )
  \relates QString
  Returns TRUE if the two strings are different, or FALSE if they are equal.

  Equivalent to <code>strcmp(s1,s2) != 0</code>.
*/

/*!
  \fn bool operator<( const QString &s1, const char *s2 )
  \relates QString
  Returns TRUE if \a s1 is alphabetically less than \a s2, otherwise FALSE.

  Equivalent to <code>strcmp(s1,s2) \< 0</code>.
*/

/*!
  \fn bool operator<( const char *s1, const QString &s2 )
  \relates QString
  Returns TRUE if \a s1 is alphabetically less than \a s2, otherwise FALSE.

  Equivalent to <code>strcmp(s1,s2) \< 0</code>.
*/

/*!
  \fn bool operator<=( const QString &s1, const char *s2 )
  \relates QString
  Returns TRUE if \a s1 is alphabetically less than or equal to \a s2,
  otherwise FALSE.

  Equivalent to <code>strcmp(s1,s2) \<= 0</code>.
*/

/*!
  \fn bool operator<=( const char *s1, const QString &s2 )
  \relates QString
  Returns TRUE if \a s1 is alphabetically less than or equal to \a s2,
  otherwise FALSE.

  Equivalent to <code>strcmp(s1,s2) \<= 0</code>.
*/

/*!
  \fn bool operator>( const QString &s1, const char *s2 )
  \relates QString
  Returns TRUE if \a s1 is alphabetically greater than \a s2, otherwise FALSE.

  Equivalent to <code>strcmp(s1,s2) \> 0</code>.
*/

/*!
  \fn bool operator>( const char *s1, const QString &s2 )
  \relates QString
  Returns TRUE if \a s1 is alphabetically greater than \a s2, otherwise FALSE.

  Equivalent to <code>strcmp(s1,s2) \> 0</code>.
*/

/*!
  \fn bool operator>=( const QString &s1, const char *s2 )
  \relates QString
  Returns TRUE if \a s1 is alphabetically greater than or equal to \a s2,
  otherwise FALSE.

  Equivalent to <code>strcmp(s1,s2) \>= 0</code>.
*/

/*!
  \fn bool operator>=( const char *s1, const QString &s2 )
  \relates QString
  Returns TRUE if \a s1 is alphabetically greater than or equal to \a s2,
  otherwise FALSE.

  Equivalent to <code>strcmp(s1,s2) \>= 0</code>.
*/

/*!
  \fn QString operator+( const QString &s1, const QString &s2 )
  \relates QString
  Returns the concatenated string of s1 and s2.
*/

/*!
  \fn QString operator+( const QString &s1, const char *s2 )
  \relates QString
  Returns the concatenated string of s1 and s2.
*/

/*!
  \fn QString operator+( const char *s1, const QString &s2 )
  \relates QString
  Returns the concatenated string of s1 and s2.
*/

/*!
  \fn QString operator+( const QString &s, char c )
  \relates QString
  Returns the concatenated string of s and c.
*/

/*!
  \fn QString operator+( char c, const QString &s )
  \relates QString
  Returns the concatenated string of c and s.
*/



/*****************************************************************************
  QConstString member functions
 *****************************************************************************/

/*!
  \class QConstString qstring.h
  \brief A QString which uses constant Unicode data.

  In order to minimize copying, highly optimized applications
  can use QConstString to provide a QString-compatible object
  from existing Unicode data.  The Unicode data must exist
  for the entire lifetime of the QConstString object.
*/

/*!
  Creates a QConstString that uses the first \a length Unicode
  characters in the array \a unicode.  Any attempt to modify
  copies of the string will cause it to create a copy of the
  data, thus it remains forever unmodified.
*/
QConstString::QConstString( QChar* unicode, uint length ) :
    QString(new Data(unicode, length, length),TRUE)
{
}

/*!
  Destroys the QConstString, creating a copy of the data if
  other strings are still using it.
*/
QConstString::~QConstString()
{
    if ( d->count > 1 ) {
        QChar* cp = new QChar[d->len];
        memcpy( cp, d->unicode, d->len*sizeof(QChar) );
        d->unicode = cp;
    } else {
        d->unicode = 0;
    }

    // The original d->unicode is now unlinked.
}

/*!
  \fn const QString& QConstString::string() const

  Returns a constant string referencing the data passed during
  construction.
*/


#if defined(_OS_WIN32_)

#include <windows.h>

/*!
  Returns a static Windows TCHAR* from a QString, possibly adding NUL.

  The lifetime of the return value is until the next call to this function.
*/
const void* qt_winTchar(const QString& str_in, bool addnul)
{
    // So that the return value lives long enough.
    static QString str;
    str = str_in;

#ifdef UNICODE
    static uint buflen = 256;
    static TCHAR *buf = new TCHAR[buflen];

    const QChar* uc = str.unicode();

#define EXTEND if (str.length() > buflen) { delete buf; buf = new TCHAR[buflen=str.length()+1]; }

#if defined(_WS_X11_) || defined(_OS_WIN32_BYTESWAP_)
    EXTEND
    for ( int i=str.length(); i--; )
	buf[i] = uc[i].row() << 8 | uc[i].cell();
    if ( addnul )
	buf[str.length()] = 0;
#else
    // Same endianness of TCHAR
    if ( addnul ) {
	EXTEND
	memcpy(buf,uc,sizeof(TCHAR)*str.length());
	buf[str.length()] = 0;
    } else {
	return uc;
    }
#endif
    return buf;
#undef EXTEND

#else
    return str.latin1();
#endif
}

/*!
  Makes a new null terminated Windows TCHAR* from a QString.
*/
void* qt_winTchar_new(const QString& str)
{
    TCHAR* result = new TCHAR[str.length()+1];
    memcpy(result, qt_winTchar(str,FALSE), sizeof(TCHAR)*str.length());
    result[str.length()] = 0;
    return result;
}

/*!
  Makes a QString from a Windows TCHAR*.
*/
QString qt_winQString(void* tc)
{
#ifdef UNICODE

    int len=0;
    while ( ((TCHAR*)tc)[len] )
	len++;
#if defined(_WS_X11_) || defined(_OS_WIN32_BYTESWAP_)
    QString r;
    for ( int i=0; i<len; i++ )
	r += QChar(((TCHAR*)tc)[i]&0xff,((TCHAR*)tc)[i]>>8);
    return r;
#else
    // Same endianness of TCHAR
    return QString((QChar*)tc,len);
#endif
#undef EXTEND
#else
    return (TCHAR*)tc;
#endif
}

#endif // _OS_WIN32_

