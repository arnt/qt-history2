[SONY-KRC CONFIDENTIAL DOCUMENT]
GSOS ( Graphics Synthsizer Operating Subsystem )
                Copyright (C) 1999 by Sony-Kihara Research Center Inc.
                                                   All Rights Reserved
                                                          August, 1999
----------------------------------------------------------------------
目的
----------------------------------------------------------------------

Linux用Xserverを開発するためにはH/W依存のddx部を実装する必要がある。
ddx開発をサポートするための機構として、デバイスドライバを通してH/Wを
直接実行するモードと、GSのS/Wシミュレータを実行するモードをもったGSOS
を開発する。このGSOSインターフェースを使用することにより、H/Wとシミュ
レータの区別を意識することなくddxを開発できる

                 Xserver
          +--------------------+
          |        dix         |
          +--------------------+
          |      hw(=ddx)      |
          +--------------------+

          +--------------------+
          |        gsos        |
          +---------+----------+
          | for hw  |  for sim |
          +---------+----------+

        +---------+  +----------+
        | driver  |  | GS s/w   |
        +---------+  | simulator|
                     +----------+
        +---------+
        | EE-GS hw|
        +---------+

----------------------------------------------------------------------
使用方法
----------------------------------------------------------------------

[1] 初期化処理

        // gsosを初期化する
        gsosOpen() ;

[2] DMAデータの設定、DMA転送

        // Giftag設定
        gsosMakeGiftag( 1, GSOS_GIF_EOP_CONTINUE, GSOS_GIF_PRE_IGNORE,
                0, GSOS_GIF_PACKED, 1, GSOS_GIF_REG_AD ) ;

        // パケットデータ設定
        gsosSetPacketAddrData( GSOS_PRIM, GSOS_PRIM_POINT ) ;

        // Giftag設定
        gsosMakeGiftag( nloop, GSOS_GIF_EOP_TERMINATE, 
                GSOS_GIF_PRE_IGNORE, 0, GSOS_GIF_PACKED, 2,
                (GSOS_XYZ2 << 4) | GSOS_RGBA ) ;

        // パケットデータ設定
        for( lp = 0 ; lp < nloop ; lp++ ){
            gsosSetPacket4( r[lp], g[lp], b[lp], a[lp] ) ;
            gsosSetPacket4( x[lp], y[lp], z[lp], 0 ) ;
        }

        // DMA転送起動
        gsosExec() ;

[3] 終了処理

        // gsosを終了する
        gsosClose() ;

----------------------------------------------------------------------
TYPE
----------------------------------------------------------------------

    GSOSint        int
    GSOSuint       unsigned int
    GSOSshort      short
    GSOSushort     unsigned short
    GSOSchar       char
    GSOSuchar      unsigned char
    GSOSfloat      float
    GSOSdouble     double
    GSOSbit64      unsigned long long

----------------------------------------------------------------------
GSOSpacket                    パケット構造体
----------------------------------------------------------------------

    typedef struct {
        GSOSbit64    u64[2] ;
        GSOSuint     u32[4] ;
    } GSOSpacket ;

----------------------------------------------------------------------
gsosOpen                      GSOS開始
----------------------------------------------------------------------

[書式]
        int gsosOpen()

[戻り値]
        0:    正常終了
        0以外:エラー

[解説]
        GSOS初期化処理

----------------------------------------------------------------------
gsosClose                     GSOS終了
----------------------------------------------------------------------

[書式]
        int gsosClose()

[戻り値]
        0:    正常終了
        0以外:エラー

[解説]
        GSOS終了処理


----------------------------------------------------------------------
gsosMakeGiftag                Giftag設定
----------------------------------------------------------------------

[書式]
        int gsosMakeGiftag(
                GSOSbit64    nloop,
                GSOSbit64    eop,
                GSOSbit64    pre,
                GSOSbit64    prim,
                GSOSbit64    flg,
                GSOSbit64    nreg,
                GSOSbit64    *regs)

[引数]
        nloop   繰り返し回数
        eop     ターミネーション情報(End of Packet)
                    GSOS_GIF_EOP_CONTINUE : 後続プリミティブあり
                    GSOS_GIF_EOP_TERMINATE: 後続プリミティブなし
        pre     PRIMフィールドEnable
                    GSOS_GIF_PRIM_IGNORE: PRIMフィールドを無視
                    GSOS_GIF_PRIM_ENABLE:
                              PRIMフィールドの値をPRIMレジスタに設定
        prim    GSのPRIMレジスタへ設定するデータ
        flg     データ形式
                    GSOS_GIF_FLG_PACKED : PACKEDモード
                    GSOS_GIF_FLG_REGLIST: REGLISTモード
                    GSOS_GIF_FLG_IMAGE  : IMAGEモード
        nreg    レジスタ記述子数。0は16個
        regs    レジスタ記述子(4bit*最大16個)
                    GSOS_GIF_REG_PRIM
                    GSOS_GIF_REG_RGBAQ
                    GSOS_GIF_REG_ST
                    GSOS_GIF_REG_UV
                    GSOS_GIF_REG_XYZF2
                    GSOS_GIF_REG_XYZ2
                    GSOS_GIF_REG_TEX0_1
                    GSOS_GIF_REG_TEX0_2
                    GSOS_GIF_REG_CLAMP_1
                    GSOS_GIF_REG_CLAMP_2
                    GSOS_GIF_REG_FOG
                    GSOS_GIF_REG_XYZF3
                    GSOS_GIF_REG_XYZ3
                    GSOS_GIF_REG_AD
                    GSOS_GIF_REG_NOP

[戻り値]
        0:    正常終了
        0以外:エラー

[解説]
        Giftagを設定するためのユーティリティ

----------------------------------------------------------------------
gsosSetPacket2                パケットへのデータ設定
----------------------------------------------------------------------

[書式]
        void gsosSetPacket2(
                GSOSbit64    data1,
                GSOSbit64    data2)

[引数]
        data1   データ1(Low)
        data2   データ2(High)

[解説]
        DMA転送するデータをGSOS内部バッファにセットする
        128        96        64        32        0
         +---------+---------+---------+---------+
         |       data2       |       data1       |
         +---------+---------+---------+---------+

----------------------------------------------------------------------
gsosSetPacket4                パケットへのデータ設定
----------------------------------------------------------------------

[書式]
        void gsosSetPacket4(
                GSOSbit64    data1,
                GSOSbit64    data2,
                GSOSbit64    data3,
                GSOSbit64    data4)

[引数]
        data1   データ1
        data2   データ2
        data3   データ3
        data4   データ4

[解説]
        DMA転送するデータをGSOS内部バッファにセットする
        128        96        64        32        0
         +---------+---------+---------+---------+
         |  data4  |  data3  |  data2  |  data1  |
         +---------+---------+---------+---------+


----------------------------------------------------------------------
gsosSetPacketAddrData        パケットへのデータ設定
----------------------------------------------------------------------

[書式]
        void gsosSetPacketAddrData(
                GSOSbit64    addr,
                GSOSbit64    data)

[引数]
        addr    データ(Addr)
        data    データ(Data)

[解説]
        DMA転送するデータをGSOS内部バッファにセットする
        128        96        64        32        0
         +---------+---------+---------+---------+
         |       data        |       addr        |
         +---------+---------+---------+---------+

----------------------------------------------------------------------
gsosSetPacketAddrData4       パケットへのデータ設定
----------------------------------------------------------------------

[書式]
        void gsosSetPacketAddrData4(
                GSOSbit64    addr,
                GSOSbit64    data1,
                GSOSbit64    data2,
                GSOSbit64    data3,
                GSOSbit64    data4)

[引数]
        addr    データ(Addr)
        data1   データ1
        data2   データ2
        data3   データ3
        data4   データ4

[解説]
        DMA転送するデータをGSOS内部バッファにセットする
        128        96        64        32        0
         +---------+---------+----+----+----+----+
         |       addr        |dat4|dat3|dat2|dat1|
         +---------+---------+----+----+----+----+

----------------------------------------------------------------------
gsosExec                      DMA転送起動
----------------------------------------------------------------------

[書式]
        void gsosExec()

[引数]
        なし

[解説]
        GSOS内部バッファにセットされたデータをDMA転送する

----------------------------------------------------------------------
gsosReadImage                 イメージの読込み
----------------------------------------------------------------------

[書式]
        int gsosReadImage(
                int          x,
                int          y,
                int          w,
                int          h,
                unsigned int bp,
                int          bw,
                int          psm,
                GSOSuchar     *pPix)

[引数]
        x       x座標
        y       y座標
        w       幅
        h       高さ
        bp      バッファのベースポインタ
        bw      バッファの幅
        psm     ピクセルフォーマット
        pPix    読み込んできたデータを格納するバッファ

[戻り値]
        0:    正常終了
        0以外:エラー

[解説]
        pDrawの(x,y)から幅w高さhのpPixへイメージデータを読み込んでくる

----------------------------------------------------------------------
gsosWriteImage                イメージの書き込み
----------------------------------------------------------------------

[書式]
        int gsosWriteImage(
                int          x,
                int          y,
                int          w,
                int          h,
                unsigned int bp,
                int          bw,
                int          psm,
                GSOSuchar     *pPix)

[引数]
        pGC     GC
        pDraw   書き出すDrawable
        x       x座標
        y       y座標
        w       幅
        h       高さ
        bp      バッファのベースポインタ
        bw      バッファの幅
        psm     ピクセルフォーマット
        pPix    書き込むデータが格納されたバッファ

[戻り値]
        0:    正常終了
        0以外:エラー

[解説]
        pDrawの(x,y)へ幅w高さhのpPixへイメージデータを書き込む


