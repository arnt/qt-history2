.TH moc 1 "10 January 2000" "Troll Tech AS" \" -*- nroff -*-
.\"
.\" $Id: //depot/qt/main/src/moc/moc.1#19 $
.\"
.\" Copyright 1992-1999 Troll Tech AS.  All rights reserved.
.\"
.\" This file is part of Qt and may be distributed and used according to
.\" the terms and conditions described in the LICENSE file.
.\"
.\" hilit19 workaround: "
.SH NAME
moc \- generate Qt meta object support code
.SH SYNOPSIS
.B moc
[-o file] [-i] [-f] [-k] [-ldbg] [-nw] [-p path] [-q path] file
.SH DESCRIPTION
This page documents the 
.B Meta Object Compiler 
for the Qt GUI application framework. The
.B moc
reads one or more C++ class declarations from a C++ header or source
file and generates one C++ source file containing meta object
information for the classes. The C++ source file generated by the 
.B moc 
must be compiled and linked with the implementation of the class (or it 
can be #included into the class' source file).
.PP
In brief, the meta object system is a structure used by Qt (see
.B http://www.troll.no/qt/
) for component programming and run time type information.  It adds
properties and inheritance information to (some) classes and 
provides a new type of communication between those instances of those 
classes, signal-slot
connections.
.SH OPTIONS
.TP
.I "-o file"
Write output to
.I file
rather than to stdout.
.TP
.I -f
Force the generation of an #include statement in the output.
This is the default for files whose name matches the regular
expression .[hH][^.]* (ie. the extension starts with
.B H
or
.B h
). This
option is only useful if you have header files that do not follow the
standard naming conventions.
.TP
.I "-i"
Do not generate an #include statement in the output.  This may be used
to run
.B moc
on a C++ file containing one or more class declarations. You should then
#include the meta object code in the .cpp file (see USAGE below).  If both
.I -f
and
.I -i
are present, the last one wins.
.TP
.I "-nw"
Do not generate any warnings. Discouraged.
.TP
.I "-ne"
Do not scan for enumeration declarations to be used by the property system. When
using this  option, enumeration values are no longer available as data-types for
properties defined in your class or its subclasses. Use this option if the 
.B moc
fails parsing your class declaration
.B
and
you are sure you do not want to use properties. Otherwise, use
MOC_SKIP_BEGIN ... MOC_SKIP_END to work around the parsing problem (see below).
.TP
.I "-ldbg"
Write a flood of lex debug information on stdout.
.TP
.I "-p path"
Makes
.B moc
prepend
.IR path /
to the file name in the generated #include statement (if one is generated).
.TP
.I "-q path"
Makes
.B moc
prepend
.IR path /
to the file name of qt #include files in the generated code.
.PP
You can explicitely tell the
.B moc
to not parse parts of a header
file. It recognizes any C++ comment (//) that contains the substrings
MOC_SKIP_BEGIN or MOC_SKIP_END. They work as you would expect and you
can have several levels of them. The net result as seen by the
.B moc
is as if you had removed all lines between a MOC_SKIP_BEGIN and a
MOC_SKIP_END
.SH USAGE
.B moc
is almost always invoked by
.BR make (1),
not by hand.
.PP
.B moc
is typically used with an input file containing class declarations
like this skeleton:
.PP
.in +4
class YourClass : public QObject {
.br
    Q_OBJECT
    Q_PROPERTY( ... )
    Q_CLASSINFO( ... )
.br

.br
public:
.br
    YourClass( QObject * parent=0, const char * name=0 );
.br
    ~YourClass();
.br

.br
signals:
.br

.br
public slots:
.br

.br
};
.in -4
.PP
Here is a useful makefile rule if you only use GNU make:
.PP
.in +4
m%.cpp: %.h
.br
        moc $< -o $@
.in -4
.PP
If you want to write portably, you can use individual rules of the
following form:
.PP
.in +4
mNAME.cpp: NAME.h
.br
        moc $< -o $@
.in -4
.PP
You must also remember to add
.I mNAME.cpp
to your SOURCES (substitute your favorite name) variable and
.I mNAME.o
to your OBJECTS variable.
.PP
(While we prefer to name our C++ source files .cpp, the
.B moc
doesn't know that, so you can use .C, .cc, .CC, .cxx or even .c++ if
you prefer.)
.PP
If you have class declarations in C++ files, we recommend that you use
a makefile rule like this:
.PP
.in +4
NAME.o: mNAME.cpp
.br

.br
mNAME.cpp: NAME.cpp
.br
        moc -i $< -o $@
.in -4
.PP
This guarantees that
.BR make (1)
will run the
.B moc
before it compiles
.IR NAME.cpp .
You can then put
.PP
.ti +4
#include "nNAME.cpp"
.PP
at the end of
.IR NAME.cpp ,
where all the classes declared in that file are fully known.
.SH DIAGNOSTICS
Sometimes you may get linkage errors, saying that
YourClass::className() is undefined or that YourClass lacks a vtbl.
Those errors happen most often when you forget to compile the
moc-generated C++ code or include that object file in the link
command.
.PP
The
.B moc
will warn you about a number of dangerous or illegal constructs.
.SH BUGS

The
.B moc
does not expand #include or #define, it simply skips any preprocessor
directives it encounters. This is regrettable, but is normally not a
problem in practice.

The
.B moc
does not handle all of C++.  The main problem is that class templates
cannot have signals or slots.  This is an important bug.  Here is an
example:
.PP
.in +4
class SomeTemplate<int> : public QFrame {
.br
    Q_OBJECT
.br
[...]
.br
signals:
.br
    void bugInMocDetected( int );
.br
};
.in -4
.PP
Less importantly, the following constructs are illegal.  All of them have
workarounds which we think are better alternatives, so fixing these bugs
is not a high priority for us.
.SS "Multiple inheritance requires QObject to be first."
If you are using multiple inheritance, moc assumes that the
.B first
inherited class is a subclass of QObject.  Also, be sure that
.B only
the first inherited class is a QObject.
.PP
.in +4
    class SomeClass : public QObject, public OtherClass {
    [...]
    };
.in -4
.PP
This bug is almost impossible to fix; since the 
.B moc 
does not expand
#include or #define, it cannot find out which one of the base classes is a
QObject.
.SS "Function pointers can not be arguments to signals or slots."
In most cases where you would consider that, we think inheritance is a
better alternative.  Here is an example of illegal syntax:
.PP
.in +4
class someClass : public QObject {
.br
    Q_OBJECT
.br
[...]
.br
public slots:
.br
    void apply(void (*applyFunction)(QList*, void*), char*); // illegal
.br
};
.in -4
.PP
You can work around this restriction like this:
.PP
.in +4
.br
typedef void (*ApplyFunctionType)(QList*, void*);
.br

.br
class someClass : public QObject {
.br
    Q_OBJECT
.br
[...]
.br
public slots:
.br
    void apply( ApplyFunctionType, char *);
.br
};
.in -4
.PP
(It may sometimes be even better to replace the function pointer with
inheritance and virtual functions, signals or slots.)
.SS "Friend declarations can not be placed in signals or slots sections"
Sometimes it will work, but in general, friend declarations can not be
placed in
.B signals
or
.B slots
sections.  Put them in the good old
.BR private ", " protected
or
.B public
sections instead.  Here is an example of the illegal syntax:
.PP
.in +4
class someClass : public QObject {
.br
    Q_OBJECT
.br
[...]
.br
signals:
.br
    friend class ClassTemplate<char>; // illegal
.br
};
.br
.in -4
.SS "Signals and slots cannot be upgraded"
The C++ feature of upgrading an inherited member function to
.B public
status is not extended to cover signals and slots.  Here is an illegal
example:
.PP
.in +4
class Whatever : public QButtonGroup {
.br
[...]
.br
public slots:
.br
    void QButtonGroup::buttonPressed(); // illegal
.br
};
.br
.in -4
.PP
The QButtonGroup::buttonPressed() slot is protected.
.PP
C++ quiz: What happens if you try to upgrade a protected member
function which is overloaded?
.IP
- All the functions are upgraded.
.IP
- That is not legal C++.
.\" Good idea, but look in the SEE ALSO section...
.SS "Type macros can not be used for signal and slot arguments"

Since the
.B moc
does not expand #define, type macros that take an argument
will not work in signals and slots. Here is an illegal example:
.PP
.in +4
#ifdef ultrix
.br
#define SIGNEDNESS(a) unsigned a
.br
#else
.br
#define SIGNEDNESS(a) a
.br
#endif
.br
class Whatever : public QObject {
.br
[...]
.br
signals:
.br
    void someSignal( SIGNEDNESS(a) ); // illegal
.br
};
.PP
A #define without arguments works.
.in -4
.SS  "Nested classes cannot be in the signals or slots sections nor have signals or slots"
Here's an example:
.PP
    class A {
.br
	Q_OBJECT
.br
    public:
.br
        class B {
.br
	public slots: // illegal
.br
	    void b();
.br
	[....]
.br
        };
.br
    signals:
.br
        class B {  // illegal
.br
	    void b();
.br

.br
	[....]
.br
        }:
.br
    };
.PP
.SS "Constructors can not be used in signals or slots sections"
It is a mystery to me why anyone would put a constructor on either the
.B signals
or
.B slots
sections.  You can not, anyway (except that it happens to work in some
cases).  Put them in
.br private ", " protected
or
.B public
sections, where they belong.  Here is an example of the illegal syntax:
.PP
.in +4
class SomeClass : QObject {
.br
    Q_OBJECT
.br
public slots:
.br
    SomeClass( QObject *parent, const char *name )
.br
        : QObject( parent, name ) {} // illegal
.br
[...]
.br
};
.in -4
.SS "Signals and slots may not have default arguments"
Since signal->slot binding occurs at run-time, it is
conceptually difficult to use default parameters, which are a
compile-time phenomenon.  This will fail:
.PP
    class SomeClass : public QObject {
.br
        Q_OBJECT
.br
    public slots:
.br
        void someSlot(int x=100); // illegal
.br
    };
.br
.SS "Signals and slots may not have template arguments"
.PP
Declaring signals and slots with template-type parameters will not
work as expected, even though the 
.B moc 
will not complain. Connecting the
signal to the slot in the following example, the slot will not get
executed when the signal is emitted:
.PP
   [...]
.br
   public slots:
.br
       void MyWidget::setLocation (pair<int,int> location);
.br
   [...]
.br
   public signals:
.br
       void MyObject::moved (pair<int,int> location);
.br
.PP
However, you can work around this limitation by explicitly typedef'ing
the parameter types, like this:
.PP
   typedef pair<int,int> IntPair;	
.br
   [...]
.br
   public slots:
.br
       void MyWidget::setLocation (IntPair location);
.br
   [...]
.br
   public signals:
.br
       void MyObject::moved (IntPair location);
.br
.PP
This will work as expected.

.SS "Properties need to be declared before the public section that contains the respective set and get functions"
.PP
Declaring the first property within or after the public section that
contains the respective set and get functions does not work as
expected. The 
.B moc 
will complain that it cannot find these functions. Here is an example of the illegal syntax:
.PP
    class SomeClass : public QObject {
.br
        Q_OBJECT
.br
    public:
.br
    [...]
.br
        // illegal
.br
        Q_PROPERTY( Priority, "Priority", setPriority, priority )
.br
        void setPriority( Priority );
.br
        Priority priority() const;
.br
    [...]
.br
    };
.br
.PP
Work around this limitation by declaring all properties at the
beginning of the class declaration, right after Q_OBJECT:
.PP
    class SomeClass : public QObject {
.br
        Q_OBJECT
.br
        Q_PROPERTY( Priority, "Priority", setPriority, priority )
.br
    public:
.br
    [...]
.br
        void setPriority( Priority );
.br
        Priority priority() const;
.br
    [...]
.br
    };
.br
.PP
.SH "SEE ALSO"
.BR http://www.troll.no/ " and"
.BR "C++ ARM, section r.11.3" " (for the answer to the quiz.)"
.SH AUTHOR
Eirik Eng, Troll Tech <eiriken@troll.no>
