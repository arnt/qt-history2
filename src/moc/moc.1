.TH moc 1 "20 November 1997" "Troll Tech AS" \" -*- nroff -*-
.\"
.\" $Id: //depot/qt/main/src/moc/moc.1#17 $
.\"
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.
.\" 
.\" This file is part of Qt and may be distributed and used according to
.\" the terms and conditions described in the LICENSE file.
.\"
.\" hilit19 workaround: "
.SH NAME
moc \- generate Qt meta object support code
.SH SYNOPSIS
.B moc
[-o file] [-i] [-f] [-k] [-ldbg] [-dbg] [-nw] [-p path] [-q path] file
.SH DESCRIPTION
This page documents the Meta Object Compiler for the Qt GUI
application framework.  The Meta Object Compiler reads one or more C++
class declarations containing
.B signals
and
.B slots
sections from a C++ header or source file and generates one C++ source
file containing meta mbject information for the classes.
.\"  See "
.\" .B http://www.troll.no/qt/moc.html "
.\" for more information, or your local Qt HTML documentation. "
.PP
In brief, the meta object system is a structure used by Qt (see
.B http://www.troll.no/
) for component programming and run time type information.  It adds
inheritance information to (some) classes and provides a new type of
communication between those instances of those classes, signal-slot
connections.
.SH OPTIONS
.TP
.I "-o file"
Write output to
.I file
rather than to stdout.
.TP
.I -f
Force the generation of an #include statement in the output.
This is the default for files whose name matches the regular
expression .[hH][^.]* (ie. the extension starts with 
.B H
or
.B h
). This
option is only useful if you have header files that do not follow the
standard naming conventions.
.TP
.I "-i"
Do not generate an #include statement in the output.  This may be used
to run 
.B moc
on a C++ file containing one or more class declarations. You should then 
#include the meta object code in the .cpp file (see USAGE below).  If both
.I -f
and
.I -i
are present, the last one wins.
.TP
.I "-nw"
Do not generate any warnings. Discouraged.
.TP
.I "-ldbg"
Write a flood of lex debug information on stdout.
.TP
.I "-dbg"
Treat all non-signal members as slots, for internal debugging
purposes.  This is not useful for programming Qt clients.
.TP
.I "-p path"
Makes
.B moc
prepend
.IR path /
to the file name in the generated #include statement (if one is generated).
.TP
.I "-q path"
Makes
.B moc
prepend
.IR path /
to the file name of qt #include files in the generated code.
.SH USAGE
.B moc
is almost always invoked by
.BR make (1),
not by hand.
.PP
.B moc
is typically used with an input file containing class declarations
like this skeleton:
.PP
.in +5
class YourClass : public QObject {
.br
    Q_OBJECT
.br
public:
.br
    YourClass( QObject * parent=0, const char * name=0 );
.br
    ~YourClass();
.br

.br
signals:
.br

.br
public slots:
.br

.br
};
.in -5
.PP
Here is a useful makefile rule if you only use GNU make:
.PP
.in +5
m%.cpp: %.h
.br
        moc $< -o $@
.in -5
.PP
If you want to write portably, you can use individual rules of the
following form:
.PP
.in +5
mNAME.cpp: NAME.h
.br
        moc $< -o $@
.in -5
.PP
You must also remember to add
.I mNAME.cpp
to your SOURCES (substitute your favorite name) variable and
.I mNAME.o
to your OBJECTS variable.
.PP
(While we prefer to name our C++ source files .cpp, the
.B moc
doesn't know that, so you can use .C, .cc, .CC, .cxx or even .c++ if
you prefer.)
.PP
If you have class declarations in C++ files, we recommend that you use
a makefile rule like this:
.PP
.in +5
NAME.o: mNAME.cpp
.br

.br
mNAME.cpp: NAME.cpp
.br
        moc -i $< -o $@
.in -5
.PP
This guarantees that
.BR make (1)
will run the
.B moc
before it compiles
.IR NAME.cpp .
You can then put
.PP
.ti +5
#include "nNAME.cpp"
.PP
at the end of
.IR NAME.cpp ,
where all the classes declared in that file are fully known.
.SH DIAGNOSTICS
Sometimes you may get linkage errors, saying that
YourClass::className() is undefined or that YourClass lacks a vtbl.
Those errors happen most often when you forget to compile the
moc-generated C++ code or include that object file in the link
command.
.PP
The
.B moc
will warn you about a number of dangerous or illegal constructs.
.SH BUGS

The
.B moc
does not expand #include or #define, it simply skips any preprocessor
directives it encounters. This is regrettable, but is normally not a
problem in practice.

The
.B moc
does not handle all of C++.  The main problem is that class templates
cannot have signals or slots.  This is an important bug.  Here is an
example:
.PP
.in +5
class SomeTemplate<int> : public QFrame {
.br
    Q_OBJECT
.br
[...]
.br
signals:
.br
    void bugInMocDetected( int );
.br
};
.in -5
.PP
Less importantly, the following constructs are illegal.  All of them have
workarounds which we think are better alternatives, so fixing these bugs
is not a high priority for us.
.SS "Multiple inheritance requires QObject to be first."
If you are using multiple inheritance, moc assumes that the
.B first
inherited class is a subclass of QObject.  Also, be sure that 
.B only
the first inherited class is a QObject.
.PP
.in +5
    class SomeClass : public QObject, public OtherClass {
    [...]
    };
.in -5
.PP
This bug is almost impossible to fix; since the moc does not expand
#include or #define, it cannot find out which one of the base classes is a
QObject.
.SS "Function pointers can not be arguments to signals or slots."
In most cases where you would consider that, we think inheritance is a
better alternative.  Here is an example of illegal syntax:
.PP
.in +5
class someClass : public QObject {
.br
    Q_OBJECT
.br
[...]
.br
public slots:
.br
    void apply(void (*applyFunction)(QList*, void*), char*);
.br
};
.in -5
.PP
You can work around this restriction like this:
.PP
.in +5
.br
typedef void (*ApplyFunctionType)(QList*, void*);
.br

.br
class someClass : public QObject {
.br
    Q_OBJECT
.br
[...]
.br
public slots:
.br
    void apply( ApplyFunctionType, char *);
.br
};
.in -5
.PP
(It may sometimes be even better to replace the function pointer with
inheritance and virtual functions, signals or slots.)
.SS "Friend declarations can not be placed in signals or slots sections"
Sometimes it will work, but in general, friend declarations can not be
placed in
.B signals
or
.B slots
sections.  Put them in the good old
.BR private ", " protected
or
.B public
sections instead.  Here is an example of the illegal syntax:
.PP
.in +5
class someClass : public QObject {
.br
    Q_OBJECT
.br
[...]
.br
signals:
.br
    friend class ClassTemplate<char>;
.br
};
.br
.in -5
.SS "Signals and slots cannot be upgraded"
The C++ feature of upgrading an inherited member function to
.B public
status is not extended to cover signals and slots.  Here is an illegal
example:
.PP
.in +5
class Whatever : public QButtonGroup {
.br
[...]
.br
public slots:
.br
    void QButtonGroup::buttonPressed;
.br
};
.in -5
.PP
The QButtonGroup::buttonPressed() slot is protected.
.PP
C++ quiz: What happens if you try to upgrade a protected member
function which is overloaded?
.IP
- All the functions are upgraded.
.IP
- That is not legal C++.
.\" Good idea, but look in the SEE ALSO section...
.SS "Type macros can not be used for signal and slot arguments"

Since the 
.B moc
does not expand #define, type macros that take an argument
will not work in signals and slots. Here is an illegal example:
.PP
.in +5
#ifdef ultrix
.br
#define SIGNEDNESS(a) unsigned a
.br
#else
.br
#define SIGNEDNESS(a) a
.br
#endif
.br
class Whatever : public QObject {
.br
[...]
.br
signals:
.br
    void someSignal( SIGNEDNESS(a) );
.br
};
.PP
A #define without arguments works.
.in -5
.SS  "Nested classes cannot be in the signals or slots sections nor have signals or slots"
Here's an example:
.PP
.in +5
    class A {
.br
	Q_OBJECT
.br
    public:
.br
        class B {
.br
	public slots:
.br
	    void b();       // Nested class with slot
.br
	[....]
.br
        };
.br
    signals:
.br
        class B {
.br
	    void b();       // Nested class in signals:
.br

.br
	[....]
.br
        }:
.br
    };
.in -5
.PP
.SS "Constructors can not be used in signals or slots sections"
It is a mystery to me why anyone would put a constructor on either the
.B signals
or
.B slots
sections.  You can not, anyway (except that it happens to work in some
cases).  Put them in
.BR private ", " protected
or
.B public
sections, where they belong.  Here is an example of the illegal syntax:
.PP
.in +5
class SomeClass : QObject {
.br
    Q_OBJECT
.br
public slots:
.br
    SomeClass( QObject *parent, const char *name )
.br
        : QObject( parent, name ) {}
.br
[...]
.br
};
.in -5
.SH "SEE ALSO"
.BR http://www.troll.no/ " and"
.BR "C++ ARM, section r.11.3" " (for the answer to the quiz.)"
.SH AUTHOR
Eirik Eng, Troll Tech <eiriken@troll.no>
