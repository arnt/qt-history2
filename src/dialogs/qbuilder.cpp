/****************************************************************************
** $Id: //depot/qt/main/src/dialogs/qbuilder.cpp#1 $
**
** Implementation of QBuilder class
**
** Created : 980830
**
** Copyright (C) 1998 Troll Tech AS.  All rights reserved.
**
** This file is part of Troll Tech's internal development tree for Qt.
**
** This header text will be replaced by an appropriate text by the
** mkdist script which generates external distributions.
**
** If you are using the Qt Professional Edition or the Qt Free Edition,
** please notify Troll Tech at <info@troll.no> if you see this text.
**
** To Troll Tech developers: This header was generated by the script
** fixcopyright-int. It has the same number of text lines as the free
** and professional editions to avoid line number inconsistency.
**
*****************************************************************************/

#include "qbuilder.h"
#include "qmenubar.h"
#include "qstatusbar.h"
#include "qlistview.h"
#include "qsplitter.h"
#include "qmetaobject.h"
#include "qobjectdict.h"
#include "qobjectlist.h"

class QBuilderPrivate {
public:
    QBuilderPrivate(QWidget* parent)
    {
	splitter = new QSplitter(parent);
	classes = new QListView(splitter);
	objects = new QListView(splitter);

	classes->addColumn("Class");
	objects->addColumn("Object");
	objects->addColumn("Class");
    }

    QSplitter* splitter;
    QListView* classes;
    QListView* objects;
};

class QBuilderClassItem : public QListViewItem {
    QMetaObject* meta;
public:
    QBuilderClassItem( QListView * parent, QMetaObject* mo ) :
	QListViewItem( parent, mo->className() )
    {
	meta = mo;
    }

    QBuilderClassItem( QListViewItem * parent, QMetaObject* mo ) :
	QListViewItem( parent, mo->className() )
    {
	meta = mo;
    }

    void setup()
    {
	QListViewItem::setup();
	QDictIterator<QMetaObject> it(*objectDict);
	QMetaObject* child;
	while ((child = it.current())) {
	    ++it;
	    if ( child->superClass() == meta ) {
		// Subclass of this
		(void)new QBuilderClassItem(this,child);
	    }
	}
    }
};

QBuilderObjectItem::QBuilderObjectItem( QListView * parent, QObject* o ) :
    QListViewItem( parent, o->name(), o->className() )
{
    object = o;
    object->installEventFilter(this);
    connect(object, SIGNAL(destroyed()), this, SLOT(objectDestroyed()));
}

QBuilderObjectItem::QBuilderObjectItem( QListViewItem * parent, QObject* o ) :
    QListViewItem( parent, o->name(), o->className() )
{
    object = o;
    object->installEventFilter(this);
    connect(object, SIGNAL(destroyed()), this, SLOT(objectDestroyed()));
}

bool QBuilderObjectItem::eventFilter(QObject* o, QEvent* e)
{
    if ( o == object ) {
	QChildEvent* ce = (QChildEvent*)e;
	switch ( e->type() ) {
	  case QEvent::ChildInserted: {
		(void)new QBuilderObjectItem( this, ce->child() );
		setExpandable(TRUE);
	    }
	    break;
	  case QEvent::ChildRemoved: {
		QListViewItem *cursor = firstChild();
		while ( cursor ) {
		    QBuilderObjectItem* boi = (QBuilderObjectItem*)cursor;
		    if ( boi->object == ce->child() ) {
			delete cursor;
			cursor = 0;
		    } else {
			cursor = cursor->nextSibling();
		    }
		}
	    }
	    break;
	  default:
	    break;
	}
    }
    return FALSE;
}

void QBuilderObjectItem::setup()
{
    QListViewItem::setup();
    QObjectList *list = (QObjectList*)object->children();
    if ( !list ) return;
    QObjectListIt it(*list);
    QObject* child;
    while ((child = it.current())) {
	++it;
	// Child object of this
	(void)new QBuilderObjectItem(this,child);
    }
    setExpandable(TRUE);
}

void QBuilderObjectItem::objectDestroyed()
{
    // Me too.
    delete this;
}

QBuilder::QBuilder() :
    QMainWindow(0,0,WDestructiveClose)
{
    int id;

    QPopupMenu * file = new QPopupMenu();
    menuBar()->insertItem( "&File", file );

    QPopupMenu * edit = new QPopupMenu();
    id=menuBar()->insertItem( "&Edit", edit );
    menuBar()->setItemEnabled(id,FALSE);

    QPopupMenu * options = new QPopupMenu();
    menuBar()->insertItem( "&Options", options );

    d = new QBuilderPrivate(this);
    setCentralWidget(d->splitter);

    QString msg;
    int nclasses = QMetaObjectInit::init()+1; // +1 for QObject
    if ( nclasses ) {
	msg.sprintf("Qt Application Builder - %d classes", nclasses);
	QListViewItem *lvi = new QBuilderClassItem( d->classes, QObject::metaObject() );
	lvi->setOpen(TRUE); // #### WWA: Arnt, why needed?
    } else {
	msg = "Sorry, your compiler/platform is insufficient for "
		"Qt Application Builder";
    }
    statusBar()->message(msg);
}

QBuilder::~QBuilder()
{
}

void QBuilder::addTopLevelWidget(QWidget* tlw)
{
    QBuilderObjectItem *lvi = new QBuilderObjectItem( d->objects, tlw );
    lvi->setOpen(TRUE); // #### WWA: Arnt, why needed?
}
