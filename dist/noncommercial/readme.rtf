{\rtf1\ansi\ansicpg1252\deff0\deflang1033\deflangfe1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Tahoma;}{\f1\froman\fprq2\fcharset0 Times New Roman;}{\f2\fmodern\fprq1\fcharset0 Lucida Console;}{\f3\froman\fprq2\fcharset2 Symbol;}{\f4\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue0;}
{\stylesheet{ Normal;}{\s1 heading 1;}{\s2 heading 2;}{\s3 heading 3;}{\s4 heading 4;}}
\viewkind4\uc1\pard\nowidctlpar\s1\sb100\sa100\qc\cf1\kerning36\f0\fs48 Qt for Windows\par
\pard\nowidctlpar\cf0\kerning0\fs20\par
\pard\nowidctlpar\s4\sb100\sa100\qc\cf1\fs24 Getting Started with Qt (non-commercial edition) for Windows\par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\s3\sb100\sa100\fs27 Contents \par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\tx720\f1\fs24 1.\tab Introduction to Qt \par
\pard\nowidctlpar\fi-360\li720\sb100\sa100 2.\tab Updating Visual Studio\par
3.\tab Creating a Qt Application\par
4.\tab Qt Documentation\par
5.\tab Trying the Examples\par
6.\tab Creating Makefiles with tmake\par
7.\tab Troubleshooting\par
8.\tab Developing and distributing applications with Qt non-commercial edition\cf1\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\s2\sb100\sa100\cf1\fs36 Introduction to Qt \par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Qt is a cross-platform application development framework written in C++. Qt applications can be run on Windows 95, 98, NT 4, ME and 2000, Linux, Solaris, HP-UX, many other Unix's, and soon the Mac, simply by recompiling. Qt provides a type-safe alternative to callbacks called "signals and slots", which is easy to learn and use as you'll see in the examples. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Qt comes with \i Qt Designer\i0 , a visual dialog design tool. Your designs can be converted (automatically by the build system) into C++ code for constructing and displaying the user interface. You can subclass the dialogs created in \i Qt Designer\i0  to provide their underlying functionality. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 The Qt package includes the Qt library, \i Qt Designer\i0 , \cf0\f2\fs20 tmake.exe\cf1\f1\fs24  (a build tool), and a directory of example programs, all provided with Visual Studio project files (\cf0\f2\fs20 .dsp\cf1\f1\fs24  files). Qt comes with extensive on-line documentation. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 The terms under which this non-commercial version of Qt for Windows may be used are detailed in the LICENCE.txt file. An informal summary of the terms is that:\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\nowidctlpar\fi-360\li720\sb100\sa100\tx720\cf1\f1\fs24 Private users may use this package in a non-commercial setting to produce non-commercial applications.\par
\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlcont\pnf4\pnindent0{\pntxtb\'B7}}\nowidctlpar\cf0\f0\fs20\par
\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\nowidctlpar\fi-360\li720\sb100\sa100\tx720\cf1\f1\fs24 Professional users must register this package. Once registered we will send you an End User License Agreement which will entitle you to evaluate the package for 30 days. During this period you will have direct access to our technical support service via email. \i Qt Designer\i0  provides a \f0\fs20 Register\f1\fs24  menu option. Alternatively go to http://www.trolltech.com and register from there.\par
\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlcont\pnf4\pnindent0{\pntxtb\'B7}}\nowidctlpar\cf0\f0\fs20\par
\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\nowidctlpar\fi-360\li720\sb100\sa100\tx720\cf1\f1\fs24 Academic Institutions that wish to make Qt available to their students for teaching or research purposes are eligible to participate in the Trolltech Educational Programme which provides site licensing and technical support. Contact sales@trolltech.com for further details.\par
\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlcont\pnf4\pnindent0{\pntxtb\'B7}}\nowidctlpar\cf0\f0\fs20\par
\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\nowidctlpar\fi-360\li720\sb100\sa100\tx720\cf1\f1\fs24 If you wish to develop commercial software with Qt you can purchase commercial licenses. See http://www.trolltech.com for pricing or contact sales@trolltech.com for further details.\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\tx720\cf1\f1\fs24 See the LICENCE.txt file for the precise legal terms. In addition private users may wish to read the "Developing and distributing applications with Qt non-commercial edition" section at the end of this file.\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\s2\sb100\sa100\cf1\fs36 Updating Visual Studio \par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Qt provides a small add-in for Visual Studio which you need to install. \par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\tx720 1.\tab Start Visual Studio if it isn't already running. \par
\pard\nowidctlpar\fi-360\li720\sb100\sa100 2.\tab Click \f0\fs20 Tools|Customize\f1\fs24  to launch the Customize dialog. \par
3.\tab Click the \f0\fs20 Add-ins and Macro Files\f1\fs24  tab. \par
4.\tab Ensure the checkbox to the left of the "QMsDev Developer Studio-Add-In" add-in is checked.\par
5.\tab Click \f0\fs20 Close\f1\fs24 . \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 The add-in is now installed. A new floating toolbar will appear with the following toolbar buttons: \par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\tx720\f3\fs20\'b7\tab\f0 New Qt Project\f1\fs24  - create a Qt \f2\fs20 .pro\f1\fs24  project file and the corresponding Visual Studio \f2\fs20 .dsp\f1\fs24  file. \par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\f3\fs20\'b7\tab\f0 Generate Qt Project\f1\fs24  - create a Visual Studio \f2\fs20 .dsp\f1\fs24  file based on the Qt project \f2\fs20 .pro\f1\fs24  file. \par
\f3\fs20\'b7\tab\f0 New Qt Dialog\f1\fs24  - creates a Qt dialog that you can customize with \i Qt Designer\i0 . The dialog is automatically added to the Qt \f2\fs20 .pro\f1\fs24  project file. \par
\f3\fs20\'b7\tab\f0 Qt Designer\f1\fs24  - launches \i Qt Designer\i0 . \par
\f3\fs20\'b7\tab\f0 Add MOC\f1\fs24  - add a custom build step which calls \f2\fs20 moc.exe\f1\fs24  (meta object compiler) \par
\f3\fs20\'b7\tab\f0 Add UIC\f1\fs24  - add an existing \i Qt Designer\i0  \f2\fs20 .ui\f1\fs24  file to an existing project. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\s2\sb100\sa100\cf1\fs36 Creating a Qt Application \par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Start Visual Studio if it isn't running already. \par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\tx720 1.\tab Click the \f0\fs20 New Qt Project\f1\fs24  toolbar button to invoke the Qt New Project dialog. \par
\pard\nowidctlpar\fi-360\li720\sb100\sa100 2.\tab Enter a project name, e.g. \f0\fs20 myproject\f1\fs24  \par
3.\tab Choose a location for your project, e.g. \cf0\f2\fs20 C:\\tmp\\myproject\cf1\f1\fs24  \par
4.\tab Choose an application type. For our example, click \f0\fs20 Main Window\f1\fs24 , then click \f0\fs20 OK\f1\fs24 . \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 A new project will be created. If you look at the file view you will see that a \f2\fs20 main.cpp\f1\fs24  file has been created as well as files for your own code, \f2\fs20 myprojectwindow.cpp\f1\fs24  with its header, \f2\fs20 myprojectwindow.h\f1\fs24 . A moc (meta object compiler) file (\cf0\f2\fs20 moc_myprojectwindow.cpp\cf1\f1\fs24 ) is also created; you can ignore this, it will be automatically generated as required. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 The application is ready to run, press \f0\fs20 F7\f1\fs24  to build and then press \f0\fs20 F5\f1\fs24  to run. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\s3\sb100\sa100\cf1\fs28 Customizing the main window \fs27\par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 We will add a menu bar and a main widget to our main window. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\s4\sb100\sa100\fs24 Adding the menu to the main window \par
\pard\nowidctlpar\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Open the \cf0\f2\fs20 myprojectwindow.cpp\cf1\f1\fs24  file. \par
Add the following header lines: \par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f2\fs20\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2 #include <qaction.h>\par
#include <qpopupmenu.h>\par
#include <qmenubar.h>\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Add the following code in the myprojectWindow constructor: \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2\par
    QAction *fileNewAction = new QAction( "New", "&New", CTRL+Key_N, this, "new" );\par
    QAction *fileQuitAction = new QAction( "Quit", "&Quit", CTRL+Key_Q, this, "quit" );\par
    QPopupMenu *fileMenu = new QPopupMenu( this );\par
    menuBar()->insertItem( "&File", fileMenu );\par
    fileNewAction->addTo( fileMenu );\par
    fileQuitAction->addTo( fileMenu );\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Here we create two actions: actions may be used for keyboard accelerators, menu options and toolbars. We create a new menu and add our two actions to the menu. Press \f0\fs20 F7\f1\fs24  to build, then \f0\fs20 F5\f1\fs24  to run. The program will run and the new menu will work - but it hasn't any functionality yet. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 To make the Quit option work we need to add another header file and a signal/slot connection. (If you want to learn more about signals and slots, see the on-line documentation provided, i.e. \i signalsandslots.html\i0 .) \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Add this header file: \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2 include <qapplication.h>\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Now add the following code: \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2     connect( fileQuitAction, SIGNAL( activated() ), qApp, SLOT( quit() ) );\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 If you compile and run the application the \f0\fs20 File|Quit\f1\fs24  menu option will now work. \f2\fs20 qApp\f1\fs24  is a global pointer, available in all Qt programs, that points to \cf0 the QApplication instance. \cf1\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\s4\sb100\sa100\cf1\fs24 Adding the main widget (control) to the main window \par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Most main window-style applications are built around a central widget. We'll make a QTable our main widget, by adding another header file and some more code. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Add this header file to \cf0\f2\fs20 qmyprojectwindow.h\cf1\f1\fs24  (our header file): \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2 #include <qtable.h>    \par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 In \cf0\f2\fs20 qmyprojectwindow.h\cf1\f1\fs24  add the following private variable to the myprojectWindow class: \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2     QTable *table;\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Now add the following code to \cf0\f2\fs20 qmyprojectwindow.cpp\cf1\f1\fs24 : \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2     table = new QTable( 52, 12, this );\par
    table->setFocus();\par
    setCentralWidget( table );\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\s3\sb100\sa100\cf1\fs28 Creating a dialog with \i Qt Designer\i0  \par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 We'll now add a dialog to our application. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Click the \f0\fs20 New Qt Dialog\f1\fs24  toolbar button. This will start up a sequence of two dialogs. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 In the File Save As dialog, choose a name for the dialog, e.g. \f0\fs20 newdocument.ui\f1\fs24 , then click \f0\fs20 Save\f1\fs24 . \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Click \f0\fs20 Yes\f1\fs24  in the Question dialog. A DOS window will appear momentarily. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 The following files have been added to your project: \par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\tx720\cf0\f3\fs20\'b7\tab\b\f2 newdocumentimpl.h\cf1\b0\f1\fs24  - this file contains the subclass's declarations and is where you specialize them \par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\cf0\f3\fs20\'b7\tab\b\f2 newdocumentimpl.cpp\cf1\b0\f1\fs24  - this file contains a subclass of the dialog and is where you add your own code to specialize it \par
\cf0\f3\fs20\'b7\tab\i\f2 newdocument.ui\cf1\i0\f1\fs24  - this is the \i Qt Designer\i0  file that contains your dialog's design and is used to generate the other files \par
\cf0\f3\fs20\'b7\tab\f2 newdocument.cpp\cf1\f1\fs24  - this file contains the dialog class; it is created/updated by \i Qt Designer\i0  \par
\cf0\f3\fs20\'b7\tab\f2 moc_newdocument.cpp\cf1\f1\fs24  - a moc file that is taken care of automatically and can be ignored \par
\cf0\f3\fs20\'b7\tab\f2 moc_newdocumentimpl.cpp\cf1\f1\fs24  - a moc file that is taken care of automatically and can be ignored \par
\cf0\f3\fs20\'b7\tab\f2 newdocument.h\cf1\f1\fs24  - the dialog's header file; it is created/updated by \i Qt Designer\i0  \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 We will now create a basic dialog. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\i\f1\fs24 Qt Designer\i0  is a powerful layout-based dialog design tool. It has on-line documentation if you are unfamiliar with it. We'll just place a couple of widgets (controls) on the form and then see how to launch the dialog from our main window. \par
\par
\pard\nowidctlpar\fi-360\li720\tx720\cf0 1.\tab Double click \f2\fs20 newdocument.ui\f1\fs24  in the file view to run \cf1\i Qt Designer\cf0\i0 . \par
\par
\pard\nowidctlpar\fi-360\li720 2.\tab Delete the "Place your widgets" label and the Apply button. (For each of them just click them, then press \cf1\f0\fs20 Del\cf0\f1\fs24 .) \par
\par
3.\tab We'll now add some widgets to the form and lay them out: \par
\par
\pard\nowidctlpar\fi-360\li1440\tx1260 i.\tab    Click the \cf1\f0\fs20 Button Group\cf0\f1\fs24  toolbar button then click in the middle of the form. \par
\pard\nowidctlpar\fi360\li720\tx1260\par
\pard\nowidctlpar\fi-360\li1440 ii.\tab Click the form then click the \cf1\f0\fs20 Lay Out Vertically\cf0\f1\fs24  toolbar button to make the button group fill the available space. \par
\pard\nowidctlpar\fi360\li720\par
\pard\nowidctlpar\fi-360\li1440 iii.\tab Click the \cf1\f0\fs20 Radio Button \cf0\f1\fs24 toolbar button then click on the button group. Repeat this twice more so that you have three radio buttons in a rough vertical alignment. \par
\pard\nowidctlpar\fi360\li720\par
\pard\nowidctlpar\fi-360\li1440\cf1\f0\fs20 iv.\tab Shift+Click\cf0\f1\fs24  the unselected radio buttons so that all three are selected, then click the \cf1\f0\fs20 Lay Out Vertically\cf0\f1\fs24  toolbar button. \par
\pard\nowidctlpar\fi360\li720\par
\pard\nowidctlpar\fi-360\li1440 v.\tab Click the button group and click the \cf1\f0\fs20 Lay Out Horizontally\cf0\f1\fs24  toolbar button. \par
\pard\nowidctlpar\fi360\li720\par
\pard\nowidctlpar\fi-360\li1440 vi.\tab Resize the form using the size grip (bottom right corner) to make is smaller. \par
\pard\nowidctlpar\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 We won't bother naming the widgets or giving them sensible labels since we just want to show you how to integrate \i Qt Designer\i0  forms with a Visual Studio Qt project. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Click \f0\fs20 File|Exit\f1\fs24 , then click \f0\fs20 Yes\f1\fs24 , to save the changes to the dialog. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\s3\sb100\sa100\cf1\fs28 Calling the dialog from the main window \par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 We'll add a new slot which we'll use to execute the dialog we've created. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Change the myprojectWindow's definition in the \cf0\f2\fs20 myprojectwindow.h\cf1\f1\fs24  file to this: \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2 class myprojectWindow : public QMainWindow\par
\{\par
    Q_OBJECT\par
public:\par
    myprojectWindow( QWidget* parent = 0, const char* name = 0, WFlags f = WType_TopLevel );\par
public slots:\par
    void newDocument();\par
private:\par
    QTable *table;\par
\};\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 We'll now implement the slot in \cf0\f2\fs20 myprojectwindow.cpp\cf1\f1\fs24  file. Firstly add our dialog's header file: \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2 #include "newdocumentimpl.h"\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Now add the new slot to invoke the dialog modally: \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2 void myprojectWindow::newDocument()\par
\{\par
    newdocument *docDlg = new newdocument( this, "new", TRUE );\par
    if ( docDlg->exec() ) \{\par
        ; // user clicked OK\par
    \}\par
    else \{\par
        ; // user clicked Cancel\par
    \}\par
    delete docDlg;\par
\}\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Finally we need to connect the \f0\fs20 File|New\f1\fs24  menu option to the newDocument() slot. We do this by adding another connect call in the myprojectWindow constructor, after the connect we wrote earlier: \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2     connect( fileNewAction, SIGNAL( activated() ), this, SLOT( newDocument() ) );\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 If you build and run the application, both the \f0\fs20 File|New\f1\fs24  and \f0\fs20 File|Quit\f1\fs24  menu options will work, \f0\fs20 File|New\f1\fs24  causing your dialog to be displayed. Click either the dialog's \f0\fs20 OK\f1\fs24  or its \f0\fs20 Cancel\f1\fs24  button to close it. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\s2\sb100\sa100\cf1\fs36 Qt Documentation \par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 The Qt reference documentation is installed in the \cf0\f2\fs20 %QTDIR%\\doc\\html\cf1\f1\fs24  directory (unless you chose not to install it). The Qt folder in \f0\fs20 Start menu|Programs\f1\fs24  contains a shortcut to browse the documentation. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 For information on Qt books see \cf0 http://www.trolltech.com/developer/literature/\cf1  \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\s2\sb100\sa100\cf1\fs36 Exploring the Examples \par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Qt comes with a large number of examples in the \cf0\f2\fs20 %QTDIR%\\examples\cf1\f1\fs24  directory. All of them already have \f2\fs20 .dsp\f1\fs24  files so they are easy to open and run, e.g. \par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\tx720 1.\tab Open Visual Studio if it isn't already running. \par
\pard\nowidctlpar\fi-360\li720\sb100\sa100 2.\tab Click \f0\fs20 File|Open Workspace\f1\fs24 . \par
3.\tab Change the file types to \f0\fs20 Projects (.dsp)\f1\fs24 . \par
4.\tab Navigate in the file dialog to \cf0\f2\fs20 %QTDIR%\\examples\cf1\f1\fs24 . (You can enter \f2\fs20 %QTDIR%\\examples\f1\fs24  in the file name line edit and press \f0\fs20 Enter\f1\fs24  to get to the right directory.) \par
5.\tab Double click a directory, e.g. "action", then double click the \cf0\f2\fs20 .dsp\cf1\f1\fs24  file, e.g. \cf0\f2\fs20 action.dsp\cf1\f1\fs24 . \par
6.\tab Click \f0\fs20 Open\f1\fs24 . \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 You can now build and run the application and examine its source code. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\s2\sb100\sa100\cf1\fs36 Creating Makefiles with tmake \par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 If you want to spend less time writing your own makefiles or you need to maintain makefiles for several platforms, use the free \cf0\f2\fs20 tmake.exe\cf1\f1\fs24  program supplied in this package. tmake is an easy-to-use tool for creating and maintaining makefiles for multiple platforms and compilers. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 tmake reads a special tmake project file (\cf0\f2\fs20 .pro\cf1\f1\fs24 ) and creates a makefile for your operating system and compiler. A project file typically looks like this \cf0\f2\fs20 (%QTDIR%\\examples\\hello\\hello.pro\cf1\f1\fs24 ): \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2       TEMPLATE  = app\par
      CONFIG    = qt warn_on release\par
      HEADERS   = hello.h\par
      SOURCES   = hello.cpp \\\par
                  \lang1044 main.cpp\par
      TARGET    = hello\par
\pard\nowidctlpar\cf0\lang1033\f0\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 To create a make file run tmake, e.g. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2       C:\\qt\\examples\\hello> tmake hello.pro -o Makefile\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 tmake can create makefiles for Windows and all popular Unix systems and supports more than 15 different C/C++ compilers and is therefore ideal for cross-platform software development. tmake can also create project files (\cf0\f2\fs20 .dsp\cf1\f1\fs24  files) for Microsoft Developer Studio; to do this add the following line to your \cf0\f2\fs20 .pro\cf1\f1\fs24  file: \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2     DEFINES += QT_DLL QT_THREAD_SUPPORT\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Then run tmake on the modified \cf0\f2\fs20 .pro\cf1\f1\fs24  file: \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f2     C:\\qt\\examples\\hello> tmake -t vcapp hello.pro -o hello.dsp\par
\pard\nowidctlpar\cf0\f0\par
\pard\nowidctlpar\s2\sb100\sa100\cf1\fs36 Troubleshooting \par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\tx720\cf1\f3\'b7\tab\f1\fs24 If the compilation fails because the \cf0\f2\fs20 moc.exe\cf1\f1\fs24  program cannot be found or the Qt header files are missing, check if the PATH contains the \cf0\f2\fs20 %QTDIR%\\bin\cf1\f1\fs24  directory and the environment variable \cf0\f2\fs20 QTDIR\cf1\f1\fs24  is set to the directory in which you installed Qt. After installing Qt, you may need to reboot your computer to make sure these settings are applied. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\tx720\cf1\f3\'b7\tab\f1\fs24 If the compilation fails because nmake, or the compiler itself cannot be found, you must make sure that the environment variables (\cf0\f2\fs20 PATH\cf1\f1\fs24  etc.) are set up for command-line use of the compiler. Run the \cf0\f2\fs20 vcvars32.bat\cf1\f1\fs24  file to setup the environment. This file can be found in the \cf0\f2\fs20 vc98\\bin\cf1\f1\fs24  directory of the Visual Studio installation. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\cf1\f3\'b7\tab\f1\fs24 If the compilation fails because the compiler does not find the system header files (e.g. \cf0\f2\fs20 stdio.h\cf1\f1\fs24  or \cf0\f2\fs20 windows.h\cf1\f1\fs24 ), you must set the \cf0\f2\fs20 INCLUDE\cf1\f1\fs24  and \cf0\f2\fs20 LIB\cf1\f1\fs24  environment variables to contain the paths of the compiler's header files and library files. The \cf0\f2\fs20 vcvars32.bat\cf1\f1\fs24  file takes care of this. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\cf1\f3\'b7\tab\f1\fs24 If tmake fails make sure that the \cf0\f2\fs20 TMAKEPATH\cf1\f1\fs24  environment variable is set to \cf0\f2\fs20 %QTDIR%\\tmake\\lib\\win32-msvc\cf1\f1\fs24 . \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\fs36 Developing and distributing applications with Qt non-commercial edition\par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Private users may use the Qt non-commercial edition in a non-commercial setting to produce non-commercial applications.\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 A non-commercial setting means that you must not use the package in the course of your employment or whilst engaged in activities that will be compensated. A non-commercial application is an application that cannot be sold, leased, rented or otherwise distributed for recompense.\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Private users may distribute the applications they develop as free software, i.e. they must distribute their software free of charge, include the complete source code and pass on to their users the right to copy and modify the software under the same terms.\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 A simple way to meet these requirements is to use one of the well-established open source licenses for your code. Add a file containing the license text to your source package and a short copyright notice to every source file. See  http://www.opensource.org for information on free software licensing and for a list of approved licenses. Note that although the license requires that you provide the source code, you may also include an executable version of your software for the convenience of your users.\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Shareware does \i not meet the terms of the license \i0 and may not be developed using Qt non-commercial edition.\par
\par
\f0\fs28 Qt non-commercial edition and the GNU GPL\f1\fs24\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 The GNU General Public License (GPL) is a popular free software license widely used in the Unix/Linux world. The GPL is published by the Free Software Foundation (see http://www.fsf.org). One of the key features of the license is that it does not permit the distribution of software linked to non-system libraries that are distributed under different licensing terms. Although Qt non-commercial edition is available free of charge this prohibition nonetheless applies to it. \par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 If you wish to port one of the many GPL'd Qt-based Unix applications to another operating system using the Qt non-commercial edition, you need to get that application's copyright holders to add an exception to its license. Similarly, if you develop a new application with the Qt non-commercial edition and wish to license it under the GPL you may wish to add such an exception to your license. The Free Software Foundation has provided the following wording for such exceptions:\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\li720\ri720\sb100\sa100\cf1\f1\fs24 As a special exception, <name of copyright holder> gives permission to link this program with Qt non-commercial edition, and distribute the resulting executable, without including the source code for the Qt non-commercial edition in the source distribution.\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 Note that such an exception is not required for code released under other free software licenses like the GNU LGPL and BSD-style licenses.\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 If you are uncertain regarding the licensing status of an application we recommend that you contact the copyright holders.\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\sb100\sa100\cf1\f1\fs24 For more information about the GNU GPL see the official FAQ: http://www.fsf.org/copyleft/gpl-faq.html\par
\par
\f0\fs28 The files you will need to distribute\par
\pard\nowidctlpar\cf0\fs20\par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\cf1\f3\'b7\tab\f1\fs24 You must supply your application's source code and a license file (see earlier). \par
\f3\fs20\par
\'b7\tab\f1\fs24 You may optionally supply a compiled \f2\fs20 .EXE\f1\fs24  file for your user's convenience. \par
\cf0\f0\fs20\par
\cf1\f3\'b7\tab\f1\fs24 Your users will require the \f2\fs20 QT-MT230NC.DLL\f1\fs24  file which is supplied with this package and which you may redistribute with your application.\par
\pard\nowidctlpar\cf0\f0\fs20\par
\pard\nowidctlpar\fi-360\li720\sb100\sa100\cf1\f3\'b7\tab\f1\fs24 Your users will require the \f2\fs20 MSVCRT.DLL\f1\fs24  file on their machines. The \f2\fs20 MSVCRT.DLL\f1\fs24  file is supplied by Microsoft with Visual Studio and may only be distributed in accordance with Microsoft's licensing terms. \par
\pard\nowidctlpar\sb100\sa100\par
}
 