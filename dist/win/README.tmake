		      No more hassle with makefiles

tmake is an easy-to-use tool for creating and maintaining makefiles across
many platforms and compilers. You should spend your time writing code, not
makefiles.

We wrote tmake because we spent too much time maintaining makefiles for
Windows and Unix compilers. We looked for good solutions but found none.
Therefore we made our own.

Why use tmake?
 * It lets you create makefiles in just seconds.
 * It support numerous platforms and compilers.
 * It scans C++ files for Q_OBJECT and generates rules for
   Qt moc processing.

Basically, tmake reads a project file and fills in a template. The project
file contains a list of all files in the project and typically looks like
this:

	TEMPLATE = app
	HEADERS	 = hello.h
	SOURCES	 = hello.cpp \
		   main.cpp
	TARGET	 = hello

Before you can create a makefile, tmake must know the OS and compiler you
want to create makefiles for. Set the TMAKEPATH environment variable, e.g.:

	set TMAKEPATH=c:\tmake\lib\win32-msvc
    or
	TMAKEPATH=/local/tmake/lib/irix-n32

The .pro files in the Qt distribution are tmake project files.  To create
a makefile from a .pro file, do the following:

	tmake hello.pro -o Makefile

We've also added template files for creating a Microsoft Visual C++ IDE
project. It's much easier to use tmake than to manually build a MSVC++
project. To create a MSVC++ project file, specify an override template:

	tmake -t vcapp hello.pro -o hello.dsp

tmake is very flexible because it is based on perl and can therefore be
customized in many different ways. Regular users never see the hairy perl
stuff, but advanced users can hack tmake templates to make them fit their
needs.

tmake is free software and can be downloaded from:

	ftp://ftp.troll.no/freebies/tmake/
