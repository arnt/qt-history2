Qt 4.2 introduces many new features as well as many improvements and
bugfixes over the 4.1.x series. For more details, see the online
documentation which is included in this distribution. The
documentation is also available at http://doc.trolltech.com/

The Qt version 4.2 series is binary compatible with the 4.1.x series.
Applications compiled for 4.1 will continue to run with 4.2.

****************************************************************************
*                           General                                        *
****************************************************************************

- Dropped support for MySQL version 3.

- Auto-detect PostgreSQL and MySQL using pg_config and mysql_config on UNIX
  based systems in the configure script

- Added "-system-sqlite" option to configure to use the system's SQLite library
  instead of Qt's SQLite version.

- Updated Qt's SQLite version to 3.3.6.

- Added QT_ASCII_CAST_WARNINGS define that will output a warning on implicit
  ascii to unicode conversion when set. Only works if the compiler supports
  deprecated API warnings.

- Added Q_REQUIRED_RESULT to some functions. This macro triggers a warning
  if the result of a function is discarded. Currently only supported by gcc.

- Added QDataWidgetMapper class that can be used to make widgets data aware
  by mapping them to sections of an item model.

- Added QDesktopServices class that can be used to open urls.

- Improved Accessibility for item-based views and QTextEdit.

- Added the QtUndo framework for implementing undo/redo functionality in applications.

- Numerous bugs fixed in Designer: action editor, property editor.

- QWidget added to Designer's toolbox.

- Backup file is being created by Designer while overwriting the existing file.

- Designer: Promoted widgets inherit the task menu items of the base class.

- Designer: Don't order enums alphabetically in the property editor.

- Designer, uic: Added support for more variant types:
  QStringList, QRectF, QSizeF, QPointF, QUrl, QChar, qlonglong and qulonglong.

- uic3: Add linenumbers to warnings. Make warnings know the objectName of the
  widget in Questio
  QStandardItemModel API provides a classic item-based approach to
  working with models.

- Added Qt::ForegroundRole and Qt::BackgroundRole, allowing itemviews to
  use any QBrush (not just QColor, as previously) when rendering items.

- Itemviews selections are maintained when the layout of the model changes
  (e.g. due to sorting).

- Itemviews convenience views can perform dynamic sorting of items
  when item data change.

- Added functions qrand() and qsrand() that provide thread safe rand() and srand().

- Added the Cleanlooks style for improved integration with GNOME based desktops.

- Added experimental support for Qt usage reporting ("metered licenses") 
  on Linux, Windows and MacOS X. Reporting is disabled by default. 

- Compiler warnings with mingw g++ 3.4.6 removed

- Plastique style has improved support for palettes, and now requires XRender
  support on X11 for alpha transparency.

- New style: CleanLooks, a clone of the GNOME ClearLooks style, provides
  native look for Qt applications on GNOME.

Build System
------------

Qt/X11 and Qtopia Core only:

The Qt libraries are only built once now, like in Qt 3. The _debug suffix
has been removed and Qt is built by default with optimizations.
On modern systems flags are added to the Qt build to also generate debugging
information, which is then stored in a separate .debug file. The additional
debug information does not affect the performance of the optimized code and
tools like gdb and valgrind automatically pick up the separate .debug files.
This way it is possible to get useful backtraces even with release builds of
Qt.

Make it possible to build Qt while having xcode set as your QMAKESPEC on OSX.


****************************************************************************
*                          Library                                         *
****************************************************************************

- QAbstractItemView
        Added possibility to copy elements to clipboard on read-only views.
        Improved handling of QAbstractItemModel::supportedDropActions().

- QDirModel
        Fix conversion from bytes to (kb|mb|gb) in QDirModel for display of
        file size.
- QComboBox
        Fixed drawing issues related to certain FocusPolicies.
        Now respects the ItemFlags of an Item (ItemIsEnabled,...).
        Fixed cases where popup could be shown completly on screen, but weren't.
        Added InsertAlphabetically insert policy.
        Fixed not displaying QPixmap as Icon.

- QFileDialog
        Fixed case where view mode got disabled.

- QFlags
        Added testFlag() convenience function.

- QApplication
        Added saveStateRequest() and commitDataRequest() signals so
        QApplication does not need to be subclassed for session management.
        Added a property styleSheet to set/read the application style sheet
        Support sending key events to non-widget objects.

- QAbstractItemModel
        When dropping rows only inserts rows that were actually dropped, not
        the continuous row count from first to last.
        Added supportedDragActions property which is now used by
        QAbstractItemView when starting a drag.
        When updating changed persistant index's ignore those that haven't
        actually changed.
        Fixed endian issue with createIndex().

- QAbstractItemView
	Make sure that the doubleClicked() signal is only emitted
	when the left button has been doubleclicked.
	Change setSelection(...) to work when given a non-normalized
	rectangle.
	Fixed regression for shift-selections in ExtendedSelection for
	all views.
        Added dragDropMode property and implemented move support in all of
        the views and models.
	For edit triggers SelectedClicked and DoubleClicked, only trigger
	editing when the left button is clicked.
	Trigger SelectedClicked editing on mouse release, not mouse press.
	Don't emit doubleClicked() when the clicks happened on two
	different items.
	Keyboard search can be programmatically reset by calling
	keyboardSearch() with an empty string as argument.
	Don't allow drops on items that don't have the
	Qt::ItemIsDropEnabled flag set.
	Added signals modelAboutToBeReset() and layoutAboutToBeChanged().
	Don't assert in dropMimeData() if mimeTypes() returns an
	empty list.
	Consistent behavior of drag and drop when rootIndex()
	is a valid model index.
	Made it possible to check a check box with only a single click
	when using the CurrentChanged edit trigger.
	Propagate WhatsThis event when the relevant item doesn't
	have a valid WhatsThis value.
	Added PositionAtCenter scrollHint.

- QKeySequence
		Added a set of platform dependent standard shortcuts.
		
- QListWidget/QTreeWidget/QTableWidget
        When setting flags on a item the dataChanged() signal is now emitted
        Removed Unnecessary Q_ASSERT's

- QTableWidget
        Added clearContents() function which will not reset the headers.

- QTreeWidget
        Added indexOfTopLevelItem() const function.
        Inserting of items is now faster.
        Fix crash when calling QTreeWidgetItem::setData with a negative number.

- QTreeView
        When setting the root index to be the already current root index no
        action be be taken anymore.
        When hidding items the view no longer performs a complete relayout.
        Fix possible segfault in isRowHidden()
        Significantly speed up isRowHidden() for the common case.
        Faster row painting.
        After expanding, fetchMore is called on the expanded index giving
        the model a way to dynamically populate the children.
        Fixed item being able to be expanded when all children are hidden.
        Added horizontal scrolling using left/right arrow.

- QItemSelectionModel
        Overall speed up particularly when isSelected() is used.

- QComboBox
	Fix the type of the modelColumn property from bool to int.
	Update documentation to clarify between activated(),
	highlighted() and currentIndexChanged() and what they
	actually mean.
	If the combobox isn't editable, use Qt::DisplayRole rather
	than Qt::EditRole to query the model.

- QErrorMessage
	Made qtHandler() work when the message handler is invoked
	from other threads than the GUI thread.

- QGroupBox
		Activating a groupbox by a shortcut will now show the focus rect.
	
- QHeaderView
	Use the current resize mode to determine section sizes when
	new rows are inserted.

- QHostAddress
	Added QDataStream streaming operators.

- QImageReader
	Made size() return an invalid QSize if the image I/O handler
	does not support the QImageIOHandler::Size extension.
	Added support for reading negative BMP images.

- QImageWriter
	Produce error when attempting to write an image to a device
	that is not writable.

- QListView
	Added batchSize property.
	Don't un-hide currently hidden rows when new rows are inserted.
	Fixed partial repainting bug with alternatingRowColors.
	If the resize mode has been set, don't reset it in setViewMode().

- QModelIndex
	Added flags() convenience function.

- QScrollBar
	Trigger a SliderMove action when the slider value is changed
	through a wheel event.

- QSortFilterProxyModel
	Handle source model changes (e.g. data changes, item insertion
	and removal) in a fine-grained manner, so that the proxy model
	behaves more like a "real" model.
	Added properties sortRole, filterRole and dynamicSortFilter.
	Perform stable sorting of items.
	Made dropping one item on top of another item work.
	Update persistent indexes when the layout of the
	source model changes.
	Made match() respect the current sorting and filtering.
	Forward mimeTypes() and supportedDropActions() calls to
	source model.

- QStandardItemModel
	Added an item-based API for use with QStandardItem.
	Reimplemented sort().
	Added sortRole property.

- QTableView
	Added API for spanning cells.

- QTreeView
	Scrollbar no longer disappears after removing and re-inserting
	an item while the view is hidden.
	Fixed memory corruption that could occur when inserting
	and removing rows.
	Don't draw branches for hidden rows.

- QTreeWidget
	Added invisibleRootItem().
	Made addTopLevelItems() add items in correct (not reverse) order.
	Ensure that the header is repainted instantly when
	the header data changes.

- QItemDelegate
        Use a widget's USER property to set and get the editor data.
        Removed Unnecessary Q_ASSERT's
        Add property to enable clipping when painting.
        When the model specifies a font, resolve the font over the existing
        one rather then replacing.
		Fixed issue with rendering of selected pixmaps.
        Call QItemEditorFactory with the data's userType() so that
        the factory can distinguish between multiple user types.
        Propagate Key_Enter to the editor before committing data, so the
        editor has a chance to perform custom input validation/fixup.
		
- QAbstractSpinBox
        Add a hasAcceptableInput() property. 
        Make sure fixup/validate are called for non-qt subclasses of
        QAbstractSpinBox as well.
        Fix geometry issues when toggling frame on and off for spinboxes.
        Add a property for correctionMode. 
        Add a property for acceleration.

- QLineEdit
        Unicode context menu gets shown if language extensions are present.
        No longer emitting editingFinished() if a validator is set and the
        text doesn't validate.
        Ctrl+A now triggers select all on all platforms.
        Call fixup on focusOut() if !hasAcceptableInput()

- QStackedLayout/QStackedWidget
        Crash when removing widgets fixed.
        
- QMessageBox
        Added detailedText property to be able to show additional information.

- QMetaObject
        Added userProperty().
        Added normalizedType().

- QMetaType
        Normalizes all type names before registering them.
        Handle Qt's integer typedefs (qint8, qint16, ...).

- QSqlQuery
        Added execBatch() for executing SQL commands in a batch. Currently
        only implemented for the Oracle driver.
        Fixed a case where executedQuery() would not return the executed query.

- QSqlRelationalTableModel
        Work when sorting a relational column when using the PostgreSQL driver.
        revertAll() now correctly reverts relational columns.

- QTabWidget
	Added missing Qt3Support signal selected().
        Clarify documentation for setCornerWidget().
	Draw the tab widget's frame correctly when the tab bar is hidden.
        Give the internal widgets, widgetstack and tabbar, names.

- QToolTip
        Added convenience function hideText(). Added a function showText that
        takes a QRect argument that specifies the valid area for the tooltip. E.g.
        If you move the cursor outside this area the tooltip will hide.
        Add a widget attribute to show tooltips for inactive windows.

- QVariant
        Added support for all QMetaType types.
        Added support for QMatrix as a known metatype.
        Added conversion from QBrush to QColor and QPixmap, and from
        QColor and QPixmap to QBrush.
        Fix QVariant(Qt::blue) not creating a variant of type QVariant::Color.

- QMainWindow
        Dockwidgets can be tabbed.
        When a dockwidget hovers over a mainwindow, the mainwindow animates
        to show how it will accept the dockwidget if dropped.
		Fixed issues related to insertToolBarBreak().

- QAbstractScrollArea
        Added ability to set a corner widget.
        Added support for assigning custom scroll bars.

- QLocale
        Fixed bug in the string-to-number functions which sometimes caused them
        to fail on negative numbers which contained thousand-separators.
        Implemented the numberOptions property, for specifying how
        string-to-number and number-to-string conversions should be performed.

- QMotifStyle
		Ensure that the font set on a menu item is respected.
		
- QPainter
	Fixed a crash when drawing cosmetic lines outside the paint device 
	boundaries.
	Fixed a pixel artifact when drawing cosmetic diagonal lines.
	Optimized drawing of cosmetic lines of between 315 and 360 degrees.

- quintptr and qptrdiff
        New integral typedefs have been added.

- QMutexLocker, QReadLocker, and QWriteLocker
        These classes now track the state of the lock they are
        holding. They will not unlock on destruction if unlock() has
        been called.

- QFrame
		Fixed a rendering issue when showing horizontal and vertical lines
		created using Designer.
		
- Qt::GroupSwitchModifier
        Added to the Qt::KeyboardModifiers enum. It represents
        e.g. the "AltGr" key found on many keyboards.

- Q3ListView
        Fixed possible crash in Q3ListView after calling clear().
        Fixed inconsistent drag and drop behaviour to Qt3.

- Q3Table
        Improved behaviour for combobox table elements.

- Q3ButtonGroup
        Fixed inconsistencies to Qt3 for exlusivness of elements.
        Fixed ID managment to be consistent with Qt3.

- Q3ListBox
        Fixed inconsistencies to Qt3 for selectAll().
        Fixed possible crash after deleting items.

- Q3Canvas
        Fixed several clipping bugs introduced in 4.1.0.

- Q3CanvasView
        Calling setCanvas() now always triggers a full update.

- Q3Process
        Stability fixes in Q3Process::start().

- Q3TextStream
        New class, added for compatiblity with Qt 3.

- Qt::NoDockWidgetArea
        Added to the Qt::ToolBarArea enum

- Qt::NoToolBarArea
        Added to the Qt::DockWidgetArea enum

- QEvent::KeyboardLayoutChange
        New event type. This event is sent when the keyboard layout changes.

- QObject
        QObject::thread() will always return a valid thread, even if
        the object was created before QApplication or in a non-QThread
        thread.

        When QObject::thread() is zero, events are no longer sent to
        the object (Previous versions of Qt would send posted events
        to objects with no thread; this does not happen anymore in Qt
        4.2).

- QThread
        Related to the above, QThread::currentThread() always returns
        a valid pointer (Previous versions of Qt would return zero if
        called from non-QThread threads; this does not happen anymore
        in Qt 4.2).

- QString
        Added support for Case insensitive comparisons in QString::compare()

- QWidget
        Added a property styleSheet to set/read the widget style sheet

- QWindowsStyle
	We no longer draw splitter handles in Windows style. This resolves an inconsistency with
	XP style, so that the two styles can use the same layout interchangeably. Note that splitter handles are
	fully stylable through CSS, if a custom style or handle is required.
	Disabled combo boxes now have the same background color as disabled line edits.
	
- QWindowsXPStyle
	QPushButton looks more native when pressed.
	
- QWorkspace
        Resolved issue causing the maximized controls to overlap with menu in
        reverse mode.
        Fixed issue where child windows could grow a few pixels when restoring
        geometry in certain styles.
        Ensure that right-to-left layout is respected when positioning new
        windows.
        Crash fix when not having a titleBar.
		
- QCursor
        Added Qt::OpenHandCursor and Qt::ClosedHandCursor.

- QDialog
        Stability improved for when the default button is deleted.

- QSystemTrayIcon
        New class that adds an icon into the system tray

- QCompleter
        New class that provide auto completion support.

- QMenu
        Made it possible for popup menus to cover the taskbar in Windows and KDE.
		
- QMessageBox
        API overhaul to support for more than 3 buttons
        Added support to display buttons in platform dependant order
        Added support to display informative text using informativeText property
        Added detailedText property to display detailed text

- QButtonGroup
        Added pressed() and released() signals.
        Fix a bug with when removing buttons from button groups. Remove the
        internal mapping as well.

- QAbstractButton
        Returns QPalette::Button and QPalette::ButtonText for backgroundRole()
        and foregroundRole(), respectively, rather than QPalette::Background
        and QPalette::Foreground.

- QStackedWidget
		Fixed issue where the size hint of the current widget would not be respected.
		
- QStatusBar
        Added insertWidget().
        Added insertPermanentWidget().
		
- QWhatsThis
		Improved look and feel. More native appearence on Windows.
		
- QGLFormat
        Added openGLVersionFlags() function.

- QOpenGLPaintEngine
        Now supports all composition modes of QPainter natively through OpenGL.


- QDateTime 
        Fix a parsing issue in QDateTime::fromString(const QString &s,
        Qt::DateFormat f)

- QDateTimeEdit
        Added a new property to show the calendar popup for choosing th
        Add a setSelectedSection function.

- QImageReader
        Optimizations to ensure that the most likely formats and plugins are
        tested first for reading unknown image formats.
        Improved reading of BMP images from sequiental QIODevices.
        Support for scaledSize() for JPEG images.
        It is now possible to query the supported options of an image by
        calling supportedOptions().
        Stability fixes for the built-in XBM reader.

- QImageWriter
        It is now possible to query the supported options of an image by
        calling supportedOptions().

- QPixmap
        load() and save() no longer require you to pass the format string.

- QTimeLine
        New class for controlling a time line.

- QTextDocument
        Added convenience functions:
            setTextWidth()/textWidth()
            idealWidth()
            size()
            adjustSize()
            drawContents()
            blockCount(),
            setMaximumBlockCount()/maximumBlockCount()
        Added support for forced page breaks before/after paragraphs and tables.
        Added CSS support to the HTML import.
        Added defaultStyleSheet property that is applied automatically for every HTML import.
        Performance improvements in the HTML import, especially with tables.
        Improved pagination of tables across page boundaries.

- QTextTableCell
        Added setFormat() to set the cell's character format

- QTextCursor
        Added columnNumber(), blockNumber() and insertHtml() convenience functions.

- QTextBrowser
        Fix various bugs with the handling of relative URLs and custom protocols.
        Added isBackwardAvailable/isForwardAvailable/clearHistory functions.

- QTextEdit
        Fix append() to use the current character format.
        Change mergeCurrentCharFormat() to behave as QTextCursor::mergeCharFormat,
        without applying the format also to the word under the cursor.
        QTextEdit now ensures that the cursor is visible the first time the widget
        is shown or when replacing the contents entirely with setPlainText/setHtml.
        Re-added setText() as non-compatibility function with well-defined heuristics.
        Added a moveCursor() convenience function.
        Change default margin from 4 to 2 pixels for consistency with QLineEdit.
        Added support for extra selections.

- QTextFormat
        Fix the default value for QTextBlockFormat::alignment() to return a logical
        left alignment instead of an invalid alignment.
        Added UnderlineStyle formatting, including SpellCheckUnderline.

- QObject
        Added support for dynamically added properties through setProperty()/property()
        and dynamicPropertyNames().
        Fix a crash when a child deletes its sibling.

- QSyntaxHighlighter
        Various performance improvements.

- QFontDatabase
        Added functions for adding application local fonts at run-time
        (addApplicationFont, removeApplicationFont, applicationFontFamilies, etc.)

- QLabel
        Added support for text selection and hyperlinks.

- QMenu
        Support widgets in menus through QWidgetAction
        Collapse multiple consecutive separators. This can be turned off with the
        collapsibleSeparators property.

- QFontMetrics/QFontMetricsF
        Added elidedText() function.

I/O and Networking
------------------

- QFileSystemWatcher
        New class that watches file and directories for changes.

- QSettings
        Fixed bug causing bytearrays to be incorrectly stored on Win95/98/Me.
        Store keysequences as readable entries in .ini files.

- QUrl
        Added errorString().
        Properly parsing of +' when calling queryItems().
        Properly parsing of authority when calling setAuthority().
        Added missing implementation of QUrl::StripTrailingSlash in
        QUrl::toEncoded().

- QFtp
        Improved parsing of the modified date in list().
        Ensure that all data has been received when downloading, before the
        data connection is closed.
        Support for FTP servers that reject commands with a 202 response.

- QHttpHeader
        Improved support for case-insensitive header searching.

- QHttp
        Support percent encoded paths when used with a proxy server.
        Improved handling of unexpected remote socket close.

- QTextCodec
        Allow accessing locale-dependent features of Qt (such as
        QFile::exists()), during global destruction.

- QTextStream
        Added QTextStream::pos(), which returns the current byte-position
        of the stream.

- QProcess
        Fixed a lock-up on Windows when writing data to a dead child process.

- QDir
        Improved support for i18n file paths in QDir::tempPath().
        Improved support for UNC paths when the application is run from a
        share.
        mkpath() now properly supports UNC paths.
        Obsolete QDir::convertSeparators().
        Introduce QDir::toNativeSeparators() and QDir::fromNativeSeparators().
        Added QDebug streaming operator.

- QIODevice
        Fixed a casting bug in QIODevice::getChar().
        Now uses an internal buffer when opened in buffered mode, which
        improves reading performance significantly. Some behavioral
        differences have been introduced.

- QFile
        Improved support for UNC paths when the application is run from a
        share.
        Added support for physical drives (e.g., "//./Physical01").
        Ensure that QFile::error() and QIODevice::errorString() are set
        whenever possible.

- QFileInfo
        Improved support for UNC paths when the application is run from a
        share.
        Improved support for drive-local relative paths, such as "D:".

- QTemporaryFile
        Add support for file extensions and other suffixes.
        Fixed one constructor which could corrupt the temporary file path.

- QUdpSocket
        Fixes for UDP broadcasting on Windows.

- QTcpSocket
        Fixed a rare data corruption problem occurring on heavily loaded
        windows servers.

Database drivers
-------------------------

- Interbase driver
        Fix data truncation for 64 bit integers on 64 bit operating systems.

- MySQL driver
        When using MySQL 5.0.7 or larger, let the server do the text encoding
        conversion.
        Added UNIX_SOCKET connection option.
        Improved handling of TEXT fields.

- OCI driver
        Improved speed for meta data retrieval.
        Fix potential crash on Windows with string OUT parameters.
        Improve handling of mixed-case table and field names.

- ODBC driver
        Improved error reporting if driver doesn't support static result sets.
        Improved support for the Sybase ODBC driver.

- SQLite driver
        Also return temporary tables when using QSqlDatabase::tables().
        Improved handling of mixed-case field names.

QTestLib
-------------------------

- Added "-silent" options that outputs only test failures and warnings.
- Reset failure count when re-executing a test object
- Added nicer output for QRectF, QSizeF and QPointF

Platform-Specific changes
-------------------------

Qtopia Core:

- Fixed issue with the VNC driver that prevented client applications to connect
  in some cases.
- Fixed a leak of shared memory segments in the VNC driver.
- Reduced CPU consumption in the VNC driver.
- Improved memory usage when using screen with depth less than 16 bits.
- Optimized CPU usage when widgets are partially hidden.
- Improved error handling when clients connects to the server.
- Introduced the QWSWindowSurface as a technique to create accelerated 
  QPaintEngines.
- Fixed leakage of semaphore arrays during an application crash.
- Fixed a build issue preventing the use of mmx instructions when available.
- Implemented the Qt::WA_PaintOnScreen flag for top-level widgets.
- Removed internal limitation of 10 display servers.
- Implemented support for multiple screens.
- Fixed the -exceptions configure switch.
- Implemented dynamic selection of the underlying driver for the VNC and 
  Transformed screen drivers.
- Improved detection of 18 bit framebuffers.
- Improved performance when using a rotated screen with 18 or 24 bit depth.
- New improved algorithm for mouse calibration which works for all screen
  orientations.
- Fixed an issue of getting delayed mouse events when using the vr41xx driver.
- Improved event compression in the vr41xx mouse handler.
- Fixed sn issue causing mouse release events with wrong positions when using a
  calibrated and filtered mouse handler on a rotated screen.
- Fixed 16 bit screens on big-endian CPUs.
- Implemented QWSEmbedWidget which enables window embedding.
- Made the tty device configureable for the LinuxFb screen driver.
- Improved speed of drawing gradients.
- Fixed a deadlock issue when using drag and drop and a calibrated mouse 
  handler.

UNIX:

- QApplication
        Use Glib's mainloop functions when available to implement event dispatching.

- QPlastiqueStyle
		Added support for picking up KDE icons on systems that support it.
		
- QTextCodec
        Use iconv(3) when available to implement the codec returned by
        QTextCodec::codecForLocale(). The new codec's name is "System"
        (i.e. QTextCodec::codecForLocale()->name() returns "System"
        when iconv(3) support is enabled).

AIX:

- Use "-qmkshrobj" compiler option to generate shared libraries instead of
  the deprecated makeC++SharedLib tool.

X11:

- Motif Drop support
        Support for drops from Motif applications has been refactored
        and is now working properly. QMimeData reports non-textual
        data offered in Motif Drops using a mime-type with the form
        "x-motif-dnd/ATOM", where ATOM is the name of the Atom offered
        by the Motif application.

-       Added support to internally detect the current desktop environment.

- Font rendering
        Stability fixes when rendering huge scaled fonts.

- QCursor
        Don't crash if the X11 context has been released before the cursor
        is destructed.

Demos / Examples

        Created a new directory containing desktop examples and moved the
        Screenshot example into it.
        New network example. Chat client which uses QUdpSocket to broadcast
        on all QNetworkInterface's interfaces to discover its peers.
        Spreadsheet demo now uses the  QItemDelegate, QCompleter and 
        QDateTimeEdit with calendar Popup.

Documentation

        Updated information about the mailing list to be used for porting
        issues (qt-interest).
Tools

	Fixed an issue preventing QVFb from starting on some systems.

Windows:
		Ensured that widgets do not show themselves in a hover state if a popup has focus.
		Fixed issues with rendering system icons on 16-bit displays.
		Fixed issue where fonts or colors would be reset on the application whenever windows produced 
		a WM_SETTINGSCHANGE event.
		
- QFileDialog
		Added support for relative filepaths in native dialogs.

- Designer
		Docked Window mode is now the default on Windows.

- Improved windows mime handling
		Resolved an issue related to drag and drop of attachments from some applications.
		Resolved an issue where pasting html into some applications would include parts
		of the clipboard header.
		Improved support for drag and drop of unicode text.

	
****************************************************************************
*                          Tools                                           *
****************************************************************************
Assistant
        Middle clicking on links will open up new tabs.
        Added "Find as you type" feature to search documentation page.
        Added "Sync with Table Of contents" to select the current page in the 
        contents list.

Moc
        Fixed support for enums and flags in classes that are part in namespaces.

