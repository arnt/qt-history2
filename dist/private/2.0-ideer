NYE KLASSER
-----------

- en fin Iterator-klasse som alle de andre iteratorene arver


DESIGNENDRINGER
---------------

- hacke QLineEdit til å kunne arves


FUNKSJONSENDRINGER
------------------

- QTableView const: cellWidth, cellHeight, totalWidth,  totalHeight, .....
    * leave the virtuals as they are (non const) and make const overloads
	when all compilers can handle differentiation by const.
- QComboBox::activated() rename to selected()
    * Could do (runtime moc reports error), but not worth the cost to users

> There doesn't seem to be an easy way to get a pointer to the active page
> from a QTabDialog object.  There should be some function like:
> 
> QWidget* QTabDialog::activePage()
> {
> }
    * QTabBar::currentTab() can do some of it.  User shouldn't need this.
Also, the stuff with the buttons should be redesigned, or at least
there should be a class which does not impose so many design choices
on the users. And the pointers to the buttons should be available
(protected).

AKSESSENDRINGER
---------------

- QObject::eventFilter protected overalt

- QWidget::setEnabled() og tusen andre nye slots
    * Some done.


ENDRINGER UTSATT PGA BINAERKOMPATIBILITET
-----------------------------------------

QPaintDevice::x__Display() -> x11Display()
    * Both exist for some reason.

ENGLISH THINGS
--------------

Provide auto-expanding(?):
    (for LHS)
    type& QArray::operator[](int) 
    (for RHS)
    const type& QArray::operator[](int) const
Honour more brush settings in drawText.  Currently we do all the necessary
 work anyway in order to implement GrayText.
Implement a QDict<KeyType,StoredType>, as per support/1171.

From qt-interest: I wrote a sizeHint() function in a widget derived
from QListBox. In sizeHint(), I thought I could use
QListBox::maxItemWidth(), but sizeHint() is a const function and
maxItemWidth() is not. Shouldn't maxItemWidth() be const?
    * see QTableView above

EAa: We should probably strive to match Win Look & Feel even closer
     *********

Use "top" and "bottom" logical color names rather than "light" and
 "dark" physical names. THEN, use Motif's algorithm for setting those
  colours (it's not just "lighter" and "darker", see -bg white and -bg black)
Support for Multiple X11 displays.  Tricky.  Not very useful.
Completely rework "modality".
    - Remove "parent widget is window to centre wrt if modal"
	- add real "widget to centre wrt" functionality.
All QApplication statics should be virtual methods - use qApp->... to
 access them.  This allows for overriding, and paves the way for supporting
 multiple QApplication objects.
Add the "auto completion" concept to the validator concept.
PNG.  MNG MNG MNG.  !GIF.  Unisys die die die.
Light-weight KDE stuff (eg. respecting colours, style, etc.)
QListView *Event() redirection is BAD.  Especially since QScrollView
 already does something similar.
Q*Dict must use QString, so the QIntDict and QPtrDict hackery
 needs to be done some other way (eg. implement QDictTemplate that
 can use any key type)
Add activate_signal(const char* signal, QString) for fast QString signals
Split QCString, QByteArray, etc. out of qstring.h, making it cheaper to #include.
    * Difficult, since QByteArray is a typedef - ANSI C++ forbids
Move QString(int) to private!!!
DND QPictures - as WMF/etc.?
QRegion transformations.  Windows can do some stuff.
Redo QT_H stuff for all header files.


ARNT'S THINGS:
--------------
> the signals applyButtonPressed(), cancelButtonPressed() and
> defaultButtonPressed() in QTabDialog are somewhat misnamed, because
> they are emitted when the corresponding button is clicked, not pressed
> (i.e., emits the signal clicked(), not pressed()). 

How about a possibility for adding a WhatsThis button to QTabDialog,
beside OK, Cancel etc. (lro)
