Qt 3.1 introduces new features as well as many improvements over the
3.0.x series. This file gives an overview of the main changes since
version 3.0.5.  For further detail see the online documentation which
is included in this distribution, and also available on
http://doc.trolltech.com/

The Qt version 3.1 series is binary compatible with the 3.0.x series -
applications compiled for 3.0 will continue to run with 3.1.

****************************************************************************
*			    General					   *
****************************************************************************

Qt 3.1 is prepared for the creation of scriptable
applications. Increasingly often, application resellers and end-users
desire an easy-to-use script interface to the application, to be used
for creating and performing custom operations. With Qt Script for
Applications (QSA) (to be relased after 3.1), such script interfaces
can easily be added to Qt-based applications. QSA consists of a script
engine, a script IDE, and script bindings to the Qt API.

The visual GUI builder, Qt Designer, has improved usability in several
aspects. The earlier, somewhat cluttered toolbars have been cleaned
up. The property editor can operate on multiple widgets
simultaneously. Designer now also offers proper WYSIWYG support for
using QWidgetStacks in the created GUIs.
##### more!

Qt Assistant, the Qt help documentation browser, got support for
adding custom documentation sets. This makes it easy to use it as the
help browser for customer applications. Additionally Qt Assistant
supports full text search in the documentation now.

As the industry is phasing out Motif, more and more companies are
finding themselves in a situation where they need a gradual migration
path over to Qt. Instead of holding up releases for a longer time
while the whole legacy code base is being ported, companies naturally
desire to do the porting work module by module, and release hybrid
applications during the process. To meet this demand, Qt 3.1
introduces powerful support for Qt and Motif coexistence in the same
application (this obsoletes the earlier, rudimentary Qt Xt/Motif
Extension).

On the MS Windows platform, there is a strong demand to use the Qt and
ActiveX technologies together. People are also requesting clean and
simple Qt APIs to replace the native APIs for dealing with COM and
ActiveX. Qt 3.1 introduces the ActiveQt module, which contains both
support for hosting ActiveX controls in a Qt application, as well as
support for building ActiveX controls with Qt (e.g. Internet Explorer
plugins).

Qt/Mac, the Mac OS X version of Qt, was an instant success when it was
introduced with version 3.0. In 3.1, many improvements have been added
to further integrate Qt with the Mac OS X environment, e.g. Appearance
Manager, anitaliased text drawing, and user settings. The Qt OpenGL
support is greatly improved, and uses the hardware-accellerated
drivers.

Last, but not least: As all major Qt releases, the 3.1 release adds
hundreds of improvements in the existing class library. Here is a
brief summary of some of the bigger changes:

- QTextEdit got support for a new text format called LogText. This is
a performance and memory optimized format that is useful for
multicolored log viewers that need to display larger amounts of data
fast.

- A new class QSyntaxHighlighter makes it both easy and efficient to
add syntax highlighting capabilities to a QTextEdit

- QHttp and QFtp - previously "only" implementations of the
QNetworkProtocol - have been extented to stand on their own merits. If
you missed flexibility in the network protocol abstractions, QHttp and
QFtp is the solution.

- QAccel - the class handling keyboard shortcuts - is now able to
handle clashing accelerators gracefully.  In the case of a clash, a
new signal activatedAmbiguously() is emitted. Classes that uses
QAccel, like QButton and QPopupMenu, make use of this new
functionality. Futhermore QAccel is able to handle multi key sequences
known from editors like GNU Emacs, e.g. "Ctrl+X,Ctrl+F".

- QClipboard was extended to simplify data exchange between programs. ###

- Thread support - almost all methods in the tools classes have been
made reentrant. QApplication::postEvent() and a few other methods are
now threadsafe if Qt is compiled as a multithreaded library. Added
a QMutexLocker class to simplify locking and unlocking of mutextes.

- Input methods - Add a selectionLength() method to QIMEvent, handle
japanese compositions correctly. Added support for AIMM based input
methods (those working on non asian versions of Win95/98/ME).

- SQL module - added support for prepared query execution and value
binding. Among other things, this makes it possible to write large
BLOBs (> 2 KB) to Oracle databases, and write Unicode strings to SQL
Server databases.


****************************************************************************
*			   Library					   *
****************************************************************************

New classes
================================

- QIconFactory
- QOCI9Result
- QMutexLocker
A simple class to make handling of Mutex locking and unlocking easier.

- QBackInsertIterator
- QSyntaxHighlighter
- QEventLoop


QAction
------------------
New functions:
	void setVisible( bool );
	bool isVisible() const;

QCanvas
------------------
New functions:
	void invalidate()
	bool isValid() const

QColorDialog
------------------
New functions:
	static void setStandardColor( int, QRgb )

QAccel
------------------
New signals:
	void activatedAmbiguously( int id )

QApplication
------------------
Handling of the event loop has been moved to the QEventLoop class,
making the integration of other toolkits with Qt easier.


New functions:
	QEventLoop *eventLoop() const
	void setEventLoop( QEventLoop * )
	QString sessionKey() const

QClipboard
------------------
New functions:
	void clear( Mode mode )
	bool supportsSelection() const
	bool ownsSelection() const
	bool ownsClipboard() const
	QString text( Mode mode )  const
	QString text( QCString& subtype, Mode mode ) const
	void setText( const QString &, Mode mode )
	QMimeSource *data( Mode mode ) const
	void setData( QMimeSource*, Mode mode )
	QImage image( Mode mode ) const
	QPixmap pixmap( Mode mode ) const
	void setImage( const QImage &, Mode mode )
	void setPixmap( const QPixmap &, Mode mode )

QDesktopWidget:
------------------
New functions:
	const QRect& screenGeometry( QWidget *widget ) const
	const QRect& screenGeometry( const QPoint &point ) const
	const QRect& availableGeometry( int screen ) const
	const QRect& availableGeometry( QWidget *widget ) const
	const QRect& availableGeometry( const QPoint &point ) const

QImEvent
------------------
New functions:
	in selectionLength() const

QIconSet
------------------
New functions:
	void installIconFactory( QIconFactory *factory )

QImage
------------------
New functions:
	static QImage fromMimeSource( const QString& abs_name )

QMetaObject
------------------
New functions:
	QStrList enumeratorNames( bool super ) const
	int numEnumerators( bool super ) const
	static bool hasMetaObject( const char *class_name )

QMenuData
------------------
New functions:
	bool isItemVisible( int id ) const;
	void setItemVisible( int id, bool visible );
Both functions are inherited by QMenuBar and QPopupMenu


QPaintDevice
------------------
New functions (x11 only):
	static Qt::HANDLE x11AppRootWindow()
	static int x11AppDepth( int screen )
	static int x11AppCells( int screen )
	static Qt::HANDLE x11AppRootWindow( int screen )
	static Qt::HANDLE x11AppColormap( int screen )
	static void *x11AppVisual( int screen )
	static bool x11AppDefaultColormap( int screen )
	static bool x11AppDefaultVisual( int screen )
	static int x11AppDpiX( int )
	static int x11AppDpiY( int )
	static void x11SetAppDpiX( int, int )
	static void x11SetAppDpiY( int, int )

QPicture
------------------
New functions:
	void setBoundingRect( const QRect &r )


QPixmap
------------------
New functions:
	bool hasAlpha() const
	static QPixmap fromMimeSource( const QString& abs_name )

QPrinter
------------------
New functions:
	void setMargins( uint top, uint left, uint bottom, uint right )
	void margins( uint *top, uint *left, uint *bottom, uint *right ) const

Improvements:
	Handle masked images and pixmaps correctly. Add code to handle
	asymmetrical printer margins correctly.

QSessionManager
------------------
New functions:
	QString sessionKey() const

QStyleOption
------------------
New functions:
	QStyleOption(QCheckListItem* i)
	QCheckListItem* checkListItem() const

New enums values:
	PE_CheckListController, PE_CheckListIndicator, PE_CheckListExclusiveIndicator, PE_PanelGroupBox
	CE_MenuBarBackground
	PM_CheckListButtonSize
	CT_TabBarTab, CT_Slider, CT_Header, CT_LineEdit
	SH_GroupBox_TextLabelVerticalAlignment

QThread
------------------
New functions:
	void terminate()

QTranslator
------------------
New functions:
	bool load( const uchar *data, int len )

QVariant
------------------
New functions:
	QVariant( const QPen& )
	const QPen toPen() const
	QPen& asPen()
	bool isNull() const

New enum values:
	KeySequence, KeySequence, Pen

QWidget
------------------
New functions:
	bool isFullScreen() const
	void setSizePolicy( QSizePolicy::SizeType hor, QSizePolicy::SizeType ver, bool hfw = FALSE )

New enum values:
	AncestorOrigin

QWMatrix
------------------
Two different transformation modes for painter transformations are
now available. See QWmatrix documentation for details.

New functions:
	QPointArray mapToPolygon( const QRect &r ) const
	double det() const
	static void setTransformationMode( QWMatrix::TransformationMode m );
	static TransformationMode transformationMode();

New enum:
	TransformationMode { Points, Areas }

QFtp
------------------
While still remaining a subclass of QNetworkProtocol, QFtp can be now
used directly for more advanced FTP operations. Look at the Qt
Reference Documentation for details about the API.

QHttp
------------------
While still remaining a subclass of QNetworkProtocol, QHttp can be now
used directly for more advanced HTTP operations. Look at the Qt
Reference Documentation for details about the API.

Related new classes:
	QHttpHeader
	QHttpResponseHeader
	QHttpRequestHeader

QOCIResult
------------------
New functions:
	bool prepare( const QString& query )
	bool exec()

QODBCResult
------------------
New functions:
	bool prepare( const QString& query )
	bool exec()
	bool fetchPrior()

QSqlCursor
------------------
New functions:
	void setValue( int i, const QVariant& val )
	void setValue( const QString& name, const QVariant& val )

QSqlDriver
------------------
New enum values:
	Unicode, PreparedQueries
	
QSqlQuery
------------------
New functions:
	bool isForwardOnly() const
	void setForwardOnly( bool forward )
	bool exec()
	bool prepare( const QString& query )
	void bindValue( const QString& placeholder, const QVariant& val )
	void bindValue( int pos, const QVariant& val )
	void addBindValue( const QVariant& val )

QTableSelection
------------------
New functions:
	QTableSelection( int start_row, int start_col, int end_row, int end_col )


QTable
------------------
New properties:
	int numSelections

New functions:
	void selectCells( int start_row, int start_col, int end_row, int end_col )
	void selectRow( int row )
	void selectColumn( int col )
	void updateHeaderStates()
	void setRowLabels( const QStringList &labels )
	void setColumnLabels( const QStringList &labels )

QCString
------------------
New functions
    	QCString    &replace( char c, const char *after )
    	QCString    &replace( const char *, const char * )
    	QCString    &replace( char, char )

New global functions
	QByteArray qCompress( const uchar* data, int nbytes )
	QByteArray qUncompress( const uchar* data, int nbytes )
	QByteArray qCompress( const QByteArray& data )
	QByteArray qUncompress( const QByteArray& data )
Improvements:
	Speed optimisations in lots of the old search&replace
	functions.

QDate
------------------
New functions:
	int weekNumber( int *yearNum = 0 ) const
	static QDate currentDate( Qt::DateTimeSpec )

QTime
------------------
New functions:
	static QTime currentTime( Qt::DateTimeSpec )

QDateTime
------------------
New functions:
	static QDateTime currentDateTime( Qt::DateTimeSpec )

QFileInfo
------------------
New functions:
	bool isHidden() const

QPtrList
------------------
New functions:
	bool replace( uint i, const type *d )

QRegExp
------------------
New functions:
	QString errorString()
	static QString escape( const QString& str )
	int numCaptures() const

QSettings
------------------
New functions:
	QSettings( Format format )
	void setPath( const QString &domain, const QString &product, Scope = User )
	void beginGroup( const QString &group )
	void endGroup()
	void resetGroup()
	QString group() const

New enums: 
	Format { Native = 0, Ini }
	Scope { User, Global }

QChar
------------------
Updated Unicode tables to Unicode-3.2


QString
------------------
New functions:
	QString &append( const QByteArray & )
	QString &append( const char * )
	QString &prepend( const QByteArray & )
	QString &prepend( const char * )
	QString &remove( QChar c )
	QString &remove( char c )
	QString &remove( const QString & )
	QString &remove( const QRegExp & )
	QString &remove( const char * )
	QString &replace( uint index, uint len, QChar )
	QString &replace( uint index, uint len, char c )
	QString &replace( QChar c, const QString & )
	QString &replace( char c, const QString & after )
	QString &replace( const QString &, const QString & )
	QString &replace( QChar, QChar )
	QString &operator+=( const QByteArray &str )
	QString &operator+=( const char *str )
	static QString fromUcs2( const unsigned short *ucs2 )
	const unsigned short *ucs2() const

Improvements:
	find, findRef, contains use either a fast hashing
	algorithmen (for short input) or an optimized Boyer-Moore
	implementation. Lots of smaller performance optimisations.

QTextStream
------------------
New functions:
	QTextCodec *codec()

QDateTimeEdit:
------------------
New functions:
	int display() const
	void setDisplay( int )

New enum:
	Display { Hours = 0x01, Minutes = 0x02, Seconds = 0x04, Reserved = 0x08, AMPM = 0x10 }

QFrame:
------------------
New enum value:
	GroupBoxPanel = 0x000c

QGroupBox
------------------
New properties:
	bool flat

New functions:
	bool isFlat() const
	void setFlat( bool b )

QListBox
------------------
New functions:
	QListBoxItem* selectedItem() const

QListView
------------------
New functions:
	int sortColumn() const

QSlider
------------------
New functions:
	void addLine() ( as slot)
	void subtractLine() (as slot)

QTextBrowser
------------------
New functions:
	void sourceChanged( const QString& )
	void anchorClicked( const QString&, const QString& )

QTextEdit
------------------
QTextEdit offers another TextFormat (LogText), which is optimized
(speed and memory) for displaying large read-only textes normally used
for logging.

New properties:
	bool allowTabs

New functions:
	QString anchorAt( const QPoint& pos, AnchorAttribute a )
	void setAllowTabs( bool b )
	bool allowTabs() const
	void insert( const QString &text, uint insertionFlags = CheckNewLines | RemoveSelected )

New signals:
	void clicked( int parag, int index )
	void doubleClicked( int parag, int index )

New enums:
	TextInsertionFlags { RedoIndentation = 0x0001, CheckNewLines = 0x0002, RemoveSelected = 0x0004 }

New enum values:
	AtWordOrDocumentBoundary

QToolButton
------------------
New properties:
	TextPosition textPosition

New functions:
	TextPosition textPosition() const
	void setTextPosition( TextPosition pos )

New enums:
	TextPosition{ Right, Under }

QTooltip
------------------
New functions:
	static void setWakeUpDelay(int)

QWhatsThis
------------------
New functions:
	static void setFont( const QFont &font )

QDomDocument
------------------
New functions:
	QString toString( int ) const
	QCString toCString( int ) const

QFont on X11 
------------------ 
Improvements:
	Safe handling of huge font sizes. Added support for the new
	Xft2 font library on XFree-4.x.

QRegion on X11 
------------------ 
Improvements:
	Removed the 16 bit size limitation

