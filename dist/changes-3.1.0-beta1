Qt 3.1 introduces new features as well as many improvements over the
3.0.x series. This file gives an overview of the main changes since
version 3.0.5.  For further detail see the online documentation which
is included in this distribution, and also available on
http://doc.trolltech.com/

The Qt version 3.1 series is binary compatible with the 3.0.x series -
applications compiled for 3.0 will continue to run with 3.1.

****************************************************************************
*			    General					   *
****************************************************************************

Qt 3.1 is prepared for the creation of scriptable
applications. Increasingly often, application resellers and end-users
desire an easy-to-use script interface to the application, to be used
for creating and performing custom operations. With Qt Script for
Applications (QSA) (to be relased after 3.1), such script interfaces
can easily be added to Qt-based applications. QSA consists of a script
engine, a script IDE, and script bindings to the Qt API.

The visual GUI builder, Qt Designer, has improved usability in several
aspects. The earlier, somewhat cluttered toolbars have been cleaned
up. The property editor can operate on multiple widgets
simultaneously. Designer now also offers proper WYSIWYG support for
using QWidgetStacks in the created GUIs.

Qt Assistant, the Qt help documentation browser, got support for
adding custom documentation sets. This makes it easy to use it as the
help browser for customer applications. Additionally Qt Assistant
supports full text search in the documentation now.

As the industry is phasing out Motif, more and more companies are
finding themselves in a situation where they need a gradual migration
path over to Qt. Instead of holding up releases for a longer time
while the whole legacy code base is being ported, companies naturally
desire to do the porting work module by module, and release hybrid
applications during the process. To meet this demand, Qt 3.1
introduces powerful support for Qt and Motif coexistence in the same
application (this obsoletes the earlier, rudimentary Qt Xt/Motif
Extension).

On the MS Windows platform, there is a strong demand to use the Qt and
ActiveX technologies together. People are also requesting clean and
simple Qt APIs to replace the native APIs for dealing with COM and
ActiveX. Qt 3.1 introduces the ActiveQt module, which contains both
support for hosting ActiveX controls in a Qt application, as well as
support for building ActiveX controls with Qt (e.g. Internet Explorer
plugins).

Qt/Mac, the Mac OS X version of Qt, was an instant success when it was
introduced with version 3.0. In 3.1, many improvements have been added
to further integrate Qt with the Mac OS X environment, e.g. Appearance
Manager, anitaliased text drawing, and user settings. The Qt OpenGL
support is greatly improved, and uses the hardware-accellerated
drivers.

Last, but not least: As all major Qt releases, the 3.1 release adds
hundreds of minor improvements in the existing class library.


****************************************************************************
*			   Library					   *
****************************************************************************

New classes
================================

- QIconFactory
- QObjectUserData


QCanvas
------------------
New functions:
	void invalidate()
	bool isValid() const

QUtf{8,16}Codec
------------------
New functions:
	QString toUnicode(const char* chars, int len) const

QColorDialog
------------------
New functions:
	static void setStandardColor( int, QRgb )

QFileDialog
------------------
New functions:
	bool isReadable( const QString & filename ) #####

QIconViewItem
------------------
New functions:
	QString tempText() const

QAccel
------------------
New signals:
	void activatedAmbiguously( int id )

QApplication
------------------
New functions:
	QEventLoop *eventLoop() const
	void setEventLoop( QEventLoop * )
	QString sessionKey() const

QClipboard
------------------
New functions:
	void clear( Mode mode )
	bool supportsSelection() const
	bool ownsSelection() const
	bool ownsClipboard() const
	QString text( Mode mode )  const
	QString text( QCString& subtype, Mode mode ) const
	void setText( const QString &, Mode mode )
	QMimeSource *data( Mode mode ) const
	void setData( QMimeSource*, Mode mode )
	QImage image( Mode mode ) const
	QPixmap pixmap( Mode mode ) const
	void setImage( const QImage &, Mode mode )
	void setPixmap( const QPixmap &, Mode mode )

QDesktopWidget:
------------------
New functions:
	const QRect& screenGeometry( QWidget *widget ) const
	const QRect& screenGeometry( const QPoint &point ) const
	const QRect& availableGeometry( int screen ) const
	const QRect& availableGeometry( QWidget *widget ) const
	const QRect& availableGeometry( const QPoint &point ) const

QKeyEvent
------------------
New functions:
	in selectionLength() const

QIconSet
------------------
New functions:
	void installIconFactory( QIconFactory *factory )

QImage
------------------
New functions:
	static QImage fromMimeSource( const QString& abs_name )

QMetaObject
------------------
New functions:
	QStrList enumeratorNames( bool super ) const
	int numEnumerators( bool super ) const
	static bool hasMetaObject( const char *class_name )

QObject
------------------
New functions:
	static uint registerUserData()
	void setUserData( uint id, QObjectUserData* data )
	QObjectUserData* userData( uint id ) const

QPaintDevice
------------------
New functions:
	static Qt::HANDLE x11AppRootWindow()
	static int x11AppDepth( int screen )
	static int x11AppCells( int screen )
	static Qt::HANDLE x11AppRootWindow( int screen )
	static Qt::HANDLE x11AppColormap( int screen )
	static void *x11AppVisual( int screen )
	static bool x11AppDefaultColormap( int screen )
	static bool x11AppDefaultVisual( int screen )
	static int x11AppDpiX( int )
	static int x11AppDpiY( int )
	static void x11SetAppDpiX( int, int )
	static void x11SetAppDpiY( int, int )

QPicture
------------------
New functions:
	void setBoundingRect( const QRect &r )


QPixmap
------------------
New functions:
	bool hasAlpha() const
	static QPixmap fromMimeSource( const QString& abs_name )

QPrinter
------------------
New functions:
	void setMargins( uint top, uint left, uint bottom, uint right )
	void margins( uint *top, uint *left, uint *bottom, uint *right ) const

QSessionManager
------------------
New functions:
	QString sessionKey() const

QStyleOption
------------------
New functions:
	QStyleOption(QCheckListItem* i)
	QCheckListItem* checkListItem() const

New enums values:
	PE_CheckListController, PE_CheckListIndicator, PE_CheckListExclusiveIndicator, PE_PanelGroupBox
	CE_MenuBarBackground
	PM_CheckListButtonSize
	CT_TabBarTab, CT_Slider, CT_Header, CT_LineEdit
	SH_GroupBox_TextLabelVerticalAlignment

QThread
------------------
New functions:
	void terminate()

QTranslator
------------------
New functions:
	bool load( const uchar *data, int len )

QVariant
------------------
New functions:
	QVariant( const QPen& )
	const QPen toPen() const
	QPen& asPen()

New enum values:
	KeySequence, KeySequence, Pen

QWidget
------------------
New functions:
	QPoint backgroundOffset() const
	bool isFullScreen() const
	void setSizePolicy( QSizePolicy::SizeType hor, QSizePolicy::SizeType ver, bool hfw = FALSE )

New enum values:
	AncestorOrigin

QWMatrix
------------------
New functions:
	QPointArray mapToPolygon( const QRect &r ) const
	double det() const
	static void setTransformationMode( QWMatrix::TransformationMode m );
	static TransformationMode transformationMode();

New enum:
	TransformationMode { Points, Areas }
