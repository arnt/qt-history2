TODOs
- Reparenting
- Layout widgets
    - QGrid
- use a QObject with an event filter to coordinate widget drag&drop
- clipboard - maybe need a pixmap to pretend to share the widgets,
   or move the clipboard widget to the focussed window (yuck)

IDEAs
- Hierarchy of widget classes
    - including custom widgets
- Hierarchy of widget objects
- Menubar editor
- "Test" function
- Properties
    - Extract theoretical properties set
    - Need to be able to know available properties of a custom class
	without recompilation
    - Property-extraction code that operates on a source file (.h? .cpp?)
	used in moc-like code-generation for properties AND in Designer
    - String-only mechanism, generated by MOC? by something else?
	virtual QString property( QString name ) const
	{
	    if ( name == "fooValue" )
		return QString::itoa( fooValue() );
	    else if ( name == "fooChoice" )
		return qt_enum_string( propertyType(name), fooChoice() );
		/* where...
		QString qt_enum_string( QString enumProp, int n )
		{
		    ...
		}
		*/
	    else if ...
	    else
		return ParentClass::property( name );
	}
	virtual QString propertyType( QString name ) const
	{
	    if ( name == "fooValue" )
		return "int";
	    else if ( name == "fooChoice" )
		return "enum { FirstFooChoice, ... }";
		//return "FirstFooChoice|...";
	    else if ...
	    else
		return ParentClass::propertyType( name );
	}
	virtual void setProperty( QString name, QString value )
	{
	    if ( name == "fooValue" )
		setFooValue( value.atoi() );
	    else if ...
	    else
		ParentClass::setProperty( name, value );
	}
	virtual QStrList properties() const
	{
	    QStrList result = ParentClass::properties();
	    result.append( "fooValue" );
	    result.append( ... );
	    return result;
	}
