#!/usr/bin/perl -w


@IGNORE = qw {
    qconfig.h
    qgfxlinuxfb_qws.h
    qgfxvnc_qws.h
    qvfbhdr_qws.h
    qwsdisplay_qws.h
    qxt.h
    qgl.h
    qnp.h
    jri.h
    jri_md.h
    jritypes.h
    npapi.h
    npupp.h
    qimageio.h
    qjpegio.h
    qt.h
    qfeatures.h
    q1xcompatibility.h
    qt_mac.h
    qt_x11.h
    qt_windows.h
    qgfxmach64defs_qws.h
    qthread.h
    qmutex.h
    qgeneric.h
    qpaintdevicedefs.h
    qwindow.h
    qtranslatordialog.h
};

@NETWORK_HEADERS = qw {
    qftp.h
    qdns.h
    qhostaddress.h
    qserversocket.h
    qsocket.h
    qsocketdevice.h
};

@IGNORE = ( @IGNORE, @NETWORK_HEADERS );

$IGNORE=join "|", map { "\Q$_" } @IGNORE;

$verbose = 0;

#$HEADMARK='Q[A-Z][A-Z][A-Z]*_H';
$STARTMARK='#ifndef QT_H';
$ENDMARK='#endif // QT_H';
$TAIL="#endif // QT_H";
$DIR="$ENV{QTDIR}/include";

if ( defined($ARGV[0]) && $ARGV[0] eq "--fix" ) {
    $fix++;
    shift;
}

@QT_HEADERS = ();
@QWS_HEADERS = ();

opendir(INC, $DIR)
    || die "can't opendir $DIR: $!";
    map {
	if ( m/\.h$/ &&
	    !m/^$IGNORE$/ &&
	    ! -f "$ENV{QTDIR}/src/compat/$_" )
	{
	    if ( /_qws\./ ) {
		push @QWS_HEADERS, $_;
	    } else {
		push @QT_HEADERS, $_;
	    }
	}
    } readdir INC;

open QT_H, ">$DIR/qt.h" or die "Cannot open $DIR/qt.h\n";

print QT_H
'/****************************************************************************
**
** Qt GUI Toolkit
**
** This header file efficiently includes all Qt GUI Toolkit functionality.
**
** Generated : '.`date`.'
**
** Copyright (C) 1995-2000 Troll Tech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Troll Tech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** Licensees holding valid Qt Professional Edition licenses may use this
** file in accordance with the Qt Professional Edition License Agreement
** provided with the Qt Professional Edition.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
** information about the Professional Edition licensing, or see
** http://www.trolltech.com/qpl/ for QPL licensing information.
**
*****************************************************************************/

#ifndef QT_H
#define QT_H
';



$include = '#include\s*(["<])([^\n]*)[">]';

sub do_headers
{
    my @HEADERS = @_;
    my %FILE;
    my %LOCAL;
    my %DEP;
    my %HEADERS;
    H: for $h ( @HEADERS ) {
	open HEADER, "$DIR/$h";
	$content = "" if $fix;
	while (<HEADER>) {
	    $content .= $_ if $fix;
	    if ( /$STARTMARK/ ) {
		$incscan=1;
	    } elsif ( /$ENDMARK/ ) {
		$incscan=0;
		next H;
	    } elsif ( /$include/ ) {
		if ($incscan) {
		    $inc=$2;
		    if ( !$IGNORE_HEADERS{$inc} ) {
			$DEP{"$h $inc"}=1;
			$LOCAL{$inc}=($1 eq '"');
			$FILE{$h}++;
			$FILE{$inc}++;
		    }
		}
	    }
	}
	if ( $fix ) {
	    #$include = '#include\s*["<][^\n]*[">]';
	    $content =~ s/(($include\s)+)/$STARTMARK\n$1$ENDMARK\n/gs;
	    open OUT, ">$DIR/$h";
	    print OUT $content;
	} else {
	    die "No QT_H segment in $h - rerun with --fix to fix ALL headers\n";
	}
    }
    @FILE=sort keys %FILE;

    $N=$#FILE;
    $done=0;

    # Bubble sort by dependency... (qsort can't do this)
    while (!$done) {
	$done=1;
	for $i (1..$N) {
	    for $j (0..$i) {
		if ($DEP{"$FILE[$j] $FILE[$i]"}) {
		    # j depends on i, swap
		    $t=$FILE[$i];
		    $FILE[$i]=$FILE[$j];
		    $FILE[$j]=$t;
		    $done=0;
		}
	    }
	}
    }

    # Check for circularities
    for $f ( 0..$#FILE ) {
	for $o ( ($f+1)..$#FILE ) {
	    print STDERR "Circularity in $FILE[$f] .. $FILE[$o]\n" if ( $DEP{"$FILE[$f] $FILE[$o]"} )
	}
    }


    for $h ( @FILE ) {
	if (!$DONE{$h}) {
	    if ($LOCAL{$h}) {
		print QT_H qq{#include "$h"};
	    } else {
		print QT_H qq{#include <$h>};
	    }
	    if ( $verbose ) {
		@deps = grep { $DEP{"$h $_"} } @FILE;
		if ( @deps ) {
		    print QT_H " // Depends on ",join ", ",@deps;
		}
	    }
	    print QT_H "\n";
	    $DONE{$h}++;
	}
    }
}

map { $IGNORE_HEADERS{$_}=1; } @QWS_HEADERS; 
do_headers @QT_HEADERS;
%IGNORE_HEADERS=();
print QT_H "\n#ifdef _WS_QWS_\n";
do_headers @NETWORK_HEADERS;
do_headers @QWS_HEADERS;
print QT_H "#endif // _WS_QWS_\n\n";

print QT_H "$TAIL";
