#!/usr/bin/perl
#
# Find revision transitions where change occurs.
#

$maxsim=10;
$long_format=0;

while ( @ARGV ) {
    if ( $ARGV[0] eq "-c" ) {
	shift;
	$keychange = $ARGV[0];
    } elsif ( $ARGV[0] eq "-l" ) {
        $long_format = 1;
    } elsif ( !$pattern ) {
	$pattern = $ARGV[0];
    } else {
	$file = $ARGV[0];
    }
    shift;
}

$pattern && $file || die "Usage:  p4grep pattern file\n";

open p4, "p4 changes $file |";

sub flush {
    for $i ( 0..$n-1 ) {
        $who=""; $when=""; $log=""; $log_finished=0; $first_match=1;
	$on=0; $in="", $out="";
	my $fh = $fh{$i};
	while (<$fh>) {
	  if ( !$on && $long_format ) {
	    if ( /^Change \d+ by (.*) on (.*)$/ ) {
	      $who = $1;
	      $when = $2;
	    } elsif ( /^Affected files/ ) {
	      $log_finished = 1;
	    } elsif ( !$log_finished ) {
	      $log .= $_;
	    }
	  }

	  if ( /^==== / ) {
	    $on = $_ =~ m{$file};
	  } elsif ( $on ) {
	    if ( /^[<>]/ && $_ =~ m{$pattern}sm ) {
	      if ( $long_format ) {
		if ( $first_match ) {
		  $first_match = 0;
		  print "$c{$i} -- $who -- $when\n";
		  print "$log";
		  print "--------------------------\n";
		}
		print "$_";
	      } else {
		print "$c{$i}:$_";
	      }
	    }
	  }
	}
	close $fh{$i};
    }
}

$n=0;
while (<p4>) {
    ($change) = ($_ =~ /Change (\d+)/);
    #print STDERR "$change\n";
    my $fh;
    open $fh, "p4 describe $change & |";
    $c{$n} = $change;
    $fh{$n} = $fh;
    $n++;
    if ( $n == $maxsim ) {
      flush();
      $n=0;
    }
}

flush();
