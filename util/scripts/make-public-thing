#!/usr/bin/perl -w

# $Id: //depot/qt/main/util/scripts/make-public-thing#32 $

$base = "/tmp/striptree-$$";
$days_stored = 60;
$verbose=0;
$skipdoc=0;

use File::Find;

sub copyandstrip {
    #
    #  Copy $dir/$_ (.../qt/...) to $base/cvs/qt/... while removing
    #  all branches and any revisions older than $date (unless that
    #  would leave no head).  Also creates directories.
    #
    if ( $_ ne "." && $_ ne ".." && $_ ne "Attic" ) {
	my $dir = $File::Find::dir;
	$dir =~ s-/?$-/-;
	$dir =~ s-^.*/qt/-$base/cvs/qt/-;
	if ( -d $_ ) {
	    mkdir("$dir$_", 0755);
	} elsif ( /,v$/ && !/_win/ && -d $dir && open( I, "< $_" ) ) {
	    my $f;
	    my $v;
	    $f = join( "", <I> );
	    $v = $f;
	    $v =~ s/\nsymbols[^;]*/\nsymbols/s;

	    #
	    # Copy the file
	    #
	    close(I);
	    open( O, "> $dir$_" ) || die "could not open $dir$_, stopped";
	    print O $v;
	    close O;
	    chmod( (stat $_)[2], "$dir$_" );
	    $v = $f;

	    #
	    # Outdate all branches
	    #
	    ($revs) = $f =~ /.*?;\s*\nlocks(.*?)\nlog.*$/s;
	    while ( $revs =~ /\nbranches\s*((?:\d+\.)+\d\.\d)[;\n]/g ) {
		$branch=$1;
		print "Stripping branch ${branch} from $dir$_\n" if $verbose == 1;
		if ( $verbose <= 1 ) {
		    print SH "rcs -q -o${branch}: $dir$_\n";
		} else {
		    print SH "echo rcs -o${branch}: $dir$_\n";
		    print SH "rcs -o${branch}: $dir$_\n";
		}
	    }

	    #
	    # Outdate everything before $date (except the head (!))
	    #
	    $v =~ s/.*?head\s*(.*?);.*?\ncomment[^\n]*\n\s*//s;
	    $head = $1;
	    $v =~ s/\n\ndesc\n.*$//s;
	    $v =~ s/\ndate\s+(\d+)\.(\d+)\.(\d+)\..*?\n\n/ $1$2$3\n/gs;
	    foreach $f ( split( /\n/, $v ) ) {
		if ( $f =~ /^(\S+)\s+(\d+)$/ && $2 < $date
		     && $1 ne $head )
		{
		    print "Stripping revision $1 from $dir$_\n" if $verbose == 1;
		    if ( $verbose <= 1 ) {
			print SH "rcs -q -o:$1 $dir$_\n";
		    } else {
			print SH "echo rcs -o:$1 $dir$_\n";
			print SH "rcs -o:$1 $dir$_\n";
		    }
		    last;
		}
	    }
	}
    }
}

# Maybe we should check out tmake?
#
die '$TMAKEDIR not set - need $TMAKEDIR/lib/linux-g++/tmake.conf'
    if !defined($ENV{TMAKEDIR})
	|| ! -f "$ENV{TMAKEDIR}/lib/linux-g++/tmake.conf";

($junk, $junk, $junk, $d, $m, $y, $junk, $junk, $junk) =
  localtime( time() - $days_stored * 86400 );
$date = sprintf( "%4d%02d%02d", $y, 1+$m, $d ); ##### Y2K - what does CVS do?

mkdir( $base, 0755 );
mkdir( "$base/cvs", 0755 );
mkdir( "$base/cvs/qt", 0755 );
mkdir( "$base/cvs/qt/html", 0755 );
mkdir( "$base/cvs/CVSROOT", 0755 );

open( SH, "| sh" );

find( \&copyandstrip, "/local/lib/cvs/qt" );

print SH "cd $base/cvs/qt

# Move-around CVS files to be like regular release
mv dist/free/LICENSE.QPL,v .

# Remove GMAKE and NMAKE makefiles
find . -name GNUmakefile,v | xargs rm
find . -name Makefile,v | xargs rm
rm GNUmakefile.inc,v
rm Makefile.inc,v
rm make.help,v

# Check-out current public CVS
mkdir $base/head
cd $base/head
cvs -Q -d $base/cvs co qt
mkdir -p qt/doc/html
cd qt
cp gif/*.gif doc/html
cd include
ln -s ../src/*/q*.h .
cd ../src/moc
yacc -d moc.y
mv y.tab.c mocgen.cpp
cd ../..

export QTDIR=$base/head/qt
export PATH=\$QTDIR/bin:\$QTDIR/util/scripts:\$PATH:/home/agulbra/bin

# Generate and check-in [changes to] the X11 makefiles/build files

cd $base/head/qt
for B in src/moc/mocgen.cpp `util/scripts/makeunixmake -p -s`
do
  perl -pi -e 's/Generated by tmake at.*/Generated by tmake/' \$B
  C=$base/cvs/qt/\$B,v
  rsync -avz bahamas:/local/lib/cvs/qt/\$B,v \$C
  [ -f \$C ] && rcs -l \$C
  ci -q -mnone -t-'' -u \$B \$C
done
";

# Generate and check-in [changes to] the documentation
if ( $skipdoc ) {
    # Doesn't work.  Don't know why not.
    $skipdocexcl = "--exclude /local/lib/cvs/qt/html";
} else {
    $skipdocexcl = "";
    print SH "
    for a in tutorial/t{,1}[0-9]; do cp -f \$a/Makefile.in \$a/Makefile ; done
    perl util/qdoc/qdoc
    for a in tutorial/t{,1}?; do rm -f \$a/Makefile ; done
    cd doc/html
    mkdir -p $base/cvs/qt/html
    rsync -avz bahamas:/local/lib/cvs/qt/html $base/cvs/qt
    for B in *.html *.gif *.jpg
    do
      C=$base/cvs/qt/html/\${B},v
      [ -f \$C ] && rcs -l \$C
      ci -q -mnone -t-'' -u \$B \$C
    done
    ";
}
print SH "mv $base/cvs/qt/gif/*.gif,v $base/cvs/qt/html\n";

print SH "
# Remove non-public files (mainly old CVS junk)
cd $base/cvs/qt
rm -rf bin/*.bat,v
rm -rf bugs dist doc.conf,v etc iconify listview mlined netscape nsplugin printpicture reqs tests util
rm -rf examples/dragdrop-tricky examples/layouts examples/network
rm -rf examples/tellme examples/xshape
rm -rf extensions/localizer
rm -rf extensions/*/doc.conf
rm -rf makefiles tmake
rm -rf src/Makefile.win32-dll
rm -rf src/*.pro
chmod a+x $base/cvs/qt/bin/*,v
rsync -avz $skipdocexcl --delete $base/cvs/qt bahamas:/local/lib/cvs
";

close(SH) # We want to wait for the script to complete.
