#!/usr/bin/perl -w

$abort = 0;
$P4 = "p4";

# Simplify program name, if it is a path.
$0 =~ s/.*\///;

open( P4, "$P4 -V |") || die "$0: Couldn't exec $P4: $!\n";
$line = <P4>;
close( P4 );
chomp( $line );
if ( $line !~ /^Perforce/ ) {
    die "$0: $P4 -V isn't p4? Returned: \"$line\"\n";
}
    
if ( $#ARGV != 0 ) {
    die "$0: takes a single change number as argument\n";
} else {
    $change = $ARGV[0];
}

@branchFiles = ();
open( P4, "$P4 describe -s $change |") || die "$0: Couldn't exec $P4: $!\n";
@changeDescription = <P4>;
close( P4 );
# The last line is blank, so discard it.
pop( @changeDescription );

# This is pretty evil; essentially it picks out the "affected files" lines and
# pushes the filename and revision of each onto @branchFiles and
# @branchRevisions, respectively.
grep {
    if ( /^\.\.\. (\/\/depot.*)\#([0-9]+)/ ) {
	push( @branchFiles, $1 );
	push( @branchRevisions, $2 );
    }
} @changeDescription;

if ( $#branchFiles == -1 ) {
    die "$0: No files found in changelist";
}

# Check all files in same branch
@pathComponents = split ( /\//, $branchFiles[0] );
# The leading "//" will split into two empty fields, so we use 4 instead of 2
# here. Note that we're making assumptions about the depot layout...
$branch = $pathComponents[4];
print "Merging from $branch to main\n";

foreach $file ( @branchFiles ) {
    @pathComponents = split ( /\//, $file );
    if ( $pathComponents[4] ne $branch ) {
	print STDERR "File $file on branch $pathComponents[4], not $branch\n";
	$abort = 1;
    }
}

if ( $abort ) {
    die "$0: Exiting; not all files on the same branch";
}

@mainFiles = ();
foreach $file ( @branchFiles ) {
    @pathComponents = split ( /\//, $file );
    $pathComponents[4] = "main";
    $mainfile = join ("/", @pathComponents );
    push( @mainFiles, $mainfile );
}

# Check all files are closed
$files = join( " ", @mainFiles );
print "Checking files are closed: $files\n";
# Unbelievable... p4 writes this file list to stderr!?
open( P4, "$P4 opened $files 2>&1 |") || die "$0: Couldn't exec $P4: $!\n";
while ( $line = <P4> ) {
    chomp( $line );
    ($file, $message) = split( m/ - /, $line );
    if ( $message ne "file(s) not opened on this client." ) {
	print STDERR "File $file is open; \"$message\"\n";
	$abort = 1;
    }
}
close( P4 );

if ( $abort ) {
    die "$0: Exiting; not all files were closed.\n";
}

# Check all files are up-to-date newly added

print "Checking files are up-to-date: $files\n";
open( P4, "$P4 sync -n $files 2>&1 |") || die "$0: Couldn't exec $P4: $!\n";
while ( $line = <P4> ) {
    chomp( $line );
    ($file, $message) = split( m/ - /, $line );
    if ( $message ne "file(s) up-to-date."
      && $message ne "no such file(s)." ) {
	print STDERR "File $file is not up-to-date; \"$message\"\n";
	$abort = 1;
    }
}
close( P4 );

if ( $abort ) {
    die "$0: Exiting; not all files up-to-date.\n";
}

print "Checking for gaps in integration: $files\n";
for ( $count = 0; $count < @branchFiles; $count++ ) {
    open( P4, "$P4 integrate -n $branchFiles[$count]\@$change $mainFiles[$count] |") || die "$0: Couldn't exec $P4: $!\n";
    while ( $line = <P4> ) {
	chomp( $line );
	($file, $message) = split( m/ - /, $line );
	if ( $message ne "integrate from $branchFiles[$count]#".$branchRevisions[$count]
	  && $message ne "branch/sync from $branchFiles[$count]#".$branchRevisions[$count]
	  && $message ne "delete from $branchFiles[$count]#".$branchRevisions[$count] ) {
	    print STDERR "Gaps in integration of $file: \"$message\"\n";
	    $message =~ s/.*\#([0-9]+),\#([0-9]+)/$1 $2/g;
	    ($start, $end) = split( " ", $message );
	    printNeededRevisions( $branchFiles[$count], $mainFiles[$count], $change, $start, $end);
	    $abort = 1;
	}
    }
    close( P4 );

}

if ( $abort ) {
    die "$0: p4 indicated gaps in integration";
}

# Now do the integrate

print "Integrating: $files\n";
for ( $count = 0; $count < @branchFiles; $count++ ) {
    open( P4, "$P4 integrate $branchFiles[$count]\@$change $mainFiles[$count] |") || die "$0: Couldn't exec $P4: $!\n";
    while ( $line = <P4> ) {
	chomp( $line );
	# Discard revisions here.
	$line =~ s/\#[0-9]+//g;
	if ( $line ne "$mainFiles[$count] - integrate from $branchFiles[$count]"
	  && $line ne "$mainFiles[$count] - branch/sync from $branchFiles[$count]"
	  && $line ne "$mainFiles[$count] - delete from $branchFiles[$count]" ) {
	    print STDERR "$P4 returned unexpected line \"$line\"\n";
	    $abort = 1;
	}
    }
    close( P4 );
}

if ( $abort ) {
    die "$0: p4 integrate failed on some file(s)";
}

# Now the complicated bit. Doing the resolution.

@filesToResolve = @mainFiles;
while ( @filesToResolve ) {
    $files = join( " ", @filesToResolve );
    open( P4, "$P4 resolve -am $files |") || die "$0: Couldn't exec $P4: $!\n";
    while ( $line = <P4> ) {
	chomp( $line );
	if ( $line =~ /^\/\// ) {
	    ($file, $message) = split( m/ - /, $line);
	    if ( $message eq "resolve skipped." ) {
		push ( @skippedFiles, $file );
		print "File $file skipped: $message\n";
	    } else {
		print "File $file accepted\n";
	    }
	}
    }
    close( P4 );
    if ( $#skippedFiles > -1 ) {
	print "Skipped these files: ".join( "\n", @skippedFiles )."\n";
	print "Please resolve these files manually, and then press enter.\n";
	$line = <STDIN>;
    }
    @filesToResolve = @skippedFiles;
    @skippedFiles = ();
}


print "Enter y to submit change, anything else to create changelist: ";
$confirm = <STDIN>;

if ( $confirm =~ /^[Yy]/ ) {
    $action = "submit";
} else {
    $action = "change";
}

print "Running 'p4 $action'\n";
open( P4, "| $P4 $action -i" ) || die "$0: Couldn't exec $P4: $!\n";

print P4 "Change: new\n";
print P4 "Description:\n";
print P4 "\tp4i integration\n";
print P4 "\tIntegrate change $change from $branch to main.\n";
print P4 "\tDescription for change $change:\n\n";
print P4 "\t: ".join( "\t: ", @changeDescription )."\n";
print P4 "Files:\n\t".join( "\n\t", @mainFiles )."\n";

close( P4 );

if ( $action eq "change" ) {
    print "Submit the above change number to complete the integration.\n";
}

print "Done.\n";

sub printNeededRevisions {
    my ($branchFile, $mainFile, $change, $start, $end) = @_;
    my ($count, $rev, @fileLog, $revisionChange, $line);

    for ($count = $start; $count <= $end; $count++ ) {
	open( MYP4, "$P4 integrate -n $branchFile#$count,#$count $mainFile 2>&1 |") || die "$0: Couldn't exec $P4: $!\n";
	$line = <MYP4>;
	chomp( $line );
	close( MYP4 );
	if ( $line ne "$mainFile - all revision(s) already integrated." ) {
	    open( MYP4, "$P4 filelog -m 1 $branchFile#$count |" ) || die "$0: Couldn't exec $P4: $!\n";
	    # The first line is the filename; the second is the rev we want.
	    $line = <MYP4>;
	    $line = <MYP4>;
	    chomp( $line );
	    close( MYP4 );
	    (undef, $rev, undef, $revisionChange, undef) = split ( " ", $line );
	    # We don't report the change we're currently integrating as needing
	    # integratetion.
	    if ( $revisionChange ne $change ) {
		print "Missing integration of $branchFile revision $rev revisionChange $revisionChange\n";
	    }
	}
    }
}
