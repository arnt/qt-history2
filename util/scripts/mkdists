#!/bin/bash

#customizing
P4=/usr/local/bin/p4          #p4 location
P4PORT=p4.troll.no:866 #point p4 to the correct server

#internal variables
CREATED_MANIFEST=no
TMP_DIR=/tmp
TMP_FILE=${TMP_DIR}/qt-tmpf-$$
MYNAME=`whoami`
[ -z $MYNAME ] && MYNAME="shellssuck"

#version info
REL_VERSION=0.0.0
BRANCH=auto
#paths
OUT_TREE=`pwd`
LOCAL_TREE=
QDOC_PATH=$QTDIR/util/qdoc/qdoc
MANIFEST_FILE=${TMP_FILE}-manifest
#editions
DO_PROFESSIONAL=yes
DO_ENTERPRISE=yes
DO_FREE=yes
#platforms
DO_WIN=yes
DO_X11=yes
DO_MAC=yes
DO_QWS=yes
#other
DO_GZIP=auto
DO_BZIP=auto
DO_ID=auto
DO_DOC=auto
SET_TYPE=auto

die()
{
    echo $1
    exit 666
}

STATUS_DEPTH=0
status() {
    [ "$#" = 2 ] && [ "$2" = "-1" ] && STATUS_DEPTH=$((STATUS_DEPTH-5))
    blah=0
    [ ! -z "$1" ] && while [ "$blah" -lt "$STATUS_DEPTH" ]; do echo -n " "; blah=$((blah+1)); done
    [ "$#" = 2 ] && [ "$2" = "1" ] && STATUS_DEPTH=$((STATUS_DEPTH+5))
    [ ! -z "$1" ] && echo "$1"
    return 0
}

#parse commandline
showhelp()
{
    [ "$#" != 0 ] && [ ! -z "$1" ] && echo "******** Unknown Option: $@ ********"
    echo "$0 [options]"
    echo
    echo "Options can be any of:"
    echo

    echo "P4 Versions:"
    echo "  -type <type>       : Specify a type to override with (eg snapshot)"
    echo "  -local <directory> : Specify path to pre-p4'd depot"
    echo "  -version <version> : What version to retrieve from p4"
    echo "  -branch  <branch>  : What branch to retrieve from. If this"
    echo "                       option is ommited, it will be deduced from"
    echo "                       -version"
    echo "  :   -version and -local are mutually exclusive, if you :"
    echo "  :   specify -version you may also specify -branch      :"
    echo "  :   do not use -branch with -local                     :"
    echo "  :   Additionally you may use -branch by itself, and    :"
    echo "  :   will check out the HEAD of the given -branch       :"
    echo

    echo "Paths:"
    echo "  -manifest <file>     : Specify path to manifest file (will create)"
    echo "  -outdir <directory>  : Where to put all things (default $OUT_TREE)"
    echo "  -qdoc <executable>   : Where qdoc lives (default $QDOC_PATH)"
    echo

    echo "Editions:"
    echo "  -no-professional / -do-professional  : Toggle professional build"
    echo "  -no-enterprise   / -do-enterprise    : Toggle enterprise build"
    echo "  -no-free         / -do-free          : Toggle free build"
    echo

    echo "Platforms:"
    echo "  -no-mac / -do-mac   (default $DO_MAC)"
    echo "  -no-win / -do-win   (default $DO_WIN)"
    echo "  -no-x11 / -do-x11   (default $DO_X11)"
    echo "  -no-qws / -do-qws   (default $DO_QWS)"
    echo

    echo "Various:"
    echo "  -no-id   / -do-id    : Toggle whether to generate \$Id tag"
    echo "  -no-doc  / -do-doc   : Toggle whether to generate documentation"
    echo "  -no-gzip / -do-gzip  : Toggle whether to add a gzip package"
    echo "  -no-bzip / -do-bzip  : Toggle whether to add a bzip package"

    echo "=-________________________________________________________________-="
    echo "All options can be in long form --option=value as well (where value "
    echo "is no for -no-* options and yes for -do-* options)"
    exit 666
}

while [ -n "$1" ]; do
   case $1 in
   -manifest)
	shift
	VAR=manifest
	VAL=$1
	;;
   -version)
       shift
       VAR=version
       VAL=$1
       ;;
   -branch)
       shift
       VAR=branch
       VAL=$1
       ;;
   -help)
       showhelp
       ;;
   -outdir)
	shift
	VAR=outdir
	VAL=$1
	;;
   -local)
	shift
	VAR=local
	VAL=$1
	;;
   -qdoc)
	shift
	VAR=qdoc_path
	VAL=$1
	;;
   -type)
        shift
	VAR=type
	VAL=$1
	;;
   -no*)
	VAR=`echo $1 | sed "s,^-no-*,,g"`
	VAL=no
	;;
   -do*)
	VAR=`echo $1 | sed "s,^-do-*,,g"`
	VAL=yes
	;;
   --*=*)
	VAR=`echo $1 | sed "s,^--\(.*\)=.*$,\1,"`
	VAL=`echo $1 | sed "s,^--.*=\(.*\)$,\1,"`
	;;
   *)
	showhelp "$1"
	;;
   esac
   shift

   case $VAR in
   #editions
   professional) DO_PROFESSIONAL=$VAL ;;
   enterprise) DO_ENTERPRISE=$VAL ;;
   free)DO_FREE=$VAL;;
   #platforms
   win) DO_WIN=$VAL ;;
   x11) DO_X11=$VAL ;;
   mac) DO_MAC=$VAL ;;
   qws) DO_QWS=$VAL ;;
   #paths
   qdoc_path) QDOC_PATH=$VAL;;
   outdir) OUT_TREE=$VAL;;
   manifest) MANIFEST_FILE=$VAL;;
   local)
       [ -d "$VAL" ] || die "Unknown directory: $VAL"
       LOCAL_TREE=$VAL
       ;;
   #versioning
   type) SET_SETYP=$VAL ;;
   branch) BRANCH=$VAL ;;
   version)
       expr "$VAL" : ".*\.\d*" >/dev/null 2>&1 || die "Can't figure out version from $VAL"
       REL_VERSION=$VAL
       LABEL="qt/$VAL"
       ;;
   #other
   doc) DO_DOC=$VAL ;;
   gzip)DO_GZIP=$VAL;;
   bzip)DO_BZIP=$VAL;;
   id) DO_ID=$VAL   ;;
   *) showhelp "--${VAR}=$VAL" ;;
   esac
done
#make sure everything is in order before bothering..
[ "x$DO_DOC" = "xyes" ] && [ ! -x "$QDOC_PATH" ] && die "qdoc not found, failed (${QDOC_PATH})"
rm -f "$TMP_FILE" && { [ -e "$TMP_FILE" ] && die "Could not remove tmp file, failed (${TMP_FILE})" ; }
[ ! -d "$OUT_TREE" ] && { mkdir -p $OUT_TREE >/dev/null 2>&1 || die "Could not create outdir, failed (${OUT_TREE})" ; }

#now decide some default value..
if [ "$DO_DOC" = "auto" ]; then
    if [ -z "$LOCAL_TREE" ]; then
	DO_DOC=yes
    else
	DO_DOC=no
    fi
fi
if [ "$DO_ID" = "auto" ]; then
    if [ -z "$LOCAL_TREE" ]; then
	DO_ID=yes
    else
	DO_ID=no
    fi
fi
if [ "$DO_GZIP" = "auto" ]; then
    if [ ! -z `which gzip` ]; then
	DO_GZIP=yes
    else
	DO_GZIP=no
    fi
fi
if [ "$DO_BZIP" = "auto" ]; then
    if [ ! -z `which bzip2` ]; then
	DO_BZIP=yes
    else
	DO_BZIP=no
    fi
fi
if [ "$BRANCH" = "auto" ]; then
    if [ ! -z "$LOCAL_TREE" ]; then
       BRANCH="0.0.0"
    else
       BRANCH=`echo "$REL_VERSION" | sed "s,\([0-9]*\.[0-9]*\).*,\1,"`
    fi
fi

DISTDIR="${TMP_DIR}/qt-$BRANCH-$MYNAME-$$"

#Checkout P4
if [ -z $LOCAL_TREE ]; then
    export P4PORT
    checkoutlabel=""
    if ! $P4 fstat //depot/qt/$BRANCH/doc.conf 2>&1 | grep " depotFile " >/dev/null 2>&1 ; then
	die "//depot/qt/$BRANCH/... is not in the depot, stopped"
    fi
    if [ ! -z $LABEL ]; then
	if ! $P4 labels 2>&1 | grep "^Label $LABEL" >/dev/null 2>&1 ; then
	    die "Label $LABEL does not exist, stopped"
	fi

	if $P4 label -o $LABEL | grep '^Options:.*locked' >/dev/null 2>&1; then
	    checkoutlabel="@${LABEL}"
	fi
    fi
    status "Exporting the entire Qt depot $checkoutlabel..";

    tmpclient="qt-release-tmp-$MYNAME";
    $P4 client -t qt-release-3x -o $tmpclient >${TMP_FILE}
    sed ${TMP_FILE} -e "s,^Root:.*,Root: $DISTDIR," -e "s,/qt/X.Y/,/qt/$BRANCH/,g" \
	    -e "s,^\(Client: \).*,\1qt-release-tmp-$$," -e "s,\bnomodtime\b,modtime," | \
      $P4 -s client -i >/dev/null 2>&1

    $P4 -s -c $tmpclient sync -f $DISTDIR/qt/...${checkoutlabel} >/dev/null 2>&1
else
    status "Copying Qt depot.."
    [ ! -d $DISTDIR/qt ] && mkdir -p $DISTDIR/qt
    cp -ar $LOCAL_TREE $DISTDIR/qt
fi

#setup branch correctly..
if [ "$REL_VERSION" = "0.0.0" ]; then
    V=`grep VERSION $DISTDIR/qt/src/qt.pro | awk '{print $3;}'`
    if [ ! -z $V ]; then
	BRANCH=$V
	REL_VERSION=$V
    fi
fi
BRANCH_DIGITS=`echo $BRANCH | sed "s,\.,,g" | sed "s,\(\d\d\d\).*,\1,"`
[ -z "$BRANCH_DIGITS" ] && BRANCH_DIGITS="000"

#get include files
includefiles=`QTDIR=$DISTDIR/qt $DISTDIR/qt/bin/syncqt -show`
[ ! -d $DISTDIR/qt/include ] && mkdir -p "$DISTDIR/qt/include"
for fullname in $includefiles; do
    ln -sf "../$fullname" "$DISTDIR/qt/include/`basename $fullname`"
done

#cleanup documentation directories
mkdir -p "$DISTDIR/qt/doc"
mkdir -p "$DISTDIR/qt/doc/html"
mkdir -p "$DISTDIR/qt/doc/man"
mkdir -p "$DISTDIR/qt/doc/html/designer"
mkdir -p "$DISTDIR/qt/doc/html/designer/figures"
mkdir -p "$DISTDIR/qt/doc/html/designer/arrows"
mkdir -p "$DISTDIR/qt/doc/man/man3"
# and do the moc.1 hack here
mkdir -p "$DISTDIR/qt/doc/man/man1"
mv "$DISTDIR/qt/src/moc/moc.1" "$DISTDIR/qt/doc/man/man1"
cp $DISTDIR/qt/tools/designer/manual/*.html $DISTDIR/qt/doc/html/designer
cp $DISTDIR/qt/tools/designer/manual/figures/*.png $DISTDIR/qt/doc/html/designer/figures
cp $DISTDIR/qt/tools/designer/manual/arrows/*.png $DISTDIR/qt/doc/html/designer/arrows
rm -rf $DISTDIR/qt/tools/designer/manual
rm -rf $DISTDIR/qt/tools/designer/doc
# clean designer
rm -rf $DISTDIR/qt/tools/designer/plugins/designer_interface_roadmap
rm -rf $DISTDIR/qt/tools/designer/plugins/extrawidgets
rm -rf $DISTDIR/qt/tools/designer/plugins/p4
rm -rf $DISTDIR/qt/tools/designer/plugins/qvim
# clean tools
rm -rf $DISTDIR/qt/tools/inspector

# Replace Netscape-owned code with dummies (direct user to PluginSDK)
for a in `find $DISTDIR/qt/extensions/nsplugin/src -name 'np*' -o -name 'jri*'`; do
    rm -f $a
    echo "#error \"$a must be provided by Netscape\"" > $a
    echo "#error \"This file is just a placeholder. Please see the documentation\"" >>$a
    echo "#error \"to learn how to obtain the real file\"" >>$a
done

# qt.h
rm -f "$DISTDIR/qt/include/qt.h"

#qgif.h
qgif="$DISTDIR/src/kernel/qgif.h"
if [ -e  "$qgif" ]; then
    sed "s,\(\#define QT_BUILTIN_GIF_READ[ ]*\)$,\1 0,g" $qgif >${TMP_FILE}
    mv ${TMP_FILE} $qgif
fi

# changes files
[ ! -f "$DISTDIR/qt/dist/changes-$REL_VERSION" ] && status "Warning: qt/dist/changes-$REL_VERSION does not exist"
for a in `find $DISTDIR/qt/dist/ -name "changes-$REL_VERSION"`; do
    mv $a $DISTDIR/qt/`basename $a`
done

myexpr () {
    echo "$1" | egrep "$3" >/dev/null 2>&1
    return
}

# fixify qglobal's version number
qglobal="$DISTDIR/qt/src/tools/qglobal.h"
if [ "$SET_TYPE" = "auto" ]; then
    TYPE=`grep QT_VERSION_STR $DISTDIR/qt/src/tools/qglobal.h | awk '{ print $3 }' | sed 's,["0-9.]*\(-.*\)",\1,'`
else
    TYPE="-${SET_TYPE}"
fi
VERSION_STR=${BRANCH}${TYPE} && [ "$TYPE" = "-snapshot" ] && VERSION_STR=`date "+${VERSION_STR}-%Y%m%d"`
sed -e "s,\(\#define *QT_VERSION  *\)[0-9]*,\1${BRANCH_DIGITS},g" \
    -e "s,\(\#define *QT_VERSION_STR  *\"\)\(.*\),\1${VERSION_STR}\",g" $qglobal >${TMP_FILE}
mv ${TMP_FILE} $qglobal
if [ "$TYPE" != "-snapshot" ] && ! myexpr "$TYPE" : "^-beta[0-9]*$"; then
    die "The qt version is ${REL_VERSION}${TYPE}, which confuses me terribly";
fi

#fix $Id
if [ "x$DO_ID" = "xyes" ]; then
    status "Marking \$ID\$..."
    for a in `find $DISTDIR/qt/`; do
	if [ -f $a ] && [ ! -x $a ] && [ ! -L $a ] && grep '\$Id.*\$' $a >/dev/null 2>&1; then
	    execut=444
	    [ -x $a ] && execut=555

	    mtime=`ls -l $a | awk '{ print $6,$7,$8 }'` #mtime is pretty bogus, but a quick hack..
	    tag_ID="`echo $a | sed "s,^.*/,qt/,"`   ${REL_VERSION}${TYPE}   edited $mtime"
	    sed "s,\(\$Id[:] \)[^\\$]*\\$,\1 ${tag_ID} \$,g" $a >${TMP_FILE}
	    rm -f $a
	    mv ${TMP_FILE} $a
	    chmod $execut $a
	fi
    done
fi


public_file () {
    { [ ! -e "$1" ] || [ -d "$1" ] ; } && return 1

    file_WHOLE=$1
    file_BASE=`basename $file_WHOLE`
    file=`echo $file_WHOLE | sed "s,^$DISTDIR/qt/,,"`
    { [ -z $file ] || [ $file = "/" ] ; } && return 1
    KEEP=

    if
	 # no qdoc conf
	 [ "$file_BASE" = "doc.conf" ] ||

	 # internal docs
	 [ "$file_BASE" = "TODO.txt" ] ||
	 [ "$file_BASE" = "BUGS.txt" ] ||

	 # no make.help
	 [ "$file_BASE" = "make.help" ] ||

	 # utils, except scripts
	 { myexpr "$file" : '^util\/' && ! myexpr "$file" : '^util\/scripts\/' ; } ||

	 # no ~ files
	 myexpr "$file_BASE" : '.*~$' ||

	 # no gif
	 myexpr "$file" : 'gif\/' ||

	 # no configs
	 myexpr "$file" : 'configs\/' ||
	 [ "$file" = "LICENSE.TROLL" ] ||

	 # no makefiles, except freetype2
	 { [ "$file_BASE" = "GNUmakefile" ] && myexpr "$file" : 'src\/3rdparty\/freetype2\/' ; }   ||
	 { [ "$file_BASE" = "GNUmakefile-kde" ] && myexpr "$file" : 'src\/3rdparty\/freetype2\/' ; } ||
	 { [ "$file_BASE" = "Makefile" ] && myexpr "$file" : 'src\/3rdparty\/freetype2\/' ; } ||
	 myexpr "$file" : 'src\/Makefile\..*' ||

	 # no mak files
	 { myexpr "$file_BASE" : '.*\.mak$' && ! myexpr "$file_BASE" : '.*\/libpng\/' ; } ||

	 # no *.inc files
	 myexpr "$file_BASE" : '.*\.inc$' ||

	 # some bins
	 myexpr "$file_BASE" : 'bin\/.*_make_.*$' ||
	 myexpr "$file" : 'bin\/syncqt.*$' ||

	 # Everything under dist
	 myexpr "$file" : '^dist\/' ||

	 # no tests
	 myexpr "$file" : '.*\/tests\/.*' || myexpr "$file" : '^tests\/.*'
     then
	    KEEP=no
     elif
	 # for the love of god! keep qmake! all hail qmake!
	 myexpr "$file" : "^qmake\/" ||

	 # the scripts, for now
	 myexpr "$file" : "^util\/scripts\/" ||

	 # everything in the subdirectories of src/doc/
	 { myexpr "$file" : "^src\/doc\/" && [ ! "$file_BASE" = "Makefile" ] ; } ||

	 # all c++ files under .../src/
	 myexpr "$file" : "\(^|\/\)src\/.*\.\(\(cpp\)|h|c|\(pro\)\)$" ||
	 myexpr "$file" : "\(^|\/\)src\/qt\.t$" ||

	 # include (empty)
	 [ "$file" = "include" ] ||

	 # all doc files except in tests
	 myexpr "$file_BASE" : ".*\.doc$" ||

	 # the changes files
	 myexpr "$file" : "^changes-" ||

	 # /configure
	 [ "$file" = "configure" ] ||

	 # the tools files
	 myexpr "$file" : "^tools\/.*\.\(\(cpp\)|h|\(pro\)|\(qm\)|\(po\)|\(xpm\)|\(xbm\)|\(png\)|\(bmp\)|\(gif\)|\(ui\)|1|\(txt\)|\(html\)|\(css\)\)$" ||
	 myexpr "$file" : "^tools\/designer\/integration\/.*\.\(\(clw\)|\(def\)|\(odl\)|\(rc\)|\(dsp\)|\(rc2\)|\(el\)|t\)" ||
	 myexpr "$file" : "^tools\/.*\/README" ||
	 myexpr "$file" : "^tools\/.*\/COPYING" ||
	 myexpr "$file" : "^tools\/.*\/HTML.manifest$" ||
	 myexpr "$file" : "^tools\/.*\/mkimages$" ||
	 myexpr "$file" : "^tools\/.*\/makeall$" ||
	 myexpr "$file" : "^tools\/designer\/designer\/.*\.\(\(rc\)|\(ico\)\)$" ||
	 myexpr "$file" : "^tools\/.*\/mksplash$" ||

	 # the tutorials
	 myexpr "$file" : "^tutorial\/t[0-9]*\/$" ||
	 # all c++ and pro files under tutorial
	 myexpr "$file" : "^tutorial\/.*\.\(\(cpp\)|h|\(pro\)\)$" ||

	 # the examples
	 myexpr "$file" : "^examples\/.*\/$" ||
	 # all c++, pro, qm, po and xpm files under examples
	 myexpr "$file" : "^examples\/.*\.\(\(cpp\)|h|\(pro\)|\(qm\)|\(po\)|\(xpm\)|\(map\)|\(txt\)|\(bmp\)|\(gif\)|\(pic\)|\(ppm\)|\(png\)|\(wav\)|\(any\)|\(xml\)\)$" ||
	 # all the junk from mpegplay in the kiosk example
	 myexpr "$file" : "^examples\/kiosk\/.+\..+$" ||
	 myexpr "$file" : "^examples\/kiosk\/README.*$" ||
	 myexpr "$file" : "^examples\/kiosk\/tags$" ||
	 # all the launcher files
	 myexpr "$file" : "^examples\/launcher\/.*\(\(\.im\)|\(\.pl\)|\(perpetual_launch\)|\(start_demo\)\)$" ||
	 # misc
	 [ "$file" = "examples/load/isdninfo" ] ||
	 myexpr "$file" : "examples/overlay_x11/README" ||
	 myexpr "$file" : "examples\/.*\.c$" ||

	 # the extensions
	 myexpr "$file" : "^extensions\/.*\/$" ||
	 # all c++, pro, qm, po and xpm files under extensions
	 myexpr "$file" : "^extensions\/.*\.\(\(cpp\)|h|\(pro\)|\(qm\)|\(po\)|\(xpm\)|\(map\)|\(txt\)|\(bmp\)|\(gif\)|\(pic\)|\(ppm\)|\(png\)|\(wav\)|\(any\)|c\)$" ||
	 myexpr "$file" : "^extensions\/.*\/isdninfo$" ||

	 # READMEs, NOTICE and such
	 myexpr "$file" : "^src\/\(\(.*\/\)|\)[A-Z]+$" ||
	 myexpr "$file" : "^src\/\(\(.*\/\)|\)[A-Z]+$" ||
	 myexpr "$file" : "^examples\/\(\(.*\/\)|\)[A-Z]+$" ||
	 myexpr "$file" : "^tutorial\/\(\(.*\/\)|\)[A-Z]+$" ||
	 myexpr "$file" : "^extensions\/\(\(.*\/\)|\)[A-Z]+$" ||
	 myexpr "$file" : "^extensions\/.*\/README\..*$" ||

	 # the moc
	 myexpr "$file" : "^src\/moc\/.*\.\(1|l|t|y\)$" ||

	 # All of tmake
	 myexpr "$file" : "^tmake\/" ||

	 # 3rdparty
	 myexpr "$file" : "src\/3rdparty\/$" ||
	 myexpr "$file" : "src\/3rdparty\/.*README$" ||
	 myexpr "$file" : "src\/3rdparty\/libmng\/" ||
	 myexpr "$file" : "src\/3rdparty\/libpng\/" ||
	 myexpr "$file" : "src\/3rdparty\/freetype2\/" ||
	 { myexpr "$file" : 'src\/3rdparty\/zlib\/' && [ ! "$file_BASE" = "Makefile" ] ; } ||
	 # More  of nsplugin example
	 myexpr "$file" : "extensions\/nsplugin\/examples\/.*\.\(\(mng\)|\(def\)|\(rc\)|\(cgi\)|\(g1n\)\)$" ||

	 # some bins
	 myexpr "$file" : "bin\/$" ||
	 myexpr "$file" : "bin\/findtr$" ||
	 myexpr "$file" : "bin\/qt20fix$" ||
	 myexpr "$file" : 'bin\/qmake$' ||
	 myexpr "$file" : "bin\/qtrename140$"
     then
	 KEEP=yes
     fi

     #fall back to asking..
     if [ -z "$KEEP" ]; then
	 echo -n "I've no idea what to do with $file, keep it? (yes or no): "
	 read KEEP
     fi
     [ "$KEEP" = "yes" ] && return 0
     return 1
}

copy_platform_files() {
    dir="$DISTDIR/qt/dist/$1"
    platform=$2
    o_dir=$3
    [ ! -d $dir ] && return 1
    for a in `find $dir`; do
	a_file=`echo $a | sed "s,$dir,,"`
	o_file=$a_file
	{ [ -z $a_file ] || [ -d $a ] ; } && continue

	if [ "$platform" = "qws" ]; then
	    case `basename $a` in
	    LICENSE|MAINIFEST|ANNOUNCE|README.QT|README|LICENSE.QPL) continue ;;
	    README.qws) o_file="README" ;;
	    esac
	elif [ "$platform" = "x11" ]; then
	    [ `basename $a` = "README.qws" ] && continue
	elif [ "$platform" = "win" ]; then
	    [ `basename $a` = "qmake.cache" ] && o_file=".qmake.cache"
	fi
	#do copy
	final_dir=`dirname $o_dir/$o_file`
	[ ! -d $final_dir ] && mkdir -p $final_dir
	[ -f $o_dir/$o_file ] && rm -f $o_dir/$o_file
	if [ -f "$dir/$a_file" ] && [ ! -e "$o_dir/$o_file" ] && [ ! -x "$dir/$a_dir" ]; then
	    sed -e "s/%YEAR%/$year/g" -e "s/%VERSION%/${BRANCH}${TYPE}/g" \
		-e "s/%VERSIONWIN%/${BRANCH_DIGITS}/g" $dir/$a_file >${TMP_FILE}
	    if [ "$TYPE" = "-snapshot" ]; then
		sed -e "s/%SNAPSHOTONLY\([^%]*\)%/\1/g" -e "s/%STABLEONLY[^%]*%//g" ${TMP_FILE} >$o_dir/$o_file
	    else
		sed -e "s/%SNAPSHOTONLY[^%]*%//g" -e "s/%STABLEONLY\([^%]\)*%/\1/g" ${TMP_FILE} >$o_dir/$o_file
	    fi
	else
	    cp -ar "$dir/$a_file" "$o_dir/$o_file"
	fi
    done
    return 0
}

for plat in mac win x11 qws; do
    #handle commandline options
    platformname=$plat
    plat2=$plat
    plat3=$plat
    case $plat in
    mac)
	[ "x$DO_MAC" = "xyes" ] || continue
	plat2=unix
	plat3=mac9
	;;
    qws)
	[ "x$DO_QWS" = "xyes" ] || continue
	platformname="embedded"
	plat2=unix
	;;
    x11)
	[ "x$DO_X11" = "xyes" ] || continue
	plat2=unix
	;;
    win)
	[ "x$DO_WIN" = "xyes" ] || continue
	;;
    *) die "Will probably need more info to package: $plat!" ;;
    esac
    status "****** Packing for platform: $plat ****" "1"

    PLAT_RM_FILE=${TMP_FILE}-plat-${plat}
    for edition in enterprise professional free; do
	dist_for_edition=$edition
	case $edition in
	enterprise)
	    [ "x$DO_ENTERPRISE" = "xyes" ] || continue
	    dist_for_edition="commercial"
	    ;;
	professional)
	    [ "x$DO_PROFESSIONAL" = "xyes" ] || continue
	    dist_for_edition="commercial"
	    ;;
	free)
	    { [ "$plat" != "qws" ] && [ "$plat" != "x11" ]; } || [ "x$DO_FREE" != "xyes" ] && continue
	    ;;
	esac

	#generate the manifest file
	if [ ! -e "$MANIFEST_FILE" ]; then
	    CREATED_MANIFEST=yes
	    status "Creating manifest file.."
	    for a in `find $DISTDIR/qt`; do
		[ -d $a ] && continue
		if public_file $a; then
		    echo $a | sed "s,^${DISTDIR}/qt,," >>${MANIFEST_FILE} 2>/dev/null || \
			    die "Could not write to manifest file";
		fi
	    done
	fi

	status "*** Packing $edition... *****" "1"
	PLATNAME=qt-${plat}-${edition}-${REL_VERSION}
	[ "$TYPE" = "-snapshot" ] && PLATNAME=`date "+${PLATNAME}-snapshot-%Y%m%d"`
	PLATDIR=$DISTDIR/$PLATNAME

	#copy the tree
	status "Copying the tree.."
	for a in `cat ${MANIFEST_FILE}`; do
	    d=${PLATDIR}/`dirname "$a"`
	    [ ! -d $d ] && mkdir -p $d
	    cp -a "$DISTDIR/qt/$a" "$d/`basename $a`"
	done
	#clean the tree a little
	status "First cleanup.."
	case $edition in
	free)
	    rm -f $PLATDIR/tools/designer/util/util-pro.pro
	    #remove non-GPL sql stuff
	    for f in src/sql/src/oci; do
		[ -d "$PLATDIR/$f" ] && rm -rf "$PLATDIR/$f"
	    done
	    ;;
	professional)
	    #Remove non-professional modules and stuff
	    for module in SQL Table XML OpenGL Network Canvas; do
		sed -e 's,\(<li>.*<a.*> *${module}</a>\),<!--\1-->,' $PLATDIR/doc/indices.doc >${TMP_FILE}
		mv ${TMP_FILE} $PLATDIR/doc/indices.doc
            done
	    for f in src/sql examples/sqltable examples/sql src/table examples/table \
		     src/canvas examples/canvas src/network examples/httpd examples/ftpclient \
                     examples/mail examples/networkprotocol src/opengl examples/box examples/gear \
                     examples/gear examples/glpixmap examples/overlay examples/sharedbox examples/texture ; do
		[ -d "$PLATDIR/$f" ] && rm -rf "$PLATDIR/$f"
	    done
	    #fix designer
	    rm -rf $PLATDIR/doc/*sql*.doc $PLATDIR/include/qsql*.h
	    rm -rf $PLATDIR/tools/designer/designer/propertyeditorsql.h $PLATDIR/tools/designer/plugins/wizards/*sql*
	    rm -rf $PLATDIR/include/qdatatable.h $PLATDIR/include/qdatabrowser.h $PLATDIR/include/qdataview.h
	    rm -rf $PLATDIR/doc/table.doc 
	    #xml is gross
	    mv $PLATDIR/src/xml/* $PLATDIR/tools/designer/util
	    rm -rf $PLATDIR/src/xml
	    mv $PLATDIR/tools/designer/util/util-pro.pro $PLATDIR/tools/designer/util.pro
	    ;;
        enterprise)
	    rm -f $PLATDIR/tools/designer/util/util-pro.pro
	    ;;
	esac
	if [ "$plat" != "qws" ]; then
	    #Remove qws from mkspec so that configure does not think we are running embedded
	    rm -rf $PLATDIR/mkspecs/qws
	fi
	rm -rf "$PLATDIR/examples/kiosk"
	rm -rf "$PLATDIR/src/3rdparty/libmng"
	rm -f "$PLATDIR/etc/fonts/unifont.bdf"
	rm -rf "$PLATDIR/tmake"
	rm -rf "$PLATDIR/util"
	rm -rf "$PLATDIR/tests"
	if [ "$plat" != "mac" ]; then
	    rm -f "$PLATDIR/src/styles/qaquastyle.h"
	    rm -f "$PLATDIR/include/qaquastyle.h"
	    rm -f "$PLATDIR/src/styles/qaquastyle.cpp"
	    rm -rf "$PLATDIR/src/styles/src/aqua"
	fi

	mkdir -p $PLATDIR/lib
	echo "If this directory is empty, you forgot to build the Qt library" >$PLATDIR/lib/README
	if [ "$plat" = "x11" ] || [ "$plat" = "qws" ] || [ "$plat" = "mac" ]; then
	    #configure.bat is for windows only
	    rm -f "$PLATDIR/configure.bat"
	    rm -f "$PLATDIR/bin/configure.exe"
	    #fix makefile mess
	    rm -f "$PLATDIR/Makefile" "$PLATDIR/qmake/Makefile" "$PLATDIR/qmake/GNUmakefile"
	    mv "$PLATDIR/GNUmakefile" "$PLATDIR/Makefile"

	    rm -rf "$PLATDIR/src/3rdparty/gsos"
	    if [ "$plat" = "qws" ]; then
		rm -rf "$PLATDIR/examples/biff"
		rm -rf "$PLATDIR/examples/desktop"
		rm -rf "$PLATDIR/examples/overlay_x11"
		rm -rf "$PLATDIR/extensions/xt" "$PLATDIR/include/qxt.h"
	    elif [ "$plat" = "x11" ]; then
		rm -rf "$PLATDIR/examples/winmanager"
		rm -rf "$PLATDIR/examples/compact"
		rm -rf "$PLATDIR/examples/notepad"
		rm -rf "$PLATDIR/examples/launcher"
		rm -rf "$PLATDIR/extensions/imageio"
		rm -rf "$PLATDIR/src/3rdparty/freetype2" "$PLATDIR/src/3rdparty/freetype"
		rm -f "$PLATDIR/src/widgets/qcompactstyle.h"
		rm -f "$PLATDIR/src/widgets/qcompactstyle.cpp"
	    elif [ "$plat" = "mac" ]; then
		rm -rf "$PLATDIR/examples/biff"
		rm -rf "$PLATDIR/examples/desktop"
		rm -rf "$PLATDIR/examples/overlay_x11"
		rm -rf "$PLATDIR/extensions/xt" "$PLATDIR/include/qxt.h"
		rm -rf "$PLATDIR/examples/winmanager"
		rm -rf "$PLATDIR/examples/compact"
		rm -rf "$PLATDIR/examples/notepad"
		rm -rf "$PLATDIR/examples/launcher"
		rm -rf "$PLATDIR/extensions/imageio"
		rm -rf "$PLATDIR/src/3rdparty/freetype2" "$PLATDIR/src/3rdparty/freetype"
		rm -f "$PLATDIR/src/widgets/qcompactstyle.h"
		rm -f "$PLATDIR/src/widgets/qcompactstyle.cpp"
	    fi
	elif [ "$plat" = "win" ]; then
	    #configure is for unix only
	    rm -f "$PLATDIR/configure"
	    #GNUmakefile is for unix only
	    rm -f "$PLATDIR/GNUmakefile" $PLATDIR/qmake/GNUmakefile* "$PLATDIR/qmake/Makefile.unix"
	    # delete the xt estension
	    rm -rf "$PLATDIR/extensions/xt"

	    # move the files into include
	    status "Moving header files.."
	    [ ! -d "$PLATDIR/include" ] && mkdir -p "$PLATDIR/include"
	    cp "$PLATDIR/src/tools/qconfig-dist.h" "$PLATDIR/xxx"
	    for a in $includefiles; do
		FILE=$PLATDIR/include/`basename $a`
		rm -f $FILE
		[ -e $PLATDIR/$a ] && mv $PLATDIR/$a $FILE >/dev/null 2>&1
	    done
	    mv "$PLATDIR/xxx" "$PLATDIR/src/tools/qconfig-dist.h"
	fi
	#don't need empty directories
	status "Pruning empty directories.."
	find $PLATDIR/ -type d -exec rmdir {} \; >/dev/null 2>&1

	#do the documentation
	if [ "x$DO_DOC" = "xyes" ]; then
	    status "Running qdoc.."
	    QTDIR=$PLATDIR $QDOC_PATH $DISTDIR/qt/util/qdoc/qdoc.conf >/dev/null 2>&1 || die "could not run qdoc, stopped"
	    for file in `find $PLATDIR/gif`; do
		mv $file $PLATDIR/doc/html/ >/dev/null 2>&1
            done
	    if [ "$plat" = "x11" ] || [ "$plat" = "qws" ]; then
		QTDIR=$PLATDIR/ $DISTDIR/qt/util/qdoc/man  $PLATDIR/ >/dev/null 2>&1 || die "could not run man, stopped"
	    fi
	fi
	if [ "$plat" = "win" ]; then
	    rm -rf "$PLATDIR/doc/man"
	    #since there is no man pages, move all docs to doc/
	    mv $PLATDIR/doc/html/* $PLATDIR/doc
	    rm -rf $PLATDIR/doc/html
	fi

	#remove excess files needed to generate documentation, but no longer needed for package
	#find $PLATDIR/tools/designer/manual/sgml/eg/book -name book.h | xargs rm -f
	#find $PLATDIR/tools/designer/manual/sgml/eg/book -name book.cpp | xargs rm -f
	#find $PLATDIR/tools/designer/manual/sgml/eg/book -name editbook.h | xargs rm -f
	#find $PLATDIR/tools/designer/manual/sgml/eg/book -name editbook.cpp | xargs rm -f

	#copy the platform dist stuff
	copy_platform_files "$platformname" $plat $PLATDIR #platform specific
	copy_platform_files "$dist_for_edition" $plat $PLATDIR #edition specific

	#remove platform specific files that don't belong
	status "Final cleanup.."
	if [ ! -e "$PLAT_RM_FILE" ]; then
	    for file in `find $PLATDIR -name '*_[a-z0-9]*\.*'`
	    do
		[ -d $file ] && continue
		match=`basename $file | sed "s,.*_,," | cut -d'.' -f1`
		case $match in
		unix|win|mac|x11|qws|mac9)
		    if [ "$match" != "$plat" ] && [ "$match" != "$plat2" ] && [ "$match" != "$plat3" ]; then
			rm -f $file
			echo $file | sed "s,^${PLATDIR},,g" >>$PLAT_RM_FILE
		    fi
		    ;;
		*) ;;
		esac
	    done
	else
	    for f in `cat $PLAT_RM_FILE`; do
		rm -f $PLATDIR/$f
	    done
	fi

	#actually package
	status "Packaging.." "1"
	(cd "$DISTDIR"
	if [ "$plat" = "x11" ] || [ "$plat" = "qws" ] || [ "$plat" = "mac" ]; then
	    status "Tar.."
	    tar cf "$OUT_TREE/${PLATNAME}.tar" "${PLATNAME}"
	    [ "$DO_GZIP" = "yes" ] && status "Gzip.." && gzip -c "$OUT_TREE/${PLATNAME}.tar" >"$OUT_TREE/${PLATNAME}.tar.gz"
	    [ "$DO_BZIP" = "yes" ] && status "Bzip2.." && bzip2 -z -c "$OUT_TREE/${PLATNAME}.tar" >"$OUT_TREE/${PLATNAME}.tar.bz2"
	elif [ "$plat" = "win" ]; then
	    txtfiles=""
	    binfiles=""
	    for fl in `find "${PLATNAME}"`; do
		extn=`echo $fl | sed "s,.*\.,,"`
		case $extn in
		dll|gif|png|jpg|bmp|any|pic|ppm|exe|zip|qm) binfiles="$fl $binfiles" ;;
		*)  txtfiles="$fl $txtfiles" ;;
		esac
	    done
	    status "Text files..."
	    { for a in $txtfiles; do echo $a; done ; } | zip -l9q $OUT_TREE/${PLATNAME}.zip -@
	    status "Binary files..."
	    { for a in $binfiles; do echo $a; done ; } | zip -9q $OUT_TREE/${PLATNAME}.zip -@
	fi
	)
	status "" "-1"

	#cleanup
	status "($edition cleanup)"
	rm -rf $PLATDIR
	status "** Done Packing $edition.. **" "-1"
    done
    [ -e "$PLAT_RM_FILE" ] && rm -f $PLAT_RM_FILE
    status "******** Done Packaging $plat *********" "-1"
done
status "(mkdists cleanup..)"
rm -rf $DISTDIR
rm -f ${TMP_FILE}
cp -a $MANIFEST_FILE $OUT_TREE/manifest >/dev/null 2>&1
[ "x$CREATED_MANIFEST" = "xyes" ] && rm -f ${MANIFEST_FILE}
status "mkdists done"
exit 0
