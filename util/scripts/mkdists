#!/bin/sh

REL_VERSION=0.0.0
BRANCH=
OUT_TREE=`pwd`
LOCAL_TREE=
DO_DOC=yes
DO_WIN=yes
DO_X11=yes
DO_MAC=no
DO_QWS=yes
DO_FREE=yes
DO_GZIP=yes

die()
{
    echo $1
    exit 666
}

#parse commandline
showhelp() 
{
    [ ! -z "$1" ] && echo "Unknown Option: $1"
    echo "$0 [options]"
    echo
    echo "Options:"
    echo "-local <directory>"
    echo "-outdir <directory>"
    echo "-nodoc"
    echo "-nowin"
    echo "-nox11"
    echo "-noqws"
    echo "-nofree"
    echo "-nogzip"
    exit 666
}

while [ -n "$1" ]; do
   case $1 in
   -version)
       shift
       VAR=version
       VAL=$1
       ;;
   -help)
       showhelp
       ;;
   -outdir)
	shift
	VAR=outdir
	VAL=$1
	;;
   -local)
   	shift
   	VAR=local   
        VAL=$1
	;;
   -no*)
   	VAR=`echo $1 | sed "s,^-no-*,,g"`
	VAL=no
	;;
   -do*)
   	VAR=`echo $1 | sed "s,^-do-*,,g"`
	VAL=yes
	;;
   --*=*)
        VAR=`echo $1 | sed "s,^--\(.*\)=.*$,\1,"`
        VAL=`echo $1 | sed "s,^--.*=\(.*\)$,\1,"`
	;;
   *)
        showhelp $1
	;;
   esac
   shift

   case $VAR in
   doc) DO_DOC=$VAL ;;
   win) DO_WIN=$VAL ;;
   x11) DO_X11=$VAL ;;
   mac) DO_MAC=$VAL ;;
   qws) DO_QWS=$VAL ;;
   free)DO_FREE=$VAL;;
   gzip)DO_GZIP=$VAL;;
   version) 
       if ! expr "$VAL" : ".*\.\d*" >/dev/null 2>&1; then
	  die "Can't figure out version from $VAL"
       fi
       REL_VERSION=$VAL
       BRANCH=`echo $VAL | sed "s,\([0-9]*\.[0-9]*\).*,\1,"`
       LABEL="qt/$VAL";;
   local) 
       if [ ! -d "$VAL" ]; then
	  die "Unknown directory: $VAL"
       fi
       BRANCH="0.0.0"
       LOCAL_TREE=$VAL;;
   outdir)
	[ ! -d "$VAL" ] && mkdir -p "$VAL"
	OUT_TREE=$VAL;;
   esac
done
BRANCH="main"

BRANCH_DIGITS=`echo $BRANCH | sed "s,\.,,g" | sed "s,\(\d\d\d\).*,\1,"`
MYNAME=`whoami`
[ -z $MYNAME ] && MYNAME="shellssuck"
DISTDIR="/tmp/qt-$BRANCH-$MYNAME-$$"


#Checkout P4
if [ -z $LOCAL_TREE ]; then
    if ! p4 fstat //depot/qt/$BRANCH/doc.conf 2>&1 | grep " depotFile " >/dev/null 2>&1 ; then
	die "//depot/qt/$BRANCH/... is not in the depot, stopped" 
    fi
    if ! p4 labels 2>&1 | grep "^Label $LABEL" >/dev/null 2>&1 ; then
        die "Label $LABEL does not exist, stopped"
    fi
    checkoutlabel=""
    if p4 label -o $LABEL | grep '^Options:.*locked' >/dev/null 2>&1; then
        checkoutlabel="@${LABEL}"
    fi
    echo "Exporting the entire Qt depot $checkoutlabel..";

    tmpclient="qt-release-tmp-$MYNAME";
    p4 client -t qt-release-3x -o $tmpclient >/tmp/tmp_file
    sed /tmp/tmp_file -e "s,^Root:.*,Root: $DISTDIR," -e "s,/qt/X.Y/,/qt/$BRANCH/,g" \
	    -e "s,^\(Client: \).*,\1qt-release-tmp-$$," -e "s,\bnomodtime\b,modtime," | \
      p4 -s client -i >/dev/null 2>&1

    p4 -s -c $tmpclient sync -f $DISTDIR/qt/...${checkoutlabel} >/dev/null 2>&1
else
    echo "Copying Qt depot.."
    cp -ar $LOCAL_TREE $DISTDIR
fi

myexpr () {
    echo "$1" | egrep "$3" >/dev/null 2>&1
    return
}

#Remove non-dist files (tests-dir, util-dir, ... )
echo "Cleaning up distributions.."
FILES=`find $DISTDIR/qt/`
for file in $FILES; do
    [ -d $file ] && continue

    file_DIR=`dirname $file`
    file_BASE=`basename $file`
    file_WHOLE=$file
    file=`echo $file | sed "s,^$DISTDIR/qt/,,"`
    KEEP=

    if
    	 # no qdoc conf
	 [ "$file_BASE" = "doc.conf" ] ||

	 # no make.help
	 [ "$file_BASE" = "make.help" ] ||

	 # Everything under dist
	 myexpr "$file" : '^dist\/' ||

	 # no tests
	 myexpr "$file" : '.*\/tests\/' ||
	 myexpr "$file" : '^tests\/' ||

	 # utils, except scripts
	 { myexpr "$file" : '^util\/' && ! myexpr "$file" : '^util\/scripts\/' } ||

	 # no ~ files
	 myexpr "$file_BASE" : '.*~$' ||

	 # no gif
	 myexpr "$file" : 'gif\/' ||

	 # no configs
	 myexpr "$file" : 'configs\/' ||
	 [ "$file" = "LICENSE.TROLL" ] ||

	 # no makefiles, except freetype2
	 { [ "$file_BASE" = "GNUmakefile" ] && myexpr "$file" : 'src\/3rdparty\/freetype2\/' }   ||
	 { [ "$file_BASE" = "GNUmakefile-kde" ] && myexpr "$file" : 'src\/3rdparty\/freetype2\/' } ||
	 { [ "$file_BASE" = "Makefile" ] && myexpr "$file" : 'src\/3rdparty\/freetype2\/' } ||
	 myexpr "$file" : 'src\/Makefile\..*' ||

	 # no mak files
	 { myexpr "$file_BASE" : '.*\.mak$' && ! myexpr "$file_BASE" : '.*\/libpng\/' } ||

	 # no *.inc files
	 myexpr "$file_BASE" : '.*\.inc$' ||

	 # some bins
	 myexpr "$file_BASE" : 'bin\/.*_make_.*$' ||
	 myexpr "$file" : 'bin\/syncqt.*$'
     then
	    KEEP=no
     elif
	 # the scripts, for now
	 myexpr "$file" : "^util\/scripts\/" ||

	 # everything in the subdirectories of src/doc/
	 { myexpr "$file" : "^src\/doc\/" && [ ! "$file_BASE" = "Makefile" ] } ||

	 # all c++ files under .../src/
	 myexpr "$file" : "\(^|\/\)src\/.*\.\(\(cpp\)|h|c|\(pro\)\)$" ||
	 myexpr "$file" : "\(^|\/\)src\/qt\.t$" ||

	 # include (empty)
	 [ "$file" = "include" ] ||

	 # all doc files except in tests
	 myexpr "$file_BASE" : ".*\.doc$" ||

	 # the changes files
	 myexpr "$file" : "^changes-" ||

	 # /configure
	 [ "$file" = "configure" ] ||

	 # the tools files
	 myexpr "$file" : "^tools\/.*\.\(\(cpp\)|h|\(pro\)|\(qm\)|\(po\)|\(xpm\)|\(xbm\)|\(png\)|\(bmp\)|\(gif\)|\(ui\)|1|\(txt\)|\(html\)|\(css\)\)$" ||
	 myexpr "$file" : "^tools\/designer\/integration\/.*\.\(\(clw\)|\(def\)|\(odl\)|\(rc\)|\(dsp\)|\(rc2\)|\(el\)|t\)" ||
	 myexpr "$file" : "^tools\/.*\/README" ||
	 myexpr "$file" : "^tools\/.*\/COPYING" ||
	 myexpr "$file" : "^tools\/.*\/HTML.manifest$" ||
	 myexpr "$file" : "^tools\/.*\/mkimages$" ||
	 myexpr "$file" : "^tools\/.*\/makeall$" ||
	 myexpr "$file" : "^tools\/designer\/designer\/.*\.\(\(rc\)|\(ico\)\)$" ||
	 myexpr "$file" : "^tools\/.*\/mksplash$" ||

	 # the tutorials
	 myexpr "$file" : "^tutorial\/t[0-9]*\/$" ||
	 # all c++ and pro files under tutorial
	 myexpr "$file" : "^tutorial\/.*\.\(\(cpp\)|h|\(pro\)\)$" ||

	 # the examples
	 myexpr "$file" : "^examples\/.*\/$" ||
	 # all c++, pro, qm, po and xpm files under examples
	 myexpr "$file" : "^examples\/.*\.\(\(cpp\)|h|\(pro\)|\(qm\)|\(po\)|\(xpm\)|\(map\)|\(txt\)|\(bmp\)|\(gif\)|\(pic\)|\(ppm\)|\(png\)|\(wav\)|\(any\)|\(xml\)\)$" ||
	 # all the junk from mpegplay in the kiosk example
	 myexpr "$file" : "^examples\/kiosk\/.+\..+$" ||
	 myexpr "$file" : "^examples\/kiosk\/README.*$" ||
	 myexpr "$file" : "^examples\/kiosk\/tags$" ||
	 # all the launcher files
	 myexpr "$file" : "^examples\/launcher\/.*\(\(\.im\)|\(\.pl\)|\(perpetual_launch\)|\(start_demo\)\)$" ||
	 # misc
	 [ "$file" = "examples/load/isdninfo" ] ||
	 myexpr "$file" : "examples/overlay_x11/README" ||
	 myexpr "$file" : "examples\/.*\.c$" ||

	 # the extensions
	 myexpr "$file" : "^extensions\/.*\/$" ||
	 # all c++, pro, qm, po and xpm files under extensions
	 myexpr "$file" : "^extensions\/.*\.\(\(cpp\)|h|\(pro\)|\(qm\)|\(po\)|\(xpm\)|\(map\)|\(txt\)|\(bmp\)|\(gif\)|\(pic\)|\(ppm\)|\(png\)|\(wav\)|\(any\)|c\)$" |
	 myexpr "$file" : "^extensions\/.*\/isdninfo$" ||

	 # READMEs, NOTICE and such
	 myexpr "$file" : "^src\/\(\(.*\/\)|\)[A-Z]+$" ||
	 myexpr "$file" : "^src\/\(\(.*\/\)|\)[A-Z]+$" ||
	 myexpr "$file" : "^examples\/\(\(.*\/\)|\)[A-Z]+$" ||
	 myexpr "$file" : "^tutorial\/\(\(.*\/\)|\)[A-Z]+$" ||
	 myexpr "$file" : "^extensions\/\(\(.*\/\)|\)[A-Z]+$" ||
	 myexpr "$file" : "^extensions\/.*\/README\..*$" ||

	 # the moc
	 myexpr "$file" : "^src\/moc\/.*\.\(1|l|t|y\)$" ||

	 # All of tmake
	 myexpr "$file" : "^tmake\/" ||

	 # 3rdparty
	 myexpr "$file" : "src\/3rdparty\/$" ||
	 myexpr "$file" : "src\/3rdparty\/.*README$" ||
	 myexpr "$file" : "src\/3rdparty\/libmng\/" ||
	 myexpr "$file" : "src\/3rdparty\/libpng\/" ||
	 myexpr "$file" : "src\/3rdparty\/freetype2\/" ||
	 { myexpr "$file" : 'src\/3rdparty\/zlib\/' && [ ! "$file_BASE" = "Makefile" ] } ||
	 # More  of nsplugin example
	 myexpr "$file" : "extensions\/nsplugin\/examples\/.*\.\(\(mng\)|\(def\)|\(rc\)|\(cgi\)|\(g1n\)\)$" ||

	 # some bins
	 myexpr "$file" : "bin\/$" ||
	 myexpr "$file" : "bin\/findtr$" ||
	 myexpr "$file" : "bin\/qt20fix$" ||
	 myexpr "$file" : "bin\/qtrename140$"
     then
         KEEP=yes
     else
         echo -n "I've no idea what to do with $file, keep it? (yes or no): "
	 read KEEP
     fi

     [ "x$KEEP" = "xno" ] && rm -rf $file
done


# fixify qglobal's version number
qglobal="$DISTDIR/qt/src/tools/qglobal.h"
sed -e "s,\(\#define\s*QT_VERSION\s*\)[0-9]*,\1$BRANCH_DIGITS,g" \
    -e "s,\(\#define\s*QT_VERSION_STR\s+\"\)\([0-9.]*\),/1$BRANCH,g" $qglobal >/tmp/tmpf
mv /tmp/tmpf $qglobal
type=`grep QT_VERSION_STR ~/troll/qt3.x/src/tools/qglobal.h | awk '{ print $3 }' | sed 's,["0-9.]*\(-.*\)",\1,'`
if [ "$type" != "-snapshot" ] && ! myexpr "$type" : "^-beta[0-9]*$"; then
    die "The qt version is $BRANCH$type, which confuses me terribly";
fi

#TBD
#echo "Marking \$ID\$..."
#sub idify {
#    if ( -f $_ && ! -l $_ && -T $_ && open( I, "< $_" ) ) {
#	my $f = <I>;
#	my $o;
#	close I;
#	if ( defined( $f ) && $f =~ /\$Id(?::[^\$\n]*)?\$/s ) {
#	    my ( $mday, $mon, $year, $d );
#	    ($j,$j,$j,$mday,$mon,$year,$j,$j,$j) = localtime ( (stat($_))[9] );
#	    $d = $File::Find::dir;
#	    $d =~ s/^$qtdir/qt/;
#	    $d = sprintf( "%s/%s   %s%s   edited %04d-%02d-%02d",
#			  $d, $_, $version, $type, $year+1900, $mon+1, $mday );
#	    $o = $f;
#	    $f =~ s@\$Id(?::[^\$\n]*)?\$@\$Id\: $d \$@gsi;
#	    if ( $f ne $o ) {
#		my $x = ( -x $_ );
#		chmod 0644, $_;
#		open( O, "> $_" ) || die "could not write $File::Find::dir/$_";
#		print O $f;
#		close O;
#		if ( $x ) {
#		    chmod 0555, $_;
#		} else {
#		    chmod 0444, $_;
#		}
#	    }
#	}
#    }
#}
#find( \&idify, "$qtdir" );

#get include files
mkdir -p "$DISTDIR/qt/include"
includefiles=`$DISTDIR/qt/bin/syncqt -show`
for fullname in $includefiles; do
    fullname=`echo $fullname | sed "s,.*/,,"`
    ln -sf "../$fullname" "$DISTDIR/qt/include/$fullname"
done

#Generate documentation
mkdir -p "$DISTDIR/qt/doc"
mkdir -p "$DISTDIR/qt/doc/html"
mkdir -p "$DISTDIR/qt/doc/man"
mkdir -p "$DISTDIR/qt/doc/html/designer"
mkdir -p "$DISTDIR/qt/doc/html/designer/figures"
mkdir -p "$DISTDIR/qt/doc/html/designer/arrows"
mkdir -p "$DISTDIR/qt/doc/man/man3"
# and do the moc.1 hack here
mkdir -p "$DISTDIR/qt/doc/man/man1"
mv "$DISTDIR/qt/src/moc/moc.1" "$DISTDIR/qt/doc/man/man1"
if [ "x$DO_DOC" = "xyes" ]; then
    cp $DISTDIR/qt/tools/designer/manual/*.html $DISTDIR/qt/doc/html/designer
    cp $DISTDIR/qt/tools/designer/manual/figures/*.png $DISTDIR/qt/doc/html/designer/figures
    cp $DISTDIR/qt/tools/designer/manual/arrows/*.png $DISTDIR/qt/doc/html/designer/arrows
    rm -rf $DISTDIR/qt/tools/designer/manual
    rm -rf $DISTDIR/qt/tools/designer/doc

    echo "Running qdoc..";
    $QTDIR/util/qdoc/qdoc $DISTDIR/qt/util/qdoc/qdoc.conf >/dev/null 2>&1 || die "could not run qdoc, stopped"
    $DISTDIR/qt/util/qdoc/man  $DISTDIR/qt >/dev/null 2>&1 || die "could not run man, stopped"

    find $DISTDIR/qt/gif -exec mv {} $DISTDIR/qt/doc/html/ \; >/dev/null 2>&1
fi

# Replace Netscape-owned code with dummies (direct user to PluginSDK)
for a in `find $DISTDIR/qt/extensions/nsplugin/src -name 'np*' -o -name 'jri*'`; do
    rm -f $a
    echo "#error \"$a must be provided by Netscape\"" > $a
    echo "#error \"This file is just a placeholder. Please see the documentation\"" >>$a
    echo "#error \"to learn how to obtain the real file\"" >>$a
done

# changelogs?
[ ! -f "$DISTDIR/qt/dist/changes-$BRANCH" ] && echo "Warning: qt/dist/changes-$BRANCH does not exist"

# qt.h
rm -f "$DISTDIR/qt/include/qt.h"

#TBD
# qt/src/moc stuff
#open( I, "make -C $distdir/qt/src/moc -o moc.pro -o GNUmakefile mocgen.cpp |" ) || die "could not run make, stopped";
#$_ = <I>; # do anything with the input?  no?
#close I;
#open( I, "< $distdir/qt/src/moc/lex.yy.c" ) || die "could not read lex.yy.c, stopped";
#$_ = "/* Automatically generated at Trolltech by mkdists, Qt $version */\n" . <I>;
#close I;
#s/\n\#include\s+\<unistd\.h\>[^\n]*/\n\#if !defined(_OS_WIN32_)$&\n\#endif/g;
#open( O, "> $distdir/qt/src/moc/lex.yy.c" ) || die "could not write lex.yy.c, stopped";
#print O $_;
#close O;
#sleep 2; # Make very certain that mocgen.cpp has later timestamp than lex.yy.c
#open( I, "< $distdir/qt/src/moc/mocgen.cpp" ) || die "could not read mocgen.cpp, stopped";
#$_ = "/* Automatically generated at Trolltech by mkdists, Qt $version */\n" . <I>;
#close I;
#open( O, "> $distdir/qt/src/moc/mocgen.cpp" ) || die "could not write mocgen.cpp, stopped";
#print O $_;
#close O;

#  qgif.h
#$qgif = "$qtdir/src/kernel/qgif.h";
#open( I, "< $qgif" ) || die "could not read $qgif, stopped";
#$_ = <I>;
#close I;
#s/(\n\#define QT_BUILTIN_GIF_READER\s+)\S+/$1 0/g;
#open( O, "> $qgif.new" ) || die "could not write $qgif.new, stopped";
#print O $_;
#close O;
#unlink( $qgif );
#rename( "$qgif.new", $qgif );

# changes files
#$major = $version;
#$major =~ s/^(\d+\.\d+).*/$1/;
#opendir( D, "$distdir/qt/dist" );
#foreach ( readdir( D ) ) {
#    move( "$distdir/qt/dist/$_", "$distdir/qt/$_" ) if ( /^changes-$major\./ ||
#						         0 );
#}
#closedir( D );

for plat in mac win x11 qws; do
    #handle commandline options
    PLATNAME=qt-${plat}-commercial-${REL_VERSION}
    PLATDIR=$DISTDIR/$PLATNAME
    free=no
    plat2=
    case $plat in
    mac)
	[ "x$DO_MAC" = "xyes" ] || continue
        plat2=unix
	;;
    qws) 
	[ "x$DO_QWS" = "xyes" ] || continue
	plat2=unix
	free=$DO_FREE
        ;;
    x11)
	[ "x$DO_X11" = "xyes" ] || continue
	plat2=unix
	free=$DO_FREE
        ;;
    win)
	[ "x$DO_WIN" = "xyes" ] || continue
	;;
    esac
    echo "****** Packing for platform: $plat ****"
    cp -ar $DISTDIR/qt $PLATDIR
    
    #Remove the platform dependent files
    for file in `find $PLATDIR -name '*_[a-z][a-z1][a-z1].cpp' -o \
                               -name '*_[a-z][a-z1][a-z1].h' -o \
                               -name '*_[a-z][a-z1][a-z1].c'`
    do
        [ -d $file ] && continue
	match=`basename $file | sed "s,.*_,," | cut -d'.' -f1`
	[ "$match" != "$plat" ] && [ "$match" != "$plat2" ] && rm -rf $file
    done

    rm -rf "$PLATDIR/examples/kiosk"
    rm -rf "$PLATDIR/src/3rdparty/libmng"
    rm -f "$PLATDIR/etc/fonts/unifont.bdf"
    rm -rf "$PLATDIR/tmake"
    rm -rf "$PLATDIR/util"
    mkdir -p $PLATDIR/lib
    echo "If this directory is empty, you forgot to build the Qt library" >$PLATDIR/lib/README
    if [ "$plat" = "x11" ] || [ "$plat" = "qws" ]; then
	if [ "$plat" = "x11" ]; then
	    rm -rf "$PLATDIR/examples/biff"
	    rm -rf "$PLATDIR/examples/desktop"
	    rm -rf "$PLATDIR/examples/overlay_x11"
	    rm -rf "$PLATDIR/extensions/xt"
	elif [ "$plat" = "qws" ]; then
	    rm -rf "$PLATDIR/examples/winmanager"
	    rm -rf "$PLATDIR/examples/compact"
	    rm -rf "$PLATDIR/examples/notepad"
	    rm -rf "$PLATDIR/examples/launcher"
	    rm -rf "$PLATDIR/extensions/imageio"
	    rm -rf "$PLATDIR/src/3rdparty/freetype2"
	    rm -f "$PLATDIR/src/widgets/qcompactstyle.h"
	    rm -f "$PLATDIR/src/widgets/qcompactstyle.cpp"
	fi
    elif [ "$plat" = "win" ]; then
	rm -rf "$PLATDIR/doc/man"
	#since there is no man pages, move all docs to doc/
        mv $PLATDIR/doc/html/* $PLATDIR/doc
	rm -rf $PLATDIR/doc/html
	# delete the xt estension
	rm -rf "$PLATDIR/extensions/xt"
	rm -f "$PLATDIR/configure"

	# move the files into include
	[ ! -d "$PLATDIR/include" ] && mkdir -p "$PLATDIR/include"
	cp "$PLATDIR/src/tools/qconfig-dist.h" "$PLATDIR/xxx"
	includefiles=`$PLATDIR/bin/syncqt -show`
	for a in $includefiles; do
	    FILE=$PLATDIR/include/`basename $a`
	    rm -f $FILE
	    mv $PLATDIR/$a $FILE >/dev/null 2>&1
	done
	mv "$PLATDIR/xxx" "$PLATDIR/src/tools/qconfig-dist.h"
    fi

    #don't need empty directories
    find $PLATDIR/ -type d -exec rmdir {} \; >/dev/null 2>&1

    platformname=$plat
    [ "$plat" = "qws" ] && platformname="embedded"
    for d in "$DISTDIR/qt/dist/commercial" "$DISTDIR/qt/dist/$platformname"; do
	[ ! -d $d ] && continue
	for a in `find $d`; do
	    a_file=`echo $a | sed "s,$d,,"`
	    if [ "$plat" = "qws" ]; then
		case `basename $a` in
		LICENSE|MAINIFEST|ANNOUNCE|README.QT|README|LICENSE.QPL) continue ;;
		README) a_file="${a_file}.qws" ;;
		esac
	    elif [ "$plat" = "x11" ]; then
		[ `basename $a` = "README.qws" ] && continue
	    fi
	    #do copy
	    [ -f $PLATDIR/$a_file ] && rm -f $PLATDIR/$a_file
	    if [ -f $d/$a_file ] && [ ! -e $PLATDIR/$a_file ]; then
		sed -e "s/%YEAR%/$year/g" -e "s/%VERSION%/${BRANCH}${type}/g" \
                    -e "s/$VERSIONWIN%/${BRANCH_DIGITS}/g" $d/$a_file >/tmp/tmpf
		if [ "$type" = "-snapshot" ]; then
		    sed -e "s/%SNAPSHOTONLY\([^%]*\)%/\1/g" -e "s/%STABLEONLY[^%]*%//g" /tmp/tmpf >$PLATDIR/$a_file
		else
		    sed -e "s/%SNAPSHOTONLY[^%]*%//g" -e "s/%STABLEONLY\([^%]\)*%/\1/g" /tmp/tmpf >$PLATDIR/$a_file
		fi
	    else
		[ -f $PLATDIR/$a_file ] && rm -f $a_file
		cp -ar $d/$a_file $PLATDIR/$a_file
            fi
        done
    done

    echo "Packing..."
    if [ "$plat" = "x11" ] || [ "$plat" = "qws" ]; then
	cd "$DISTDIR"
	tar cf "$OUT_TREE/${PLATNAME}.tar" "${PLATNAME}"
	[ "$DO_GZIP" = "yes" ] && gzip -c "$OUT_TREE/${PLATNAME}.tar" >"$OUT_TREE/${PLATNAME}.tar.gz"
    elif [ "$plat" = "win" ]; then
	cd "$DISTDIR"
	find "${PLATNAME}" | zip $OUT_TREE/${PLATNAME}.zip -@ >/dev/null 2>&1
    fi

    #Remove database sources
    [ -d "$PLATDIR/src/sql" ] && rm -rf "$PLATDIR/src/sql"

    if [ "x$free" = "xyes" ]; then
	cd "$DISTDIR"
	OLDPLATDIR=$PLATDIR
	PLATNAME=`echo $PLATNAME | sed "s,commercial,free,"`
	PLATDIR=$DISTDIR/$PLATNAME
	mv "$OLDPLATDIR" "$PLATDIR"
	
        echo "Doing free.."
        #remove commercial licenses
	for a in `find $DISTDIR/qt/dist/commercial`; do
	    FILE=`echo $a | sed "s,$DISTDIR/qt/dist/commercial,,"`
	    [ -z $FILE ] && continue
	    rm -f $PLATDIR/$FILE
        done

        #copy free licenses
	for a in `find $DISTDIR/qt/dist/free`; do
	    a_file=`echo $a | sed "s,$DISTDIR/qt/dist/free,,"`
	    if [ "$plat" = "qws" ]; then
		case `basename $a` in
		LICENSE|MAINIFEST|ANNOUNCE|README.QT|README|LICENSE.QPL) continue ;;
		README) a_file="${a_file}.qws" ;;
		esac
	    elif [ "$plat" = "x11" ]; then
		[ `basename $a` = "README.qws" ] && continue
	    fi
	    #do copy
	    [ -f $PLATDIR/$a_file ] && rm -f $PLATDIR/$a_file
	    if [ -f $d/$a_file ] && [ ! -e $PLATDIR/$a_file ]; then
		sed -e "s/%YEAR%/2000/g" -e "s/%VERSION%/${BRANCH}$type/g" \
                    -e "s/%VERSIONWIN%/${BRANCH_DIGITS}/g" $d/$a_file >/tmp/tmpf
		if [ "$type" = "-snapshot" ]; then
		    sed -e "s/%SNAPSHOTONLY\([^%]*\)%/\1/g" -e "s/%STABLEONLY[^%]*%//g" /tmp/tmpf >$PLATDIR/$a_file
		else
		    sed -e "s/%SNAPSHOTONLY[^%]*%//g" -e "s/%STABLEONLY\([^%]\)*%/\1/g" /tmp/tmpf >$PLATDIR/$a_file
		fi
	    else
		[ -f $PLATDIR/$a_file ] && rm -f $a_file
		cp -ar $DISTDIR/qt/dist/free/$a_file $PLATDIR/$a_file
            fi
        done
	
        #zip free editions
	echo "Packing free..."
	cd "$DISTDIR"
	tar cf $OUT_TREE/${PLATNAME}.tar ${PLATNAME}
	[ "$DO_GZIP" = "yes" ] && gzip -c $OUT_TREE/${PLATNAME}.tar >$OUT_TREE/${PLATNAME}.tar.gz
    fi
    rm -rf $PLATDIR
    echo "******** Done Packaging $plat *********"
done
rm -rf $DISTDIR
echo "mkdists done"
