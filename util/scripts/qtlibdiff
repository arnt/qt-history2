#!/usr/bin/perl
$USAGE='
 Examine differences between two Qt versions.

 Usage:  qtlibdiff $QTOLDDIR $QTDIR
   directories must contain include/ and lib/ of Qt release.
';

die "$USAGE" if $#ARGV != 1;

$OLD=$ARGV[0];
$NEW=$ARGV[1];
$OLDLIB="$OLD/lib/libqt.so";
$NEWLIB="$NEW/lib/libqt.so";

open OUT, "| c++filt";

open OSYMS, "nm --size-sort $OLDLIB | sort +2 |";
while (<OSYMS>) {
    ($size,$type,$symbol) = $_ =~ /(\S+)\s+(\S+)\s+(\S+)/;
    $osize{$symbol} = $size if $type =~ /[A-Z]/;
}

open NSYMS, "nm --size-sort $NEWLIB | sort +2 |";
while (<NSYMS>) {
    ($size,$type,$symbol) = $_ =~ /(\S+)\s+(\S+)\s+(\S+)/;
    $nsize{$symbol} = $size if $type =~ /[A-Z]/;
}

for $symbol ( keys %osize ) {
    if ( defined($nsize{$symbol}) ) {
# print "OK: $symbol\n";
	if ( $symbol =~ /^_vt\.\d+([^\.]*)/ ) {
	    $classname = $1;
	    if ( $nsize{$symbol} ne $osize{$symbol} ) {
		print OUT "WARNING: Virtual table of $classname:".
		      "  $osize{$symbol} -> $nsize{$symbol}\n";
	    }
	    $classes{$classname}=1;
	} elsif ( $symbol =~ /^__(\d+)([^\.]*)/ ) {
	    $classname = substr $2, 0, $1;
	    $classes{$classname}=1;
	}
    } else {
	push @gone, $symbol;
	print OUT "REMOVED: $symbol\n";
    }
}
for $symbol ( keys %nsize ) {
    print OUT "NEW: $symbol\n" if !defined($osize{$symbol});
}

sub sizes
{
    my ($dir) = @_;
    my (%objectsize);

    open CPP, ">/tmp/t$$.cpp";
    print CPP "#define INCLUDE_MENUITEM_DEF\n";

    open HEADERS, "/bin/ls $dir/include ".q{| grep -v -e 'qmutex.h' -e 'qgl.h' | grep '\.h$' |};
    while (<HEADERS>) {
	chomp;
	$h = $_;
	open HEADER, "<$dir/include/$h";
	while (<HEADER>) {
	    if ( /class\s+Q_EXPORT\s+([^\s:;{]+)[^;]*$/ ) {
		next if $1 =~ /[a-z][TM]$/;
		next if $1 eq "QSignalDictIt";
		next if $1 eq "QSignalDict";
		$pubclasses{$1}=1;
	    }
	}
	print CPP "#include \"$h\"\n";
    }

    print CPP "main() {\n";
    for $class ( keys %pubclasses ) {
	print CPP qq{  printf("$class %d\\n",sizeof($class));\n}
    }
    print CPP "}\n";
    close CPP;
    system("gcc /tmp/t$$.cpp -I$dir/include -L$dir/lib -lqt");
    open SIZES, "./a.out |";
    while (<SIZES>) {
	($class,$size) = $_ =~ /(\S+) (\S+)/;
	$objectsize{$class}=$size;
    }
    return %objectsize;
}

%old = sizes $OLD;
%new = sizes $NEW;

for $c ( keys %old ) {
    print OUT "OBJECTSIZE: $c $old{$c} -> $new{$c}\n" if $old{$c} ne $new{$c};
}

close OUT;
