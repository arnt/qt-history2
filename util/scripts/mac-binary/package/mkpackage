#!/bin/sh 

#bugs:
#Versions/Current is wrong
#examples .xcodes do not work for non-admin types
#arch in QtCore.framework is probably wrong

#options
OUTPUT_DIR=`pwd`/outputs
cd `dirname $0` #now we live in the mkpackage location
USE_SEPARATE=no
TMP_DIR=/tmp/qt-stuff
PACKAGE_DIR=`(cd ../install && pwd)`
PACKAGE_OPTIONS=
PACKAGES=
COMMAND_PAX="/System/Library/PrivateFrameworks/Installation.framework/Resources/pax" #yes that pax, don't ask!
if [ '!' -x "$COMMAND_PAX" ]; then
   COMMAND_PAX=pax
fi
README=
LICENSE=
MAKE_META=
MAKE_IMAGE=no

#versioning
QT_SET_VERSION=no
QT_MAJOR_VERSION=4
QT_MINOR_VERSION=0
QT_PATCH_VERSION=0

#QTDIR stuff
BINARY_DIR=
SOURCE_DIR=
SOURCE_PACKAGE=

doStringReplace()
{
    sed -e "s,\\\$VERSION_MAJOR\\\$,$QT_MAJOR_VERSION,g" -e "s,\\\$VERSION_MINOR\\\$,$QT_MINOR_VERSION,g" \
	-e "s,\\\$VERSION_PATCH\\\$,$QT_PATCH_VERSION,g" "$1" >tmp.out
    mv -f tmp.out "$2"
}

while [ -n "$1" ]; do
   CACHE_1="$1"
   OPTION=
   ARG=
   case $1 in
   -*=*) #gnu style
     OPTION=`echo $1 | sed 's,-\([^=]*\)=\(.*\),\1,'`
     ARG=`echo $1 | sed 's,-\([^=]*\)=\(.*\),\2,'`
     ;;
   -output|-packages|-qtbins|-qtsrcs|-qtdir|-qtpackage|-version|-license|-readme) #second arg style
     OPTION=`echo $1 | sed 's,-\([^=]*\),\1,'`
     shift
     ARG=$1
     ;;          
   -no-*) #no style
     OPTION=`echo $1 | sed 's,-no-\([^=]*\),\1,'`
     ARG=no
     ;;
   -*) #yes style
     OPTION=`echo $1 | sed 's,-\([^=]*\),\1,'`
     ARG=yes
     ;;
   *) #other
     OPTION=package
     ARG="$1"
     ;;
   esac
   shift
   case "$OPTION" in
   readme) README="$VAL" ;;
   license) LICENSE="$VAL" ;;
   all) USE_SEPARATE="$VAL" ;;
   qtpackage) SOURCE_PACKAGE="$ARG" ;;
   qtsrcs) SOURCE_DIR="$ARG" ;;
   qtbins|qtdir) BINARY_DIR="$ARG" ;;
   output) OUTPUT_DIR="$ARG" ;;
   packages) PACKAGE_DIR="$ARG" ;;
   meta) MAKE_META="$ARG" ;;
   package) PACKAGES="$PACKAGES $ARG" ;;
   image) MAKE_IMAGE="$ARG" ;;
   version) 
       MAJOR=`echo $ARG | cut -d. -f1`
       if [ -z "$MAJOR" ]; then
           echo "Invalid version: $ARG"
       else
	   MINOR=`echo $ARG | cut -d. -f2`
	   [ -z "$MINOR" ] && MINOR=0
	   PATCH=`echo $ARG | cut -d. -f3`
	   [ -z "$PATCH" ] && PATCH=0
	   QT_MAJOR_VERSION=$MAJOR
	   QT_MINOR_VERSION=$MINOR
	   QT_PATCH_VERSION=$PATCH
	   QT_SET_VERSION=yes
       fi
       ;;
   help|*)
       [ "$OPTION" = "help" ] || echo "Unknown option $CACHE_1!" 
       echo "Help!!"
       exit 888;
       ;;
   esac  
done

#get the QTDIR setup
[ -z "$BINARY_DIR" ] && [ -z "$SOURCE_PACKAGE" ] && BINARY_DIR="$QTDIR"
if [ ! -z "$BINARY_DIR" ] && [ -z "$SOURCE_PACKAGE" ]; then
    if [ -z "$SOURCE_DIR" ]; then
        if [ -e "$BINARY_DIR/.qmake.cache" ]; then
	    SOURCE_DIR=`grep QT_SOURCE_TREE $BINARY_DIR/.qmake.cache | head -1 | cut -d'=' -f2- | awk '{ print $1; }'`
        else
	    SOURCE_DIR="$BINARY_DIR"
        fi
    fi
elif [ ! -z "$SOURCE_PACKAGE" ]; then
    rm -rf "$TMP_DIR/source"
    mkdir -p "$TMP_DIR/source"
    PACKAGE_NAME=`echo $SOURCE_PACKAGE | sed -e 's,.*\(qt-mac.*\),\1,'`
    EXTENSION=`echo $PACKAGE_NAME | sed -e 's,.*\.tar\.\(.*\),\1,'`
    PACKAGE_DEST=`echo $PACKAGE_NAME | sed -e 's,\(.*\)\.tar.*,\1,'`
    export QTDIR=$TMP_DIR/source/$PACKAGE_DEST
    export DYLD_LIBRARY_PATH=$QTDIR/lib:$DYLD_LIBRARY_PATH
    export DYLD_FRAMEWORK_PATH=$QTDIR/lib:$DYLD_FRAMEWORK_PATH
    export PATH=$QTDIR/bin:$PATH
    if (cd "$TMP_DIR/source" && gunzip -c "$SOURCE_PACKAGE" | tar xvf - && cd "$PACKAGE_DEST" && ./configure -qt-libpng -qt-libjpeg -qt-sql-sqlite -release -framework -confirm-license && make); then
          SOURCE_DIR="$QTDIR"
          BINARY_DIR="$SOURCE_DIR"
    else
         rm -rf "$TMP_DIR"
         exit 1
    fi
else
   echo "Only a source package or a source/binary directory can be specified!"
   exit 1   
fi

#find the license
if [ -z "$LICENSE" ] && [ -e "$SOURCE_DIR/dist/commercial/LICENSE" ]; then
   LICENSE="$SOURCE_DIR/dist/commercial/LICENSE"
fi

#find the README
if [ -z "$README" ] && [ -e "$SOURCE_DIR/dist/README" ]; then
    README="$SOURCE_DIR/dist/README"
fi

#find the version from the source package
if [ "$QT_SET_VERSION" = "no" ] && [ ! -z "$SOURCE_DIR" ]; then
     QT_VERSION_STR=`grep ^VERSION= $SOURCE_DIR/src/qbase.pri`
     if [ -n "$QT_VERSION_STR" ]; then
        QT_VERSION_STR=`echo $QT_VERSION_STR | cut -d= -f2`
	MAJOR=`echo $QT_VERSION_STR | cut -d. -f1`
	if [ -n "$MAJOR" ]; then
	    MINOR=`echo $QT_VERSION_STR | cut -d. -f2`
	    [ -z "$MINOR" ] && MINOR=0
	    PATCH=`echo $QT_VERSION_STR | cut -d. -f3`
	    [ -z "$PATCH" ] && PATCH=0
	    QT_MAJOR_VERSION=$MAJOR
	    QT_MINOR_VERSION=$MINOR
	    QT_PATCH_VERSION=$PATCH
	fi
    fi
fi

#just do all the packages
if [ -z "$PACKAGES" ]; then
    [ -z "$MAKE_META" ] && MAKE_META=yes
    for a in $PACKAGE_DIR/*; do
	if [ -d "$a" ]; then
	    package=`basename $a`
	    [ "$USE_SEPARATE" = "no" ] && [ -e "$a/.build_separate" ] && continue
            PACKAGES="$PACKAGES $package"
        fi
    done
fi

#setup some default package options
[ -z "$SOURCE_PACKAGE" ] || PACKAGE_OPTIONS="$PACKAGE_OPTIONS --qtpackage=${SOURCE_PACKAGE}"
[ -z "$SOURCE_DIR" ] || PACKAGE_OPTIONS="$PACKAGE_OPTIONS --qtsrc=${SOURCE_DIR}"
[ -z "$BINARY_DIR" ] || PACKAGE_OPTIONS="$PACKAGE_OPTIONS --qtbin=${BINARY_DIR}"

mkdir -p "$TMP_DIR"
find .. -name '*~' -exec rm {} \; #just get rid of these before they end up in my package

#create the license information
if [ -e "$LICENSE" ]; then
   mkdir -p "$TMP_DIR/licenses"

   if [ "$MAKE_IMAGE" = "yes" ]; then
       echo "Creating disk image license"
       rm -f "$TMP_DIR/licenses/dmg_license.r"
       cat >>"$TMP_DIR/licenses/dmg_license.r" <<EOF
data 'LPic' (5000) {
    $"0002 0011 0003 0001 0000 0000 0002 0000"
    $"0008 0003 0000 0001 0004 0000 0004 0005"
    $"0000 000E 0006 0001 0005 0007 0000 0007"
    $"0008 0000 0047 0009 0000 0034 000A 0001"
    $"0035 000B 0001 0020 000C 0000 0011 000D"
    $"0000 005B 0004 0000 0033 000F 0001 000C"
    $"0010 0000 000B 000E 0000"
};
data 'TEXT' (5002, "English") {
EOF
       exec 3<"$LICENSE"
       while read line <&3; do
            echo $line | sed -e "s,\",',g" -e 's,^\(.*\)$,"\1\\n",g' >>"$TMP_DIR/licenses/dmg_license.r"
       done
       exec 3>&-
       cat >>"$TMP_DIR/licenses/dmg_license.r" <<EOF
};

resource 'STR#' (5002, "English") {
    {   /* array StringArray: 9 elements */
        /* [1] */
        "English",
        /* [2] */
        "Agree",
        /* [3] */
        "Disagree",
        /* [4] */
        "Print",
        /* [5] */
        "Save...",
        /* [6] */
        "IMPORTANT - Read this License Agreement carefully before clicking on "
        "the \"Agree\" button.  By clicking on the \"Agree\" button, you agree "
        "to be bound by the terms of the License Agreement.",
        /* [7] */
        "Software License Agreement",
        /* [8] */
        "This text cannot be saved. This disk may be full or locked, or the file "
        "may be locked.",
        /* [9] */
        "Unable to print. Make sure you<D5>ve selected a printer."
    }
};
EOF
   fi

   echo "Creating license richtext"
   rm -f "$TMP_DIR/licenses/License.rtf"
   cat >>"$TMP_DIR/licenses/License.rtf" <<EOF
{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Oblique;\f2\fswiss\fcharset77 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh9000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
EOF
   sed -e 's,^\(Qt COMMERCIAL\) \(LICENSE AGREEMENT\)$,\\f0\\fs24 \\cf0 \\ul \\ulc0 \1 \\ulnone \2 \\f0\\i0,g' \
       -e 's,^\([0-9]*\)\. ,\\f2\\b \1 \\f0\\b0. ,g' \
       -e 's,\(^[A-Z][A-Z :]*$\),\\f2\\b \1 \\f0\\b0,g' \
       -e 's,\(^Agreement version [0-9].[0-9]$\),\\f1\\i \1 \\f0\\i0,g' \
       -e 's,^\(.*\)$,\1\\,g' \
       "$LICENSE" >>"$TMP_DIR/licenses/License.rtf"
   echo "}" >>"$TMP_DIR/licenses/License.rtf"

else
   echo "No license file found!"
   exit 1
fi

#create the packages
PKG_CREATED=
for package in $PACKAGES; do
    [ "$package" = "none" ] && continue
    if [ !  -e "$PACKAGE_DIR/$package/Info.plist" ]; then
	echo "$package is not a valid package!!"
	continue
    fi
    rm -rf "$TMP_DIR/package" #cleanup

    #create files
    echo "Creating package [$package].."
    mkdir -p "$TMP_DIR/package"
    if [ -x "$PACKAGE_DIR/$package/create_package.sh" ]; then
	if (cd $PACKAGE_DIR/$package/ && VERSION_MAJOR="$QT_MAJOR_VERSION" VERSION_MINOR="$QT_MINOR_VERSION" VERSION_PATCH="$QT_PATCH_VERSION" "$PACKAGE_DIR/$package/create_package.sh" $PACKAGE_OPTIONS --outdir="$TMP_DIR/package"); then
              true
         else
              echo "  Package failed"
              continue
         fi
    fi
    #(cd $TMP_DIR/package && /bin/bash)

    #create .pkg
    package_dir="$OUTPUT_DIR/packages/Qt_${package}.pkg"
    rm -rf "$package_dir"
    echo "  Creating installation.. ($package_dir)"
    mkdir -p "$package_dir/Contents"
    doStringReplace "$PACKAGE_DIR/$package/Info.plist" "$package_dir/Contents/Info.plist"
    (cd "$TMP_DIR/package" && $COMMAND_PAX -w -x cpio -f "$package_dir/Contents/Archive.pax" "." >/dev/null 2>&1)
    gzip "$package_dir/Contents/Archive.pax"
    echo "pmkrpkg1" >"$package_dir/Contents/PkgInfo"
    mkbom "$TMP_DIR/package" "$package_dir/Contents/Archive.bom"
    mkdir -p "$package_dir/Contents/Resources"
    #link the files (for compat)
    ln -sf "../Archive.bom" "$package_dir/Contents/Resources"
    ln -sf "../Archive.pax.gz" "$package_dir/Contents/Resources"
    #merge resources
    cp -r Resources/* "$package_dir/Contents/Resources"
    cp -r $PACKAGE_DIR/$package/Resources/* "$package_dir/Contents/Resources"
    cp "$TMP_DIR/licenses/License.rtf" "$package_dir/Contents/Resources"
    for a in $package_dir/Contents/Resources/*.plist $package_dir/Contents/Resources/*.info $package_dir/Contents/Resources/*flight $package_dir/Contents/Resources/*.rtf; do
	[ -e "$a" ] && doStringReplace "$a" "$a"
    done
    if [ -e "$package_dir/Contents/Resources/$package.info" ]; then
         mv "$package_dir/Contents/Resources/$package.info" "$package_dir/Contents/Resources/Qt_${package}.info"
    fi
    for a in $package_dir/Contents/Resources/*flight; do
        [ -e "$a" ] && chmod a+x $a #exe
    done
    for a in $package_dir/Contents/Resources/*Check; do
        if [ -e "$a" ]; then
	    chmod a+x "$a"
	    if [ -e "${a}.strings" ]; then
		for lang in English Norwegian French; do
		    mkdir "$package_dir/Contents/Resources/${lang}.lproj"
		    cp "${a}.strings" "$package_dir/Contents/Resources/${lang}.lproj"
                done
            fi
        fi
    done
    PKG_CREATED="$PKG_CREATED $package_dir"
done
if [ -z "$PKG_CREATED" ] && [ "$PACKAGES" = " none" ]; then
   if [ "$MAKE_META" = "yes" ] || [ "$MAKE_IMAGE" = "yes" ]; then
       PKG_CREATED=$OUTPUT_DIR/packages/*.pkg
       [ -z "$MAKE_META" ] && MAKE_META=yes
   fi
fi

#create meta package
if [ "$MAKE_META" = "yes" ]; then
    echo "Creating meta package.."
    rm -rf "$OUTPUT_DIR/Qt.mpkg/"
    mkdir -p "$OUTPUT_DIR/Qt.mpkg/"
    cp -r "MetaPackage" "$OUTPUT_DIR/Qt.mpkg/Contents"
    mkdir -p "$OUTPUT_DIR/Qt.mpkg/Contents/Resources"
    cp -r Resources/* "$OUTPUT_DIR/Qt.mpkg/Contents/Resources"
    cp "$TMP_DIR/licenses/License.rtf" "$OUTPUT_DIR/Qt.mpkg/Contents/Resources"
    for a in $OUTPUT_DIR/Qt.mpkg/Contents/*.plist $OUTPUT_DIR/Qt.mpkg/Contents/Resources/*.info $OUTPUT_DIR/Qt.mpkg/Contents/Resources/*.plist $OUTPUT_DIR/Qt.mpkg/Contents/Resources/*.rtf; do
	doStringReplace "$a" "$a"
    done

    PACKAGE_DICT="$TMP_DIR/pkg.dict"
    >"$PACKAGE_DICT"
    for package in $PKG_CREATED; do
	package_name=`basename $package`
	package_type=selected
	if [ "$package_name" = "Qt_libraries.pkg" ] || [ "$package_name" = "Qt_tools.pkg" ]; then
	    package_type=required
	fi
	cat >"${PACKAGE_DICT}.tmp" <<EOF
           <dict>
              <key>IFPkgFlagPackageLocation</key>
              <string>${package_name}</string>
              <key>IFPkgFlagPackageSelection</key>
              <string>${package_type}</string>
           </dict>
EOF
	if [ "$package_type" = "required" ]; then
	     cat "${PACKAGE_DICT}.tmp" "$PACKAGE_DICT" >"$TMP_DIR/dict.combined"
	     mv "$TMP_DIR/dict.combined" "$PACKAGE_DICT"
        else
	    cat "${PACKAGE_DICT}.tmp" >>"$PACKAGE_DICT"
        fi
        rm -f "${PACKAGE_DICT}.tmp"
    done
    sed "/PACKAGE_DICT/r $PACKAGE_DICT" "$OUTPUT_DIR/Qt.mpkg/Contents/Info.plist" >"${TMP_DIR}/Info.plist"
    chflags nouchg "$OUTPUT_DIR/Qt.mpkg/Contents/Info.plist"
    rm -f "$OUTPUT_DIR/Qt.mpkg/Contents/Info.plist"
    mv "${TMP_DIR}/Info.plist" "$OUTPUT_DIR/Qt.mpkg/Contents/Info.plist"

    PKG_CREATED="$PKG_CREATED $OUTPUT_DIR/Qt.mpkg"
fi

#create disk image
if [ "$MAKE_IMAGE" = "yes" ] && [ ! -z "$PKG_CREATED" ]; then
    echo "Creating disk image.."
    IMAGE_NAME="Qt Packages"
    IMAGE="$OUTPUT_DIR/QtPackages.dmg"
    rm -f "$IMAGE" #remove old

    #copy
    echo "  Copying..."
    mkdir -p "$TMP_DIR/diskimage"
    for package in $PKG_CREATED; do 
	[ -z "$package" ] && continue
	OUT_PACKAGE=`echo $package | sed "s,^$OUTPUT_DIR,$TMP_DIR/diskimage/,"`
	mkdir -p "`dirname "$OUT_PACKAGE"`"
	cp -r "$package" "$OUT_PACKAGE"
    done
    [ -e "$README" ] && cp "$README" "$TMP_DIR/diskimage/ReadMe.txt"

    echo -n "  Creating Image..."
    hdiutil create -volname "$IMAGE_NAME" -srcfolder "$TMP_DIR/diskimage" "$IMAGE" | grep -v ^created:
    echo " done!"

    #do evilness
    #echo -n "  Setting up..."
    #osascript -e "tell application \"Finder\"" \
    #          -e "    set mountedDiskImage to disk \"${IMAGE_NAME}\"" \
    #          -e "    open mountedDiskImage" \
    #          -e "    tell container window of mountedDiskImage" \
    #          -e "        set toolbar visible to false" \
    #          -e "        set current view to icon view" \
    #          -e "        set position of file \"Qt.mpkg\" to {10, 5}" \
    #          -e "        set position of folder \"packages\" to {220, 5}" \
    #          -e "        set bounds to {220, 180, 380, 400 }" \
    #          -e "    end tell" \
    #          -e "    set icon size of icon view options of container window of mountedDiskImage to 128" \
    #          -e "end tell" \
    #          > /dev/null
    #set background color of icon view options of container window of mountedDiskImage to { 155*65545, 196*65565, 40*65535 } 
    #echo " done!"

    #license
    echo -n "  Licensing..."
    hdiutil unflatten "$IMAGE" >/dev/null 2>&1
    /Developer/Tools/Rez /Developer/Headers/FlatCarbon/*.r "$TMP_DIR/licenses/dmg_license.r" -a -o "$IMAGE"
    hdiutil flatten "$IMAGE" >/dev/null 2>&1
    echo " done!"
fi

#cleanup
rm -rf "$TMP_DIR"
