#!/bin/sh 

#options
OUTPUT_DIR=`pwd`/outputs
cd `dirname $0` #now we live in the mkpackage location
USE_SEPARATE=no
TMP_DIR=/tmp/qt-stuff
PACKAGE_DIR=`(cd ../install && pwd)`
PACKAGE_OPTIONS=
PACKAGES=
COMMAND_PAX="/System/Library/PrivateFrameworks/Installation.framework/Resources/pax" #yes that pax, don't ask!
README=
LICENSE=
LICENSE_US=
LICENSETYPE=commercial
MAKE_META=
MAKE_IMAGE=

#versioning
QT_SET_VERSION=no
QT_MAJOR_VERSION=4
QT_MINOR_VERSION=0
QT_PATCH_VERSION=0
QT_VERSION_STRING=${QT_MAJOR_VERSION}.${QT_MINOR_VERSION}.${QT_PATCH_VERSION}

#QTDIR stuff
BINARY_DIR=
SOURCE_DIR=
SOURCE_PACKAGE=
EVAL_PATCHES=
CONFIGURE_ARGS="-qt-libpng -qt-libjpeg -plugin-sql-sqlite -plugin-sql-odbc -plugin-sql-psql -plugin-sql-mysql -release -framework -confirm-license -no-rpath -pch -I/usr/local/pgsql/include -I/usr/local/mysql/include -L/usr/local/pgsql/lib -L/usr/local/mysql/lib"

doStringReplace()
{
    sed -e "s,\\\$VERSION_MAJOR\\\$,$QT_MAJOR_VERSION,g" -e "s,\\\$VERSION_MINOR\\\$,$QT_MINOR_VERSION,g" \
	-e "s,\\\$VERSION_PATCH\\\$,$QT_PATCH_VERSION,g" "$1" >tmp.out

    mv -f tmp.out "$2"
}

createLicenseRTF()
{
   rm -f "$2"
   cat >>"$2" <<EOF
{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Oblique;\f2\fswiss\fcharset77 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh9000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
EOF
   sed -e 's,\(^[A-Z][A-Z :-]*$\),\\f2\\b \1 \\f0\\b0,g' \
       -e 's,^\(Qt COMMERCIAL\) \(LICENSE AGREEMENT\)$,\\f0\\fs24 \\cf0 \\ul \\ulc0 \1 \\ulnone \2 \\f0\\i0,g' \
       -e 's,^\([0-9]*\)\. ,\\f2\\b \1 \\f0\\b0. ,g' \
       -e 's,\(^Agreement version [0-9].[0-9]$\),\\f1\\i \1 \\f0\\i0,g' \
       -e 's,^\(.*\)$,\1\\,g' \
       "$1" >>"$2"
   echo "}" >>"$2"

}

while [ -n "$1" ]; do
   CACHE_1="$1"
   OPTION=
   ARG=
   case $1 in
   -*=*) #gnu style
     OPTION=`echo $1 | sed 's,-\([^=]*\)=\(.*\),\1,'`
     ARG=`echo $1 | sed 's,-\([^=]*\)=\(.*\),\2,'`
     ;;
   -output|-packages|-qtbins|-qtsrcs|-qtdir|-qtpackage|-version|-license|-licensetype|-license_us|-readme|-evalpatches) #second arg style
     OPTION=`echo $1 | sed 's,-\([^=]*\),\1,'`
     shift
     ARG=$1
     ;;          
   -no-*) #no style
     OPTION=`echo $1 | sed 's,-no-\([^=]*\),\1,'`
     ARG=no
     ;;
   -*) #yes style
     OPTION=`echo $1 | sed 's,-\([^=]*\),\1,'`
     ARG=yes
     ;;
   *) #other
     OPTION=package
     ARG="$1"
     ;;
   esac
   shift
   case "$OPTION" in
   help)
        if [ "$ARG" = "yes" ]; then
	   echo "$0 <options> <packages>"
	   echo
	   echo "  -output <directory>            Where to write the generated files to"
	   echo "  -packages <directory>          Where to find packages to create"
	   echo "  -qtbins <directory>            Where your Qt binaries live"
           echo "  -qtsrcs <directory>            Where to find our Qt sources (if -qtbins not set defaults to same)"
	   echo "  -qtpackage <package>           Given a package it will be untar'd configured and built and used."
	   echo "  -version <version>             What version the package is creating for (falls back to qglobal.h)"
	   echo "  -license <license>             Where your license file lives"
	   echo "  -license_us <license>          Where your U.S. license file lives"
	   echo "  -licensetype <commercial|eval> The license for the package you are building"
	   echo "  -readme <readme>               Where your readme file lives"
	   echo "  -image                         Create a disk image of the outputs"
	   echo "  -meta                          Create a meta package for all the outputs"
           echo "  -evalpatches <evalpatches>     Eval patches can be found here"
	   exit 1
        fi
	;;
   readme) README="$ARG" ;;
   license) LICENSE="$ARG" ;;
   licensetype) LICENSETYPE="$ARG" ;;
   all) USE_SEPARATE="$ARG" ;;
   qtpackage) SOURCE_PACKAGE="$ARG" ;;
   qtsrcs) SOURCE_DIR="$ARG" ;;
   qtbins|qtdir) BINARY_DIR="$ARG" ;;
   output) OUTPUT_DIR="$ARG" ;;
   packages) PACKAGE_DIR="$ARG" ;;
   meta) MAKE_META="$ARG" ;;
   package) PACKAGES="$PACKAGES $ARG" ;;
   image) MAKE_IMAGE="$ARG" ;;
   evalpatches) EVAL_PATCHES="$ARG" ;;
   version) 
       VERSION="$ARG"
       MAJOR=`echo $VERSION | sed 's,^\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*,\1,'`
       if [ -n "$MAJOR" ]; then
	   MINOR=`echo $VERSION | sed 's,^\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*,\2,'`
	   [ -z "$MINOR" ] && MINOR=0
	   PATCH=`echo $VERSION | sed 's,^\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*,\3,'`
	   [ -z "$PATCH" ] && PATCH=0
	   QT_SET_VERSION=yes
	   QT_VERSION_STRING="$VERSION"
	   QT_MAJOR_VERSION="$MAJOR"
	   QT_MINOR_VERSION="$MINOR"
	   QT_PATCH_VERSION="$PATCH"
       else
           echo "Invalid version: $VERSION"
       fi
       ;;
   help|*)
       [ "$OPTION" = "help" ] || echo "Unknown option $CACHE_1!" 
       echo "Help!!"
       exit 888;
       ;;
   esac  
done

#get the QTDIR setup
[ -z "$BINARY_DIR" ] && [ -z "$SOURCE_PACKAGE" ] && BINARY_DIR="$QTDIR"
if [ ! -z "$BINARY_DIR" ] && [ -z "$SOURCE_PACKAGE" ]; then
    if [ -z "$SOURCE_DIR" ]; then
        if [ -e "$BINARY_DIR/.qmake.cache" ]; then
	    SOURCE_DIR=`grep QT_SOURCE_TREE $BINARY_DIR/.qmake.cache | head -1 | cut -d'=' -f2- | awk '{ print $1; }'`
        else
	    SOURCE_DIR="$BINARY_DIR"
        fi
    fi
elif [ ! -z "$SOURCE_PACKAGE" ]; then
    rm -rf "$TMP_DIR/source"
    mkdir -p "$TMP_DIR/source"
    PACKAGE_NAME=`basename "$SOURCE_PACKAGE"`
    EXTENSION=`echo "$PACKAGE_NAME" | sed -e 's,.*\.tar\.\(.*\),\1,'`
    PACKAGE_DEST=`echo "$PACKAGE_NAME" | sed -e 's,\(.*\)\.tar.*,\1,'`
    if [ "$LICENSETYPE" = "eval" ]; then
	CONFIGURE_ARGS="$CONFIGURE_ARGS -DQT_EVAL"
        # If you didn't set the eval patches, I'll try in the same place as the package
        if [ -z "$EVAL_PATCHES" ]; then
            PACKAGE_VERSION=`echo $PACKAGE_DEST | sed -e 's,.*src-\(.*\),\1,'`
            EVAL_PATCHES=`dirname "$SOURCE_PACKAGE"`/qt-mac-evalpatches-src-$PACKAGE_VERSION.tar.$EXTENSION
        fi
        # unzip the eval patches first since it _shouldn't_ matter.
        (cd "$TMP_DIR/source" && gunzip -c "$EVAL_PATCHES"  | tar xf -);
    fi

    export QTDIR=$TMP_DIR/source/$PACKAGE_DEST
    export DYLD_LIBRARY_PATH=$QTDIR/lib:$DYLD_LIBRARY_PATH
    export DYLD_FRAMEWORK_PATH=$QTDIR/lib:$DYLD_FRAMEWORK_PATH
    export PATH=$QTDIR/bin:$PATH
    if (cd "$TMP_DIR/source" && gunzip -c "$SOURCE_PACKAGE" | tar xf - && cd "$PACKAGE_DEST" && ./configure $CONFIGURE_ARGS && make); then
          SOURCE_DIR="$QTDIR"
          BINARY_DIR="$SOURCE_DIR"
    else
         rm -rf "$TMP_DIR"
         exit 1
    fi
else
   echo "Only a source package or a source/binary directory can be specified!"
   exit 1   
fi

#find the license
if [ -z "$LICENSE" ]; then
    DEPOT_LICENSE="$SOURCE_DIR/dist/commercial/LICENSE" 
    PACKAGE_LICENSE="$SOURCE_DIR/.LICENSE" 
    if [ -e "$DEPOT_LICENSE" ]; then
        LICENSE=$DEPOT_LICENSE
    elif [ -e "$PACKAGE_LICENSE" ]; then
        LICENSE="$PACKAGE_LICENSE"
    elif [ -e "../../../../dist/commercial/LICENSE" ]; then
	LICENSE="../../../../dist/commercial/LICENSE"
    fi
fi

if [ -z "$LICENSE_US" ]; then
    DEPOT_LICENSE_US="$SOURCE_DIR/dist/commercial/LICENSE-US" 
    PACKAGE_LICENSE_US="$SOURCE_DIR/.LICENSE-US" 
    if [ -e "$DEPOT_LICENSE_US" ]; then
        LICENSE_US=$DEPOT_LICENSE_US
    elif [ -e "$PACKAGE_LICENSE_US" ]; then
        LICENSE_US="$PACKAGE_LICENSE_US"
    elif [ -e "../../../../dist/commercial/LICENSE-US" ]; then
	LICENSE_US="../../../../dist/commercial/LICENSE-US"
    fi
fi

#find the README
if [ -z "$README" ]; then
    DEPOT_README="$SOURCE_DIR/dist/README"
    PACKAGE_README="$SOURCE_DIR/README"
    if [ -e "$DEPOT_README" ]; then
        README="$DEPOT_README"
    elif [ -e "$PACKAGE_README" ]; then 
        README="$PACKAGE_README"
    elif [ -e "../../../../dist/README" ]; then
	README="../../../../dist/README"
    fi
fi

#find the version from the source package
if [ "$QT_SET_VERSION" = "no" ] && [ ! -z "$SOURCE_DIR" ]; then
     VERSION=`grep '^# *define *QT_VERSION_STR' $SOURCE_DIR/src/corelib/global/qglobal.h`
     if [ -n "$VERSION" ]; then
        VERSION=`echo $VERSION | sed 's,^# *define *QT_VERSION_STR "*\([^ ]*\)"$,\1,'`
	MAJOR=`echo $VERSION | sed 's,^\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*,\1,'`
	if [ -n "$MAJOR" ]; then
	    MINOR=`echo $VERSION | sed 's,^\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*,\2,'`
	    [ -z "$MINOR" ] && MINOR=0
	    PATCH=`echo $VERSION | sed 's,^\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*,\3,'`
	    [ -z "$PATCH" ] && PATCH=0
	    QT_VERSION_STRING="$VERSION"
	    QT_MAJOR_VERSION="$MAJOR"
	    QT_MINOR_VERSION="$MINOR"
	    QT_PATCH_VERSION="$PATCH"
        else
	    echo "Cannot process version from qglobal.h: $VERSION"
	fi
    fi
fi

#just do all the packages
if [ -z "$PACKAGES" ]; then
    [ -z "$MAKE_META" ] && MAKE_META=yes
    [ -z "$MAKE_IMAGE" ] && MAKE_IMAGE=yes
    for a in $PACKAGE_DIR/*; do
	if [ -d "$a" ]; then
	    package=`basename $a`
	    [ "$USE_SEPARATE" = "no" ] && [ -e "$a/.build_separate" ] && continue
            PACKAGES="$PACKAGES $package"
        fi
    done
fi

#setup some default package options
[ -z "$SOURCE_PACKAGE" ] || PACKAGE_OPTIONS="$PACKAGE_OPTIONS --qtpackage=${SOURCE_PACKAGE}"
[ -z "$SOURCE_DIR" ] || PACKAGE_OPTIONS="$PACKAGE_OPTIONS --qtsrc=${SOURCE_DIR}"
[ -z "$BINARY_DIR" ] || PACKAGE_OPTIONS="$PACKAGE_OPTIONS --qtbin=${BINARY_DIR}"
PACKAGE_OPTIONS="$PACKAGE_OPTIONS --debug=no"

mkdir -p "$TMP_DIR"
find .. -name '*~' -exec rm {} \; #just get rid of these before they end up in my package

#create the license information
if [ -e "$LICENSE" ]; then
   mkdir -p "$TMP_DIR/licenses"

   echo "Creating license richtext for rest of the world"
   createLicenseRTF "$LICENSE" "$TMP_DIR/licenses/License.rtf"
else
   echo "No license file found!"
   exit 1
fi

if [ -e "$LICENSE_US" ]; then
   echo "Creating license richtext for U.S."
   createLicenseRTF "$LICENSE_US" "$TMP_DIR/licenses/License-US.rtf"
else
   echo "No U.S. license file found!"
   exit 1
fi

#create the packages
PKG_CREATED=
for package in $PACKAGES; do
    [ "$package" = "none" ] && continue
    if [ !  -e "$PACKAGE_DIR/$package/Info.plist" ]; then
	echo "$package is not a valid package!!"
	continue
    fi
    rm -rf "$TMP_DIR/package" #cleanup

    #create files
    echo "Creating package [$package]..."
    mkdir -p "$TMP_DIR/package"
    if [ -x "$PACKAGE_DIR/$package/create_package.sh" ]; then
	if (cd $PACKAGE_DIR/$package/ && VERSION_MAJOR="$QT_MAJOR_VERSION" VERSION_MINOR="$QT_MINOR_VERSION" VERSION_STRING="$QT_VERSION_STRING" VERSION_PATCH="$QT_PATCH_VERSION" "$PACKAGE_DIR/$package/create_package.sh" $PACKAGE_OPTIONS --outdir="$TMP_DIR/package"); then
              true
         else
              echo "  Package failed"
              continue
         fi
    fi
    #(cd $TMP_DIR/package && /bin/bash)

    #create .pkg
    package_dir="$OUTPUT_DIR/packages/Qt_${package}.pkg"
    rm -rf "$package_dir"
    echo "  Creating installation.. ($package_dir)"
    if [ -x "$COMMAND_PAX" ]; then
	mkdir -p "$package_dir/Contents"
	(cd "$TMP_DIR/package" && $COMMAND_PAX -w -x cpio -f "$package_dir/Contents/Archive.pax" "." >/dev/null 2>&1)
	gzip "$package_dir/Contents/Archive.pax"
	echo "pmkrpkg1" >"$package_dir/Contents/PkgInfo"
	mkbom "$TMP_DIR/package" "$package_dir/Contents/Archive.bom"
        #link the files (for compat)
	mkdir -p "$package_dir/Contents/Resources"
	ln -sf "../Archive.bom" "$package_dir/Contents/Resources"
	ln -sf "../Archive.pax.gz" "$package_dir/Contents/Resources"
    else
        mkdir -p $package_dir/Contents
	(cd "$TMP_DIR/package" && /Developer/Applications/Utilities/PackageMaker.app/Contents/MacOS/PackageMaker -build -p "$package_dir" -ds >/dev/null 2>&1)
	rm -rf $package_dir/Contents/Resources/*.lproj
    fi
    #Info.plist
    doStringReplace "$PACKAGE_DIR/$package/Info.plist" "$package_dir/Contents/Info.plist"
    #merge resources
    cp -R Resources/* "$package_dir/Contents/Resources"
    cp -R $PACKAGE_DIR/$package/Resources/* "$package_dir/Contents/Resources"
    cp "Welcome-$LICENSETYPE.rtf" "$package_dir/Contents/Resources/Welcome.rtf"
    for lang in "North and South America" "Rest of the world"; do
        LOCALDIR="$package_dir/Contents/Resources/${lang}.lproj"
        mkdir -p "$LOCALDIR"
        if [ "$lang" == "North and South America" ]; then
            cp "$TMP_DIR/licenses/License-US.rtf" "$LOCALDIR/License.rtf"
        else
            cp "$TMP_DIR/licenses/License.rtf" "$LOCALDIR"
        fi
    done
    for a in $package_dir/Contents/Resources/*.plist $package_dir/Contents/Resources/*.info $package_dir/Contents/Resources/*flight $package_dir/Contents/Resources/*.rtf; do
	[ -e "$a" ] && doStringReplace "$a" "$a"
    done
    if [ -e "$package_dir/Contents/Resources/$package.info" ]; then
         cp "$package_dir/Contents/Resources/$package.info" "$package_dir/Contents/Resources/Qt_${package}.info"
    fi
    for a in $package_dir/Contents/Resources/*flight; do
        [ -e "$a" ] && chmod a+x $a #exe
    done
    for a in $package_dir/Contents/Resources/*Check; do
        if [ -e "$a" ]; then
	    chmod a+x "$a"
	    if false && [ -e "${a}.strings" ]; then
		for lang in English Norwegian French German Spanish; do
		    LOCALDIR="$package_dir/Contents/Resources/${lang}.lproj"
		    mkdir -p "$LOCALDIR"
		    cp "${a}.strings" "$LOCALDIR"
                done
		#rm -f "${a}.strings"
            fi
        fi
    done
    PKG_CREATED="$PKG_CREATED $package_dir"
done
if [ -z "$PKG_CREATED" ] && [ "$PACKAGES" = " none" ]; then
   if [ "$MAKE_META" = "yes" ] || [ "$MAKE_IMAGE" = "yes" ]; then
       PKG_CREATED=$OUTPUT_DIR/packages/*.pkg
       [ -z "$MAKE_META" ] && MAKE_META=yes
   fi
fi

#create meta package
if [ "$MAKE_META" = "yes" ]; then
    echo "Creating meta package.."
    rm -rf "$OUTPUT_DIR/Qt.mpkg/"
    mkdir -p "$OUTPUT_DIR/Qt.mpkg/"
    cp -R "MetaPackage" "$OUTPUT_DIR/Qt.mpkg/Contents"
    mkdir -p "$OUTPUT_DIR/Qt.mpkg/Contents/Resources"
    cp -R Resources/* "$OUTPUT_DIR/Qt.mpkg/Contents/Resources"
    cp "Welcome-${LICENSETYPE}.rtf" "$OUTPUT_DIR/Qt.mpkg/Contents/Resources/Welcome.rtf"
    for lang in "North and South America" "Rest of the world"; do
        LOCALDIR="$OUTPUT_DIR/Qt.mpkg/Contents/Resources/${lang}.lproj"
        mkdir -p "$LOCALDIR"
        if [ "$lang" == "North and South America" ]; then
            cp "$TMP_DIR/licenses/License-US.rtf" "$LOCALDIR/License.rtf"
        else
            cp "$TMP_DIR/licenses/License.rtf" "$LOCALDIR"
        fi
    done
    for a in $OUTPUT_DIR/Qt.mpkg/Contents/*.plist $OUTPUT_DIR/Qt.mpkg/Contents/Resources/*.info $OUTPUT_DIR/Qt.mpkg/Contents/Resources/*.plist $OUTPUT_DIR/Qt.mpkg/Contents/Resources/*.rtf; do
	doStringReplace "$a" "$a"
    done
    for a in $OUTPUT_DIR/Qt.mpkg/Contents/Resources/*Check; do
        if [ -e "$a" ]; then
	    chmod a+x "$a"
	    if false && [ -e "${a}.strings" ]; then
		for lang in English Norwegian French German Spanish; do
		    LOCALDIR="$OUTPUT_DIR/Qt.mpkg/Contents/Resources/${lang}.lproj"
		    mkdir -p "$LOCALDIR"
		    cp "${a}.strings" "$LOCALDIR"
                done
		#rm -f "${a}.strings"
            fi
        fi
    done

    PACKAGE_DICT="$TMP_DIR/pkg.dict"
    >"$PACKAGE_DICT"
    for package in $PKG_CREATED; do
	package_name=`basename $package`
	package_type=selected
	if [ "$package_name" = "Qt_libraries.pkg" ] || [ "$package_name" = "Qt_tools.pkg" ]; then
	    package_type=required
	fi
	cat >"${PACKAGE_DICT}.tmp" <<EOF
           <dict>
              <key>IFPkgFlagPackageLocation</key>
              <string>${package_name}</string>
              <key>IFPkgFlagPackageSelection</key>
              <string>${package_type}</string>
           </dict>
EOF
	if [ "$package_type" = "required" ]; then
	     cat "${PACKAGE_DICT}.tmp" "$PACKAGE_DICT" >"$TMP_DIR/dict.combined"
	     mv "$TMP_DIR/dict.combined" "$PACKAGE_DICT"
        else
	    cat "${PACKAGE_DICT}.tmp" >>"$PACKAGE_DICT"
        fi
        rm -f "${PACKAGE_DICT}.tmp"
    done
    sed "/PACKAGE_DICT/r $PACKAGE_DICT" "$OUTPUT_DIR/Qt.mpkg/Contents/Info.plist" >"${TMP_DIR}/Info.plist"
    chflags nouchg "$OUTPUT_DIR/Qt.mpkg/Contents/Info.plist"
    rm -f "$OUTPUT_DIR/Qt.mpkg/Contents/Info.plist"
    cp "${TMP_DIR}/Info.plist" "$OUTPUT_DIR/Qt.mpkg/Contents/Info.plist"
    rm -f "${TMP_DIR}/Info.plist"

    PKG_CREATED="$PKG_CREATED $OUTPUT_DIR/Qt.mpkg"
fi

#create disk image
if [ "$MAKE_IMAGE" = "yes" ] && [ ! -z "$PKG_CREATED" ]; then
    echo "Creating disk image.."
    IMAGE_NAME="Qt ${QT_VERSION_STRING}"
    IMAGE="$OUTPUT_DIR/qt-mac-${LICENSETYPE}-desktop-${QT_VERSION_STRING}.dmg"
    rm -f "$IMAGE" #remove old

    #copy
    echo "  Copying..."
    DISKIMAGE="$TMP_DIR/diskimage"
    mkdir -p "$DISKIMAGE/.images"
    cp finderbackground.png "$DISKIMAGE/.images"
    cp model-DS_Store-${QT_VERSION_STRING} "$DISKIMAGE/.DS_Store"
    chmod 755 "$DISKIMAGE/.DS_Store"

    for package in $PKG_CREATED; do 
	[ -z "$package" ] && continue
	OUT_PACKAGE=`echo $package | sed "s,^$OUTPUT_DIR,$DISKIMAGE/,"`
	mkdir -p "`dirname "$OUT_PACKAGE"`"
	cp -R "$package" "$OUT_PACKAGE"
    done
    [ -e "$README" ] && cp "$README" "$DISKIMAGE/ReadMe.txt"

    echo -n "  Creating Image..."
    hdiutil create -volname "$IMAGE_NAME" -srcfolder "$DISKIMAGE" "$IMAGE" | grep -v ^created:
    echo " done!"
fi

#cleanup
rm -rf "$TMP_DIR"
echo "Done!"
