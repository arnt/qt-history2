#!/bin/sh
#
# Creates a new Qt source distribution
#
# Copyright 1996 Troll Tech AS.  All rights reserved.
#
# ----------------------------------------------------------------
#
# Usage:
#	mkdist.generic [options] {commercial|free} {distdir}
#
# Options:
#	-nodoc	Don't generate documentation
#	-local	Copy local distribution from $QTDIR, don't use cvs
#

while true ; do
  case "$1" in
    "-nodoc") nodoc="yes"; shift;;
    "-local") local="yes"; shift;;
    *) break;;
  esac
done

disttype=$1
platform=$2
DISTDIR=$3

unset LANG

unset goodparam1
unset goodparam2

curdir=`/bin/pwd`

echo >&2
echo "Creating a new Qt distribution:" >&2

if [ "${disttype}" = "free" -o "${disttype}" = "commercial" ]; then
  goodparam1=yes
  echo "  Distribution type... " ${disttype} >&2
fi

if [ "${platform}" = "x11" -o "${platform}" = "win" ]; then
  goodparam2=yes
  echo "  Platform ............" ${platform} >&2
  echo >&2
fi

if [ "${goodparam1}" = "" -o "${goodparam2}" = "" -o "${DISTDIR}" = "" ]; then
  echo 'Usage: mkdist.generic commercial|free x11|win dist-dir' >&2
  exit
fi

if [ "${disttype}" = "free" -a "${platform}" != "x11" ]; then
  echo 'Impossible. Only X11 versions have a free license!' >&2
  exit
fi

echo "Removing and creating new ${DISTDIR}..." >&2
rm -rf ${DISTDIR} || ( echo unable to remove ${DISTDIR} ; exit 1 )
mkdir ${DISTDIR}
cd ${DISTDIR}

if [ "$local" = "yes" ]; then
  echo "Copying the local Qt archive (doesn't use CVS)..." >&2
  cd ${QTDIR}
  cd ..
  find qt \( -type f -o -type l \) -print | \
    egrep -v 'CVS|.cvsignore|.depend|core$|\.o$|\.a$|\.so|~|#' | \
    tar cfT - - | (cd ${DISTDIR} ; tar xf - )
else
  echo "Exporting the entire Qt archive..." >&2
  cvs -Q export -rHEAD qt
fi

echo "Removing internal files..." >&2
cd ${DISTDIR}/qt/src
tmake qtinternal.pro -e "Expand('INTERNAL')" | xargs rm -fv

# Remove Netscape-owned code (docs direct user to PluginSDK)
rm -rf ${DISTDIR}/qt/extensions/nsplugin/src/np*
rm -rf ${DISTDIR}/qt/extensions/nsplugin/src/jri*

VERSION=`grep "#define.*QT_VERSION_STR" ${DISTDIR}/qt/src/tools/qglobal.h | fmt -1 | grep '"' | sed -e 's/"//g'`
VERSIONMAJOR=`echo ${VERSION} | sed -e 's/\..*$//'`
VERSION_SHORT=`echo ${VERSION} | sed -e 's/[0-9]$//'`

echo "Auto-detected the Qt version number -- " $VERSION >&2

QTDIR=${DISTDIR}/qt
export QTDIR

echo "Creates symlinks for Qt header files" >&2
${QTDIR}/bin/syncqt > /dev/null

if [ "$nodoc" = "yes" ]; then
  echo "Documentation won't be generated" >& 2
else
  echo "Generating documentation" >&2
  mkdir -p ${DISTDIR}/qt/doc/html
  mkdir -p ${DISTDIR}/qt/extensions/opengl/html
  mkdir -p ${DISTDIR}/qt/extensions/imageio/html
  mkdir -p ${DISTDIR}/qt/extensions/nsplugin/html
  ${DISTDIR}/qt/util/qdoc/qdoc ${DISTDIR}/qt
  ${DISTDIR}/qt/util/qdoc/qdoc ${DISTDIR}/qt/extensions/opengl
  ${DISTDIR}/qt/util/qdoc/qdoc ${DISTDIR}/qt/extensions/imageio
  ${DISTDIR}/qt/util/qdoc/qdoc ${DISTDIR}/qt/extensions/nsplugin
  if [ "${platform}" = "x11" ]; then
    mkdir -p ${DISTDIR}/qt/doc/man/man1  ${DISTDIR}/qt/doc/man/man3
    ${DISTDIR}/qt/util/qdoc/man
    mv ${DISTDIR}/qt/doc/man ${DISTDIR}/qt
    mv ${DISTDIR}/qt/src/moc/moc.1 ${DISTDIR}/qt/man/man1
  fi
  mv ${DISTDIR}/qt/doc/html ${DISTDIR}/qt
  cd ${DISTDIR}
  mv ${DISTDIR}/qt/gif/*.gif ${DISTDIR}/qt/html
  mv ${DISTDIR}/qt/doc/.qdoc-links ${DISTDIR}
fi

echo "Removing local files..." >&2
if [ "${platform}" = "win" ]; then
  cd ${DISTDIR}/qt/src
  make showx11only | xargs rm -v
fi
cd ${DISTDIR}
find qt -name .cvsignore -o -name doc.conf | xargs rm -f
find qt -name doc -type d | xargs rm -rf
rm -rf qt/bugs qt/etc qt/gif qt/reqs qt/tests qt/tmake
rm -rf qt/examples/sheet
rm -rf qt/examples/scrollview
rm -rf qt/examples/network
rm -rf qt/examples/validator
rm -f qt/src/qtinternal.pro

echo "Removing kernel .cpp files for other platforms..." >&2
cd ${DISTDIR}/qt/src/kernel
find . -name '*_x11.cpp' -o -name '*_win.cpp' -o -name '*_os2.cpp' \
	| grep -v "_${platform}" | xargs rm -f

if [ "${disttype}" = "free" ]; then
  echo "Adding non-commercial banner in .h and .cpp files.." >&2
  cd ${DISTDIR}/qt/src
  ${curdir}/fixcopyright ${VERSION} tools/*.h tools/*.cpp kernel/*.h kernel/*.cpp widgets/*.h widgets/*.cpp dialogs/*.h dialogs/*.cpp
fi

echo "Generate lex and yacc files for moc..." >&2
cd ${DISTDIR}/qt/src/moc
make mocgen.cpp

if [ "${platform}" = "win" ]; then
  cd ${DISTDIR}/qt/src/moc
  perl -pi -e 's/^#include \<unistd\.h\>$/\/\* #include <unistd.h> \*\//' lex.yy.c
  cd ${DISTDIR}/qt/src
  echo "Moving source and include files..." >&2
  rm -f ../include/*
  mv */q*.h ../include
  cd ${DISTDIR}/qt
  mv extensions/opengl/src/q*.h include
  mv extensions/imageio/src/q*.h include
  mv extensions/nsplugin/src/q*.h include
  rm -rf makefiles
  find . -name 'GNUmakefile*' -o -name 'qtx11.*' | xargs rm -vf
  echo "Converting Unix text files to DOS..." >&2
  cd ${DISTDIR}
  find qt -type f -print | fmt -1 | \
	egrep -v '\.(gif|bmp|any|exe)$' | xargs ${curdir}/unix_to_dos
fi

if [ "${platform}" = "x11" ]; then
  cd ${DISTDIR}/qt
  rm bin/*.bat
  find . -name 'Makefile' -o -name 'qtwin.*' | xargs rm -vf
  echo 'Building make files...' >&2
  ${QTDIR}/util/scripts/makemake
  mv ${QTDIR}/util/scripts/propagate ${QTDIR}
  rm -rf ${DISTDIR}/qt/lib ${DISTDIR}/qt/bin
  mkdir ${DISTDIR}/qt/lib ${DISTDIR}/qt/bin
fi

echo "Copying the README, LICENSE etc. files..." >&2
cd ${DISTDIR}/qt/dist
cp [A-Z]* .. 2> /dev/null
cp changes-${VERSION_SHORT}[0-9] .. 2> /dev/null
cd ${DISTDIR}/qt/dist/${disttype}
tar cf - * | (cd ${DISTDIR}/qt ; tar xf -)
cd ${DISTDIR}/qt/dist/${platform}
tar cf - * | (cd ${DISTDIR}/qt ; tar xf -)
cd ${DISTDIR}
rm -rf qt/dist qt/util qt/makefiles


echo "Finally packing the distribution, see ${DISTDIR} ..." >&2

if [ "${platform}" = "win" ]; then
  cd ${DISTDIR}
  mkdir qt/src/tmp
  echo "This is a temporary directory for moc output" > qt/src/tmp/README
  v=`echo ${VERSION} | sed -e 's/\.//'`
  zip -q -r -9 qtwin${v}.zip qt
fi

if [ "${platform}" = "x11" ]; then
  cd ${DISTDIR}
  mv qt qt-${VERSION}
  tar cf qt-${VERSION}.tar qt-${VERSION}
  gzip -9 qt-${VERSION}.tar
fi

echo "Done" >&2
