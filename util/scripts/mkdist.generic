#!/bin/sh
#
# Creates a new Qt source distribution
#
# Copyright 1996-2000 Troll Tech AS.  All rights reserved.
#
# ----------------------------------------------------------------
#
# Usage:
#	mkdist.generic [options] {commercial|free} {version}
#
# Options:
#	-nodoc	Don't generate documentation
#	-local	Copy local distribution from $QTDIR, don't use p4
#	-noch	Ignore the fact that the changes file doesn't exist
#       -msonly Build Microsoft Visual C++ makefiles only (in win-mode)
#

# Leave -e set - it ensures we don't miss any vital error messages.
set -e
# Use this if something mysterious exits
#set -x

release=HEAD

while true ; do
  case "$1" in
    "-nodoc") nodoc="yes"; shift;;
    "-local") local="yes"; shift;;
    "-noch")  noch="yes"; shift;;
    "-msonly") msonly="yes"; shift;;
    "-r") release=$2; shift; shift;;
    *) break;;
  esac
done

disttype=$1
platform=$2
VERSION=$3

unset LANG || true
unset goodparam1 || true
unset goodparam2 || true

curdir=`/bin/pwd`

echo >&2
echo "Creating a new Qt distribution:" >&2

  echo "  CVS tag ............." ${release} >&2

if [ "${disttype}" = "free" -o "${disttype}" = "commercial" ]; then
  goodparam1=yes
  echo "  Distribution type... " ${disttype} >&2
fi

if [ "${platform}" = "x11" -o "${platform}" = "win" ]; then
  goodparam2=yes
  echo "  Platform ............" ${platform} >&2
  echo >&2
fi

if [ "${goodparam1}" = "" -o "${goodparam2}" = "" ]; then
  echo 'Usage: mkdist.generic commercial|free x11|win' >&2
  exit
fi

if [ "${disttype}" = "free" -a "${platform}" != "x11" ]; then
  echo 'Impossible. Only X11 versions have a free license!' >&2
  exit
fi

DISTDIR=`p4 fstat //depot/qt/$VERSION/doc.conf | awk '/ clientFile / { gsub("doc.conf/",""); print $3 }'`
if [ -z "$DISTDIR" ]
then
    T=`p4 fstat //depot/qt/$VERSION/doc.conf | awk '/ depotFile / { print $3 }'`
    if [ -z "$T" ]
    then
	echo "\"//depot/qt/$VERSION/...\" is not in the depot."
	echo "Branch it, then restart:"
	echo "      p4 integrate //depot/qt/main/... //depot/qt/$VERSION/..."
	echo "      p4 submit"
    else
	echo "\"//depot/qt/$VERSION/...\" is not in your client view."
	echo "Add it, then restart:"
	echo "      p4 client"
    fi
    exit 1
fi

echo "Ensuring ${DISTDIR} is up-to-date..." >&2
p4 sync $DISTDIR/...
T=`p4 opened /usr/local/qt-release/2.1/... 2>&1 | grep -v 'not opened on this client'`
if [ -n "$T" ]
then
    echo "Some files are still opened.  Fix these:" >&2
    echo $T >&2
    exit 1
fi

echo "Checking that ${DISTDIR} is clean..." >&2

TMP=/tmp/t$$
p4 files $DISTDIR/... | perl -p -e "s{^//depot/qt/$VERSION}{$DISTDIR}" >$TMP
BAD=`find $DISTDIR -type f | xargs fgrep -f $TMP`
rm $TMP
if [ -n "$BAD" ]
then
    echo "Not clean!  Remove these files...";
    echo $BAD
    exit 1
fi

# echo "Removing and creating new client repository..." >&2
# rm -rf ${DISTDIR} || ( echo unable to remove ${DISTDIR} ; exit 1 )
# mkdir ${DISTDIR}

cd ${DISTDIR}

#if [ "$local" = "yes" ]; then
#  echo "Copying the local Qt archive (doesn't use CVS)..." >&2
#  cd ${QTDIR}
#  cd ..
#  find qt -path 'qt/doc/html' -prune -o \( \( \( -type f -o -type l \) -a ! \( -perm +011 -a \( -path '*examples*' -o -path '*tutorial*' \) \) \) \) -print | \
#    egrep -v 'CVS|.cvsignore|.depend|core$|\.o$|\.a$|\.so|~|#|\.debug|moc_|\.moc$' | \
#    tar cfT - - | ( cd ${DISTDIR} ; tar xf - )
#  rm -f ${DISTDIR}/qt/include/*
#  rm -f ${DISTDIR}/qt/bin/moc
#  rm -f ${DISTDIR}/qt/src/moc/moc
#else
#  echo "Exporting the entire Qt and tmake depots..." >&2
#  cvs -Q export -r$release qt
#  p4 -c qt-release-$platform sync
#  export TMAKEDIR=$DISTDIR/tmake
#  export TMAKEPATH=$TMAKEDIR/lib/linux-g++
#  export PATH=${TMAKEDIR}/bin:${PATH}
#fi


# At this point, $DISTDIR is a clean checkout

echo "Removing internal files..." >&2
cd ${DISTDIR}/qt/src
###tmake qtinternal.pro -e "Expand('INTERNAL')" | xargs rm -fv
rm -fv	  dialogs/qdeveloper.h \
	  dialogs/qtranslatordialog.h \
	  kernel/qproperty.h \
	  kernel/qresource.h \
	  widgets/qdial.h \
	  widgets/qworkspace.h \
	  widgets/qworkspacechild.h \
	  tools/qdom.h \
	  kernel/qdns.h  \
	  kernel/qproperty.cpp \
	  kernel/qresource.cpp \
	  widgets/qdial.cpp \
	  widgets/qworkspace.cpp \
	  widgets/qworkspacechild.cpp \
	  dialogs/qdeveloper.cpp \
	  dialogs/qtranslatordialog.cpp \
	  tools/qxml*.*


# Replace Netscape-owned code with dummies (direct user to PluginSDK)
for i in ${DISTDIR}/qt/extensions/nsplugin/src/np* ${DISTDIR}/qt/extensions/nsplugin/src/jri*
do
    rm -f $i
    echo "#error \"This file is provided by Netscape.  Please see documentation.\"" >$i
done

SRC_VERSION=`grep "#define.*QT_VERSION_STR" ${DISTDIR}/qt/src/tools/qglobal.h | fmt -1 | grep '"' | sed -e 's/"//g'`
VERSIONMAJOR=`echo ${SRC_VERSION} | sed -e 's/\..*$//'`
case "$SRC_VERSION" in
  *-snapshot|*-somethingelse)
    SPECIAL=${SRC_VERSION##*-}

    N=${SRC_VERSION%-$SPECIAL}-$(date +%Y%m%d)
    perl -i -p -e "s/$SRC_VERSION/$N/" ${DISTDIR}/qt/src/tools/qglobal.h
    SRC_VERSION=${N}
;; *)
    SPECIAL=stable
esac
if [ "$VERSION" -ne "$SRC_VERSION" ]
then
    echo "Version mismatch:   qglobal.h: $SRC_VERSION   argument: $VERSION"
    exit 1
fi
VERSION_SHORT=`echo ${VERSION} | sed -e 's/\.\(.\).*/.\1/'`
VERSIONWIN=`echo ${VERSION} | sed -e 's/\.//g'`

echo "Auto-detected the Qt version number -- " $VERSION >&2

if [ -z "$noch" -a ! -f "${DISTDIR}/qt/dist/changes-$VERSION" ]
then
    echo "You must create qt/dist/changes-$VERSION first (or run with -noch)"
    V=`sed -e s/[^0-9]//g`
    echo "Tag the release:  cvs update; cvs tag release-$V"
    echo "Find the logs:    ./changelog dd/mm/yyyy-previous-release-date >changes-$VERSION"
    echo "Print the logs:   aprint -w80 -4 changes-$VERSION"
    exit 1
fi

QTDIR=${DISTDIR}/qt
export QTDIR

echo "Create symlinks for Qt header files.." >&2
${QTDIR}/bin/syncqt
###${curdir}/make_qt_dot_h > ${QTDIR}/include/qt.h
rm -f ${QTDIR}/include/qt.h

if [ "$nodoc" = "yes" ]; then
  echo "Documentation won't be generated" >& 2
  mv -f ${DISTDIR}/qt/doc ${DISTDIR}/qt/src
else
  echo "Generating documentation" >&2
  mkdir -p ${DISTDIR}/qt/doc/html
  ${DISTDIR}/qt/util/qdoc/qdoc ${DISTDIR}/qt
  if [ "${platform}" = "x11" ]; then
    mkdir -p ${DISTDIR}/qt/doc/man/man1  ${DISTDIR}/qt/doc/man/man3
    ${DISTDIR}/qt/util/qdoc/man
    mv ${DISTDIR}/qt/doc/man ${DISTDIR}/qt
    mv ${DISTDIR}/qt/src/moc/moc.1 ${DISTDIR}/qt/man/man1
  fi
  mv ${DISTDIR}/qt/doc/html ${DISTDIR}/qt
  cd ${DISTDIR}
  mv -f ${DISTDIR}/qt/gif/*.png ${DISTDIR}/qt/html
  mv -f ${DISTDIR}/qt/gif/*.jpg ${DISTDIR}/qt/html
#   mv -f ${DISTDIR}/qt/doc/.qdoc-links ${DISTDIR}
  mv -f ${DISTDIR}/qt/doc ${DISTDIR}/qt/src
  mv -f ${DISTDIR}/qt/html ${DISTDIR}/qt/doc
fi

echo "Removing local files..." >&2
if [ "${platform}" = "win" ]; then
  cd ${DISTDIR}/qt/src
  tmake qtinternal.pro -e "Expand('X11ONLY')" | xargs rm -v
  cd ${DISTDIR}
  rm -rf qt/examples/timestamp
fi
cd ${DISTDIR}
find qt -name .cvsignore -o -name doc.conf | xargs rm -f
rm -f qt/src/qtinternal.pro
rm -f qt/make.help qt/variables
rm -rf qt/bugs qt/etc qt/gif qt/reqs qt/tests
cd qt/examples
rm -rf network sheet

cd ${DISTDIR}/qt/bin
rm -f syncqt*

echo "Removing src .cpp files for other platforms..." >&2
cd ${DISTDIR}/qt/src
find . -name '*_x11.c*' -o -name '*_fb.c*' -o -name '*_mac.c*' -o -name '*_win.c*' -o -name '*_os2.c*' \
	| grep -v "_${platform}" | xargs rm -f

echo "Generate lex and yacc files for moc..." >&2
cd ${DISTDIR}/qt/src/moc
make mocgen.cpp

echo "Removing internal makefiles" >&2
cd ${DISTDIR}/qt
find . -name GNUmakefile -o -name Makefile | xargs rm -vf
rm -f GNUmakefile.inc Makefile.inc

if [ "${platform}" = "win" ]; then
  cd ${DISTDIR}/qt/src/moc
  perl -pi -e 's/^#include \<unistd\.h\>$/\/\* #include <unistd.h> \*\//' lex.yy.c
  cd ${DISTDIR}/qt/src
  echo "Moving source and include files..." >&2
  [ -f ../include/qt.h ] && mv ../include/qt.h .
  rm -f ../include/*
  mv */q*.h ../include
  [ -f qt.h ] && mv qt.h ../include
  cd ${DISTDIR}/qt
  mv extensions/opengl/src/q*.h include
  mv extensions/imageio/src/q*.h include
  mv extensions/nsplugin/src/q*.h include
  rm -rf makefiles
  rm -rf extensions/xt
  find . -name 'qtx11.*' | xargs rm -vf

  cd ${DISTDIR}/qt
  mkdir mkfiles

# Convince tmake to use the right DLL library and set right DLL lib Makefile
  [ ! -d lib ] && mkdir lib
  DLLVER=`tmake src/qt.pro -e "Expand('VERSION')" | sed -e 's/\.//g'`
  touch lib/qt${DLLVER}.lib
  mv src/Makefile.win32-dll src/Makefile

  if [ -z "$msonly" ]; then
    echo "Build DLL Makefiles for Borland C++" >&2
    export TMAKEPATH=${TMAKEDIR}/lib/win32-borland
    ${curdir}/buildmakefiles -win32 -dll
    find . -name Makefile -o -name "qt*.mak" | xargs ${curdir}/unix_to_dos
    find . -name Makefile -o -name "qt*.mak" | xargs zip -r mkfiles/borland_dll.zip
  fi

  echo "Build DLL Makefiles for Microsoft Visual C++" >&2
  export TMAKEPATH=${TMAKEDIR}/lib/win32-msvc
  ${curdir}/buildmakefiles -win32 -dll
  find . -name Makefile -o -name "qt*.mak" | xargs ${curdir}/unix_to_dos
  find . -name Makefile -o -name "qt*.mak" | xargs zip -r mkfiles/msvc_dll.zip

# Clean up after DLL library makefiles have been created
  rm lib/qt${DLLVER}.lib
  rm src/Makefile
  rm src/qtdll.mak
  rm src/qtmain.mak

  if [ -z "$msonly" ]; then
    echo "Build Makefiles for Borland C++" >&2
    export TMAKEPATH=${TMAKEDIR}/lib/win32-borland
    ${curdir}/buildmakefiles -win32
    find . -name Makefile -o -name "qt*.mak" | xargs ${curdir}/unix_to_dos
    find . -name Makefile -o -name "qt*.mak" | xargs zip -r mkfiles/borland.zip
  fi

  echo "Build Makefiles for Microsoft Visual C++" >&2
  export TMAKEPATH=${TMAKEDIR}/lib/win32-msvc
  ${curdir}/buildmakefiles -win32
  find . -name Makefile -o -name "qt*.mak" | xargs ${curdir}/unix_to_dos
  find . -name Makefile -o -name "qt*.mak" | xargs zip -r mkfiles/msvc.zip

  echo "Converting Unix text files to DOS..." >&2
  cd ${DISTDIR}
  find qt -type f -print | fmt -1 | \
	egrep -v '\.(dll|gif|png|jpg|bmp|any|pic|ppm|exe|zip|qm)$' | xargs ${curdir}/unix_to_dos
fi

if [ "${platform}" = "x11" ]; then

  echo 'Removing more Windows-specific files...' >&2
  cd ${DISTDIR}/qt
  rm -f bin/*.bat
  rm -rf src/tmp
  rm -f src/qtmain.pro src/Makefile.win32-dll
  find . -name 'qtwin.*' | xargs rm -vf
  rm -rf ${DISTDIR}/qt/lib
  mkdir ${DISTDIR}/qt/lib

  # Generate makefiles
  ${QTDIR}/util/scripts/makeunixmake -v
  # Copy template files into qt/configs
  cp ${QTDIR}/tmake/*.t ${QTDIR}/configs
  cd ${QTDIR}/configs
  rm -f propagate.t subdirs.t
fi

echo "Copying the README, LICENSE etc. files..." >&2
cd ${DISTDIR}/qt/dist
cp [A-Z]* .. 2> /dev/null || true
if [ -z "$noch" ]
then
    cp -f changes-${VERSION_SHORT}[.0-9]* ..
fi
cd ${DISTDIR}/qt/dist/${disttype}
tar cf - * | (cd ${DISTDIR}/qt ; tar xf -)
cd ${DISTDIR}/qt/dist/${platform}
tar cf - * | (cd ${DISTDIR}/qt ; tar xf -)
cd ${DISTDIR}
rm -rf qt/dist qt/util qt/tmake qt/makefiles

echo "Including version-specific information..." >&2
cd ${DISTDIR}/qt
${curdir}/versionize $VERSION $VERSIONWIN $SPECIAL [A-Z]*

echo "Finally packing the distribution, see ${DISTDIR} ..." >&2

if [ "${platform}" = "win" ]; then
  cd ${DISTDIR}
  rm qt/MANIFEST
  zip -q -r -9 qtwin${VERSIONWIN}.zip qt
fi

if [ "${platform}" = "x11" ]; then
  cd ${DISTDIR}
  mv qt qt-${VERSION}
  if [ "${disttype}" = "commercial" ]; then
    tar cf qt-${VERSION}-commercial.tar qt-${VERSION}
    gzip -9 qt-${VERSION}-commercial.tar
  else
    tar cf qt-${VERSION}.tar qt-${VERSION}
    gzip -9 qt-${VERSION}.tar
  fi
fi

echo "Done" >&2
