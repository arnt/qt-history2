#!/usr/bin/perl -w
#
# Creates a new Qt source distribution
#
# Copyright 1996-2000 Troll Tech AS.  All rights reserved.
#
# ----------------------------------------------------------------
#
# Usage:
#	mkdist.generic [options] {commercial|free} {version}
#
# Options:
#	-nodoc	Don't generate documentation
#	-local	Copy local distribution from $QTDIR, don't use p4
#	-LOCAL	Copy local distribution from $QTDIR, don't use p4, don't check
#	-noch	Ignore the fact that the changes file doesn't exist
#       -msonly Build Microsoft Visual C++ makefiles only (in win-mode)
#

#
# Yes, this code used to be a shell script.
#

while ( defined($ARGV[0]) && $ARGV[0] =~ /^-/ ) {
    if ( $ARGV[0] eq "-nodoc" ) {
        $nodoc=1; shift;
    } elsif ( $ARGV[0] eq "-noch" ) {
        $noch=1; shift;
    } elsif ( $ARGV[0] eq "-local" ) {
        $local=1; shift;
    } elsif ( $ARGV[0] eq "-LOCAL" ) {
        $local=2; shift;
    } elsif ( $ARGV[0] eq "-msonly" ) {
        $msonly=1; shift;
    } else {
        last;
    }
}

$disttype=$ARGV[0] || 0;
$platform=$ARGV[1] || 0;

$VERSION=$ARGV[2] || 0;
($BRANCH)=$VERSION =~ /(.*)\.\d+/;
$LABEL="qt/$VERSION";


$DISTDIR="/tmp/qt-$VERSION-$disttype-$platform-".`whoami`;
chomp $DISTDIR;
$scriptdir="$DISTDIR/qt/util/scripts";

print "\nCreating a new Qt distribution:\n";

if ( $disttype eq "free" || $disttype eq "commercial" ) {
  $goodparam1=1;
  print "  Distribution type... $disttype\n";
}

if ( $platform eq "x11" || $platform eq "win" ) {
  $goodparam2=1;
  print "  Platform ........... $platform\n";
}
print "\n";

if ( !$goodparam1 || !$goodparam2 ) {
  print STDERR "Usage: mkdist.generic commercial|free x11|win\n";
  exit 1;
}

if ( $disttype eq "free" && $platform ne "x11" ) {
  print STDERR "Impossible. Only X11 versions have a free license!\n";
  exit 1;
}

$T=`p4 fstat //depot/qt/$BRANCH/doc.conf | awk '/ depotFile / { print \$3 }'`;
if ( $T eq "" ) {
    print STDERR qq{"//depot/qt/$BRANCH/..." is not in the depot.\n"};
    print STDERR "Branch it, then restart:\n";
    print STDERR "      p4 integrate //depot/qt/main/... //depot/qt/$BRANCH/...\n";
    print STDERR "      p4 submit\n";
    exit 1;
}
if ( !`p4 labels | grep "^Label $LABEL "` ) {
    print STDERR "Label $LABEL does not exist. Create it, using the previous\n";
    print STDERR "label as a template.  Current labels can be listed with 'p4 laberls'\n";
    exit 1;
}

print "Deleting current $DISTDIR...\n";
system("rm -rf $DISTDIR");

if ( $local ) {
    $localqt=`p4 fstat //depot/qt/$BRANCH/doc.conf`;
    $localtmake=`p4 fstat //depot/tmake/main/README`;
    if ( $localqt=~ s{.*clientFile ([^\n]*)/doc.conf.*}{$1}s
      && $localtmake=~ s{.*clientFile ([^\n]*)/README.*}{$1}s )
    {
	print "Duplicating your local depots...\n";
	print "  Qt:    ($localqt)\n";
	print "  tmake: ($localtmake)\n";
	print "WARNING: this will not exclude all appropriate files!\n";
	if ( $local < 2 ) {
	    $p4sync=`p4 sync -n //depot/qt/$BRANCH/... //depot/tmake/main/... 2>&1`;
	    $p4sync=~ s/.*up-to-date.\n//g;
	    $p4opened=`p4 opened //depot/qt/$BRANCH/... //depot/tmake/main/... 2>&1`;
	    $p4opened=~ s/.*not opened on this client.\n//g;
	    if ( $p4sync || $p4opened ) {
		print STDERR "You must submit and sync your changes first (or run with -LOCAL)\n";
		exit 1;
	    }
	}
	mkdir $DISTDIR,0777;
	system("cp -r $localqt $DISTDIR/qt");
	system("cp -r $localtmake $DISTDIR/tmake");
    } else {
	print STDERR "Cannot find qt/$BRANCH and/or tmake/main in your workspace\n";
	exit 1;
    }
} else {
    print "Exporting the entire Qt and tmake depots...\n";

    $TMPCLIENT="qt-release-tmp-$$";
    $client = `p4 client -t qt-release-$disttype-$platform -o $TMPCLIENT`;
    $client =~ s{(\nRoot:).*}{$1 $DISTDIR};
    $client =~ s{/qt/main/}{/qt/$BRANCH/}g;
    open P4CLIENT, "| p4 -s client -i | egrep -v '^(info|exit):'";
    print P4CLIENT $client;
    close P4CLIENT;
    system("p4 -s -c $TMPCLIENT sync $DISTDIR/...\@$LABEL 2>\&1 |
	    egrep -v '^(info|exit):'");
    system("p4 -s client -d $TMPCLIENT  2>\&1 | egrep -v '^(info|exit):'");
}

$ENV{TMAKEDIR}="$DISTDIR/tmake";
$ENV{TMAKEPATH}="$ENV{TMAKEDIR}/lib/linux-g++";
$ENV{PATH}="$ENV{TMAKEDIR}/bin:$ENV{PATH}";


# At this point, $DISTDIR is a clean checkout

chdir "$DISTDIR/qt/src";

# Replace Netscape-owned code with dummies (direct user to PluginSDK)
$NSDIR="$DISTDIR/qt/extensions/nsplugin/src";
opendir NSPLUGIN, $NSDIR;
for $i ( readdir NSPLUGIN ) {
    next unless $i =~ /^(np|jri)/;
    unlink "$NSDIR/$i";
    open NSFILE, ">$NSDIR/$i";
    print NSFILE qq{#error "This file is provided by Netscape.  Please see documentation."\n};
    close NSFILE;
}

$qglobalfile="$DISTDIR/qt/src/tools/qglobal.h";
open QGLOBAL, $qglobalfile;
$qglobal=join "",<QGLOBAL>;
if ( $qglobal =~ /#define\s+QT_VERSION_STR\s+"([^"]*)"/ ) {
    $SRC_VERSION=$1;
} else {
    die "Cannot extract version from qglobal.h";
}
close QGLOBAL;

($VERSIONMAJOR)=$SRC_VERSION=~ /(.*)\.\d+/;
die "qglobal.h does not match branch $BRANCH" if $VERSIONMAJOR != $BRANCH;

if ( $SRC_VERSION =~ /(.*)-(snapshot)/ ) {
    $SRC_VERSION_N=$1;
    $SPECIAL=$2;
    $N="${SRC_VERSION_N}-".`date +\%Y\%m\%d`;
    chomp $N;
    $qglobal =~ s/$SRC_VERSION/$N/;
    open QGLOBAL, ">$qglobalfile";
    print QGLOBAL "$qglobal";
    close QGLOBAL;
} elsif ( $SRC_VERSION =~ /(.*)-(beta)/ ) {
    $SRC_VERSION_N=$1;
    $SPECIAL=$2;
} else {
    $SPECIAL="stable";
    $SRC_VERSION_N=$SRC_VERSION;
}
if ( "$VERSION" ne "$SRC_VERSION_N" ) {
    print STDERR "Version mismatch:   qglobal.h: $SRC_VERSION   argument: $VERSION\n";
    exit 1;
}
$VERSIONWIN=$SRC_VERSION; $VERSIONWIN =~ s/[-.]//g;

if ( !$noch && ! -f "$DISTDIR/qt/dist/changes-$VERSION" ) {
    print STDERR "You must create qt/dist/changes-$VERSION first (or run with -noch)\n";
    print STDERR "Find the logs:    p4 ???? ???? # ./changelog dd/mm/yyyy-previous-release-date >changes-$VERSION\n";
    print STDERR "Print the logs:   p4 ???? ???? # aprint -w80 -4 changes-$VERSION\n";
    exit 1;
}

$QTDIR="$DISTDIR/qt";
$ENV{QTDIR}=$QTDIR;

print "Create symlinks for Qt header files...\n";
mkdir "$QTDIR/include",0777;
system("$QTDIR/bin/syncqt | grep -v '^symlink created'");
###${scriptdir}/make_qt_dot_h > ${QTDIR}/include/qt.h
unlink "$QTDIR/include/qt.h";

if ( $nodoc ) {
    print "Documentation NOT generated...\n";
    system("mv -f $DISTDIR/qt/doc $DISTDIR/qt/src");
} else {
    print "Generating documentation...\n";
    mkdir "$DISTDIR/qt/doc", 0777;
    mkdir "$DISTDIR/qt/doc/html", 0777;
    system("$DISTDIR/qt/util/qdoc/qdoc $DISTDIR/qt");
    if ( $platform eq "x11" ) {
        mkdir "$DISTDIR/qt/doc/man", 0777;
        mkdir "$DISTDIR/qt/doc/man/man1", 0777;
        mkdir "$DISTDIR/qt/doc/man/man3", 0777;
        system("$DISTDIR/qt/util/qdoc/man");
        system("mv $DISTDIR/qt/doc/man $DISTDIR/qt");
        system("mv $DISTDIR/qt/src/moc/moc.1 $DISTDIR/qt/man/man1");
    }
    system("mv $DISTDIR/qt/doc/html $DISTDIR/qt");
    chdir $DISTDIR;
    system("mv -f $DISTDIR/qt/gif/*.png $DISTDIR/qt/html");
    system("mv -f $DISTDIR/qt/gif/*.jpg $DISTDIR/qt/html");
  #   system("mv -f $DISTDIR/qt/doc/.qdoc-links $DISTDIR");
    system("mv -f $DISTDIR/qt/doc $DISTDIR/qt/src");
    system("mv -f $DISTDIR/qt/html $DISTDIR/qt/doc");
}

print "Removing local files...\n";
if ( $platform eq "win" ) {
  chdir "$DISTDIR/qt/src";
  system(q{tmake qtinternal.pro -e "Expand('X11ONLY')" | xargs rm -v});
  chdir $DISTDIR;
  system("rm -rf qt/examples/timestamp");
}
chdir $DISTDIR;
system("find qt -name .cvsignore -o -name doc.conf | xargs rm -f");
unlink "qt/src/qtinternal.pro";
unlink "qt/make.help qt/variables";
system("rm -rf qt/bugs qt/etc qt/gif qt/reqs qt/tests");
chdir "qt/examples";
system("rm -rf network sheet");

chdir "$DISTDIR/qt/bin";
system("rm -f syncqt*");

############ This is done by the p4 client qt-release-$disttype-$platform
print "Removing src .cpp files for other platforms...\n";
chdir "$DISTDIR/qt/src";
system("find . -name '*_x11.c*' "
	    ."-o -name '*_fb.c*' "
	    ."-o -name '*_mac.c*' "
	    ."-o -name '*_win.c*' "
	    ."-o -name '*_os2.c*' | grep -v '_$platform' | xargs rm -f");
#############################################

print "Generate lex and yacc files for moc...\n";
chdir "$DISTDIR/qt/src/moc";
system("make mocgen.cpp >/dev/null");

print "Removing internal makefiles\n";
chdir "$DISTDIR/qt";
system("find . -name GNUmakefile -o -name Makefile | xargs rm -f");
system("rm -f GNUmakefile.inc Makefile.inc");

if ( $platform eq "win" ) {
    chdir "$DISTDIR/qt/src/moc";
    $lexyyc=`cat lex.yy.c`;
    $lexyyc=~ s{^(#include \<unistd\.h\>)$}{/* $1 */};
    open T, ">lex.yy.c";
    print T $lexyyc;
    close T;
    chdir "$DISTDIR/qt/src";
    print "Moving source and include files...\n";
    system("mv ../include/qt.h .") if  -f "../include/qt.h";
    system("rm -f ../include/*");
    system("mv */q*.h ../include");
    system("mv qt.h ../include") if -f "qt.h";
    chdir "$DISTDIR/qt";
    system("mv extensions/opengl/src/q*.h include");
    system("mv extensions/nsplugin/src/q*.h include");
    system("rm -rf makefiles");
    system("rm -rf extensions/xt");
    system("find . -name 'qtx11.*' | xargs rm -vf");

    chdir "$DISTDIR/qt";
    mkdir "mkfiles",0777;

# Convince tmake to use the right DLL library and set right DLL lib Makefile
    mkdir "lib",0777 if ! -d "lib";
    $DLLVER=`tmake src/qt.pro -e "Expand('VERSION')"`;
    chomp $DLLVER;
    $DLLVER =~ 's/\.//g';
    open T, ">lib/qt$DLLVER.lib";
    close T;
    system("mv src/Makefile.win32-dll src/Makefile");

    if ( !$msonly ) {
      print "Build DLL Makefiles for Borland C++...\n";
      $ENV{TMAKEPATH}="$ENV{TMAKEDIR}/lib/win32-borland";
      system("$scriptdir/buildmakefiles -win32 -dll");
      system(qq{find . -name Makefile -o -name "qt*.mak" | xargs ${scriptdir}/unix_to_dos});
      system(qq{find . -name Makefile -o -name "qt*.mak" | xargs zip -r mkfiles/borland_dll.zip});
    }

    print "Build DLL Makefiles for Microsoft Visual C++...\n";
    $ENV{TMAKEPATH}="$ENV{TMAKEDIR}/lib/win32-msvc";
    syetm("$scriptdir/buildmakefiles -win32 -dll");
    system(qq{find . -name Makefile -o -name "qt*.mak" | xargs ${scriptdir}/unix_to_dos});
    system(qq{find . -name Makefile -o -name "qt*.mak" | xargs zip -r mkfiles/msvc_dll.zip});

# Clean up after DLL library makefiles have been created
    unlink "lib/qt$DLLVER.lib";
    unlink "src/Makefile";
    unlink "src/qtdll.mak";
    unlink "src/qtmain.mak";

    if ( !$msonly ) {
        print "Build Makefiles for Borland C++...\n";
        $ENV{TMAKEPATH}="$ENV{TMAKEDIR}/lib/win32-borland";
        system("$scriptdir/buildmakefiles -win32");
        system(qq{find . -name Makefile -o -name "qt*.mak" | xargs ${scriptdir}/unix_to_dos});
        system(qq{find . -name Makefile -o -name "qt*.mak" | xargs zip -r mkfiles/borland.zip});
    }

    print "Build Makefiles for Microsoft Visual C++...\n";
    $ENV{TMAKEPATH}="$ENV{TMAKEDIR}/lib/win32-msvc";
    system("$scriptdir/buildmakefiles -win32");
    system(qq{find . -name Makefile -o -name "qt*.mak" | xargs ${scriptdir}/unix_to_dos});
    system(qq{find . -name Makefile -o -name "qt*.mak" | xargs zip -r mkfiles/msvc.zip});
  
    print "Converting Unix text files to DOS...\n";
    chdir $DISTDIR;
    system(q{find qt -type f -print | fmt -1 | \
	egrep -v '\.(dll|gif|png|jpg|bmp|any|pic|ppm|exe|zip|qm)$'}
	." | xargs ${scriptdir}/unix_to_dos");
}

if ( $platform eq "x11" ) {
  print "Removing more Windows-specific files...\n";
  chdir "$DISTDIR/qt";
  system("rm -f bin/*.bat");
  system("rm -rf src/tmp");
  system("rm -f src/qtmain.pro src/Makefile.win32-dll");
  system("find . -name 'qtwin.*' | xargs rm -vf");
  system("rm -rf ${DISTDIR}/qt/lib");
  mkdir "$DISTDIR/qt/lib",0777;

  # Generate makefiles
  system("$QTDIR/util/scripts/makeunixmake -v");
  # Copy template files into qt/configs
  system("cp $QTDIR/tmake/*.t $QTDIR/configs");
  chdir "$QTDIR/configs";
  system("rm -f propagate.t subdirs.t");
}

print "Copying the README, LICENSE etc. files...\n";
chdir "$DISTDIR/qt/dist";
system("cp [A-Z]* .. 2> /dev/null");
system("cp -f changes-${VERSIONMAJOR}[.0-9]* ..") unless $noch;
chdir "$DISTDIR/qt/dist/$disttype";
system("tar cf - * | (cd $DISTDIR/qt ; tar xf -)");
chdir "$DISTDIR/qt/dist/$platform";
system("tar cf - * | (cd $DISTDIR/qt ; tar xf -)");
chdir $DISTDIR;

print "Including version-specific information...\n";
chdir "$DISTDIR/qt";
system("$scriptdir/versionize $SRC_VERSION $VERSIONWIN $SPECIAL [A-Z]*");

print "Removing distribution-building files...\n";
system("rm -rf qt/dist qt/util qt/tmake qt/makefiles");

print "Finally packing the distribution, see ${DISTDIR} ...\n";

if ( $platform eq "win" ) {
    chdir $DISTDIR;
    unlink "qt/MANIFEST";
    system("zip -q -r -9 qtwin${VERSIONWIN}.zip qt");
} elsif ( $platform eq "x11" ) {
    chdir $DISTDIR;
    rename "qt", "qt-${SRC_VERSION}";
    if ( $disttype eq "commercial" ) {
        system("tar cf qt-${SRC_VERSION}-commercial.tar qt-${SRC_VERSION}");
        system("gzip -9 qt-${SRC_VERSION}-commercial.tar");
    } else {
        system("tar cf qt-${SRC_VERSION}.tar qt-${SRC_VERSION}");
        system("gzip -9 qt-${SRC_VERSION}.tar");
    }
}

print "Done\n";
