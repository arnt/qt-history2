#!/usr/bin/perl

# for size calculation:
#
# TODO: start with a ./configure to make sure we start with a known baseline
#       and can use the correct strip
#
# TODO: measure sizes of configure options as well
#
# TODO: the proper way to measure the size of a feature is 
#       libsize(depmacros(feature)) - libsize(QT_NO_feature)
#       (with the obvious optimizations)

# for justcompile:
#
# TODO : remember which features worked OK last time, and schedule those
# at the end (two pass...)
#



for ( @ARGV ) {
    if ( $_ eq "-c" ) {
	$justcompile=1;
    } elsif ( /^QT_NO_/ ) {
	push @macros_to_test, $_;
    }
}

$ENV{TEAMBUILDER_HOSTINFO}="1"; # Who do we blame for internal compiler errors?
if ( $justcompile ) {
    $ENV{TEAMBUILDER_CC_VERSION}="2.95.*"; 
} else {
    $ENV{TEAMBUILDER_CC_VERSION}="2.95.3"; # Ensure we everywhere use the same compiler
}

sub usemakevar {
    my ( $var, $v ) = @_;
    $v = `awk '/^$var / { print \$3; }' Makefile`;
    chomp $v;
    $$var=$v;
}
usemakevar("OBJECTS_DIR");
usemakevar("TARGET");
$MOCDIR=$OBJECTS_DIR; $MOCDIR=~ s/\.obj/.moc/;

$lib = "$ENV{QTDIR}/lib/$TARGET";

system("rm ../include/qconfig.h tools/qconfig.h");
system("touch tools/qconfig.h");
system("ln -s ../src/tools/qconfig.h ../include/qconfig.h");

if ( !$justcompile ) {
    print stderr "Initial build...\n";
    system("make clean > /dev/null  2>\&1; make >log 2>\&1") == 0 || die "Error in initial build";
}

print stderr "Reading files...\n";
for $file ( split / /, `echo */q*[ph]` ) {
    chomp $file;
    if ( $file ne "tools/qfeatures.h" && $file !~ /^tools\/qconfig/ ) {
	$filecontents{$file} = `cat $file`;
    }
}

sub libsize
{
    system("arm-linux-strip $lib");
    return -s $lib;
}

if ( !$justcompile ) {
    $fullsize = libsize;
    print "Full size library = $fullsize\n";
}

open FL, "tools/qfeatures.txt" || die "Cannot open ./tools/qfeatures.txt";

while (<FL>) {
    if ( /^Feature: (\S*)/ ) {
	$macro="QT_NO_$1";
	push @macros, $macro;
    } elsif ( /^Requires: (.*?)\s*$/ ) {
	$prerequisites{$macro} = join " ", map { "QT_NO_$_" } split /\s+/, $1;
    }
}

sub cleanup {
    system("rm ../include/qconfig.h");
    system("rm tools/qconfig.h");
    system("touch ../include/qconfig.h");
    system("touch tools/qconfig.h");
}

$SIG{INT} = sub {
    cleanup;
    exit 1;
};

@macros_to_test = @macros unless defined(@macros_to_test);

for $macro ( @macros_to_test ) {
    # Find all macros that depend on this macro
    %depmacros = ($macro => 1);
    for $f ( @macros ) {
	if ( $prerequisites{$f} =~ /\b$macro\b/ ) {
	    $depmacros{$f} = 1;
	}
    }
    $anydepmacros = '\b('.(join "|",keys %depmacros).')\b';
    # Re-write qconfig.h
    open QC, ">tools/qconfig.h";
    print QC "#define $macro\n";
    print stderr "Test $macro (deps: ", join(" ", keys %depmacros), ")\n";
    close QC;
    sleep 1;
    unlink "$MOCDIR/allmoc.cpp";
    unlink $lib;
    system("make -k >log 2>\&1");
    if ( -f $lib ) {
	if ( $justcompile ) {
	    print stderr "Build OK with only $macro defined\n";
	} else {
	    $size_with{$macro} = libsize();
	    print stderr "Gain with $macro = ".($fullsize-$size_with{$macro})."\n";
	}
    } else {
	print stderr "**** failure **** $macro *****\n";
	print "\n\nBuild fails with only $macro defined:\n";
	print "\n",`cat log`;
    }
};

cleanup;
