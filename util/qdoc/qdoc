#!/usr/bin/perl
#
# $Id: //depot/qt/main/util/qdoc/qdoc#44 $
#
# this is a massive hack, written very quickly
#
# usage: gendoc *.cpp
#        (or just some C++ files)
#
# gendoc looks for comments that start with /*! and does stuff with these
# escapes:
#
# "\e word" emphasises that word
#
# "\c word" outputs the word in code style
#
# "\warning" outputs "Warning:" in boldface or equivalent
#
# \< -> <
# \> -> >
# \& -> &
# in code examples, \/ becomes //
#
# \arg, \capt, \name, \return and \todo all use the text until the next
# blank line to do, respectively, describe an argument, set a caption
# for the documented unit, set the name which triggers links to the unit,
# describe the return value, and finally add an item to the todo list
#
# "\fn line" uses the rest of the line as a function specification
# (most commonly an inline or virtual = NULL function). It must be the
# first escape
#
# "\class name header" documents the class "name" which is defined in
# header file "<header>".  It too must be the first escape
#
# "\code ... \endcode" makes a code example.  If the first two characters
# on a line in the block are space characters (not white space, ascii 32)
# they will be removed.
#   Variables declared as "class name" or "class * name" (any amount of
# white space) and used as "name.member" or "name->member" will be linked
# to the correct class::member
#
# "\link name text text text \endlink" makes "text text text" into a link
# to "name" which must be a member of this class or fully qualified
#
# "\page filename.html" directs the rest of the file to that filename
#
# "\sa" outputs "See also: " and clears the has-shown-link table
#
# "\header filename.h" adds filename.h to the list of header files that
# are to be included in the documentation.
#
# "\relates classname" directs the documentation for the item to the
# sensible file (one assumes that you choose a sensible class).

sub urlencode {
    local($_) = @_;

    s-\!|\%|\/|\<|\=|\>|\[|\]|\^|\||\~|\_-sprintf("_%02x", ord($&))-eg;
    $_;
}

sub html {
    local($_) = @_;

    s/\&/&amp;/gs;
    s/</&lt;/gs;
    s/>/&gt;/gs;
# "
    $_;
}


sub processcode {
    local ($_) = @_;
    local (%types);

    $_ = &html($_);
    s/^\s*\n//s;
    s/\s+$/\n/s;
    s/\n\s*\n/\n<linebreak>\n/gs;
    s!\\/(.*?\n)!//$1!gs;
    s/\n  /\n/gs;
    s/^  //gs;

    while ( /(?:(?:^)|(?:;))\s*([A-Za-z0-9_:]+)\b(?=\s*\*?\s*([A-Za-z0-9_]+)\b)/gs ) {
	if ($type{$anchor{$1}} eq "class") {
	    if (defined($types{$2})) {
		print "confusion: ", $2, " seems to refer to both ", $1, 
		" and ", $types{$2}, "\n";
	    } else {
		$types{$2} = $1;
#print "Variable ", $2, " has type ", $1, "\n";
	    }
	}
    }
#print;
    s@([A-Za-z0-9_]+)(\s*(?:(?:\.)|(?:-&gt;))\s*)([A-Za-z0-9_]+)@
	if (defined($anchor{$types{$1} . "::" . $3})) {
#print "found documentation for ", $types{$1}, "::", $3, "\n";
	    sprintf("%s%s<a href=%s>%s</a>", $1, $2,
		    $anchor{$types{$1} . "::" . $3}, $3);
	} else {
#print "didn't find documentation for ", $types{$1}, "::", $3, "\n";
	    sprintf("%s%s%s", $1, $2, $3);
	}
    @egsx;

    join($_, "<bq><pre>\n", "</pre></bq>\n");
}


sub findlink {
    local ($_, $class, $url, $ismethod) = @_;

    if (defined($anchor{$_}) && $anchor{$_} ne $url && $_ ne $class) {
	sprintf("<a href=%s>%s</a>", $anchor{$_}, $_);
    } elsif ((($ismethod eq "(") || (/^[A-Z]/)) && 
	     defined($anchor{$class . $_}) && $anchor{$class . $_} ne $url) {
	sprintf("<a href=%s>%s</a>", $anchor{$class . $_}, $_);
    } else {
	sprintf("%s", $_);
    }
}

sub preprocessdocs {
    local ($url, $_);

    foreach $url ( sort keys %type ) {
	$doc{$url} =~ s@\\header\s+([a-z0-9\.]+)@
	    my ($h1, $h2);
	    $h1 = $1;
	    $h2 = $h1;
	    $h2 =~ s/\.h$/-h.html/;
	    $headerfiles{$h1} = $h2;
	    sprintf("");
	@egsx;
    }

    foreach $url ( sort keys %type ) {
	$doc{$url} =~ s@\\relate[ds]\s+(\w+)@
	    $relations{$1} .= " " . $url;
	    sprintf("");
	@egsx;
    }

    # not actually url's... too tired to do it right :(
    foreach $url ( sort keys %relations ) {
	my (%tmp);
	$relations{$url} =~ s/^\s*//;
	foreach ( split(/\s+/, $relations{$url}) ) {
	    $tmp{$_}++ if ($_ ne "");
	}
	$relations{url} = join(" ", sort keys %tmp);
    }
}



sub processdocs {
    local ($url, $doc, $class, %word, $idoc);

    foreach $url ( sort keys %type ) {
#print "processing url: ", $url, "\n";
	$class = $name{$url};
	$class =~ s/::.*/::/;

	$doc = $doc{$url};

	$doc =~ s/\\\&/&amp;/gs;
	$doc =~ s/\\</&lt;/gs;
	$doc =~ s/\\>/&gt;/gs;

	$capt{$url} = $1 
	    if ($doc =~ s/\\capt\s+(.*?)
		(?:(?:\n\s*\n\s*)|(?:$ ))/\n\n/sx);
	$name{$url} = $1
	    if ($doc =~ s/\s*\\name\s+(.*?)
		(?:(?:\n\s*?\n\s*)|(?:$ ))/\n/sx);
	$doc =~ s/\s*$/\n/s;
	$doc =~ s/^\s*//s;
	$doc =~ s-\s*\\warning\s+-<p><strong>Warning: </strong>-gs;
	$doc =~ s/\\internal\s.*//s if (!$internal);

	$doc =~ s-\\link\s+([\w:]+)(?:[\(\)]*)\s*(.+?)\s*\\endlink-
	    if (defined($anchor{$1})) {
		sprintf("<a href=%s>%s</a>", $anchor{$1}, $2);
	    } else {
		if (defined($anchor{$class . "::" . $1})) {
		    sprintf("<a href=%s>%s</a>", 
			    $anchor{$class . "::" . $1}, $2);
		} else {
		    print "No link to '", $1, "' for '", $2, "'\n";
		    sprintf("%s", %2);
		}
	    }
	-egsx;

	$doc .= "<p>Returns: " . $1
	    if ($doc =~ s/\s*\\returns?\s+(.*?)
		(?:(?:\n\s*?\n\s*)|(?:$ ))/\n\n/sx);

	if ($doc =~ /\n\\arg\s+/s) {
	    $doc =~ s-\s*\n\\arg\s+-
		\n\nArguments:\n<ul>\n\\arg -sx;
	    $doc =~ s-\n\\arg\s+(.*?)(?=\n\s*\\arg\s+)-\n<li>$1-gs;
	    $doc =~ s-\n\\arg\s+(.*?)
		(?:(?:\n\s*?\n\s*)|(?:$ ))-\n<li>$1\n</ul>\n-sx;
	}

	$_ = "To do:\n<ul>\n";
	$_ .= "<li>" . $1 . "\n"
	    while ($doc =~ s/\s*\\todo\s+(.*?)
		   (?:(?:\n\s*?\n\s*)|(?=\\todo\s)|(?:$ ))/\n\n/sx);
	$_ .= "</ul>\n";
	$doc .= $_ if (/<li>/s);

	$_ = "Bugs and limitations:\n<ul>\n";
	$_ .= "<li>" . $1 . "\n" 
	    while ($doc =~ s/\s*\\bug\s+(.*?)
		   (?:(?:\n\s*?\n\s*)|(?:$ ))/\n\n/sx);
	$_ .= "</ul>\n";
	$doc .= $_ if (/<li>/s);

	$doc =~ s-\\internal\s-<p>Internal comments:<p>\n-s;

	$doc =~ s!\\code\b(.*?)\\endcode!&processcode($1)!esg;

	$doc =~ s!\\e\s+(\S+)!<em>$1</em>!gs;
	$doc =~ s!\\c\s+(\S+)!<code>$1</code>!gs;

	$doc =~ s/\s*$/\n/s;
	$doc =~ s/\s*\\sa\s+/\n\nmagicwordthatyoushouldavoid /g;
	$doc =~ s-\s*\n\s*\n\s*-\n<p>-gs;
	$doc =~ s/<linebreak>//gs;

	undef %word;
	$_ = $class;
	s/:://;
	$word{$_}++;

	$doc =~ s-(?:(?:\b((?:(?:operator[^\s\(]{1,3})
			    |(?:[\w:]+(?:\.(?:h)|(?:cpp))?)))(\()?(?!</a>))
		   |((?:(?:<pre>.*?</pre>)|(?:<.*?>))))-
	    if ($3 eq "") {
		if (!defined($word{$1})) {
		    if ($1 eq "magicwordthatyoushouldavoid") {
			undef %word;
			sprintf("See also: ");
		    } else {
			my ($tmp);
			$tmp = &findlink($1, $class, $url, $2);
			$word{$1}++ if ($tmp ne $1);
			sprintf("%s%s", $tmp, $2);
		    }
		} else {
		    sprintf("%s%s", $1, $2);
		}
	    } else {
		sprintf("%s", $3);
	    }
	-egsx;

	$brief{$url} = $1
	    if ($doc =~ s/\s*\\brief\s+(.*?)(?:(?:\n<p>\s*)|(?:$))//s);

	$doc{$url} = $doc;
    }
}


sub mangleclass {
    local($class) = @_;

    $class =~ s/[:\s].*//;
    $class =~ tr/A-Z/a-z/;
    $class = "globals" if ($class eq "");
    $class .= ".html";

    $class;
}



#
# now, now
#
# %urls is the list of url's, indexed by mangled function
#
# $uniq is just an unique number, starts at 0
#
sub manglefn {
    local($type, $class, $name, $sig, $const, $home) = @_;
    local($url, $d);

    $type =~ s/\s+/-/g;
    $type =~ s/^-*(.*?)-*$/$1/;
    $type =~ s/-*([\*\&])-*/$1/g;
    $type =~ s/^-?virtual-//;
    $type = "-" . $type if ($type ne "");
    $const = "-" . $const if ($const ne "");
    $url = $class . "::" . $name;
    $d = "(";
    foreach (split(/\s*,\s*/, $sig)) {
# kill argument name
	s/^\s*((?:
		(?:const\s+)|
		(?:volatile\s+)|
		(?:signed\s+)|
		(?:unsigned\s+)|
		(?:long\s+)|
		(?:short\s+)|
		(?:struct\s+)|
		(?:union\s+)|
		(?:class\s+)|
		(?:enum\s+)
		)*\w+[\s\*\&]*?)\s*\b\w+\s*(?:=.*?\s*)?$/$1/gsx;
# strip spaces around & and *
	s/\s*([\*\&])\s*/$1/;
# kill default and change spaces into -
	s/=.*//g;
	s/\s+/-/g;
	s/-+$//;
	s/^-+//;

# finally add it to the url
	$url = join($d, $url, $_);
	$d = ",";
    }
    if ($d eq ",") {
	$url .= ")" . $type . $const;
    } else {
	$url .= "()" . $type . $const;
    }

# qualify enums
    $url =~ s/[:A-Za-z0-9_]+/
	if (defined($anchor{$class . "::" . $&})
	    && $type{$anchor{$class . "::" . $&}} eq "enum") {
	    sprintf("%s::%s", $class, $&);
	} else {
	    sprintf("%s", $&);
	}
    /egsx;

    $url = &urlencode($url);
    unless (defined($urls{$url})) {
	$home = &mangleclass($class) unless ($home =~ /\S/);
	$urls{ $url } = join("", $home, "#", ++$uniq);
    }
    $url = $urls{$url}; #cool!
}




sub storeclass {
    local($filename, $sig, $def) = @_;
    local($url, $name, $inh, $enum);

    ($name, $inh) = split(/\s*:\s*/, $sig);

    $url = &mangleclass($sig);
    $type{$url} = "class";
    $name{$url} = $name;

    $inheritance{$url} = $inh if (defined($inh) && $inh ne "");

    $def =~ s/\s+/ /g;
    $def =~ s/Q_OBJECT//;
    $def =~ s/(\)\s*(?:const\s*)?)\{.*?\}/$1;/gs;
    $def =~ s/struct[^\;\{]*\{.*?\}\s*\w*\s*\;\s*//gs;
    $def =~ s/;\s*$//s;

    while ($def =~ /(?:\b|^)enum\s+(\w+)\b/gs) {
	$enum = $url . "#" . $1;
	$type{$enum} = "enum";
	$name{$enum} = $name . "::" . $1;
	$anchor{$name{$enum}} = $enum unless (defined($anchor{$name{$enum}}));
    }

    $members{$url} = $def;
}




sub getfile {
    local($filename) = @_;
    local($ifdef);

    open(F, "expand < $filename |") || die "can't open $filename for reading";
    $ifdef = 0;
    while(<F>) {
	$dates{$1} = $2 if (/\$Id\:\s+(.*?),v\s+[0-9\.]+\s+(\S+)\s/);
	$ifdef++ if (/^\#if/ && ($ifdef || !/_H$/)); # medium awful
	unless ($ifdef) {
	    s-//.*--;
	    push @_,$_;
	}
	$ifdef-- if ($ifdef && /^\#endif\b/); # hm, hm, *_H
    }
    close(F);
    join("", @_);
}



sub readfiles {
    local($/, $_, $h, $w, $filename);

    undef $/;
    foreach $filename ( keys %headerfiles ) {
	$_ = $filename;
	open(F, "< $_") || die "can't open $_ for reading";
	s/\./-/;
	s/$/.html/;
	open(H, "> $outputdir/$_") 
	    || die "can't open $outputdir/$_ for writing";
	$h = <F>;
	close(F);
	$h = html($h);
	$h =~ s@\nclass\s+\w+(?:\s*:(\s*(?:public\s+)?\w+\s*,?)*)?@
	    $_ = "";
	    foreach $w (split(/\b/, $&)) {
		if (defined($anchor{$w})) {
		    $_ = join("", $_, "<a href=", $anchor{$w}, ">", $w, "</a>");
		} else {
		    $_ = join("", $_, $w);
		}
	    }
	    $_;
	@egsx;
	$h =~ s@(\n#include\s+[\<\"])([\w\.]+)([\>\"])@
	    if (defined($headerfiles{$2})) {
		sprintf("%s<a href=%s>%s</a>%s", $1, $headerfiles{$2}, $2, $3);
	    } else {
		sprintf("%s%s%s", $1, $2, $3);
	    }
	@egsx;
	print H "
<html><head><title>
Qt Toolkit - ", $filename, " include file
</title></head><body>
<p>This is the verbatim text of the include file.  It is provided for
documentation only; the copyright remains with Troll Tech.
<hr>
<pre>
", $h, "\n</pre>\n", $address;
	close H;
    }
}



sub readh {
    local ($filename) = @_;

    $h = getfile($filename);
    print "header file: ", $filename, "\n" if ($debug);
#   $h =~ s/\x22([^\\\x22]|\\.)*\x22//g; # \x22 is "

# { is \x7b and } is \x7d
    while ($h =~ m-\nclass\s+
	   ([^\n]*?)\s+
	   \x7b\s+(.*?)\n\x7d-xsg
	   ) {
	&storeclass($filename, $1, $2);
    }
    $headerfiles{$filename} = $filename;
    $headerfiles{$filename} =~ s/\./-/;
    $headerfiles{$filename} =~ s/$/.html/;
}

    


sub readc {
    local ($filename) = @_;

    $c = getfile($filename);
    print "code file: ", $filename, "\n" if ($debug);

    while ($c =~ m@
	   (?:/\*\![-\s]*
	    ((?:[^\*]|(?:\*[^/]))*)
	    \*/)\s*
	   (?:([A-Za-z_](?:[^\{;\*]|(?:\*[^/]))+)\s*\x7b)?@gsx) {
	my ($doc, $def, $type, $class, $name, $args, $const, $skip);
	$skip = 0;

	$doc = $1;
	$def = $2;

	if ($doc =~ m@^\\class\s+(\w+)\s+([\.\w]+)\s+(.*?)\s*$@s) {
	    # it's a \class
	    my ($class, $hfile, $doc);
	    my ($url);
	    $class = $1;
	    $hfile = $2;
	    $doc = $3;
	    if (!defined($cfiles{$hfile})) {
		readh($hfile);
	    }
	    $filename =~ s-^.*/--;
	    $cfiles{$hfile} .= " " . $filename;
	    $url = &mangleclass($class);
	    print $class, " not in ", $hfile, "\n" 
		unless (defined($members{$url}));
	    $doc{$url} = $doc;
	    $includefile{$url} = $hfile;
	    $includefile{$url} =~ s/\.doc/.h/;
	} elsif ($doc =~ m@^\\page\s+([\w\.]+)\s+(.*?)\s*$@s) {
	    # it a \page
	    my ($file, $doc);
	    my ($url);
	    $file = $1;
	    $doc = $2;
	    open(O, "> $outputdir/$file") ||
		die "can't open $outputdir/$file";
	    print O "<html><head>", $doc, "\n", $address;
	    close(O);
	    $anchor{$page} = $file;
	} else {
	    # it's a function, \fn or real?
	    print ""; # defeat too-cool switch optimizer
	    if ($doc =~ /^\\fn\s+([^;\n]+);?\s+(.*?)\s*$/s) {
		$def = $1;
		$doc = $2;
	    }
	    ($name, $args) = split(/\s*\(\s*/, $def);
	    if ($name =~ /^\s*(.*?[ \*\&])\s*((?:\w+::)?)(\w+[^\(\s\w]{0,3})$/s) {
		$type = $1;
		$class = $2;
		$name = $3;
		$class =~ s/:://;
		$type =~ s/^\s+//;
		$type =~ s/\s+$//;
	    } elsif ($name =~ /^\s*(\w+)\s*::\s*(\~?\w+)$/s) {
		$type = "";
		$class = $1;
		$name = $2;
	    } elsif ($name =~ /^\s*(\w+)\s*::operator\s*([\s\w\*\&]+)$/s) {
		$type = $2;
		$class = $1;
		$name = "casting-operator";
	    } else {
		print "skipped: ", $filename, ": ", $def, "\n", $doc, "\n";
		$skip = 1;
	    }
	    $args =~ s/([^:]):[^:].*/$1/s;
	    if ($args =~ /^(.*?)\s*\)\s*((?:const)?)\s*?$/s) {
		$args = $1;
		$const = $2;
	    } else {
		$skip = 1;
	    }

	    if (($skip == 0)) {
		if (!($type =~ /\bstatic\b/)) {
		    if ($args =~ /[()]/) {
			print STDERR "function prototype in argument\n", $def;
		    } else {
			my ($url, $home);

			if ($doc =~ /\\relate[ds]\s+(\w+)/s) {
			    $home = &mangleclass($1);
			} else {
			    $home = &mangleclass($class);
			}
			$url = &manglefn($type, $class, $name, 
					 $args, $const, $home);
			$name{$url} = $class . "::" . $name;
			$type{$url} = "fn";
			$doc{$url} = $doc;
			$class .= "::" if ($class ne "");
			$const = " " . const if ($const ne "");
			$def{$url} = $type." ".$class.$name."(".$args.")".$const;
			print "url: ", $url, " is ", $def{$url}, "\n" 
			    if ($debug);
		    }
		}
	    }
	}
    }
}

sub makenames {
    local($_, $dum);

    foreach ( sort keys %name ) {
	if (($type{$_} ne "enum") && !($doc{$_} =~ /\S/s)) {
	    print "Undocumented: ", $name{$_}, "\n";
	    undef $name{$_};
	    undef $type{$_};
	}
    }

    foreach ( sort keys %name ) {
	$anchor{$name{$_}} = $_ unless (defined($anchor{$name{$_}}));
    }

    # next, we do a good imitation of c++ inheritance... subclasses:
    foreach ( keys %inheritance ) {
	my ($c, $i);
	$i = $inheritance{$_};
	$i =~ s/((?:(?:^)|(?:,)))\s*\w+\s+(?=\w)/$1/sg;
	foreach $c ( split ( /\s*,\s*/, $i ) ) {
	    if (defined($subclasses{$c})) {
		$subclasses{$c} .= " " . $name{$_};
	    } else {
		$subclasses{$c} = $name{$_};
	    }
	}
    } # and members
    $dum = 1;
    while ($dum) {
	my ($url, $class, $member);
	$dum = 0;
	foreach $url ( keys %name ) {
	    next unless ($type{$url} eq "fn");
	    $class = $member = $name{$url};
	    $class =~ s/::.*//;
	    $member =~ s/.*:://;
	    foreach ( split( /\s+/, $subclasses{$class} ) ) {
		unless (defined($anchor{$_ . "::" . $member})) {
		    $dum = 1;
		    $anchor{$_ . "::" . $member} = $anchor{$name{$url}};
		}
	    }
	}
    }

    foreach ( keys %headerfiles ) {
	$anchor{$_} = $headerfiles{$_} unless (defined($anchor{$_}));
    }
#  foreach ( sort keys %anchor ) { print $_, ": ", $anchor{$_}, "\n"; }
}

#
# add links and escapes to a string
#
sub al {
    local ($_, $class) = @_;

    s-[\w:]+-
	if (defined($anchor{$class . "::" . $&}) &&
	    $type{$anchor{$class."::".$&}} ne "fn") {
	    sprintf("<a href=%s>%s</a>", $anchor{$class."::".$&}, &html($&));
	} elsif (defined($anchor{$&}) &&
		 $type{$anchor{$&}}) {
	    sprintf("<a href=%s>%s</a>", $anchor{$&}, &html($&));
	} else {
	    &html($&);
	}
    -egs;
    $_;
}

#
# add <a href> to args where appropriate and html-encode
#
sub makearglinks {
    local($_, $pre, $name, $post, $class, $anchor);

    foreach (sort keys %type) {
	if ($type{$_} eq "fn" &&
	    $def{$_} =~ /^([^\~\(:]*)\s+
	    ((?:\w+::)?(?:(?:operator[^\(\s]{1,3})|(?:(?:\~?\w+))))\s*
	    (\(.*)/sx) {
	    $pre = $1;
	    $name = $2;
	    $post = $3;
	    $class = $name;
	    $class =~ s/::.*//;
	    if (defined($anchor{$class})) {
		$anchor = $anchor{$class};
		undef $anchor{$class};
		$def{$_} = join(" ", &al($pre, $class), &html($name), 
				&al($post, $class));
		$anchor{$class} = $anchor;
	    } else {
		$def{$_} = join(" ", &al($pre, $class), &html($name), 
				&al($post, $class));
	    }
	}
    }
}




#
# add default values to arguments, from .h argument list
#
# note that argument names aren't touched, just default values
sub fixdefvalues {
    local ($url, $args) = @_;
    local (@ha, @ca, $_, $changed);

    if (defined($def{$url}) && ($args =~ /\,/) && ($def{$url} =~ /\,/)) {
	@ha = split(/\,/, $args);
	$_ = $def{$url};
	s/.*\(//s;
	s/\).*//s;
	@ca = split(/\,/, $_);
	die ("argument mismatch:\n" . $args . "\n" . $_ . "\n")
	    if ($#ha != $#ca);

	$changed = 0;
	foreach ( 0 .. $#ha ) {
	    if ( $ha[$_] =~ /\s*=\s*\S+\s*$/ ) {
		$ca[$_] .= $&;
		$changed++;
	    }
	}
	if ($changed > 0) {
	    $_ = join(",", @ca);
	    $def{$url} =~ s/\(.*?\)/($_)/s;
	}
    }
}



sub printout {
    local($url, $tail, $fnheader, $fntail);

    open(O, "> /dev/null") || die "cant open /dev/null";
    $tail = "";
    $fntail = "";

    foreach $url ( sort keys %type ) {
	my($file);

	$file = $url;
	$file =~ s/#.*//;
	if ($file ne $cfile) {
	    $fnheader = "<hr><h2>Member Function Documentation</h2>\n";
	    print O $fntail, $tail;
	    close(O);
	    open(O, "> $outputdir/$file") 
		|| die "can't open $outputdir/$file ($url) for writing";
	    print "output html file: ", $file, "\n";
	    $cfile = $file;

	    $tail = "<hr><p>\nThis file is part of the <a href=qt.html>Qt toolkit</a>,\n<a href=licence.html>copyright</a> 1995\n<a href=troll.html>Troll Tech</a>, all rights reserved.";
	    if (defined ($cfiles{$includefile{$url}})) {
		my(%files);
		$files{$includefile{$url}}++;
		$tail = join("\n", $tail,
			      "<p>",
			     "It was generated from the following files:",
			     "<ul>",
			     "<li>" . $includefile{$url} .
			     (defined($dates{$includefile{$url}}) ? 
			      (": " . $dates{$includefile{$url}}) :
			      ("")),
			     "");
		foreach (sort split(/\s+/, $cfiles{$includefile{$url}})) {
		    if ($_ ne "" && !defined($files{$_})) {
			$files{$_}++;
			if (defined($dates{$_})) {
			    $tail = join("", $tail, "<li>", $_, ": ", $dates{$_}, "\n");
			} else {
			    $tail = join("", $tail, "<li>", $_);
			}
		    }
		}
		$tail .= "</ul>\n";
	    }
	    $tail .= $address;

	    print O "<html><head>\n<title>Qt Toolkit - ", 
	    $name{$url}, 
	    " Class</title>\n</head><body>\n",
	    "<h1>", $name{$url}, " Class Reference</h1>\n<hr>\n";
	}
	if ($type{$url} eq "class") {
	    my ($i);
	    if (defined($brief{$url})) {
		print O "<p>\n", $brief{$url}, "\n";
		print O "<a href=#details>(details)</a>\n"
		    if ($doc{$url} ne "");
	    }
	    print O "<p>\n<code>#include &lt;<a href=", 
	            $headerfiles{$includefile{$url}}, 
 		    ">", $includefile{$url}, "</a>&gt;</code>\n"
		if (defined($includefile{$url}));
	    if ($relations{$name{$url}} =~ /\S/s) {
		my($relatives, $name, $header);
		$relatives = "<hr><p><h2>Related Functions</h2>\n";
		foreach ( split( /\s+/, $relations{$name{$url}} ) ) {
		    $name = $_;
		    $name =~ s/^[^\#]*\#//;
		    $header = $def{$_};
		    $header =~ s;([^\(]*)\b(\w+);$1<a name=$name>$2</a>;s;
		    $relatives = join ("", $relatives, "<p><h3>", $header,
				       "</h3>\n<p>", $doc{$_}, "\n");
		}
		$tail = join("", $relatives, $tail);
	    }
	    $i = "";
	    foreach ( sort split(/\s*\,\s*/, $inheritance{$url}) ) {
		my ($im, $ic);
		if (/(\w+)\s+(\w+)/) {
		    $im = $1;
		    $ic = $2;
		} else {
		    $ic = $_;
		    $im = "public";
		}
		if (($ic ne "") && ($im eq "public")) {
		    if (defined($capt{$ic})) {
			$i = join ("", $i, ", ", &al($ic), " (", $capt{$ic}, ")");
		    } else {
			$i = join ("", $i, ", ", &al($ic));
		    }
		}
	    }
	    if ($i ne "") {
		$i =~ s/^\,\s*//;
		$i =~ s/\,([^,]+)$/ and$1/;
		print O "<p>\nInherits ", $i, ".\n";
	    }
	    if ($subclasses{$name{$url}} =~ /\S/) {
		my ($ic);
		$i = "";
		foreach $ic ( sort split(/\s+/, $subclasses{$name{$url}}) ) {
		    if (defined($capt{$ic})) {
			$i = join ("", $i, ", ", &al($ic), 
				   " (", $capt{$ic}, ")");
		    } else {
			$i = join ("", $i, ", ", &al($ic));
		    }
		}
		$i =~ s/^\,\s*//;
		$i =~ s/\,([^,]+)$/ and$1/;
		print O "<p>Inherited by ", $i, ".\n";
	    }

	    if (defined($members{$url})) {
		my (%m, $mode);

		undef %m;
		$mode = "Private";
		foreach (split(/;/, $members{$url})) {
		    $mode = ucfirst($1) while (s/^\s*((?:
						       (?:private\b\s*?)|
						       (?:protected\b\s*?)|
						       (?:public\b\s*?)|
						       (?:signals\b\s*?)|
						       (?:slots\b\s*?))+):\s*//sx);
		    next if (/^\s*friend\b/);
		    if (/((^)|([^\(]*\b))static\b/) {
			s/(\s*)static\s*/$1/;
			$m{"Static ".$mode} .= $_ . ";";
		    } else {
			$m{$mode} .= $_ . ";";
		    }
		}
		foreach $mode ('Public', 'Static Public',
			       'Signals', 'Slots',
			       'Protected', 'Static Protected',
			       'Private', 'Static Private') {
		    my ($e1, $e2);
		    next unless (defined($m{$mode}));
		    $_ = $mode;
		    $_ .= " Members" if (!/s$/);
		    print O "<h2>", $_, "</h2>\n<ul>\n";
		    foreach (split (/;/, $m{$mode})) {
			s/\s*([\(\)]+\s*)/ $1 /g;
			s/\s*([,\*\&]+\s*(?!=))/$1 /g;
			s-\s*//.*?\n\s*--;
			s/^\s+//;
			s/\s+$//;
			s/\s+/ /g;

			if (/^\s*(?:\}\s*)?((?:[^\(\~]*[\s\&\*]+)?)(?=[\w~]) (?# prelude
									      )
			    ((?:(?:operator[^\(\s]{1,3})|(?:\~?\w+))) (?# name
								       )
			    \s*\(([^\(\)]*)\)\s*(const)?\s*(?:[\{=].*)?$/x) {
			    my ($u,$t,$mt,$f,$a,$ma,$c);
			    $t = $1;
			    $f = $2;
			    $a = $3;
			    $c = $4;

			    $a =~ s/^\s+//s;
			    $a =~ s/\s+$//s;

			    $u = &manglefn($t, $name{$url}, $f, $a, $c);
			    &fixdefvalues($u, $a) if ($type{$u} eq "fn");
			    next unless ($internal || 
					 ($mode =~ /public/) ||
					 ($doc{$u} ne ""));
			    if ($type{$u} eq "fn") {
				$_ = join("", &html($t), "<a href=", $u,
					  "><strong>", &html($f), 
					  "</strong></a> (", &html($a), 
					  ") ", $c);
			    } else {
				$_ = join("", &html($t), "<strong>", 
					  &html($f), "</strong> (", 
					  &html($a), ") ", $c);
			    }
			    $_ = join ("", $_, " - <em>", $capt{$u}, "</em>")
				if (defined($capt{$u}));
			} else {
			    if (/^\s*enum\s+(\w+)/s &&
				defined($anchor{$name{$url} . "::" . $1})) {
				my($name);
				$name = $1;
				$_ = &html($_);
				s;(\w+[^\=:\(\{]*)\b(\w+);$1<strong><a name=$name>$2</a></strong>;s;
			    } else {
				$_ = &html($_);
				s;(\w+[^\=:\(\{]*)\b(\w+);$1<strong>$2</strong>;s;
			    }
			}
			print O "<li>", $_, "\n";
		    }
		    print O "</ul>\n";
		}
		if ($brief{$url} =~ /\S/s) {
		    print O "<hr><p><h2><a name=details>Detailed Description</a></h2>\n", $brief{$url}, "\n<p>\n", $doc{$url}, "\n";
		} else {
		    print O "<hr><p><h2>Detailed Description</h2>\n", $doc{$url}, "\n";
		}
	    }
	} elsif (($type{$url} eq "fn") && 
		 ($doc{$url} =~ /\S/s)) {
	    my ($name, $class);
	    $class = $url;
	    $class =~ s/\#.*//;
	    $class = $name{$class} . "::";
	    $_ = $def{$url};
	    if (/$class/) {
		$name = $url;
		$name =~ s/^[^\#]*\#//;
		print O $fnheader;
		$fnheader = "";
		$fntail = "\n";
		s;([^\(]*)\b(\w+);$1<a name=$name>$2</a>;s;
		print O "<p><h3>", $_, "</h3>\n<p>", $doc{$url};
	    }
	}
    }
    print O $fntail, $tail;
    close(O);
}

sub classindex {
    open(O, "> $outputdir/classes.html")
	|| die "can't open $outputdir/classes.html for writing";
    print O <<EOHEAD
<html>
<head><title>Qt toolkit, main index page</title></head>
<body>
<h1>Qt Index</h1>
<p>Here are the classes that make up Qt:
<ul compact>
EOHEAD
    ;
    foreach $url ( sort keys %type ) {
	print O "<li><a href=", $url, ">", $name{$url}, "</a>\n"
	    if ($type{$url} eq "class");
    }
    print O "</ul>\n", $address;
    close(O);
}


sub enumindex {
    open(O, "> $outputdir/enums.html")
	|| die "can't open $outputdir/enums.html for writing";
    print O "<html><head><title>Qt toolkit, enum type indexe</title></head><body>\n<h1>Qt enum type index</h1>\n<p>Here are the enums defined in the Qt toolkit:\n<ul compact>";
    foreach $url ( sort keys %type ) {
	print O "<li><a href=", $url, ">", $name{$url}, "</a>\n"
	    if ($type{$url} eq "enum");
    }
    print O "</ul>\n", $address;
    close(O);
}



sub headerindex {
    local($filename);
    open(O, "> $outputdir/headers.html")
	|| die "can't open $outputdir/headers.html for writing";
    print O "<html><head><title>Qt toolkit - header file index</title></head><body>\n<h1>Qt header file index</h1>\n<p>Here are the header files that make up the Qt API:\n<ul compact>";
    foreach $filename ( keys %headerfiles ) {
	$_ = $filename;
	s/\./-/;
	s/$/.html/;
	print O "<li><a href=", $_, ">", $filename, "</a>\n";
    }
    print O "</ul>\n", $address;

    close(O);
}



#
# make a semi-graphical inheritance tree
#
sub inheritanceindex {
    open(O, "> $outputdir/hierarchy.html")
	|| die "can't open $outputdir/hierarchy.html for writing";
    print O "
<html>
<head><title>Qt toolkit - class hierarchy</title></head>
<body>
<h1>Qt class hierarchy</h1>

<p>This inheritance list is sorted roughly, but not completely,
alphabetically.

<ul compact>
";
    foreach ( sort keys %members ) {
	&doclassinheritance( $name{$_} ) unless ($inheritance{$_} =~ /\S/s);
    }
    print O "</ul>", $address;
    close O;
}

sub doclassinheritance {
    local($class) = @_;
    local($_);

    if ($inheritance{$_} =~ /\S/s) {
	$_ = $inheritance{$_};
	s/,.*//s;
	s/^\s*\w+\s+//s;
	&doclassinheritance($_) unless (defined($classtree{$_}));
    }

    unless (defined($classtree{$class})) {
	$classtree{$class}++;
	print O "<li><a href=", $anchor{$class}, ">", $class, "</a>";
	print O " (", $capt{$anchor{$class}}, ")"
	    if (defined ($capt{$anchor{$class}}));
	$_ = $inheritance{$anchor{$class}};
	if (/,/s) {
	    s/^.*?,//;
	    s/\s*\w*\s+(?=\w)/ /gs;
	    s/\s*,\s*([^,]+)$/ and $1/s;
	    print O " (inherits ", &al($_), ", too)";
	}
	print O "\n";
	if ($subclasses{$class} =~ /\S/s) {
	    print O "<ul>\n";
	    foreach ( sort split(/\s+/, $subclasses{$class} ) ) {
		if (defined($classtree{$_})) {
		    print O "<li><a href=", $anchor{$_}, 
			    ">", $_, "</a> (secondary inheritance)";
		} else {
		    &doclassinheritance( $_ );
		}
	    }
	    print O "</ul>\n";
	}
    }
}



umask 0111;
$cfile = "VOLD";
#$debug = 1;
$internal = 1;

$outputdir = "/local/qt/doc/html";
($j, $min, $hour, $mday, $mon, $year) = localtime(time);
$address = sprintf("<hr><address>\nGenerated at %02d:%02d, %4d/%02d/%02d by the <a href=mailto:www\@troll.no>webmaster</a> at <a href=http://www.troll.no/>Troll Tech</a>\n</address>\n</body></html>\n", $hour, $min, 1900+$year, 1+$mon, $mday );

foreach $arg ( 0..$#ARGV ) {
    &readc($ARGV[$arg]);
}


&preprocessdocs();
&makenames();
&makearglinks();
&processdocs();
&readfiles();


&printout();
&inheritanceindex();
&classindex();
&enumindex();
&headerindex();

print "Documented entities: ", $uniq, "\n";
