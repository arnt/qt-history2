#!/usr/bin/perl -w

# $Id$

use strict;
use Getopt::Long qw(GetOptions);

sub usage {
    print "usage: q2l [-d] [-y] [-c|-C] [-u] file1.{q2l,book} file2.{q2l,book} ...\n",
	  "-d is debug, i.e. show don't do\n",
	  "-y is produce postscript and don't ask about intermediate steps\n",
	  "-Y as -y but cleanup after\n",
	  "-c is clear intermediate files and quit\n",
	  "-C is clear intermediate, log and postscript files and quit\n",
	  "-u is output US letter size (default is A4)\n",
	  ;
    exit;
}

usage() unless @ARGV;

my $DEBUG = 0;
my $YES = 0;
my $CLEANYES = 0;
my $SIZE = 'a4';
my $CLEANUP1 = '';
my $CLEANUP2 = '';

Getopt::Long::Configure('no_ignore_case');
GetOptions('help|h' => \&usage,
	   'debug|d' => \$DEBUG,
	   'yes|y' => \$YES,
	   'Yes|YES|Y' => \$CLEANYES,
	   'c' => \$CLEANUP1,
	   'C' => \$CLEANUP2,
	   'u' => \$SIZE,
	  ) or usage();

if ( $CLEANUP1 or $CLEANUP2 ) {
    cleanup();
    if ( $CLEANUP2 ) {
	perform("rm *.ilg");
	perform("rm *.log");
	perform("rm *.ps");
	perform("rm *.pdf");
    }
    exit;
}
my $YESTOPS = $YES || $CLEANYES;
$SIZE = 'letter' if $SIZE eq '1';

my $QTDIR = $ENV{'QTDIR'};
my @tex;
my @idx;
my @dvi;
my @ps;
my @pdf;
my @file;
for my $file ( @ARGV ) {
    $file =~ s/(\.)$/.q2l/;
    $file .= '.q2l' unless $file =~ /\.(q2l|book)$/;
    push @file, $file;
}
@tex = @idx = @dvi = @ps = @pdf = @file;
for ( my $i = 0; $i < scalar @file; $i++ ) {
    $tex[$i] =~ s/\.(q2l|book)$/.tex/;
    $idx[$i] =~ s/\.(q2l|book)$/.idx/;
    $dvi[$i] =~ s/\.(q2l|book)$/.dvi/;
    $ps[$i]  =~ s/\.(q2l|book)$/.ps/;
    $pdf[$i] =~ s/\.(q2l|book)$/.pdf/;
}

perform("qdoc2latex -$SIZE $QTDIR/doc/html " . join(" ", @file)) if ask("qdoc2latex");
if ( ask("pslatex (1)") ) {
    for my $tex ( @tex ) {
	perform("pslatex --interaction batchmode $tex >& /dev/null");
    }
}
if ( ask("makeindex") ) {
    for my $idx ( @idx ) {
	perform("makeindex -q $idx");
    }
}
if ( ask("pslatex (2, 3)") ) {
    for my $tex ( @tex ) {
	perform("pslatex --interaction batchmode $tex >& /dev/null");
	perform("pslatex --interaction batchmode $tex >& /dev/null");
    }
}
if ( ask("dvips") ) {
    for my $dvi ( @dvi ) {
	my $ps = shift @ps;
	push @ps, $ps;
	perform("dvips -q $dvi -o $ps");
    }
}
if ( ask("pdflatex") ) {
    for my $tex ( @tex ) {
	perform("pdflatex --interaction batchmode $tex");
    }
}
else {
    if ( ask("ps2pdf") ) {
	for my $ps ( @ps ) {
	    my $pdf = shift @pdf;
	    perform("ps2pdf $ps $pdf");
	}
    }
}
cleanup() if ask("cleanup");


sub perform {
    if ( $DEBUG ) {
	print shift, "\n";
    }
    else {
	system shift;
    }
}


sub ask {
    return 1 if $YES or $CLEANYES;
    my $prog = shift;
    return 1 if $YESTOPS and $prog !~ /(?:pdflatex|ps2pdf)/;
    if ( $prog !~ /(?:pdflatex|ps2pdf)/ ) {
	print "\n[Enter] run $prog  [n] no don't run it  [y] yes to postscript  [q] quit? ";
    }
    else {
	print "\n[Enter] run $prog  [n] no don't run it  [q] quit? ";
    }
    my $ans = <STDIN>;
    if ( $ans =~ /^q/i ) {
	cleanup() if $CLEANYES;
	exit;
    }
    $YESTOPS = 1 if $ans =~ /^y/i;
    $ans =~ /^n/i ? 0 : 1;
}


sub cleanup {
    perform("rm *.tex");
    perform("rm *.dvi");
    perform("rm *.ind");
    perform("rm *.idx");
    perform("rm *.aux");

    1;
}
