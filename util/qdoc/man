#!/usr/bin/perl -w

use strict;

sub prepare {
    local ($_) = @_;

    s/\\/\\\\/gs;
    s/ / /gs;
    $_;
}

sub tables {
    local ($_) = @_;

    my ( $r, $c, $i, $s );
    $c = 0;
    $c++ while( /<th>/gsi );
    $r = ".nf\n.TS\nl";
    foreach $i ( 2 .. $c ) {
	$r .= " l";
    }
    $r .= "\n-";
    foreach $i ( 2 .. $c ) {
	$r .= " -";
    }
    $r .= "\nl";
    foreach $i ( 2 .. $c ) {
	$r .= " l";
    }
    $r .= ".";
    $s = "\n";
    while( /<t([hrd])\b[^>]*>\s*([^<]*?)\s*(?=<)/gsi ) {
	if ( $1 eq "r" ) {
	    $s = "\n";
	} else {
	    $r = $r . $s . $2;
	    $s = "\t";
	}
    }
    $r .= "\n.TE\n.fi\n";
    $r =~ s/(\s*\&nbsp;\s*)*\n/\n/gs;
    $r =~ s/&nbsp;//gs;

    $r;
}

sub fixup {
    local ($_) = @_;

    # fix the font changes
    s-<tt>(.*?)</tt>-\\fC$1\\fR-gs;
    s-<dfn>(.*?)</dfn>-\\fI$1\\fR-gs;
    s-<em>(.*?)</em>-\\fI$1\\fR-gs;
    s-<strong>(.*?)</strong>-\\fB$1\\fR-gs;
    s-<b>(.*?)</b>-\\fB$1\\fR-gs;
    s-<i>(.*?)</i>-\\fI$1\\fR-gs;
    s-<var>(.*?)</var>-\\fI$1\\fR-gs;
    s-<div[^>]*>(.*?)</div>-$1-gs;

    # end of a list item is nothing at all
    s-</li>--gs;

    # HTML comments go away
    s/<!--.*?-->//gs;

    # images
    s!\s*<img\b[^>]*>\s*!\n.ce 1\n.B "[Image Omitted]"\n.PP\n!gs;

    # undo quoted characters
    s/&gt;/>/gs;
    s/&lt;/</gs;
    s/&quot;/\x22/gs;
    s/&nbsp;/ /gs;
    s/&amp;/&/gs;

    # ' at start of line?
    s/\n'/ '/gs;

    s/\n\.PP\n(?:\.br\n)+/\n.PP\n/gs;
    s/(?:\.br\n)+\n\.PP\n/\n.PP\n/gs;
    s/\n(\.S[SH][^\n]+)\n\.PP\n/\n$1\n/gs;
    s/\n(?:\.PP\n)+/\n.PP\n/gs;
    s/\n(?:\.PP\n)+\.TP/\n.TP/gs;
    s/\n(?:\.PP\n)+\.IP/\n.IP/gs;

    # do word-unwrap
    s-(?:(?:(\n\.nf.*?\n.fi))|(?:((?:\n[^\.\n][^\n]*)+)(?=\n\.)))-
    {
	my( $code ) = defined $1 ? $1 : '';
	my( $para ) = defined $2 ? $2 : '';
	if ( $code ne "" ) {
	    $code;
	} else {
	    $para =~ s/\s+/ /sg;
	    $para =~ s/^\s/\n/s;
	    $para =~ s/^\s*/\n/s;
	    $para;
	}
    }
    -egs;

    $_;
}

# the argument is a preformatted html block excluding <pre>...</pre>
# returns an nroff block that does all the same stuff
#
sub parsepre {
    local ($_) = @_;

    s/[ \t]*(?=\n)/\n.br/gs;
    s/^(?:\s*\.br\n)*//s;
    s/\s*\n(?:\.br\n)*$//s;
    sprintf( "\n.PP\n.nf\n.br\n%s\n.fi\n", $_ );
}


sub parselist {
    local ($_) = @_;

    s!<ul[^>]*>.*?</ul>!{
	my($l) = $&;
	$l =~ s/\n\.PP\n/\n.IP\n/gs;
	$l;
    }!gse;

    s!<ol[^>]*>.*?</ol>!{
	my($l) = $&;
	$l =~ s/\n\.PP\n/\n.IP\n/gs;
	$l;
    }!gse;

    my ( $m, $n ) = ( '', 0 );
    s!<((?:(?:/?[uo]l)|(?:li)))(?:[\s\w]*)>!{
	if ( $1 eq "ul" ) {
	    $m = "ul";
	    "";
	} elsif ( $1 eq "ol" ) {
	    $n = 0;
	    $m = "ol";
	    "";
	} elsif ($1 eq "li") {
	    if ( $m eq "ul" ) {
		"\n.TP\n";
	    } else {
		++$n;
		"\n.IP $n\n";
	    }
	}
    }!gse;

    s-\s*\n\.IP\s*(\n\.IP\s+)-$1-gs;

    s-<dl\b[\s\w]*>--gs;
    s-\s*<dt>\s*(.*?)\s*<dd>\s*(.*?)(?=\s*<(?:(?:dt)|(?:/dl))\b)-\n.IP "$1" 1c\n$2\n-gs;
    s-\s*</dl\b[\s\w]*>\s*-\n.PP\n-gs;
    $_;
}


sub parsemembers {
    local ($_) = @_;

    s@\s*<li>\s*(.*?)\s*(?=<(?:(?:li)|(?:/ul)))@
    {
	my ($f) = $1;
	$f =~ s/\\fB(\w[\w\d]+)\\fR/$1/gs;	
	$f =~ s/\\fB(operator.*?)\\fR/$1/gs;
	$f =~ s/\x22/QUOTEHERE/gs;
	$f =~ s/((?:(?:[\w\*])|(?:\&amp\;))\s*)\b(\w[\w\d]*)((?:\s*=\s*(?:(?:[\-\w\d]+)|(?:'.'))\s*)?[,\)])/$1\x22 \x22$2\x22 \x22$3/gs;
	$f =~ s/QUOTEHERE/""/gs;
	sprintf( "\n.ti -1c\n.BI \"%s\"\n.br\n", $f );
    }@esg;

    s@\s*<ul>\s*@\n.in +1c\n@gs;
    s@\s*</ul>\s*@\n.in -1c\n@gs;
    $_;
}



sub parseclassfile {
    local $_ = shift;
    my $url = shift;

    my ($title );

    # strip head and tail
    s/^.*?<\/h1>\s*//s;
    s/<hr><p>\s+This file is part of the.*$//s;
    s/<hr><p>\s*Search the doc.*$//s;

    # paragraphs, lines
    s/\s*<p>\s*/\n\n.PP\n/gs;
    s/\s*<hr>\s*//gs;

    # removing the <span> thing ###
    s-</?span[^>]*>--gs;

    # links, headers, widow/orphan hack
    s-.PP\n.*?<a href="#details">More...</a>--s;
    s-<a href=.*?members.html.>List of all member functions.</a>--;
    s-<a.*?>(.*?)</a>-$1-gs;
    s-\s*<h1\b.*?>\s*(.*?)Class Reference</h1.*?>-\n.SH SYNOPSIS-gs;
    s-\s*<h2>Detailed Description</h2.*?>(\s*\.PP)?-\n.SH DESCRIPTION\n.PP\n-gs;
    s-\s*<h2>Member Function Documentation</h2.*?>(\s*\.PP)?-\n.SH MEMBER FUNCTION DOCUMENTATION\n.PP\n-gs;
    s-\s*<h2>Related Functions</h2>(\s*\.PP)?-\n.SH RELATED FUNCTION DOCUMENTATION\n.PP\n-gs;
    s-\s*<h2\b.*?>\s*(.*?)</h2.*?>(\s*\.PP)?-\n.SS \x22$1\x22\n.PP\n-gs;
    s-(?:\s*\n\.PP)*\s*<h3\b.*?>\s*(.*?)</h3.*?>\s*(?:\.PP\s*)*-\n.SH \x22$1\x22\n-gsx;
    s-\n\x22-\x22\n-gsx;

    # fonts, code and emphasized text
    s-<em>(.*?)</em>-\\fI$1\\fR-gs;
    s-<strong>(.*?)</strong>-\\fB$1\\fR-gs;
    s-<code>(.*?)</code>-\\fC$1\\fR-gs;

    # preformatted stuff
    s-\s*(?:\.PP\s*)?<pre>(.*?)</pre>\s*-&parsepre($1)-gse;
    s/\s*<br(?:\s[^>]*)?>\n?/\n.br\n/gs;

    # do the list voodoo
    $_ =~ s/"Public Members"\n.*?.SH DESCRIPTION\n/&parsemembers($&)/esi;
    $_ = &parselist( $_ );

    # clean up multi-line space
    s/\n\s*\n/\n/gs;

    # make bulleted lists for the examples
    s-Examples:((?:\n [\w/\.]+)*)-{
	my ($examples) = $&;
	$examples =~ s/\n /\n/gs;
	$examples =~ s/:\n/:\n.\(l\n/s;
	$examples =~ s/\s*$/\n.\)l/s;
	$examples;
    }-gse;

    s-<table[^>]*>(.*?)</table>-&tables($1)-gsie;

    $title = $1 if ( /\b(\w+)\s+Class Reference/s );
    $_;
}



my ($day, $mon, $year) = (localtime(time))[3..5];

my $mname = ("January", "February", "March", "April", "May", "June", "July",
	    "August", "September", "October", "November", "December")[$mon];

undef $/;
chdir $ENV{"QTDIR"} . "/doc/html" || die "sex";
mkdir "../man", oct 777 unless ( -d "../man" );
mkdir "../man/man3", oct 777 unless ( -d "../man/man3" );
mkdir "../man/man1", oct 777 unless ( -d "../man/man1" );

open( A, "< annotated.html" ) || die "can't open annotated.html";
$_ = <A>;
s/ / /gs;
close A;

my ( %name, %desc, $version );
while ( m@<b><a href=\"([a-z0-9]+\.html)\">([A-Za-z0-9]*)</a></b>(?:</td>)?<td>([^<]*?)\s*<@gs ) {
    $name{$1} = $2;
    $desc{$1} = $3;
}

if ( m@<div align=[^>]*>Qt version ([^\s<]+)</div>@s ) {
    $version = $1;
} else {
    die "unable to find Qt version, stopped";
}

foreach ( keys %desc ) {
    $desc{$_} =~ s-<a .*?>(.*?)</a>-$1-gs;
    $desc{$_} =~ s-<code>(.*?)</code>-\\fC$1\\fR-gs;
    $desc{$_} =~ s/<[^>]*>//gs;
}

foreach my $url ( sort keys %name ) { #'qstring.html'
    my $name = $name{$url};
    my $manpage = $url;
    $manpage =~ s/html$/3qt/;
    open( F, "< $url" ) || die "can't open $url";
    my $contents = <F>;
    close F;
    unlink( "> ../man/man3/" . $manpage );
    open( M, "> ../man/man3/" . $manpage ) || die "cannot open /man/man3/" . $manpage;
    print M "'\\\" t
.TH ", $name, " 3qt \"", $day, " ", $mname, " ", 1900+$year,
"\" \"Trolltech AS\" \\\" -*- nroff -*-
.\\\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\\\" license file included in the distribution for a complete license
.\\\" statement.
.\\\"
.ad l
.nh
.SH NAME
", $name, " \\- ", &fixup( $desc{$url} ),
&fixup( &parseclassfile( &prepare( $contents ) ) ),
".SH \"SEE ALSO\"
.BR http://doc.trolltech.com/", $url, "
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at \$QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs\@trolltech.com .
Please include the name of the manual page ($manpage) and the Qt
version ($version).
";
    close M;

    $name =~ s/$/.3qt/;
    open( M, "> ../man/man3/$name" ) || die "can't open ../man/man3/$name";
    print M ".so man3/$manpage\n";
    close M;
}
