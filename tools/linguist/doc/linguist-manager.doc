**********************************************************************
**   Copyright (C) 2000 Trolltech AS.  All rights reserved.
**
**   qt-translations-tools.doc
**
**   This file is part of Qt Linguist.
**
**   See the file LICENSE included in the distribution for the usage
**   and distribution terms.
**
**   The file is provided AS IS with NO WARRANTY OF ANY KIND,
**   INCLUDING THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR
**   A PARTICULAR PURPOSE.
**
**********************************************************************/

/*! \page linguist_manager.html
\title Chapter 1: Release Manager
<a name="Chapter_1_Release_Manager">

Two tools are provided for the release manager, \e lupdate and \e
lrelease. Thes tools depend on <tt>qmake</tt> project files.

<h2><a name="Qt_Project_Files">Qt Project Files</a></h2>

\e lupdate and \e lrelease depend on information in the application's \c
.pro Qt project file. For each language additional to the native
language there must be an entry in the \c TRANSLATIONS section of the
project file. A typical entry looks like this:

\walkthrough  tt2/tt2.pro
\skipto TRANSLATIONS
\printline TRANSLATIONS
\printline 

Using a locale within the filename is useful for determining which
language to load at runtime -- this is explained in 
<a href="linguist_programmer.html#Chapter_3_Programmers">Chapter 3: Programmers</a>.

<h2><a name="lupdate">lupdate</a></h2>

Usage: <code>lupdate myproject.pro</code>

This is a simple command line tool. \e lupdate reads a Qt \c .pro
project file and produces or updates the \c .ts translation source files
listed in the project file. The translation files are given to the
translator who uses <em>Qt Linguist</em> to read the files and insert
the translations. 

Companies that have their own translators in-house may find it useful
to run \e lupdate regularly, perhaps monthly, as the application
develops. This will lead to a fairly low volume of translation work
spread evenly over the life of the project and will allow the
translators to support a number of projects simultaneously. 

Companies that hire in translators as required may prefer to run \e
lupdate only a few times in the application's life-cycle, the first time
might be just before the first test phase. This will provide the
translator with a substantial single block of work and any bugs that the
translator detects may easily be included with those found during the
initial test phase. The second and any subsequent \e lupdate runs would
probably take place during the final beta phase.

The \c .ts file format is a simple human-readable XML format that can
be used with version control systems if required.

<h2><a name="lrelease">lrelease</a></h2>

Usage: <code>lrelease myproject.pro</code>

This is another simple command line tool. It reads a Qt \c .pro project
file and produces the \c .qm files used by the application, one for each
\c .ts translation source file listed in the project file. The \c .qm
file format is a compact binary format that provides extremely fast
lookups for translations.

This tool is run whenever a release of the application is to be made,
from initial test version through to final release version. If the \c
.qm files are not created, e.g. because an alpha release is required
before any translation has been undertaken, the application will run
perfectly well using the text the programmers placed in the source
files. Once the \c .qm files are available the application will detect
them and use them automatically.

Note that \e lrelease will only incorporate translations that are marked
as "done". If a translation is missing, or has failed validation, or is
not marked as done, the original text will be used instead.

<h2><a name="Incomplete_Translations">Incomplete Translations</a></h2>

Both \e lupdate and \e lrelease may be used with \c .ts translation
source files which are incomplete. Missing translations will be replaced
with the native language phrases at runtime.

*/

