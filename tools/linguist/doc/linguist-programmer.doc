/**********************************************************************
**   Copyright (C) 2000 Trolltech AS.  All rights reserved.
**
**   qt-translations-tools.doc
**
**   This file is part of Qt Linguist.
**
**   See the file LICENSE included in the distribution for the usage
**   and distribution terms.
**
**   The file is provided AS IS with NO WARRANTY OF ANY KIND,
**   INCLUDING THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR
**   A PARTICULAR PURPOSE.
**
**********************************************************************/

/*! \page linguist-programmer.html
\title Chapter 3: Programmers
<a name="Chapter_3_Programmers">

Support for multiple languages is extremely simple in Qt applications
and adds little overhead to the programmer's workload.

Qt minimizes the performance cost of using translations by translating
the phrases for each window as they are created. In most applications
the main window is created just once. Dialogs are often created once and
then shown and hidden as required. Once the initial translation has
taken place there is no further runtime overhead for the translated
windows. Only those windows that are created, destroyed and subsequently
created will have a translation performance cost -- although the
overhead is still very low.

Creating applications that can switch language at runtime is possible
with Qt, but requires a certain amount of programmer intervention and
will of course incur some runtime performance cost.

<h2><a name="Making_The_Application_Translation_Aware">
Making The Application Translation Aware</a></h2>

Programmers make their application look for and load the appropriate
translation file and mark user-visible text and Ctrl keyboard
accelerators as targets for translation.

Each piece of text that requires translating requires context to help
the translator identify where in the program the text occurs. In the
case of multiple identical texts that require different translations
the translator also requires some information to disambiguate the source
texts. Marking text for translation will automatically cause the class
name to be used as basic context information. In some cases the
programmer may be required to add additional information to help the
translator.

<h3><a name="#Creating_Translation_Files">Creating Translation Files</a></h3>

Translation files consist of all the user-visible text and Ctrl key
accelerators in an application and translations of that text.
Translation files are created as follows:

<ol>
<li>\link linguist-manager.html#lupdate lupdate \endlink is run initially to generate the
first set of \c .ts translation source files with all the user-visible
text but no translations.
<li>The \c .ts files are given to the translator who adds translations
using \e {Qt Linguist}. \e {Qt Linguist} takes care of changed
or deleted source text.
<li>\e lupdate is run to incorporate any new text added to the
application. \e lupdate synchronizes the user-visible text from the
application with the translations; it does not destroy any data.
<li>Steps 2 and 3 are repeated as often as necessary.
<li>When a release of the application is needed
\link linguist-manager.html#lrelease lrelease \endlink is run to read the \c .ts files and
produce the \c .qm files used by the application at runtime.
</ol>

For \e lupdate to work successfully, it must know which translation
files to produce. The files are simply listed in the application's \c
.pro Qt project file, for example:
\walkthrough  tt2/tt2.pro
\skipto TRANSLATIONS
\printline TRANSLATIONS
\printline

See the \link linguist-manager.html#lupdate "lupdate" \endlink and
\link linguist-manager.html#lrelease "lrelease" \endlink sections.

<h3><a name="Loading_Translations">Loading Translations</a></h3>

\walkthrough  tt1/main.cpp
\skipto main(
\printline main(
\printuntil QApplication

This is how the \c main() function of a canonical Qt application begins.

\walkthrough  tt1/main.cpp
\skipto main(
\printline main(
\printuntil app.installTrans

For a translation-aware application a translator object is created, a
translation loaded and the translator object installed into the
application.

\walkthrough  tt2/main.cpp
\skipto main(
\printline main(
\printuntil app.installTrans

In production applications a more flexible approach, for example,
loading translations according to locale, might be more appropriate. If
the \c .ts files are all named according to a convention such as
\e appname_locale, e.g. \c tt2_fr, \c tt2_de etc, then the
code above will load the current locale's translation at runtime.

If there is no translation file for the current locale the application
will fall back to using the original source text.

<h3><a name="Making_User-Visible_Strings_Translate">
Making the Application Translate User-Visible Strings</a></h3>

User-visible strings are marked as translation targets by wrapping them
in a \c tr() call, e.g.

\code
    button = new QPushButton( "&Quit", this );
\endcode

would become

\code
    button = new QPushButton( tr( "&Quit" ), this);
\endcode

All QObject subclasses that use the Q_OBJECT macro have a
reimplementation of the \c tr() function.

Although the \c tr() call is normally made directly since it is usually
called as a member function of a QObject subclass, in other cases an
explicit class name can be supplied, e.g.

\code
    QPushButton::tr( "&Quit" )
\endcode

or

\code
    QObject::tr( "&Quit" )
\endcode

<h3><a name="Distinguishing_Identical_Strings_That_Require_Different_Translations">
Distinguishing Identical Strings That Require Different Translations</a></h3>

The \e lupdate program automatically provides a \e context for every
source text. This context is the class name of the class that contains
the \c tr() call. This is sufficient in the vast majority of cases.
Sometimes however, the translator will need further information to
uniquely identify a source text; for example, a dialog that contained
two separate frames, each of which contained an "Enabled" option would
need each identified because in some languages the translation would
differ between the two. This is easily achieved using the
two argument form of the \c tr() call, e.g.

\code
    rbc = new QRadioButton( tr( "Enabled", "Color frame" ), this);
\endcode

and

\code
    rbh = new QRadioButton( tr( "Enabled", "Hue frame" ), this);
\endcode

Ctrl key accelerators are also translatable:

\walkthrough  tt3/mainwindow.cpp
\skipto quit()
\printline quit()
\printuntil Quit

It is strongly recommended that the two argument form of \c tr() is used
for Ctrl key accelerators. The second argument is the only clue the
translator has as to the function performed by the accelerator.

<h3><a name="Helping_The_Translator_With_Navigation_Information">
Helping The Translator With Navigation Information</a></h3>

In large complex applications it may be difficult for the translator to
see where a particular source text comes from. This problem can be
solved by adding a comment using the keyword \e TRANSLATOR which
describes the navigation steps to reach the text in question; e.g.

<pre>
/*  TRANSLATOR FindDialog

    Choose Edit|Find from the menu bar or press Alt+F to pop up the
    Find dialog.
*&#47;
</pre>

These comments are particularly useful just before user-visible classes
such as dialog classes.

<h2><a name="Tutorials">Tutorials</a></h2>

Three tutorials are presented. The first demonstrates the creation of a
\link http://doc.trolltech.com/qtranslator.html QTranslator \endlink
object. It also shows the simplest use of the \c tr() function to mark
user-visible source text for translation. The second tutorial explains
how to make the application load the translation file applicable to the
current locale. It also shows the use of the two-argument form of \c
tr() which provides additional information to the translator. The third
tutorial explains how identical source texts can be distinguished even
when they occur in the same context. This tutorial also discusses how
the translation tools help minimize the translator's work when an
application is upgraded.

<h3><a name="Tutorial_1:_Loading_Translations">
Tutorial 1: Loading and Using Translations</a></h3>

<center><img src="../images/tt1_en.png"
alt="Screenshot of the English version of tutorial 1">
<h5>Tutorial 1 Screenshot, English version</h5></center>

\e {Listing of file \link tt1-tt1-pro.html tt1.pro\endlink:}
\include tt1/tt1.pro

\e {Listing of file \link tt1-main-cpp.html main.cpp\endlink:}

\include tt1/main.cpp

This example is a reworking of the
\link http://doc.trolltech.com/t1.html "hello-world" \endlink example
from the Qt tutorial, with a Latin translation.
The \e {Tutorial 1 Screenshot, English version}, above, shows the
English version.

\walkthrough  tt1/main.cpp

<h4>Line by Line Walk-Through</h4>

\walkthrough  tt1/main.cpp

\skipto qtranslator
\printline qtranslator

This line includes the definition of the
\link http://doc.trolltech.com/qtranslator.html QTranslator \endlink
class.  Objects of this class provide translations for user-visible
text.

\skipto QTranslator
\printuntil tor

Create a QTranslator object without a parent.

\printline load

Try to load a file called \c tt1_la.qm (the \c .qm file extension is
implicit) that contains Latin translations for the source texts used in
the program. No error will occur if the file is not found.

\printline installTranslator

Add the translations from \c tt1_la.qm to the pool of translations used
by the program. No error will occur if the file was not found.

\printline hello

Creates a push button that displays "Hello world!".  If \c tt1_la.qm was
found and contains a translation for "Hello world!", the translation
appears; if not, the source text appears.

All classes that inherit
\link http://doc.trolltech.com/qobject.html QObject \endlink have a \c
tr() function.  Inside a member function of a QObject class, we simply
write <code>tr("Hello world!")</code> instead of
<code>QPushButton::tr("Hello world!")</code> or <code>QObject::tr("Hello
world!")</code>.

<h4>Running the Application in English</h4>

Since we haven't made the translation file \c tt1_la.qm, the source text
is shown when we run the application:

<center><img src="../images/tt1_en.png"
alt="Screenshot of the English version of tutorial 1">
<h5>Tutorial 1 Screenshot, English version</h5></center>

<h4>Creating a Latin Message File</h4>

The first step is to create a project file,
\link tt1-tt1-pro.html tt1.pro\endlink, that lists all the source files
for the project.  The project file can be a
\link http://www.trolltech.com/freebies/tmake.html tmake \endlink
project file, or even an ordinary makefile.  Any file that contains

\walkthrough  tt1/tt1.pro

\skipto SOURCES
\printline SOURCES
\skipto TRANSLATIONS
\printline TRANSLATIONS

will work. \e TRANSLATIONS specifies the message files we want to
maintain. In this example, we just maintain one set of translations,
namely Latin.

Note that the file extension is \c .ts, \e not \c .qm.  The \c .ts
translation source format is designed for use during the
application's development. Programmers or release managers run the
\link linguist-manager.html#lupdate lupdate \endlink program to
generate and update \c .ts files with the source text that is
extracted from the source code. Translators read and update the \c
.ts files using \e {Qt Linguist} adding and editing their
translations.

The \c .ts format is human-readable XML that can be emailed directly
and is easy to put under version control. If you edit this file
manually, be aware that the default encoding for XML is UTF-8, not
Latin-1 (ISO 8859-1). One way to type in a Latin-1 character such as
'&oslash;' (Norwegian o with slash) is to use an XML entity:
"\&#xf8;". This will work for any Unicode character.

Once the translations are complete the \link
linguist-manager.html#lrelease lrelease \endlink program is used to
convert the \c .ts files into the \c .qm Qt message file format. The
\c .qm format is a compact binary format designed to deliver very
fast lookup performance. Both \e lupdate and \e lrelease read all the
project's source and header files (as specified in the HEADERS and
SOURCES lines of the project file) and extract the strings that
appear in \c tr() function calls.

\e lupdate is used to create and update the message files (\c tt1_la.ts
in this case) to keep them in sync with the source code. It is safe to
run \e lupdate at any time, as \e lupdate does not destroy any
information.  For example, you can put it in the makefile, so the \c .ts
files are updated whenever the source changes.

Try running \e lupdate right now, like this:

\code
    lupdate tt1.pro
\endcode

You should now have a file \c tt1_la.ts in the current directory,
containing this

\code
    <!DOCTYPE TS><TS>
    <codec>ISO-8859-1</codec>
    <context>
        <name>QPushButton</name>
        <message>
            <source>Hello world!</source>
            <translation type='unfinished'></translation>
        </message>
    </context>
    </TS>
\endcode

You don't need to understand the file format since it is read and
updated using tools, e.g. \e lupdate and \e {Qt Linguist}.

<h4>Translating to Latin with Qt Linguist</h4>

We will use \e {Qt Linguist} to provide the translation, although
you can use any XML or plain text editor to enter a translation into a
\c .ts file.

To start \e {Qt Linguist}, type

\code
    linguist tt1_la.ts
\endcode

You should now see the text "QPushButton" in the top left pane.
Double-click it, then click on "Hello world!" and enter "Orbis, te
saluto!" in the \e Translation pane (the middle right of the
window).  Don't forget the exclamation mark!

Click the \e Done checkbox and choose \e File|Save from the
menu bar.  The \c .ts file will no longer contain

\code
    <translation type='unfinished'></translation>
\endcode

but instead will have

\code
    <translation>Orbis, te saluto!</translation>
\endcode

<h4>Running the Application in Latin</h4>

To see the application running in Latin, we have to generate a \c .qm
file from the \c .ts file. Generating a \c .qm file can be achieved
either from within \e {Qt Linguist} (for a single \c .ts file), or
by using the command line program \e lrelease which will produce one \c
.qm file for each of the \c .ts files listed in the project file.
Generate \c tt1_la.qm from \c tt1_la.ts by choosing
\e File|Release from \e {Qt Linguist}'s menu bar and pressing
\e Save in the file save dialog that pops up. Now run the \e tt1 example
program again. This time the button will be labelled "Orbis, te
saluto!".

<center><img src="../images/tt1_la.png"
alt="Screenshot of the Latin version of tutorial 1">
<h5>Tutorial 1 Screenshot, Latin version</h5></center>


<h3><a name="Tutorial_2:_Making_User-Visible_Strings_Translate">
Tutorial 2: Using Two or More Languages</a></h3>

<center><img src="../images/tt2_en.png"
alt="Screenshot of the English version of tutorial 2">
<h5>Tutorial 2 Screenshot, English version</h5></center>

\e {Listing of file \link tt2-tt2-pro.html tt2.pro\endlink:}
\include tt2/tt2.pro

This example is a slightly more involved and introduces a key
\e {Qt Linguist} concept: "contexts".

<ul>
<li> \link tt2-arrowpad-h.html arrowpad.h\endlink contains the
     definition of ArrowPad, a custom widget;
<li> \link tt2-arrowpad-cpp.html arrowpad.cpp\endlink contains the
     implementation of ArrowPad;
<li> \link tt2-mainwindow-h.html mainwindow.h\endlink contains the
     definition of MainWindow, a QMainWindow subclass;
<li> \link tt2-mainwindow-cpp.html mainwindow.cpp\endlink contains the
     implementation of MainWindow;
<li> \link tt2-main-cpp.html main.cpp\endlink contains main().
</ul>

We will use two translations, French and Dutch, although there is no
effective limit on the number of possible translations that can be used
with an application. The relevant lines of
\link tt2-tt2-pro.html tt2.pro\endlink are

\walkthrough tt2/tt2.pro
\skipto HEADERS
\printuntil tt2_nl.ts

Run \e lupdate; it should produce two identical message files
\c tt2_fr.ts and \c tt2_nl.ts. These files will contain all the source
texts marked for translation with \c tr() calls and their contexts.

<h4>Line by Line Walk-Through</h4>

In \link tt2-arrowpad-h.html arrowpad.h\endlink we define the
ArrowPad subclass which is a subclass of
\link http://doc.trolltech.com/qwidget.html QWidget \endlink.  In the
\e {Tutorial 2 Screenshot, English version}, above, the central
widget with the four buttons is an ArrowPad.

\walkthrough  tt2/arrowpad.h
\skipto class ArrowPad
\printline class ArrowPad

When \e lupdate is run it not only extracts the source texts but it also
groups them into contexts. A context is the name of the class in which
the source text appears. Thus, in this example, "ArrowPad" is a context:
it is the context of the texts in the ArrowPad class.  The Q_OBJECT
macro defines \c tr(x) in ArrowPad like this

\code
    qApp->translate( "ArrowPad", x )
\endcode

Knowing which class each source text appears in enables \e {Qt
Linguist} to group texts that are logically related together, e.g.
all the text in a dialog will have the context of the dialog's class
name and will be shown together. This provides useful information for
the translator since the context in which text appears may influence how
it should be translated. For some translations keyboard
accelerators may need to be changed and having all the source texts in a
particular context (class) grouped together makes it easier for the
translator to perform any accelerator changes without introducing
conflicts.

In \link tt2-arrowpad-cpp.html arrowpad.cpp\endlink we implement the
ArrowPad class.

\walkthrough  tt2/arrowpad.cpp
\skipto QPushButton
\printline QPushButton

We call \c ArrowPad::tr() for each button's label since the labels are
user-visible text.


<center><img src="../images/tt2_en.png"
alt="Screenshot of the English version of tutorial 2">
<h5>Tutorial 2 Screenshot, English version</h5></center>

\walkthrough  tt2/mainwindow.h
\skipto QMainWindow
\printline QMainWindow
\printuntil Q_OBJECT

In the \e {Tutorial 2 Screenshot, English version}, above, the whole
window is a MainWindow.  This is defined in the \link
tt2-mainwindow-h.html mainwindow.h\endlink header file. Here too, we use
Q_OBJECT, so that MainWindow will become a context in \e {Qt
Linguist}.

In the implementation of MainWindow,
\link tt2-mainwindow-cpp.html mainwindow.cpp\endlink,
we create an instance of our ArrowPad class

\walkthrough tt2/mainwindow.cpp
\skipto arrow pad
\printline arrow pad

We also call MainWindow::tr() twice, once for the menu item and once for
the accelerator.

\skipto quit()
\printline quit()
\printuntil stringToKey

Note the use of \link
http://doc.trolltech.com/qaccel.html#stringToKey
QAccel::stringToKey() \endlink to support different keys in other
languages. "Ctrl+Q" is a good choice for Quit in English, but a Dutch
translator might want to use "Ctrl+A" (for Afsluiten) and a German
translator "Strg+E" (for Beenden). When using \c tr() for Ctrl key
accelerators the two argument form should be used with the second
argument describing the function that the accelerator performs.

Our \c main() function is defined in
\link tt2-main-cpp.html main.cpp\endlink as usual.

\walkthrough  tt2/main.cpp
\skipto QTranslator
\printline QTranslator
\printuntil install

We choose which translation to use according to the current
locale. \link http://doc.trolltech.com/qtextcodec.html#locale
QTextCodec::locale() \endlink can be influenced by setting the \c LANG
environment variable, for example. Notice that the use of a naming
convention that incorporates the locale for \c .qm message files, (and
\c .ts files), makes it easy to implement choosing the translation file
according to locale.

If there is no \c .qm message file for the locale chosen the original
source text will be used and no error raised.

<h4>Translating to French and Dutch</h4>

We'll begin by translating the example application into French.  Start
\e {Qt Linguist} with \c tt2_fr.ts.  You should get the seven source
texts ("\&Up", "\&Left", etc.) grouped in two contexts ("ArrowPad" and
"MainWindow").

Now, enter the following translations:

\list
\i ArrowPad
     \list
     \i \&Up - \&Haut
     \i \&Left - \&Gauche
     \i \&Right - \&Droite
     \i \&Down - \&Bas
     \endlist
\i MainWindow
     \list
     \i E\&xit - \&Quitter
     \i Ctrl+Q - Ctrl+Q
     \i \&File - \&Fichier
     \endlist
\endlist

It's quickest to press Alt+D (which clicks the \e {Done & Next}
button) after typing each translation, since this marks the translation
as done and moves on to the next source text.

Save the file and do the same for Dutch working with \c tt2_nl.ts:

<ul>
<li> ArrowPad
     <ul>
     <li> \&Up - \&Boven
     <li> \&Left - \&Links
     <li> \&Right - \&Rechts
     <li> \&Down - \&Onder
     </ul>
<li> MainWindow
     <ul>
     <li> E\&xit - \&Afsluiten
     <li> Ctrl+Q - Ctrl+A
     <li> File - \&Bestand
     </ul>
</ul>

We have to convert the \c tt1_fr.ts and \c tt1_nl.ts translation source
files into \c .qm files. We could use \e {Qt Linguist} as we've done
before; however using the command line tool \e lrelease ensures that
\e all the \c .qm files for the application are created without us
having to remember to load and \e File|Release each one
individually from \e {Qt Linguist}.

In practice we would include calls to \e lupdate and \e lrelease in the
application's makefile to ensure that the latest translations are
used.

<!-- an example of a makefile or .pro file that did this would be nice -->

Type

\code
    lrelease tt2.pro
\endcode

This should create both \c tt2_fr.qm and \c tt2_nl.qm.  Set the
<tt>LANG</tt> environment variable to <tt>fr</tt>.  In Unix,
one of the two following commands should work

\code
    export LANG=fr
    setenv LANG fr
\endcode

In Windows, either modify autoexec.bat or run

\code
    set LANG=fr
\endcode


When you run the program, you should now see the French version:

<center><img src="../images/tt2_fr.png"
alt="Screenshot of the French version of tutorial 2">
<h5>Tutorial 2 Screenshot, French version</h5></center>

Try the same with Dutch, by setting <tt>LANG=nl</tt>. Now the Dutch
version should appear:

<center><img src="../images/tt2_nl.png"
alt="Screenshot of the Dutch version of tutorial 2">
<h5>Tutorial 2 Screenshot, Dutch version</h5></center>

<h4>Exercises</h4>

Mark one of the translations in \e {Qt Linguist} as not done, i.e.
by unchecking the "done" checkbox; run \e lupdate, then \e lrelease,
then the example. What effect did this change have?

Set <tt>LANG=fr_CA</tt> (French Canada) and run the example program
again.  Explain why the result is the same as with <tt>LANG=fr</tt>.

Change one of the accelerators in the Dutch translation to eliminate the
conflict between \e &Bestand and \e &Boven.


<h3><a name="Tutorial_3:_Distinguishing_Identical_Strings_That_Require_Different_Translations">
Tutorial 3: Disambiguating Identical Strings</a></h3>

<center><img src="../images/tt3_10_en.png"
alt="Screenshot of Troll Print 1.0, English version">
<h5>Tutorial 3 Screenshot, "Troll Print 1.0", English version</h5></center>

\e {Listing of file \link tt3-tt3-pro.html tt3.pro\endlink:}
\include tt3/tt3.pro

We've included a translation file,
\link tt3-tt3_pt-ts.html tt3_pt.ts\endlink, which contains some
Portuguese translations for this example.

We will consider two releases of the same application: Troll Print 1.0
and 1.1.  We will learn to reuse the translations created for one
release in a subsequent release.  (In this tutorial, you have to edit
some source files.  It's probably best to copy all the files to a
new temporary directory and work from there.)

Troll Print is a toy example application that lets the user choose
printer settings.  It comes in two versions: English and Portuguese.

Version 1.0 consists of these files:

<ul>
<li> \link tt3-printpanel-h.html printpanel.h\endlink contains the
     definition of PrintPanel;
<li> \link tt3-printpanel-cpp.html printpanel.cpp\endlink contains the
     implementation of PrintPanel;
<li> \link tt3-mainwindow-h.html mainwindow.h\endlink contains the
     definition of MainWindow;
<li> \link tt3-mainwindow-cpp.html mainwindow.cpp\endlink contains the
     implementation of MainWindow;
<li> \link tt3-main-cpp.html main.cpp\endlink contains main();
<li> \link tt3-tt3-pro.html tt3.pro\endlink is the \e tmake
     project file.
<li> \link tt3-tt3_pt-ts.html tt3_pt.ts\endlink is the Portuguese
     message file.
</ul>

<h4>Line by Line Walk-Through</h4>


The PrintPanel is defined in
\link tt3-printpanel-h.html printpanel.h\endlink.

\walkthrough  tt3/printpanel.h
\skipto QVBox
\printline QVBox
\printuntil Q_OBJECT

PrintPanel is a \link http://doc.trolltech.com/qwidget.html
QWidget \endlink.  It needs the Q_OBJECT macro for \c tr() to work properly.

The implementation file is
\link tt3-printpanel-cpp.html printpanel.cpp\endlink.

\walkthrough  tt3/printpanel.cpp
\skipto setSpacing
\skipto /
\printline /
\printline
\printline
\printline


Some of the code is commented out in Troll Print 1.0; you will uncomment
it later, for Troll Print 1.1.

\walkthrough  tt3/printpanel.cpp
\skipto twoSided
\printline twoSided
\printuntil toggle
\printline
\printuntil toggle

Notice the two occurrences of \c tr("Enabled") and of \c tr("Disabled")
in PrintPanel.  Since both "Enabled"s and "Disabled"s appear in the same
context \e {Qt Linguist} will only display one occurrence of each
and will use the same translations for the duplicates that it doesn't
display. Whilst this is a useful timesaver, in some languages, such as
Portuguese, the second occurrence requires a separate translation. We
will see how \e {Qt Linguist} can be made to display all the
occurrences for separate translation shortly.

The header file for the mainwindow,
\link tt3-mainwindow-h.html mainwindow.h\endlink, contains no surprises.
In the implementation,
\link tt3-mainwindow-cpp.html mainwindow.cpp\endlink, we have some
user-visible source texts that must be marked for translation.

\walkthrough  tt3/mainwindow.cpp
\skipto setCaption
\printline setCaption

We must translate the window's caption.

\skipto quit
\printline quit
\printuntil Help

We also need to translate the menu items. Note that the two argument
form of \c tr() is used for the keyboard accelerator, Ctrl+Q, since the
second argument is the only clue the translator has to indicate what
function that accelerator will perform.

\walkthrough  tt3/main.cpp
\skipto QTranslator
\printuntil installTranslator

The \c main() function in
\link tt3-main-cpp.html main.cpp\endlink, is the same as the one in
\link #Tutorial_2:_Making_User-Visible_Strings_Translate Tutorial 2 \endlink.
In particular it chooses a translation file based on the current locale.

<h4>Running Troll Print 1.0 in English and in Portuguese</h4>

We will use the translations in the
\link tt3-tt3_pt-ts.html tt3_pt.ts\endlink file that is provided.

Set the <tt>LANG</tt> environment variable to <tt>pt</tt>, and then
run \c tt3.  You should still see the English version, as
shown in the \e {Tutorial 3 Screenshot, "Troll Print 1.0", English
version}, above. Now run \e lrelease, e.g. <code>lrelease
tt3.pro</code>, and then run the example again. Now you should see the
Portuguese edition (Troll Imprimir 1.0):

<center><img src="../images/tt3_10_pt_bad.png"
alt="Screenshot of Troll Imprimir 1.0 (Bad Portuguese)">
<h5>Tutorial 3 Screenshot, "Troll Imprimir 1.0", (Bad) Portuguese version</h5>
</center>

Whilst the translation has appeared correctly, it is in fact wrong. In
good Portuguese, the second occurrence of "Enabled" should be
"Ativadas", not "Ativado" and the ending for the second translation of
"Disabled" must change similarly too.

If you open \link
tt3-tt3_pt-ts.html tt3_pt.ts\endlink using \e {Qt Linguist}, you
will see that there is just one occurrence of "Enabled" and of
"Disabled" in the translation source file, even though there are two of
each in the source code. This is because \e {Qt Linguist} tries to
minimize the translator's work by using the same translation for
duplicate source texts. In cases such as this where an identical
translation is wrong, the programmer must disambiguate the duplicate
occurrences. This is easily achieved by using the two argument form of
\c tr().

We can easily determine which file must be changed because the
translator's "context" is in fact the class name for the class where the
texts that must be changed appears. In this case the file is
\link tt3-printpanel-cpp.html printpanel.cpp\endlink, where the
there are four lines to change.  Add the second argument "two-sided" in
the appropriate \c tr() calls to the first pair of radio buttons:

\code
    but = new QRadioButton( tr("Enabled", "two-sided"), twoSided );
    but = new QRadioButton( tr("Disabled", "two-sided"), twoSided );
\endcode

and add the second argument "colors" in the appropriate \c tr() calls
for the second pair of radio buttons:

\code
    but = new QRadioButton( tr("Enabled", "colors"), colors );
    but = new QRadioButton( tr("Disabled", "colors"), colors );
\endcode

Now run \e lupdate and open \c tt3_pt.ts with \e {Qt Linguist}.  You
should now see two changes.

First, the translation source file now contains \e three "Enabled",
"Disabled" pairs. The first pair is marked "(obs.)" signifying that they
are obsolete. This is because these texts appeared in \c tr() calls that
have been replaced by new calls with two arguments.  The second pair has
"two-sided" as their comment, and the third pair has "colors" as their
comment. The comments are shown in the \e {Source text and comments}
area in \e {Qt Linguist}.

Second, the translation text "Ativado" and "Desativado" have been
automatically used as translations for the new "Enabled" and "Disabled"
texts, again to minimize the translator's work. Of course in this case
these are not correct for the second occurrence of each word, but they
provide a good starting point.

Change the second "Ativado" into "Ativadas" and the second
"Desativado" into "Desativadas", then save and quit.  Run \e lrelease to
obtain an up-to-date binary \c tt3_pt.qm file, and run Troll Print (or
rather Troll Imprimir).

<center><img src="../images/tt3_10_pt_good.png"
alt="Screenshot of Troll Imprimir 1.0 (Good Portuguese)">
<h5>Tutorial 3 Screenshot, "Troll Imprimir 1.0", (Good) Portuguese version</h5>
</center>

The second argument to \c tr() calls, called "comments" in \e {Qt
Linguist}, distinguish between identical source texts that occur in
the same context (class). They are also useful in other cases to give
clues to the translator, and in the case of Ctrl key accelerators are
the only means of conveying the function performed by the accelerator to
the translator.

An additional way of helping the translator is to provide information on
how to navigate to the particular part of the application that contains
the source texts they must translate. This helps them see the context
in which the translation appears and also helps them to find and test
the translations. This can be achieved by using a \e TRANSLATOR comment
in the source code:
<pre>
    /* TRANSLATOR MainWindow

       In this application the whole application is a MainWindow.
       Choose Help|About from the menu bar to see some text
       belonging to MainWindow.
    *&#47;
</pre>

Try adding these comments to some source files, particularly to dialog
classes, describing the navigation necessary to reach the dialogs. You
could also add them to the example files, e.g.
\link tt3-mainwindow-cpp.html mainwindow.cpp\endlink and
\link tt3-printpanel-cpp.html printpanel.cpp\endlink are appropriate
files. Run \e lupdate and then start \e {Qt Linguist} and load in
\c tt3_pt.ts.  You should see the comments in the \e {Source text and
comments} area as you browse through the list of source texts.

Sometimes, particularly with large programs, it can be difficult
for the translator to find their translations and check that they're
correct.  Comments that provide good navigation information can save
them time:

<pre>
    /* TRANSLATOR ZClientErrorDialog

	Choose Client|Edit to reach the Client Edit dialog, then choose
	Client Specification from the drop down list at the top and pick
	client Bartel Leendert van der Waerden.  Now check the Profile
	checkbox and then click the Start Processing button.  You should
	now see a pop up window with the text "Error: Name too long!".
	This window is a ZClientErrorDialog.
    *&#47;
</pre>


<h4>Troll Print 1.1</h4>

We'll now prepare release 1.1 of Troll Print.  Start your favorite text
editor and follow these steps:

<ul>
<li> Uncomment the two lines that create a QLabel with the text
     "\<b\>TROLL PRINT\</b\>" in
     \link tt3-printpanel-cpp.html printpanel.cpp\endlink.
<li> Word-tidying: Replace "2-sided" by "Two-sided" in
     \link tt3-printpanel-cpp.html printpanel.cpp\endlink.
<li> Replace "1.0" with "1.1" everywhere it occurs in
     \link tt3-mainwindow-cpp.html mainwindow.cpp\endlink.
<li> Update the copyright year to 1999-2000 in
     \link tt3-mainwindow-cpp.html mainwindow.cpp\endlink.
</ul>

(Of course the version number and copyright year would be consts or
#defines in a real application.)

Once finished, run \e lupdate, then open \c tt3_pt.ts in \e {Qt
Linguist}.  The following items are of special interest:

<ul>
<li> MainWindow
     <ul>
     <li> Troll Print 1.0 - marked "(obs.)", obsolete
     <li> About Troll Print 1.0 - marked "(obs.)", obsolete
     <li> Troll Print 1.0. Copyright 1999 Macroshaft, Inc. -
	  marked "(obs.)", obsolete
     <li> Troll Print 1.1 - automatically translated as
	  "Troll Imprimir 1.1"
     <li> About Troll Print 1.1 - automatically translated as
	  "Troll Imprimir 1.1"
     <li> Troll Print 1.1.  Copyright 1999-2000 Macroshaft,
	  Inc. - automatically translated as "Troll Imprimir 1.1.
	  Copyright 1999-2000 Macroshaft, Inc."
     </ul>
<li> PrintPanel
     <ul>
     <li> 2-sided - marked "(obs.)", obsolete
     <li> \<b\>TROLL PRINT\</b\> - unmarked, i.e. untranslated
     <li> Two-sided - unmarked, i.e. untranslated.
     </ul>
</ul>

Notice that \e lupdate works hard behind the scenes to make revisions
easier, and it's pretty smart with numbers.

Go over the translations in MainWindow and mark these as "done".
Translate "\<b\>TROLL PRINT\</b\>" as "\<b\>TROLL IMPRIMIR\</b\>".
When you're translating "Two-sided", press the \e {Guess Again}
button to translate "Two-sided", but change the "2" into "Dois".

Save and quit, then run \e lrelease.  The Portuguese version
should look like this:

<center><img src="../images/tt3_11_pt.png"
alt="Screenshot of Troll Imprimir 1.1 Portuguese version">
<h5>Tutorial 3 Screenshot, "Troll Imprimir 1.1", Portuguese version</h5>
</center>

Choose \e Ajuda|Sobre, (\e Help|About), to see the about box

<center><img src="../images/tt3_11_about_pt.png"
alt="Screenshot of Troll Imprimir 1.1 About box Portuguese version">
<h5>Tutorial 3 Screenshot, About box, Portuguese version</h5></center>

If you choose \e {Ajuda|Sobre Qt}, (\e {Help|About Qt}), you'll
get an English dialog... oops! Qt itself needs to be translated.  See
the document
\link http://doc.trolltech.com/i18n.html Internationalization with
Qt \endlink for details.

Now set <tt>LANG=en</tt> to get the original English version:

<center><img src="../images/tt3_11_en.png"
alt="Screenshot of Troll Print 1.1, English version"></center>
<h5>Tutorial 3 Screenshot, "Troll Print 1.1", English version</h5></center>

<h3><a name="Conclusion">Summary</a></h3>

These tutorials cover all that you need to know to prepare your Qt
applications for translation.

At the beginning of a project add the translation source files to be
used to the project file and add calls to \e lupdate and \e lrelease to
the make file.

During the project all the programmer must do is wrap any user-visible
text in \c tr() calls, and use the two argument form for Ctrl key
accelerators, or when asked by the translator for the cases where the
same text translates into two different forms in the same context. The
programmer should also include \e TRANSLATION comments to help the
translator navigate the application.

*/
