\chapter Reference: The .ui File Format

\QD stores forms in \c .ui files. These files use an XML format to
represent form elements and their characteristics. This document
provides an overview of the XML format used, and should provide enough
information for developers to write their own \c .ui parsers so that
they can read and modify \c .ui files programatically.

One way to parse a \c .ui file is to use Qt and the \l QDom class;
this is how \QD does it: see the \c resource.h and \c resource.cpp
source files. 

The doctype of a \c .ui file is simply "UI", so the doctype tag is:

\code
<DOCTYPE "UI">
\endcode

The root element is a "UI", which encloses the entire contents:

\code
<UI version="3.0" stdsetdef="1">
...
</UI>
\endcode

Within the UI entity, there may one or zero of the following element
types:

\list
\i \link actions actions\endlink - actions, for \l QMainWindow forms
\i \link author author\endlink - the form's author
\i \link class class\endlink - the form's class name
\i \link comment comment\endlink - comments, e.g. copyright notices
\i \link connections connections\endlink - signal/slot connections
\i \link customwidgets customwidgets\endlink - custom widgets
\i \link exportmacro exportmacro\endlink - ###
\i \link forwards forwards\endlink - forward declarations
\i \link images images\endlink - embedded images: only for \c .ui files than include embedded images; images are normally stored in a separate \c images directory
\i \link includes includes\endlink - include files
\i \link layoutdefaults layoutdefaults\endlink - default values for layout attributes
\i \link menubar menubar\endlink - menu bar, for \l QMainWindow forms
\i \link pixmapfunction pixmapfunction\endlink - the name of the function to use for retrieving pixmaps if neither embedded nor external pixmaps are being used
\i \link pixmapinproject pixmapinproject\endlink - an element whose
presence ndicates that the pixmaps are handled by the \c .pro file
\i \link signals signals\endlink - signal declarations
\i \link slots slots\endlink - slot declarations
\i \link tabstops tabstops\endlink - the form's tab order
\i \link toolbars toolbars\endlink - toolbars, for \l QMainWindow forms
\i \link variables variables\endlink - class variables
\i \link widget widget\endlink - the form itself; this element may contain other elements, including other \c widget elements
\i \link forward forward\endlink - Qt 3.x beta backwards compatibility
\i \link include include\endlink - Qt 2.x backwards compatibility
\i \link variable variable\endlink - Qt 3.x beta backwards compatibility
\endlist

The ordering of elements is arbitrary, although it is common for the
\link class class\endlink element to be first.

\section1 UI Elements

\target actions
\section2 actions

This element is used to store the form's actions. It only occurs in
\l QMainWindow forms. 

The \c actions element contains one or more \c action elements. Each
\c action element contains one or more properties. Each property has a
\c name attribute, and a single value which is contained within a
\link datatype datatype\endlink element.

\code
<actions>
    <action>
        <property name="name">
            <cstring>fileNewAction</cstring>
        </property>
        <property name="iconSet">
            <iconset>filenew</iconset>
        </property>
        <property name="text">
            <string>New</string>
        </property>
        <property name="menuText">
            <string>&amp;New</string>
        </property>
        <property name="accel">
            <number>4194382</number>
        </property>
    </action>
    ...
</actions>
\endcode

\target author
\section2 author

This element is used to store the author's name as a simple string.

\code
<author>Barney Rubble</author>
\endcode

\target class
\section2 class

This element is used to store the form's class name as a simple string.

\code
<class>InsuranceForm</class>
\endcode

\target comment
\section2 comment

This element is used to store comments, for example, copyright
notices, as a simple string.

\code
<comment>*********************************************************************
** Copyright (C) 2002 Trolltech AS.  All rights reserved.
**
** This file is part of Qt Designer.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
*********************************************************************</comment>
</comment>
\endcode

\target connections
\section2 connections

This element is used to record the signals and slots connections in
the form.

The \c connections element contains one or more \c connection elements
and one or more \c slot elements. Each \c connection element
identifies the signaling object and its signal, and the receiving
object and its slot. Each \c slot element provides a slot's prototype.

\code
<connections>
    ...
    <connection language="C++">
        <sender>alignActionGroup</sender>
        <signal>selected(QAction*)</signal>
        <receiver>EditorForm</receiver>
        <slot>changeAlignment(QAction*)</slot>
    </connection>
    ...
    <slot access="public" specifier="virtual" language="C++" 
	returnType="void">changeAlignment(QAction* align)</slot>
    ...
</connections>
\endcode

\target customwidgets
\section2 customwidgets

\QD can operate with custom widgets. A custom widget is represented in
a \File .ui file using the \c{<customwidget>} element.

Each custom widget has a class name and a header file. They also have
a size hint and size policy. A pixmap can be specified; this is
displayed on a \QD toolbar button which the user can use to create an
instance of the custom widget. Custom widgets usually emit signals,
and these are listed. The name and type of any properties that the
widget has are also included.

\code
<customwidgets>
    <customwidget>
        <class>StyledButton</class>
        <header location="local">styledbutton.h</header>
        <sizehint>
            <width>40</width>
            <height>25</height>
        </sizehint>
        <container>0</container>
        <sizepolicy>
            <hordata>5</hordata>
            <verdata>5</verdata>
        </sizepolicy>
        <pixmap>image0</pixmap>
        <signal>clicked()</signal>
        <signal>changed()</signal>
        <property type="Color">color</property>
        <property type="Pixmap">pixmap</property>
        <property type="Bool">scale</property>
    </customwidget>
</customwidgets>
\endcode

\target exportmacro
\section2 exportmacro

### TODO

\target forwards
\section2 forwards

It is sometimes necessary to forward declare classes, particularly if
code is being written in \File .ui.h files within \QD. Each forward
declaration is listed as it should appear in the generated C++ code.

\code
<forwards>
    <forward>class QStringList;</forward>
</forwards>
\endcode

\target images
\section2 images

Images are normally stored in their own files and associated with
forms using project files. This has the advantage that images can be
shared across any number of forms in a project, and between projects.

In some cases it may be desireable to store image data directly in a
form, and the \c{<image>} tag allows for this.

It is possible to store images in both PNG and XPM formats, although
in practice only XPM is recommended because of bugs in some PNG
libraries. See the \c saveImageData function in \c resource.cpp to see
how the image data is encoded.

\code
<images>
    <image name="image0">
        <data format="XPM.GZ" length="409">789cd3d7528808f055d0d2e72a2e492cc94c5648ce482c52d04a29cdcdad8c8eb5ade6523234530022630543251d2e253d856405bffcbc54105b19c856360003103711c6b53006ab440370316528264b4c198450c5808a94d1ed00aac214832b43124b544ec414d34b4c4c441103f11341120831309758313d0cf3b0840b7258d55a73010092c14eca</data>
    </image>
</images>
\endcode

\target includes
\section2 includes

It is sometimes necessary to \c{#include} header files in a \File .ui
file. Header files may be 'local', i.e. relative to the project's
directory, or 'global', i.e. part of Qt or the compilers standard
libraries. Header files are declared in the implementation wherever
possible, although sometimes it is necessary to declare them in the
declaration (header) file.

\QD automatically adds \c{<include>} tags for a \File .ui's \File
.ui.h file.

\code
<includes>
    <include location="local" impldecl="in implementation">pixmapcollection.h</include>
    <include location="local" impldecl="in implementation">pixmapchooser.h</include>
    <include location="local" impldecl="in implementation">project.h</include>
    <include location="global" impldecl="in implementation">qfileinfo.h</include>
    <include location="global" impldecl="in implementation">qimage.h</include>
    <include location="global" impldecl="in declaration">qpixmap.h</include>
    <include location="local" impldecl="in implementation">pixmapcollectioneditor.ui.h</include>
</includes>
\endcode

\target layoutdefaults
\section2 layoutdefaults

Every form has a default spacing and margin size. These can be
overridden on a case-by-case basis.

\code
<layoutdefaults spacing="6" margin="11"/>
\endcode

\target menubar
\section2 menubar

Applications that use \l QMainWindow often have a menubar. The menubar
has a name property and one or more popup menu items. Each menu item
has one or more actions and optionally separators.

\code
<menubar>
    <property name="name">
        <cstring>menubar</cstring>
    </property>
    <item text="&amp;File" name="PopupMenu">
        <action name="fileSaveAction"/>
        <separator/>
        <action name="fileExitAction"/>
    </item>
    <item text="&amp;Help" name="PopupMenu_2">
        <action name="helpAboutAction"/>
        <action name="helpAboutQtAction"/>
    </item>
</menubar>
\endcode

\target pixmapfunction
\section2 pixmapfunction

Images are normally included by listing their filenames in project
files. Images can also be included inline using the \l images tag.
Another way of dealing with images is to specify a function name. This
function will be called, with the name (or 'key') of the relevant
image, and is responsible for loading the appropriate image. To
specify such a function the \c{<pixmapfunction>} tag is used.

\code
<pixmapfunction>splashScreen</pixmapfunction>
\endcode

\target pixmapinproject
\section2 pixmapinproject

Most applications store their images as separate files listed in the
application's project file. This can be signified by including the
\c{<pixmapinproject>} tag.

\code
<pixmapinproject/>
\endcode

\target signals
\section2 signals

See \l connections.

\target slots
\section2 slots


See \l connections.

\target tabstops
\section2 tabstops

Tabstops indicate the widgets that get the focus as the user tabs
through the form. The \c{<tabstops>} tag contains a list of tabstops,
in order, each of which holds the name of a widget.

\code
<tabstops>
    <tabstop>templateView</tabstop>
    <tabstop>helpButton</tabstop>
    <tabstop>buttonOk</tabstop>
    <tabstop>buttonCancel</tabstop>
</tabstops>
\endcode

\target toolbars
\section2 toolbars

Forms that have toolbars (dock windows) use the \c{<toolbars>} tag to
hold the details. These forms are normally \l{QMainWindow}s (or
subclasses). Each toolbar has a dock attribute which identifies which
dock window the toolbar initially belongs to. They also have both name
and label properties. Each toolbar button is represented by an action.
Toolbars can also hold other widgets, in which case the \c{<toolbar>}
tag includes appropriate \c{<widget>} tags which give the class, name
and any non-default property values for the relevant widget.

\code
<toolbars>
    <toolbar dock="2">
        <property name="name">
            <cstring>toolBar</cstring>
        </property>
        <property name="label">
            <string>Tools</string>
        </property>
        <action name="fileNewAction"/>
        <action name="fileOpenAction"/>
        <action name="fileSaveAction"/>
        <separator/>
        <action name="editUndoAction"/>
        <action name="editRedoAction"/>
        <action name="editCutAction"/>
        <action name="editCopyAction"/>
        <action name="editPasteAction"/>
    </toolbar>
    <toolbar dock="2">
        <property name="name">
            <cstring>Toolbar</cstring>
        </property>
        <property name="label">
            <string>Toolbar</string>
        </property>
        <action name="leftAlignAction"/>
        <action name="centerAlignAction"/>
        <action name="rightAlignAction"/>
        <separator/>
        <action name="boldAction"/>
        <action name="italicAction"/>
        <action name="underlineAction"/>
        <separator/>
        <widget class="QComboBox">
            <property name="name">
                <cstring>fontComboBox</cstring>
            </property>
        </widget>
        <widget class="QSpinBox">
            <property name="name">
                <cstring>SpinBox2</cstring>
            </property>
            <property name="minValue">
                <number>6</number>
            </property>
            <property name="value">
                <number>10</number>
            </property>
        </widget>
    </toolbar>
</toolbars>
\endcode

\target variables
\section2 variables

Module variables are held in the \c{<variables>} tag. Variable type
names often include \< and \>, which must be stored as entities.

\code
<variables>
    <variable>SettingsDialog * settings;</variable>
    <variable>QMap&lt;int, QString&gt; bookmarks;</variable>
    <variable>HelpWindow *browser;</variable>
    <variable>HelpDialog *helpDock;</variable>
    <variable>QGuardedPtr&lt;FindDialog&gt; findDialog;</variable>
    <variable>static QPtrList&lt;MainWindow&gt; *windows;</variable>
</variables>
\endcode

\target widget
\section2 widget

Widgets are used at multiple levels within a \File .ui file. The whole
form itself is a widget, and it contains other widgets, usually within
the context of layouts such as hboxes, vboxes and grids.

Below is an example of a complete \File .ui file. The form itself is a
\l QWidget with various non-default properties set. This widget
contains a single hbox, which also has some non-default properties,
and which contains a single \l QTextBrowser widget.

\code
<!DOCTYPE UI><UI version="3.0" stdsetdef="1">
<class>WinIntroPage</class>
<widget class="QWidget">
    <property name="name">
        <cstring>WinIntroPage</cstring>
    </property>
    <property name="geometry">
        <rect>
            <x>0</x>
            <y>0</y>
            <width>387</width>
            <height>228</height>
        </rect>
    </property>
    <property name="caption">
        <string>Form1</string>
    </property>
    <hbox>
        <property name="name">
            <cstring>unnamed</cstring>
        </property>
        <property name="margin">
            <number>11</number>
        </property>
        <property name="spacing">
            <number>6</number>
        </property>
        <widget class="QTextBrowser">
            <property name="name">
                <cstring>TextBrowser1</cstring>
            </property>
            <property name="text">
                <string>This program installs Qt.</string>
            </property>
        </widget>
    </hbox>
</widget>
<layoutdefaults spacing="6" margin="11"/>
</UI>
\endcode

\target forward
\section2 forward

\WARNING
This tag is included for Qt 3.x beta backwards compatibility,
and should not be used. Use \l forwards instead.
\ENDWARNING

\target include
\section2 include

\WARNING 
This tag is included for Qt 2.x beta backwards compatibility,
and should not be used. Use \l includes instead.
\ENDWARNING

\target variable
\section2 variable

\WARNING 
This tag is included for Qt 3.x beta backwards compatibility,
and should not be used. Use \l variables instead.
\ENDWARNING

\target datatype
\section1 Datatype Elements

\target color
\list
\i \c bool - a boolean value (0 or 1), e.g. \c{<bool>1</bool>}
\i \c color - a color, e.g.
\c{<color><red>192</red><green>0</green><blue>255</blue></color>}
\i \c cstring - a C string value (8-bit), e.g. \c{<cstring>Some text</cstring>}
\i \c cursor - an integer which indicates the cursor type, e.g.
\c{<cursor>4</cursor>}. The valid integers for the cursor type are:
    \list 
    \i 0 - ArrowCursor
    \i 1 - UpArrowCursor
    \i 2 - CrossCursor
    \i 3 - WaitCursor
    \i 4 - IbeamCursor
    \i 5 - SizeVerCursor
    \i 6 - SizeHorCursor
    \i 7 - SizeBDiagCursor
    \i 8 - SizeFDiagCursor
    \i 9 - SizeAllCursor
    \i 10 - BlankCursor
    \i 11 - SplitVCursor
    \i 12 - SplitHCursor
    \i 13 - PointingHandCursor
    \i 14 - ForbiddenCursor
    \endlist
\i \c enum - an enum name, e.g. \c{<enum>StrongFocus</enum>}
\i \c font - a font description, e.g.
\code
<font>
    <family>Helvetica</family>
    <pointsize>16</pointsize>
    <weight>50</weight>
    <italic>1</italic>
    <underline>0</underline>
    <strikeout>0</strikeout>
</font>
\endcode
\i \c iconset - an iconset (see \c pixmap), e.g.
\c{<iconset>filenew</iconset>}
\i \c number - an integer with an optional sign, e.g.
\c{<number>947</number>}
\i \c palette - a \link palette palette\endlink
\i \c pixmap - a pixmap, normally the name or "key" of the pixmap;
the name is used if pixmaps are stored in the project, the key is used
if a user defined function is used to access the pixmap. It is also
possible for pixmaps to be included inline. Example:
\c{<pixmap>chair</pixmap>}
\i \c point - a point, e.g. \c{<point><x>15</x><y>95</y></point>}
\i \c rect - a rectangle, e.g.
\code
<rect>
    <x>20</x>
    <y>35</y>
    <width>225</width>
    <height>45</height>
</rect>
\endcode
\i \c set - a list of names separated by |'s, e.g.
\c{<set>AlignLeft|AlignTop</set>}
\i \c size - a size, e.g. \c{<size><width>150</width><height>105</height></size>}
\i \c sizepolicy - an integer which indicates the size type, e.g.
\c{<hsizetype>5</hsizetype><vsizetype>4</vsizetype>}. The valid
integers for the size type are:
    \list
    \i 0 - Fixed
    \i 1 - Minimum
    \i 3 - MinimumExpanding
    \i 4 - Maximum
    \i 5 - Preferred
    \i 7 - Expanding
    \endlist
\i \c string - a Unicode string value (in UTF8), e.g. 
\c{<string>Some text</string>}
\endlist

\section2 Complex Datatype Elements

\target palette
\section3 palette

This element holds colors for user interface elements for each color
group. For example:
\code
<palette>
  <active>
    <color> ... Foreground    ... </color>
    <color> ... Button        ... </color>
    <color> ... Light         ... </color>
    <color> ... Midlight      ... </color>
    <color> ... Dark	      ... </color>
    <color> ... Mid	      ... </color>
    <color> ... Text          ... </color>
    <color> ... BrightText    ... </color>
    <color> ... ButtonText    ... </color>
    <color> ... Base          ... </color>
    <color> ... Background    ... </color>
    <color> ... Shadow	      ... </color>
    <color> ... Highlight     ... </color>
    <color> ... HighlightText ... </color>
  </active>
  <disabled>
    <color><red>128</red><green>128</green><blue>128</blue></color>
    ...
    <color><red>255</red><green>255</green><blue>255</blue></color>
  </disabled>
  <inactive>
    <color><red>0</red><green>0</green><blue>0</blue></color>
    ...
    <color><red>255</red><green>255</green><blue>255</blue></color>
  </inactive>
</palette>
\endcode
See \link color color\endlink for the format of the \c{<color>} element.
