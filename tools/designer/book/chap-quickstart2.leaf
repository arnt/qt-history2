\chapter Quick Start

This chapter provides a quick start for users of \QD. The chapter
takes you step-by-step through the creation of a small dialog-style
metric conversion application. It introduces adding widgets to a form,
setting widget properties, making signals and slots connections,
laying out widgets, and adding custom code. This chapter only covers a
proportion of \QD's functionality and explanations and details are
mostly left for the more detailed \c colortool tutorial presented in
chapters two and three.

\img qsmetric.png
\caption The Metric Conversion Dialog

\section1 Starting and Exiting \QD

\section2 Starting 

\list
\i To start \QD under Windows click the \Menu Start button
and click \Menu {Programs|Qt X.x.x|Designer}. (X.x.x is the Qt version
number, e.g. 3.2.1.)
\i If you're running a Unix or Linux operating system you can either
double click the \QD icon or enter \c{designer &} in an xterm.
\i Start \QD now. When \QD starts, it shows the \Widget{New/Open}
dialog. We'll just click \CANCEL to skip it.
\endlist

\section2 Exiting

When you've finished using \QD click \Menu{File|Exit}; you will be
prompted to save any unsaved changes.

\section1 Creating the Project

The metric conversion application is a standard C++ application, so we
must create a C++ project and add our files and code to this project.

Create the new project as follows:
\list 
\i Click \Menu File|New to invoke the \Widget{New File} dialog. 
\i Click "C++ Project" to create a C++ project, then click \OK to pop
up the \Widget{Project Settings} dialog. 
\i Click the \Button {ellipsis (...)} button next to the Project File
line edit to invoke the \Widget{Save As} dialog. Use this dialog to
navigate to where you want to create the new project, ideally creating
a new folder for it (e.g. called "metric"), using the \Button{Create
New Folder} toolbar button.
\i Enter a filename of "metric.pro", then
click \Button Save. The project's name will now be "metric"; click \OK to
close the \Widget{Project Settings} dialog.
\i Click \Menu File|Save to save the project. 
\endlist

\img qs-projset.png

See also \link #creating-the-project Creating the Project\endlink.

\section1 Creating the Dialog

\list
\i Click \Menu{File|New} to invoke the \Widget{New File} dialog, then
click "Dialog", then click \OK. 
\i Drag a corner of the new form to make it a lot smaller. Change the
form's name (in the
\link #using-the-property-editor-sidebar Property Editor\endlink) to
"ConversionForm", and change its caption to "Metric Conversion". \i
Click \Menu{File|Save}, accept the default form name, and then click
\Button Save to save it.
\endlist

\img qs-newdlg.png 

See also \l{Creating Dialogs} and \link #layouts-subsection
Layouts\endlink.

\section2 Adding Widgets to the Dialog

\section3 Adding Text Labels

\list
\i Click the \Button{Common Widgets} button listed in the Toolbox
toolbar at the left of \QD's main window. 
\i Double click the \Button TextLabel button and click towards the top
left of the dialog.  
\i Click four more times below the top text label until you have 5
labels from top to bottom. Don't worry about exact placement of the
labels since the layout tools will handle this automatically.
\i Click the \Button Pointer toolbar button to deselect the text label.
\endlist

See also \link #adding-the-widgets-subsection Adding the
Widgets\endlink.

Now we will change the properties of the text labels to suit the
application.

\list
\i Click on the top text label. Go to the \Widget{Property Editor}
window and change the label's \Property{text} property to "Enter
\&Number:". The \& (ampserand) makes the following letter an Alt key
accelerator (keyboard shortcuts).
\i Click the second label. Change the label's \Property{text} property
to "Convert \&From:".
\i Click the third label. Change the label's \Property{text} property to
"Convert \&To:".
\i Click the fourth label. Change the label's \Property{text} property to
"Result:".
\i  Click the fifth label. Change the label's \Property{text} property to
"\&Decimals:".
\endlist

\img qs-txtlbl.png

See also 
\link #using-the-property-editor-sidebar Using
the Property Editor\endlink.

\section3 Adding Line Edits, Comboboxes, and Spinboxes

\list
\i Click the \Button{Common Widgets} button listed in the Toolbox
toolbar at the left of \QD's main window.
\i Click the \Button LineEdit button and then click to the right of
the Enter Number label. Change its \Property name property to
"numberLineEdit". Change the \Property hAlign property to AlignRight
and change \Property vAlign to AlignTop. Finally, change \Property
wordwrap to False. Note that whenever you click a widget, its
properties appear in the \Widget{Property Editor}.
\i Double click the \Button ComboBox button and click to the right of
the Convert From label. Now click to the right of the Convert To
label. Click the \Button Pointer toolbar button to deselect the
ComboBox. Change the \Property{name} property of the first combobox to
"fromComboBox". Change the \Property{name} property of the second to
"toComboBox".
\i Click the \Button LineEdit button and then click to the right of
the "Result" label. Change its \Property{name} property to
"resultLineEdit". Change the \Property{paletteBackgroundColor} property to
a shade of yellow (just to make the result stand out). Change \Property hAlign to AlignRight, \Property vAlign to AlignVCenter and \Property wordwrap to False. Now change the \Property{readOnly} property to
"True". 
\i Click the \Button SpinBox button and then click to the right of the
Decimals label. Place the SpinBox below the right side of the
resultLineEdit. Change the spinbox's \Property{name} property to
"decimalsSpinBox". Change its \Property{max value} property to "6" and
the \Property{value} to "3". 
\i Click \Menu{File|Save}.
\endlist

\img qs-addwidg.png

Now we need to relate each of the text labels to the corresponding
widget. We do this by creating "buddies". 

A widget that does not accept focus itself, e.g. a \Class QLabel, can
have an accelerator that will pass the focus to its "buddy", e.g. a
\Class QLineEdit, by setting the first widget's \Property{buddy} property to
the name of the buddy widget.

\list
\i Click the \Button{Set Buddy} toolbar button (or press \Key F5).
Click the Enter Number label and drag the rubber band to the
numberLineEdit; then release.
\i Click the \Button{Set Buddy} toolbar button. Click the Convert From label
and drag the rubber band to the fromComboBox; then release.
\i Click the \Button{Set Buddy} toolbar button. Click the Convert To label
and drag the rubber band to the toComboBox; then release.
\i Click the \Button{Set Buddy} toolbar button. Click the Decimals label and
drag the rubber band to the decimalsSpinBox; then release.
\endlist

\section3 Adding Push Buttons

\list
\i Click the \Button{Common Widgets} button in the Toolbox.
\i Double click the \Button Pushbutton button and click towards the
bottom left of the dialog, below the Decimals label. 
\i Click to the right of the new push button twice more so that you
have three push buttons horizontally in a row at the bottom of the
dialog.
\i Click the \Button Pointer toolbar button to deselect the
push button.
\endlist

We will change a few properties for each of the push buttons in the
\Widget{Property Editor} window.

\list
\i Click the left-most push button, and change its name to
"clearPushButton" and its text to "\&Clear".
\i Click the middle push button and change its name to
"calculatePushButton", its text to "Calculate" and its default
property to "True".
\i Click the right-most push button and change its name to "quitPushButton"
and its text to "\&Quit".
\endlist

\img qs-pushbutt.png

\section3 Adding Spacers 

We need to add spacers to absorb redundant space in our dialog so that
it will lay out nicely at whatever size the user resizes it to.
Usually spacers are added as you experiment with the layout, but since
this is a quick guide to \QD, we will add the spacers now since we
already know that they will be needed.

\list
\i Click the \Button{Common Widgets} button in the Toolbox.
\i Click the \Button Spacer button and click to the right of the
Decimal label and drag right towards the spinbox; then release. A
horizontal spacer will appear.
\i Click the \Button Spacer button again and click to the right of the
Calculate push button and drag right towards the Quit push button; then
release.  
\i Click the \Button Spacer button and click just below the spin box
and drag vertically towards the buttons; then release. A vertical
spacer will appear.
\endlist

\img qs-spacers.png

Click \Menu File|Save to save the dialog.

\section3 Editing Widgets

We'll now edit some of the widgets to contain the values needed for
the conversions.

The fromComboBox:
\list
\i Right click the fromComboBox and then click \Menu Edit from the
context menu.
\i Click \Button{New Item} and then delete the "New Item" text and type
"Kilometers". Click \Button{New Item} and change the text to
"Meters". Repeat this twice more, changing the text to "Centimeters"
and to "Millimeters" respectively.
\i Click \Button OK to close the Edit Listbox dialog.
\endlist

\img qs-editlistbox1.png

The toComboBox:
\list
\i Right click the toComboBox and then click \Menu Edit from the
context menu.
\i Delete the "New Item" text and type "Miles". Click \Button{New
Item} and change the text to "Yards". Repeat this twice more,
changing the text to "Feet" and to "Inches".
\i Click \Button OK to close the Edit Listbox dialog.
\endlist

\section2 Laying Out the Dialog

We'll lay out the text labels and their corresponding widgets first
and we'll do the push buttons last.

\list
\i Click the decimalsSpinBox and press \Key{Shift+Click} on the
spacer next to it. Click the \Button{Lay Out Horizontally} (\Key
Ctrl+H) toolbar button.
\i Click the form (to deselect anything that's selected), then click
the form to the left of the Decimals text label and then drag the
rubber band so that it touches every label and widget, including the
decimals spacer, but avoiding the other spacers and the push buttons.
Release the mouse and notice that the desired widgets are selected.
Click the \Button{Lay Out in a Grid} (\Key Ctrl+G) toolbar button.

\img qs-laygrid.png

\i Click the Clear push button in the \Widget{Object Explorer} window
(Objects tab) and then \Key Shift+Click the Calculate push button, the
Quit push button and the Spacer between the push buttons. Click the
\Button{Lay Out Horizontally} toolbar button.

\img qs-layhoriz.png

\i Click the form to deselect all the widgets and layouts and then
click the \Button{Lay Out Vertically} (\Key Ctrl+L) toolbar button.
\i Finally, click the form and then click the \Button{Adjust Size}
(\Key Ctrl+J) toolbar button.
\endlist

\img qs-layvert.png

Click \Menu File|Save to save the dialog.

See also \link #laying-out-the-widgets-subsection Laying Out the
Widgets\endlink.

\section3 Tab Order

We should make sure that our dialog's tab order is set correctly.

\list
\i Click the \Button{Tab Order} toolbar button. A number in a blue
circle will appear next to every widget that can accept focus.
\i Click every widget in turn in the order you want them to accept focus. 
\i Press \Key Esc to leave tab order mode. 
\endlist

\img qs-taborder.png

See also 
\link #changing-the-tab-order-sidebar Changing the Tab Order\endlink.

\section2 Previewing the Dialog

To preview the dialog, press \Key{Ctrl+T} or click \Menu
{Preview|Preview Form} from the menubar. Try dragging the corner of
the dialog to adjust the size. Note that the the widgets always stay
in proportion no matter what size you make the dialog. Check the tab
order of the widgets by pressing the \Key Tab key.

\section2 Connecting the Widgets

We need to connect three buttons; the Clear button, the Calculate
button and the Quit button. We also need to connect some of the other
widgets. For convenience, we can do all of our connections in one go
using the \Widget{View and Edit Connections} dialog.

We will now connect our clearButton:

\list
\i Click \Menu{Edit|Connections} to invoke the \Widget{View and Edit
Connections} dialog.
\i Click \Button New to enter a new connection.
\i For the first connection, select clearPushButton for the Sender,
clicked() for the Signal, numberLineEdit for the Receiver, and clear()
for the Slot.
\i Click \Button New again.
\i Select clearPushButton for the Sender, clicked() for the Signal,
resultLineEdit for the Receiver, and clear() for the Slot. 
\i Click \Button New again.
\i Select clearPushButton for the Sender, clicked() for the Signal,
numberLineEdit for the Receiver, and setfocus() for the Slot.
\endlist

\img qs-editconn1.png

We also need to connect the quit button to the form:
\list
\i Click \Button New. 
\i Select quitPushButton for Sender, clicked() for Signal, ConversionForm
for Receiver, and close() for Slot.
\endlist

We want to connect the calculate button and the other widgets, but the
slot we want to use is not listed in the combobox. We will need to
create a new slot so that we can select it from the list to complete
our connections.

\list
\i Click \Button New.
\i Select calculatePushButton for the Sender, clicked() for the Signal,
and ConversionForm for the Receiver. 
\i Click \Button{Edit Slots} to invoke the \Widget{Edit Functions}
dialog. Click \Button{New Function}. Type over the Function name with the name of our new function:
convert(), then click \OK.
\i Select convert() from the Slot combobox to complete our connection.
\endlist

\img qs-editfunc.png

We will now connect the last few widgets:
\list
\i Click \Button New.
\i Select decimalsSpinBox as the Sender, valueChanged(int) as the
Signal, ConversionForm as the Receiver, and convert() as the Slot.
\i Click \Button New.
\i Select fromComboBox as the Sender, activated(int) as the
Signal, ConversionForm as the Receiver, and convert() as the Slot.
\i Click \Button New.
\i Select toComboBox as the Sender, activated(int) as the
Signal, ConversionForm as the Receiver, and convert() as the Slot.
\endlist

\img qs-editconn2.png

Click \OK to exit the View and Edit Connections dialog.

Click \Button Save to save the project.

\section1 Coding the Dialog

Click "conversionform.ui.h" in the \Widget{Project Overview} window to
invoke the code editor. We'll implement the \Func{convert()} function
and also the \Func{init()} function. For faster implementation, copy
the code from this section and then follow the brief explanations
below:

\quotefile metric/metric.ui.h
\skipto ConversionForm::convert
\printuntil decimals
\printuntil }

First, we define some enums for the input and output units. Then we
retrieve the input from the numberLineEdit. We convert the input to
millimeters because this is the most precise metric unit we support.
Then we convert it to inches which is the most precise output unit we
support. We then scale it to the selected output unit. Finally, we
put the result in the resultLineEdit.

Next, we will implement the \Func {init()} function which is called when
the dialog is created. 

\quotefile metric/metric.ui.h
\skipto ConversionForm::init
\printuntil }

For this function, we set a validator on the numberLineEdit so that
the user can only input numbers. To be able to do this, we also need
to add \c{#include <qvalidator.h>} at the top of the form, right above
the \Func init(). Lastly, we set the initial input.

We are almost ready to run the application. Before we compile the
application, we need a \c main.cpp file.

\list
\i Click \Menu{File|New} and click C++ Main File (\c{main.cpp}).
\i Accept the default selections for the Configure Main-File dialog. 
\i Click \Button Save to save the project. 
\endlist

Compiling and Running the Application

\list
\i Start or switch to a console and navigate to the directory where
you saved your project.
\i Run \e qmake on the project file (\c metric.pro) by typing \c{qmake -o
Makefile metric.pro}.
\i Run \e make  (or \e nmake depending on your system).
\i After the project has compiled, run the application.
\endlist

\section1 Wrapping Up

This application has given a very quick introduction to \QD. It has
introduced adding widgets to a form, setting widget properties, making
signals and slots connections, laying out and adding custom code. Much
of the detail and explanations have been deferred. The next two
chapters provide a tutorial that covers the development of a small but
complete application, and the reference chapters complete the detailed
coverage.
