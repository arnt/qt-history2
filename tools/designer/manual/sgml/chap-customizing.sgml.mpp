<chapter>
<title>Customizing and Integrating Qt Designer</title>

<sect1 id="customizingqtdesigner">
<title>Customizing Qt Designer </title>
<para id="aioy">
\qd can be customized in two ways: you can add custom widgets, and you
can change aspects of how \qd works. Custom widgets are covered in <xref
linkend="creating-custom-widgets-with-plugins"> "Creating Custom
Widgets". This section will focus on customizing \qd itself.
</para>
<para id="aipe">
\qd's toolbars are all dockable so they can be dragged by their toolbar
handles and arranged how you like. The Files, Object Hierarchy, Property
Editor and Output Windows are also dockable so you can also drag them to
the positions that you prefer. You can also make them into floating
windows by dragging them outside \qd's dock areas.
</para>
<para id="aipl">
General preferences can be set by clicking
\menu[Edit|Preferences] to invoke the \dlg[Preferences]
dialog. If you check the 'Restore last workspace on startup' checkbox
then \qd will remember the sizes and positions of the toolbars and the
dockable windows. You can change \qd's main window background either by
selecting a color or a pixmap. You can also switch off the grid (uncheck
Show Grid) since using layouts makes the grid redundant.
</para>
<para id="aipu">
\x[Plugins]
\x[Code Editing|Preferences]
\x[Preferences|Code Editing]
The \dlg[Preferences] dialog may have additional tabs, depending on what
plugins you have installed. We'll describe the C++ Editor tab since this
is installed by default.
</para>
<para id="aipz">
The C++ Editor tab is used to set your preferred fonts for
syntax highlighting in \qd's code editor. The base font for all elements
is set in the 'Standard' element which is the last item in the list.
If you want one font to be used throughout then set the 'Standard' font
and all the other elements will inherit its setting. 
</para>

<sect2 id="qtdesignerscodeeditor">
<title>Qt Designer's Code Editor</title>
<para id="aiqj">
The code editor is available if an Editor plugin is installed. The C++
Editor plugin is installed by default.
</para>
<para id="aiqn">
\x[Keypresses (Qt Designer's code editor)]
The code editor provides the following keystrokes:
<itemizedlist>
<listitem><para id="aiqq">Left Arrow -- Moves the cursor one character left</para></listitem>
<listitem><para id="aiqr">Right Arrow -- Moves the cursor one character right</para></listitem>
<listitem><para id="aiqs">Up Arrow -- Moves the cursor one line up</para></listitem>
<listitem><para id="aiqt">Down Arrow -- Moves the cursor one line down</para></listitem>
<listitem><para id="aiqu">Page Up -- Moves the cursor one page up</para></listitem>
<listitem><para id="aiqv">Page Down -- Moves the cursor one page down</para></listitem>
<listitem><para id="aiqw">Backspace -- Deletes the character to the left of the cursor</para></listitem>
<listitem><para id="aiqx">Home -- Moves the cursor to the beginning of the line</para></listitem>
<listitem><para id="aiqy">End -- Moves the cursor to the end of the line</para></listitem>
<listitem><para id="aiqz">Delete -- Deletes the character to the right of the cursor</para></listitem>
<listitem><para id="aira">Ctrl+A -- Moves the cursor to the beginning of the line</para></listitem>
<listitem><para id="airb">Ctrl+B -- Moves the cursor one character left</para></listitem>
<listitem><para id="airc">Ctrl+C -- Copies the selected text to the clipboard (also Ctrl+Insert under Windows)</para></listitem>
<listitem><para id="aird">Ctrl+D -- Deletes the character to the right of the cursor</para></listitem>
<listitem><para id="aire">Ctrl+E -- Moves the cursor to the end of the line</para></listitem>
<listitem><para id="airf">Ctrl+F -- Invokes the \dlg[Find Text] dialog</para></listitem>
<listitem><para id="airg">Ctrl+G -- Invokes the \dlg[Goto Line] dialog</para></listitem>
<listitem><para id="airh">Ctrl+H -- Deletes the character to the left of the cursor</para></listitem>
<listitem><para id="airi">Ctrl+I -- Indent the line or selected text that contains the cursor</para></listitem>
<listitem><para id="airj">Alt+I -- Starts incremental search (see below)</para></listitem>
<listitem><para id="airk">Ctrl+K -- Deletes from the cursor position to the end of
the line</para></listitem>
<listitem><para id="airm">Ctrl+N -- Moves the cursor one line down</para></listitem>
<listitem><para id="airn">Ctrl+P -- Moves the cursor one line up</para></listitem>
<listitem><para id="airo">Ctrl+R -- Invokes the \dlg[Replace Text] dialog</para></listitem>
<listitem><para id="airp">Ctrl+V -- Pastes the clipboard text into line edit (also Shift+Insert under Windows)</para></listitem>
<listitem><para id="airq">Ctrl+X -- Cuts the marked text, copy to clipboard (also Shift+Delete under Windows)</para></listitem>
<listitem><para id="airr">Ctrl+Y -- Redoes the last operation</para></listitem>
<listitem><para id="airs">Ctrl+Z -- Undoes the last operation</para></listitem>
<listitem><para id="airt">Ctrl+Left Arrow -- Moves the cursor one word left</para></listitem>
<listitem><para id="airu">Ctrl+Right Arrow -- Moves the cursor one word right</para></listitem>
<listitem><para id="airv">Ctrl+Up Arrow -- Moves the cursor one word up</para></listitem>
<listitem><para id="airw">Ctrl+Down Arrow -- Moves the cursor one word down</para></listitem>
<listitem><para id="airx">Ctrl+Home Arrow -- Moves the cursor to the beginning of the text</para></listitem>
<listitem><para id="airy">Ctrl+End Arrow -- Moves the cursor to the end of the text</para></listitem>
<listitem><para id="airz">Tab -- Completion (see below)</para></listitem>
</itemizedlist>
</para>
<para id="aisc">
To select (mark) text hold down the Shift key whilst pressing one of the
movement keystrokes, for example, \key[Shift+Right Arrow]
will select the character to the right, and 
\key[Shift+Ctrl+Right Arrow] will select the word to the right, etc.
</para>
<para id="aisi">
Pressing \key[Alt+I] starts incremental search. The
characters you type will appear in the Incremental Search line edit in
the Search toolbar and the cursor will be moved to the first matching
text in the editor. As you type the search will continue. Press
\key[Return] to move to the next match and press
\key[Esc] to cancel the search at the position you've
reached.
</para>
<para id="aisr">
Pressing \key[Tab] after you've typed one or more characters
invokes completion. Completion works like this:
start typing some text then press \key[Tab]. If the editor
can find another item of text that begins with the same characters it
will complete your text for you; if it finds more than one possibility
it will pop up a list of choices. You can use the arrow keys to choose a
piece of text then press \key[Return], or press
\key[Esc] to continue typing. You can switch off completion
in the \dlg[Preferences] dialog.
</para>
<para id="aitc">
When you enter
<literal>-&gt;</literal> or <literal>.</literal> the editor will pop up
a command completion list; use the arrow keys to move to the item you
want and press \key[Return], or press \key[Esc] to
ignore the list.
</para>
</sect2>

</sect1>


<sect1 id="creatingandusingtemplates">
<title>Creating and Using Templates </title>
<para id="aitq">
\x[Creating Templates]
\x[Templates|Creating and Using]
\qd supports two approaches to creating template forms. The simplest
approach involves little more than saving a \f[.ui]
file into the templates directory. The second approach involves creating
a container widget class to be used as a base class for forms that use
the template. We will explain both techniques.
</para>


<sect2 id="simpletemplates">
<title>Simple Templates </title>
<para id="aiub">
These templates are most useful when you want to create a whole set of
forms which all have some common widgets. For example, you might have a
project that will require many forms, all of which need to be branded
with a company name and logo.
</para>

<para id="aiui">
First we'll create the simple template.
<orderedlist numeration="arabic">
<listitem>
<para id="aium">
Click \menu[File|New] to invoke the \dlg[New Form] dialog.
Click the Dialog template then click \ok.
</para>
</listitem>
<listitem>
<para id="aius">
Click the \toolbutton[Text Label] toolbar button, then click
near the top left of the form. Change the font Point Size property to 16
and change the \prop[text] property to your or your company's name. Click the
\toolbutton[Line] toolbar button, then click the form below
the label; click Horizontal on the pop-up menu.
</para>
</listitem>
<listitem>
<para id="aivb">
Select the label and the line. (\key[Ctrl+Click] the form, then drag the
rubber band so that it touches or includes the line and the label.)
Press \key[Ctrl+L] to lay them out vertically.
</para>
</listitem>
<listitem>
<para id="aivi">
Click the \toolbutton[Save] toolbar button. In the \dlg[Save As]
dialog, navigate to \qd's templates directory, e.g.
(\fe[qt/tools/designer/templates].
Type in the name 'Simple_Dialog.ui' and click
\button[Save]. 
</para>
</listitem>
<listitem>
<para id="aivr">
Right click the form in the Forms list, then click Remove form from
project.
</para>
</listitem>
</orderedlist>
</para>

<para id="aivz">
Now that we have the simple template we are ready to use it. Click
\menu[File|New] to invoke the \dlg[New Form dialog]. One
of the templates that will appear is 'Simple Dialog'. Click the simple
dialog, then click \ok. A new form will appear with the same widgets and
layout as the template. Add any other widgets and functionality. When
you attempt to save the form you will be prompted for a new form name. 
</para>

</sect2>

<sect2 id="baseclasstemplates">
<title>Base-class Templates </title>
<para id="aiwm">
\x[Templates|Base Class Templates]
These templates are useful when you want to provide some default
functionality that all the forms based on the base class can inherit.
In our example we'll use a class called
\class[SizeAware] that remembers and restores its size as
the basis of a template.
We won't describe the class itself, but will focus instead on making use
of it as a \qd template. The source for the class is in
\fe[qt/tools/designer/examples/sizeaware].
</para>

<para id="aiwx">
The template can either be based on a custom widget or on any existing
container widget.
</para>
<para id="aixb">
If you want to base the template on a custom widget you must first add
it to \qd's custom widgets.
Click \menu[Tools|Custom|Edit Custom Widgets] to
invoke the \dlg[Edit Custom Widgets] dialog. (This dialog is explained in more
detail in <xref linkend="old-custom-widgets"> "Simple Custom Widgets".)
Click \button[New Widget]. Change the Class from
'MyCustomWidget' to 'SizeAware'. Click the Headerfile ellipsis button
and select the file 
\fe[qt/tools/designer/examples/sizeaware/sizeaware.h]. Check
the Container Widget checkbox. This
class provides two properties. Click the Properties tab. Click
\button[New Property] and change the property name to
'company'. Click the \button[New Property] again and change
the property name to 'settingsFile'. Click \button[Close].
</para>
<para id="aixr">
To create a template, based on an existing widget or on your own custom
widget, click \menu[File|Create Template] to invoke
the \dlg[Create Template] dialog. Change the Template Name to 'SizeAware' and
click the SizeAware base class, then click
\button[Create]. The dialog will create the template and
close itself immediately. Close \qd and restart it.
</para>

<para id="aiya">
A new template, 'SizeAware' is now available from the list of templates.
Click \menu[File|New], click SizeAware and click
\ok. Note that the two properties, company and settingsFile, are
available in the Properties window. Any forms based on this template
will remember their size and resize when reloaded. (In practical
applications having one settingsFile per form is not recommended, so
this template would only really be useful for applications that have a
single main window.)
</para>

</sect2>

</sect1>


<sect1 id="integratingqtdesignerwithothertools">
<title>Integrating Qt Designer with Visual Studio </title>
<para id="aiys">
\qd can be integrated into Visual Studio using the
\f[qmsdev.dsp] file that is supplied with Qt.
</para>
<para id="aiyw">
\x[Visual Studio]
Start up Visual Studio and click <guimenuitem>File|Open
Workspace</guimenuitem>. Open
\fe[%QTDIR%\\tools\\designer\\integration\\qmsdev\\qmsdev.dsp].
Click \menu[Build|Set Active Configuration] and in
the list click 'QMsDev - Win32 Release', then click \ok. Now click
\menu[Build|Build qmsdev.dll]. You should now copy
the file
\fe[%QTDIR%\\tools\\designer\\integration\\qmsdev\\Release\\qmsdev.dll]
into 
\fe[\\Program Files\\Microsoft Visual Studio\\Common\\MSDev98\\AddIns]. 
Now click \menu[Tools|Customize]. Click the Add-in Macro Files
tab, then click the \button[Browse] button. Change the
file type to 'Add-ins (.dll)' and navigate to 
\fe[\\Program Files\\Microsoft Visual Studio\\Common\\MSDev98\\AddIns]. 
Click the \f[qmsdev.dll] file, click
\button[Open], then click \button[Close].
</para>
<para id="aizo">
A new toolbar will appear in Visual Studio with the following toolbar
buttons:
<itemizedlist>
<listitem><para id="aizs">New Qt Project -- A small application wizard</para></listitem>
<listitem><para id="aizt">Generate Qt Project -- Runs \cmd[qmake] (or the functionally equivalent \cmd[tmake]) with a \f[.pro] file</para></listitem>
<listitem><para id="aizu">New Qt Dialog -- Add an empty Qt Dialog to the active project</para></listitem>
<listitem><para id="aizv">Qt GUI Designer -- Run \qd</para></listitem>
<listitem><para id="aizw">Use Qt -- Add the Qt libraries to the active project</para></listitem>
<listitem><para id="aizx">Add MOC -- Add the \cmd[moc] precompiler to the active file</para></listitem>
<listitem><para id="aizy">Add UIC -- Add the \cmd[uic] precompiler to the active file</para></listitem></itemizedlist>
Double clicking a \f[.ui] file in the workspace
overview will now launch \qd.
</para>
<para id="ajac">
\x[Macros|Q_OBJECT]
\x[Q_OBJECT]
If you create a \f[.cpp] file which contains the
<literal>Q_OBJECT</literal> macro you will need an additional file which
is generated by the \cmd[moc] to be included in your project. For
example, if you have 'file.cpp', then the last line would be
<literal>#include "file.moc"</literal> and the additional file would be
called 'file.moc'. To ensure that Visual Studio executes the \cmd[moc]
and generates this file you must create a custom dependency.
Double click the \f[.cpp] file (in your project
workspace) that contains the <literal>Q_OBJECT</literal> macro. Click
the \button[Add MOC] toolbar button; this will create an
empty \f[.moc] file in your project workspace. Right
click the newly created \f[.moc] file, then click
\menu[Settings] from the pop-up menu to invoke the
\dlg[Project Settings] dialog. Click the Custom Build tab. Click the
\button[Dependencies] button to pop up the User Defined
Dependencies dialog. Type in
<literal>$(InputDir)\$(InputPath)</literal>, then press
\key[Return]. Click \ok to leave the Dependencies dialog,
then click \ok to leave the Project Settings dialog.
</para>
<para id="ajax">
If you wish to delete the add-in remove it from the toolbar then delete
the \f[qmsdev.dll] file from the add-ins directory. 
</para>

<sect2 id="creatingmakefileswithoutqmake">
<title>Creating Makefiles without qmake </title>
<para id="ajbe">
\x[Makefiles]
The \cmd[qmake] tool provided with Qt can create Makefiles appropriate
to your platform based on \f[.pro] project files. This
section describes the dependencies involved in building a Qt application
and gives a couple of simple example Makefiles. This section assumes
that you have a good understanding of Makefiles.
</para>
<para id="ajbl">
\x[Macros|Q_OBJECT]
\x[Q_OBJECT]
\qd produces \f[.ui] files which are used to generate
\f[.h] and \f[.cpp] files for the
compiler to compile. The \f[.ui] files are processed by
\cmd[uic]. Classes which inherit from \class[QObject],
e.g. those which use slots and signals, require an additional
\f[.cpp] file to be generated. These files are
generated by the \cmd[moc] and are named
'<emphasis>moc_</emphasis>file.cpp' where the original
\f[.cpp] file is called 'file.cpp'. If your
\f[.cpp] file contains the <literal>Q_OBJECT</literal>
macro an additional file 'file.moc' should be generated which must be
<literal>#include</literal>d in the \f[.cpp], normally
at the end. This requires an extra
dependency being created.
</para>
<para id="ajcb">
Processing \f[.ui] files with \cmd[uic] is done
<emphasis>twice</emphasis>:
<programlisting>
uic myform.ui -o myform.h
uic myform.ui -i myform.h -o myform.cpp
</programlisting>
The first execution creates the header file, the second creates the
\f[.cpp] file. If you wish to subclass a form you can
use \cmd[uic] to generate subclass skeletons:
<programlisting>
uic formbase.ui -o formbase.h
uic formbase.ui -i formbase.h -o formbase.cpp
uic -subdecl Form formbase.h formbase.ui -o form.h
uic -subimpl Form formbase.h formbase.ui -o form.cpp
</programlisting>
First we generate the header and implementation file for our base class.
Then we generate the header and implementation skeletons for our subclass.
Note that the use of \cmd[uic] to generate skeletons is not something
that would be done in a Makefile, we mention it here because it can be
useful for command line users.
</para>
<para id="ajcx">
For implementation files that contain classes which inherit from
\class[QObject] we must create moc files:
<programlisting>
moc myform.h -o moc_myform.cpp
</programlisting>
</para>
<para id="ajde">
We'll look at a simple Makefile to see the dependencies in practice.
<programlisting>
myapp: moc_myform.o myform.o main.o
        g++ -lqt -o myapp moc_myform.o myform.o main.o

main.o: main.cpp
        g++ -o main.o main.cpp

moc_myform.o: moc_myform.cpp
        g++ -o moc_myform.o moc_myform.cpp

moc_myform.cpp: myform.h
        moc myform.h -o moc_myform.cpp

myform.o: myform.cpp
        g++ -o myform.o myform.cpp

myform.cpp: myform.h myform.ui
        uic myform.ui -i myform.h -o myform.cpp

myform.h: myform.ui
        uic myform.ui -o myform.h
</programlisting>
Note that you may need to include the full path to the commands in your
Makefile, and under Windows the filenames are \f[moc.exe] and \f[uic.exe].
</para>
<para id="ajef">
In Unix/Linux environments the \cmd[make] command may be able to
do more for us, so we should be able to use a simpler Makefile like
this:
<programlisting>
myapp: moc_myform.o myform.o main.o
        g++ -lq -o $@ $^

%.o: %.cpp
        g++ -o $^ $@

moc_%.cpp: %.h
        moc $^ -o $@

myform.cpp: myform.h myform.ui
        uic myform.ui -i myform.h -o myform.cpp

myform.h: myform.ui
        uic myform.ui -o myform.h
</programlisting>
To see more sophisticated Makefiles simply generate them using
\cmd[qmake] on any of your Qt projects or any of the examples supplied
with Qt.
</para>
</sect2>

</sect1>

<sect1 id="importingforeignfileformats">
<title>Importing Foreign File Formats </title>

<para id="ajfk">
\x[Foreign File Formats]
To import a file in a supported foreign file format click 
\menu[File|Open], then click the File Type combobox to choose the file
type you wish to load. Click the required file and \qd will convert and
load the file.
</para>

<para id="ajfr">
The filters that \qd uses to read foreign file formats are 'works in
progress'. You may have different filters available in your version of
\qd than those described here. The easiest way to see which filters are
available is to invoke the file open dialog; all your filters are listed
in the File Type combobox. 
</para>

<sect2 id="importingqtarchitectfiles">
<title>Importing Qt Architect Files </title>

<para id="ajgc">
\x[Foreign File Formats|Qt Architect]
\x[Qt Architect]
<ulink url="http://qtarch.sourceforge.net/">Qt Architect</>
is a free GUI builder for Qt written by Jeff Harris and Klaus Ebner. The
\f[.dlg] extension is associated with Qt Architect dialog files.
</para>
<para id="ajgh">
\qd can read files generated by Qt Architect version 2.1 and
above. When given a \f[.dlg] file from a previous version of Qt
Architect, \qd tells you how to convert it to the file format
of version 2.1. (The conversion procedure varies depending on the
version of the \f[.dlg] file.)
</para>
<para id="ajgo">
The import filter does a good job of importing \f[.dlg] files; the
result is almost identical to what you get in Qt Architect. However, 
the C++ code that uses the dialogs will probably need some adaptation.
</para>
<para id="ajgt">
There are a few drawbacks to converting Qt Architect files to \qd's
format due to differences between the two tools; these are listed below:
\list[*]
    \item
    <para id="ajgy">
    Layout spacing and margins
    </para>
    <para id="ajhb">
    If the \f[.dlg] file layouts use the Qt Architect defaults for
    layout spacing and margins, \qd will override these with
    its standard defaults. You can change the "layoutSpacing" and
    "layoutMargin" properties manually afterwards if necessary.
    </para>
    \Item
    \item
    <para id="ajhk">
    Layout stretches and spacings
    </para>
    <para id="ajhn">
    Qt Architect gives access to more features of Qt's layout
    system than \qd, namely stretches and spacings. Qt
    Designer will attempt to cope with \f[.dlg] files that use these
    features, but sometimes the resizing will not be what you want. 
    The solution typically involves setting the
    "sizePolicy" properties of some widgets and inserting or
    deleting spacers.
    </para>
    \Item
    \item
    <para id="ajil">
    Mixing managed and unmanaged widgets
    </para>
    <para id="ajio">
    Qt Architect allows a widget to have some child widgets managed by a
    layout and other child widgets with fixed positions. When presented
    with a \f[.dlg] file that uses this facility, \qd will silently put
    the fixed position widgets into the layout.
    </para>
    \Item
    \item
    <para id="ajiw">
    Pixmaps
    </para>
    <para id="ajiz">
    \qd ignores pixmaps specified in \f[.dlg] files. These
    have to be restored manually in \qd.
    </para>
    \Item
\List
</para>
</sect2>


<sect2 id="importinggladefiles">
<title>Importing Glade Files </title>

<para id="ajjl">
\x[Foreign File Formats|Glade]
\x[Glade]
<ulink url="http://glade.pn.org/">Glade</> is a free GUI builder for
GTK+ and GNOME written by Damon Chaplin. The \f[.glade] extension is
associated with Glade files.
</para>
<para id="ajjq">
\qd has been tested with Glade files up to version 0.6.0 and
might work with later versions as well.
</para>
<para id="ajju">
Although Glade does not target Qt, the layout system and the widget
set of GTK+ are similar to those of Qt, so the filter will retain
most of the information in the \f[.glade] file.
</para>
<para id="ajjz">
There are some considerations regarding the conversion of Glade files,
as listed below:
\list[*]
    \item
    <para id="ajke">
    Ampersands (&amp;) in labels
    </para>
    <para id="ajkh">
    Qt displays an ampersand when a \class[QLabel] has no buddy.
    (A buddy is a widget that accepts focus on behalf of a \class[QLabel].)
    Glade allows GtkLabel widgets with an (underlined)
    accelerator key but with no buddy. This is an error since
    users expect underlined characters to be accelerators. In
    this situation, Qt displays the ampersand itself instead of
    underlining the accelerator key. You should go over these \class[QLabel]
    widgets and set their "\prop[buddy]" property.
    </para>
    \Item
    \item
    <para id="ajkt">
    Layout placeholders
    </para>
    <para id="ajkw">
    GTK allows a layout position to be occupied by a placeholder. \qd
    converts those placeholders into \class[QLabel]s whose text is "?"
    in red, so that you can find them and fix them manually.
    </para>
    \Item
    \item
    <para id="ajld">
    GTK+ or GNOME widget with no Qt equivalent
    </para>
    <para id="ajlg">
    Qt has equivalents for most GTK+ widgets, but Glade also
    supports GNOME, whose goal is to provide a complete desktop
    environment. Because Qt's scope is narrower, when \qd
    encounters a widget it cannot convert, it replaces it with a
    label that indicates the problem. For example, a
    GnomePaperSelector will be replaced by a \class[QLabel] whose text is
    "GnomePaperSelector?" in red. If you are porting to KDE, you
    might want to use the corresponding KDE widget.
    </para>
    <para id="ajlq">
    Other GTK+/GNOME widgets are only supported in certain
    contexts. For example, the GnomeDruid can be embedded in
    another widget, whereas the corresponding \class[QWizard] class
    cannot.
    </para>
    \Item
    \item
    <para id="ajly">
    Message boxes and other high-level dialogs
    </para>
    <para id="ajmb">
    Glade supports editing of GnomeMessageBox, GtkFileSelection,
    GtkFontSelectionDialog and others. This is trivially achieved in
    Qt by means of a \class[QMessageBox] dialog, a \class[QFileDialog], a
    \class[QFontDialog], etc., in C++ code.
    </para>
    \Item
    \item
    <para id="ajmj">
    Stand-alone popup menus
    </para>
    <para id="ajmm">
    \qd only supports popup menus inside a \class[QMainWindow]. If you
    need a stand-alone popup menu (presumably a context menu),
    you can easily write code that does this using \class[QPopupMenu].
    </para>
    \Item
    \item
    <para id="ajmt">
    Size policy parameters
    </para>
    <para id="ajmw">
    Glade provides size policies in the "Place" tab of the property
    editor. \qd does not attempt to make use of the padding, expand,
    shrink and fill information, as the Qt defaults are usually good
    enough. In a few cases, you might have to set the "\prop[sizePolicy]"
    property manually to obtain the effect you want.
    </para>
    \Item
    \item
    <para id="ajnf">
    GNOME standard icons
    </para>
    <para id="ajni">
    GNOME provides a large set of standard icons. \qd will
    ignore references to these. If you are porting to KDE, you
    might want to manually set the standard KDE icons.
    </para>
    \Item
    \item
    <para id="ajnp">
    Packer layout
    </para>
    <para id="ajns">
    GTK+ provides a class called GtkPacker that provides for exotic
    layouts; Qt provides no \class[QPackerLayout] and never will. \qd
    will treat packer layouts as if they were vertical layouts and
    you will probably have to change them to whatever combination of
    layouts that produces the right effect.
    </para>
    \Item
    \item
    <para id="ajob">
    Incorrectly-justified text after conversion
    </para>
    <para id="ajoe">
    The "\prop[hAlign]" property is sometimes set wrongly, in which case you
    have to change it manually. It is caused by a quirk in Glade.
    </para>
    \List
</sect2>

</sect1>
</chapter>
