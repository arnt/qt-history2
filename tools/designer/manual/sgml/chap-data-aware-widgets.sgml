<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN"[
<!ENTITY qd "<emphasis>Qt Designer</>">
<!ENTITY dt "<classname>QDataTable</>">
<!ENTITY db "<classname>QDataBrowser</>">
<!ENTITY dv "<classname>QDataView</>">
<!ENTITY ok "<guibutton>OK</>">
<!ENTITY i "<literal>INSERT</>">
<!ENTITY d "<literal>DELETE</>">
<!ENTITY u "<literal>UPDATE</>">
]>

<chapter id="creating-database-applications">
<title>Creating Database Applications</>

<para>
This chapter shows you how to use Qt's data-aware widgets from within
&qd;. If you wish to run the examples or
create your own applications using these widgets you need access to
a SQL database and a Qt database driver that can connect to the
database. At the time of writing the drivers that Qt supports are QODBC
(Open Database Connectivity), QOCI (Oracle), QPSQL6 (PostgreSQL 6),
QPSQL7 (PostgreSQL 7) and QMYSQL (MySQL). 
</para>

<para>
Although you can use the Qt data-aware widgets to browse and edit data
in SQL databases without having to write any SQL, a basic understanding
of SQL is highly recommended. We assume some familiarity with
<literal>SELECT</>, &i;, &u; and &d; statements. We also assume a basic
understanding of the concepts of normalisation and of primary and
foreign keys. A standard text covering SQL databases is <citetitle
pubwork="book">An Introduction to Database Systems (7th ed.)</> by C. J.
Date, ISBN 0201385902. 
</para>

<para>
In the following text we describe the creation of the 'book'
application. The application demonstrates how to use &dt;s including
in-place record editing and setting up master-detail relationships
between &dt;s. It also explains how to drill down from a &dt; to another
widget, for example to a &db; or a &dv; and how to perform record
editing in &db;s. A great deal of functionality is available from the
classes directly in &qd; although subclassing is always available for
finer control.
<figure><title>The Book Application</title>
<graphic format="jpg" fileref="images/book-book9-bookform.jpg"></graphic>
</figure>
</para>

<sidebar><title>The Example Schema</title>
<para>
Note that the examples in this chapter all use the tables, views and
records which are defined in the
<filename>qt/tools/designer/eg/book/book.sql</> file. This file has been
tested with PostgreSQL 6. You may need to modify the SQL in this file to
recreate the example database on your own system. 
<example><title>Schema <literal>CREATE TABLE</> Statements</><programlisting>
\scan eg/book/book.sql /CREATE TABLE\s*author/ /CREATE TABLE\s*format/
</programlisting></example>
The book table is simplified for the purposes of example. It can only
relate a book to a single author (authorid) and lacks an ISBN field.
The format table is used to store 'paperpack', 'hardback', etc.
<example><title>Schema <literal>CREATE VIEW</> Statements</><programlisting>
\scan eg/book/book.sql /CREATE VIEW/ /CREATE VIEW/
</programlisting></example>
The book_view is used to present the book's format as a textual value
rather than as a raw id. The author_view has a one-to-one correspondence
with the author table and allows us to select an author on the basis of
a single field, in a combobox for example.
</para>
</sidebar>

<sect1 id="setting-up-database-connections">
<title>Setting Up Database Connections</>

    <para>
    There are two aspects of database connections that we must consider.
    Firstly the connection we wish to use within &qd; itself, and
    secondly the connection we wish to use in the applications that we
    create.
    </para>

    <sect2 id="setting-up-qt-designers-connections">
	<title>Setting Up &qd;'s Connections</>

	<para>
	<figure><title>Database Connections Dialog</title>
	<graphic format="eps" fileref="images/database-connections-dialog.eps"></graphic>
	</figure>
	Choose <guimenuitem>Edit|Database Connections</> from the menu
	bar. The Database Connections dialog will appear. Click
	<guibutton>New Connection</>. For applications that use a single
	database it will probably be most convenient to use the default
	connection name of "(default)". If you use more than one
	database give each one a unique name. A driver must be chosen
	from the Driver combo box. The database name may be available in
	the Database Name combo box or may have to be typed in. The
	database name, username, password and hostname should be
	provided by your database systems administrator. When the
	Connection information has been completed click
	<guibutton>Connect</>. If the connection is made the connection
	name will appear in the list box on the left hand side of the
	dialog. You can now close the dialog; the connection settings
	will remain in force until you change or delete them or quit &qd;. 
	</para>

	<para>
	&qd; can remember database connection settings in
	<command>qmake</> project files. Create a new project, e.g.
	click <guimenuitem>File|New Project</> and complete the Project
	Settings dialog. (See <xref linkend="using-project-files">
	"Using Project Files".) Next time you start &qd; instead of
	opening individual <literal>.ui</> files open the
	<literal>.pro</> project file instead and &qd; will
	automatically reload the project's connection settings.  To
	activate the connection click <guimenuitem>Edit|Database
	Connections</>. The connections previously saved with the
	project will be listed in the left hand list box. Click the
	connection you wish to use and then click <guibutton>Connect</>.
	This connection will be used from now on, e.g. for previewing
	&dt;s. Opening a project file also causes &qd; to load in the
	list of forms associated with the project into the Form List
	window. In most of the discussion that follows we will assume
	that you use project files and have clicked <guibutton>Connect</>
	so that there is always a connection available when you work in
	&qd;.
	</para>

    </sect2>

    <sect2 id="setting-up-connections-for-applications">
    <title>Setting Up Connections for Applications</>

	<para>
	The applications you create must make their own connections to
	the SQL database. 
<example><title>createConnections() function</><programlisting>
\scan eg/book/book1/main.cpp /bool createConnections..$/ /^}/
</programlisting></example>
	We call <function>addDatabase</> passing it the name of the
	driver we wish to use. We then set the connection information by
	calling the <literal>set...</> functions. Finally we attempt to
	open the connection. If we succeed we return TRUE, otherwise we
	output some error information and return FALSE. 
<example><title>From <filename>qt/tools/designer/eg/book/book1/main.cpp</></><programlisting>
\scan eg/book/book1/main.cpp /int main/ /^}/
</programlisting></example>
	All the examples presented in this chapter call
	<function>createConnections</> after creating the
	<classname>QApplication</> object in their <filename>main.cpp</>
	file and make use of the default connection. If you need to
	connect to multiple databases use the two-argument form of
	<function>addDatabase</>, passing it both the name of the driver
	and a unique identifier. This is explained in the <ulink
	url="http://doc.trolltech.com/sql.html">Qt SQL Module
	documentation</>.
	</para>
	
	<para>
	Note that we do not need to keep a reference to database
	connections. If you use a single database connection, this
	becomes the default connection and database functions will use
	this connection automatically. We can always get a pointer to a
	connection by calling <function>QSqlDatabase::database()</>.
	</para>

    </sect2>
</sect1>

<sect1 id="using-qdatatable">
<title>Using &dt;</>

    <para>
    &dt;s may be placed on any form and provide browsing of database
    tables and views. &dt;s can also be used to update or delete records
    in-place. Inserting records via a &dt; usually requires connecting
    to the <function>primeInsert()</> signal, so that we can generate
    primary keys for example, or provide default values. If we wish to
    present records using a form view (perhaps combining data from
    several tables and views) we would use &db;s and/or &dv;s.
    </para>

    <sect2 id="quickly-viewing-a-database-table">
    <title>Quickly Viewing a Database Table</>

	<para>
	This example, along with all the other examples in this chapter,
	has the project name 'book' and uses the database created by
	the <filename>book.sql</> script. As we work through the chapter
	we will build the 'book' application. Create or copy the
	<filename>qt/tools/designer/eg/book/book1/main.cpp</> file shown
	above. The project file for this first example is
	<filename>qt/tools/designer/eg/book/book1/book.pro</>. Start a new
	project by clicking <guimenuitem>File|New Project</>. Complete
	the dialog by entering a project name and a project file name. 
	Now click <guimenuitem>Edit|Database Connections</>. Fill in the
	connection information appropriate to your database then press
	<guibutton>Connect</>. The connection name should now appear in
	the left hand list box. (If this doesn't happen you'll need to
	contact your database systems administrator for help.) Close the
	dialog.
	</para>

	<para>
	Click <guimenuitem>File|New</>. The New Form dialog presents us
	with a number of form templates to choose from. Choose the
	'Dialog' form and click &ok;. Now click
	<guimenuitem>File|Save</>. You will be prompted for a filename,
	call it <filename>book.ui</>. 
	</para>

	<para>
	To place a &dt; widget on the form either click
	<guimenuitem>Tools|Views|QSqlTable</> or click the &dt; toolbar
	button. Click on the form and the SQL Table Wizard dialog will appear. 

	<orderedlist numeration="arabic">
	    <listitem>
		<para>
		The <emphasis>Database Connection and Table</>
		wizard page is used to set up a connection if one doesn't exist
		and to choose the table or view for the &dt;. (See <xref
		linkend="setting-up-qt-designers-connections"> "Setting
		Up &qd;'s Connections".)
		</para>

		<para>
		Click the connection you wish to use, listed in the left hand
		list box, e.g. "(default)". The tables and views will appear in
		the right hand Table list box. Click the author table and then
		click the <guibutton>Next</> button. 
		</para>
	    </listitem>

	    <listitem>
		<para>
		The <emphasis>Displayed Fields</> wizard page
		provides a means of selecting which fields should be
		displayed in the &dt; and in what order. By default all fields
		except the primary key (if there is one) are in the 
		Displayed Fields list box. The left and right blue arrow buttons
		can be used to move fields between the Displayed Fields and the
		Available Fields list boxes. The blue up and down arrow buttons
		are used to select the display order of the displayed fields. 
		</para>

		<para>
		The default settings are the ones we want so simply
		click <guibutton>Next</>.
		</para>
	    </listitem>

	    <listitem>
		<para>
		The <emphasis>Table Properties</> wizard page provides
		convenient access to some of the database-related
		properties of the &dt;. 
		</para>

		<para>
		Click the Confirm Deletes checkbox, then click
		<guibutton>Next</>. 
		</para>
	    </listitem>

	    <listitem>
		<para>
		The <emphasis>SQL</> wizard page is used to set
		the &dt;'s Filter and Sort properties. The Filter is an SQL
		<literal>WHERE</> clause (without the word 'WHERE'). For
		example, to only list authors whose surnames begin with 'P', we
		would enter <literal>title LIKE 'P%'</>. The Available Fields
		list box lists all the fields. The Sort By list box lists the
		fields that the &dt; is to sort by and the direction of their
		sorting (ASCending or DESCending). The left and right blue
		arrows are used to move fields between the two list boxes. The
		up and down blue arrows move fields up and down within the Sort
		By list box. The ASC or DESC setting is changed with the sort
		order button.
		</para>

		<para>
		Move the surname and forename fields into the Sort By
		list box and click <guibutton>Next</>.
		</para>

	    <listitem>
		<para>
		The <emphasis>Finish</> wizard page is gives us the
		opportunity to go back and change any of our settings.
		We will be able to change them later through the &dt;'s
		properties so we can finish with the wizard.
		</para>

		<para>
		Click <guibutton>Finish</>. 
		</para>
	    </listitem>

	</orderedlist>
	</para>

	<para>
	The table will appear on the form with each column labelled with
	a default column name. If you wish to change the settings
	most of them are available in the property window. The display
	names, the fields they are based upon, and the order of
	appearance of the columns can be changed using the Edit Table
	dialog (explained later) by right clicking the &dt; and left
	clicking Edit.
	</para>

	<para>
	Click on the form and click the <guibutton>Lay out Vertically</>
	toolbar button. Now click <guimenuitem>Preview|Preview Form</>;
	the form will run and the table will automatically display all
	the records.
	</para>

	<para>
	To turn the form we've created into a runnable application we
	must add the <filename>main.cpp</> file to the project file and
	make the project. We should also do some renaming to make things
	easier to understand.
	
	<orderedlist numeration="arabic">
	    <listitem>
		<para>
		Click on the form and change its name to 'BookForm' and
		its caption to 'Book'. Click on the &dt; and change its
		name to 'AuthorDataTable'.
		</para>
	    </listitem>

	    <listitem>
		<para>
		Click <guimenuitem>File|Save All</>. 
		</para>
	    </listitem>

	    <listitem>
		<para>
		Open the project file, e.g. <filename>book.pro</> in a
		plain text editor and add the line: 
		<literal>SOURCES = main.cpp</>. 
		</para>
	    </listitem>

	    <listitem>
		<para>
		Run <command>qmake</> to generate the make file,
		e.g. <literal>qmake -o Makefile book.pro</>, then make
		and run the <command>book</> program.
		</para>
	    </listitem>

	</orderedlist>
	</para>

	<para>
	This example shows how easy it is to use &dt; to show
	the contents of a database table or view. You can use the
	application we've just built to update and delete author
	records. In the versions that follow we will cover insertions,
	setting up master-detail relationships, drilldown and foreign
	key lookups.
	</para>

	<sidebar><title>A Note on Foreign Keys</title>
	<para>
	In most relational databases tables contain fields which are
	foreign keys into other tables. In our book database example the
	formatid in the book table is a foreign key into the format
	table, and the authorid in the book table is a foreign key into
	the author table. When we present a form to the end user we do
	not usually want the foreign key itself to be visible but rather
	the text associated with it. Thus, we would want the format name
	to appear rather than the format id when we show the book table.
	Whilst this can be achieved programmatically, e.g. using
	calculated fields, it is far easier to create a view that
	encompases the fields we wish to make visible to the user. A
	view also places the burden of work on the database rather than
	the client application. In the examples we have created the
	book_view view to demonstrate this approach.
	</para>
	</sidebar>

    </sect2>

    <sect2 id="inserting-records-in-qdatatables">
    <title>Inserting Records in &dt;s</>

	<para>
	Record insertion into a relational database usually requires
	the generation of a unique primary key. Also we often want to
	create default values for some fields to minimise the user's
	work. We will create a slot to capture the &dt;s
	<function>primeInsert</> signal and populate the
	<classname>QSqlRecord</> insertion buffer with a unique primary
	key.

	<orderedlist numeration="arabic">
	    <listitem>
		<para>
		Click <guimenuitem>Edit|Slots</> to invoke the Edit
		Slots dialog. Click <guimenuitem>New Slot</>, then enter
		the slot name <literal>primeInsertAuthor(QSqlRecord*)</>
		into the Slot Properties' Slot line edit box. Click
		&ok;.
		</para>
	    </listitem>

	    <listitem>
		<para> 
		Click the <guibutton>Connect Signal/Slots</>
		toolbar button, then click the AuthorDataTable, drag to
		the form and release the mouse. The Edit Connections
		dialog will now appear. Click the primeInsert signal and
		then the primeInsertAuthor slot to make the connection.
		Now click &ok;.
		</para>
	    </listitem>

	    <listitem>
		<para>
		Click the Source tab of the Object Hierarchy window
		(click <guimenuitem>Window|Object Hierarchy</> to make
		the window visible if necessary). Click the
		primeInsertAuthor slot and an editor window will
		appear.
		</para>
	    </listitem>

	    <listitem>
		<para>
		We must change the BookForm::primeInsertAuthor slot to
		specify the parameter name and perform the necessary
		action:
<programlisting>
\scan eg/book/book2/book.cpp /BookForm::primeInsertAuthor/ /^}/
</programlisting>
		(Note that not all databases support the nextval
		function so you may need to read your database engine's
		documentation to see how to generate unique keys in
		code.) 
		</para>
	    </listitem>

	</orderedlist>
	</para>

	<para>
	If we rebuild the application it will now support &i; as well as
	&u; and &d;. We could easily have added additional code to
	insert default values, e.g. today's date into a date field, if
	necessary.
	</para>

	<para>
	We can now browse, &i;, &u; and
	&d; records in the author table. Browsing is
	supported by clicking records and by using the arrow keys. Once
	a record is active (highlighted) we can edit the database. Press
	the <keycap>Insert</> key to &i; a new record;
	press <keycap>F2</> to &u; the current record;
	press the <keycap>Delete</> key to &d; the
	current record. All these operations take place live and
	immediately. Users can be given the opportunity to confirm
	their edits by setting the &dt;'s confirmEdits property to True.
	If the confirmEdits property is True user confirmation will
	be required for all insertions, updates and deletes. For finer
	control you can set the confirmInsert, confirmUpdate and
	confirmDelete properties individually.
	</para>

    </sect2>

    <sect2 id="relating-two-tables-together">
    <title>Relating Two Tables Together (Master-Detail)</>

	<para>
	Databases often have pairs of tables that are related. For
	example an invoice table might list the numbers, dates and
	customers for invoices, but not the actual invoice items which
	the invoiceitem table might store. In the book application we 
	wish to have a &dt; that we can use to browse
	through the authors and a second &dt; to show
	the books they've written. 
	</para>

	<para>
	Open the book project if it isn't already in &qd;. We will
	modify this project to show two &dt;s that
	relate the author table to the book_view view. 

	<orderedlist numeration="arabic">
	    <listitem>
		<para>
		Click the author &dt; and then click the
		<guibutton>Break Layout</> toolbutton.
		</para>
	    </listitem>

	    <listitem>
		<para>
		Drag the bottom of the &dt; up so that it only occupies
		the top half of the form.
		</para>
	    </listitem>

	    <listitem>
		<para>
		Now click on the &dt; toolbutton and click on the bottom
		half of the form. The SQL Table Wizard will appear.
		(This Wizard is explained in <xref
		linkend="quickly-viewing-a-database-table"> "Quickly
		Viewing a Database Table".) 
		<orderedlist numeration="arabic" inheritnum="inherit">
		    <listitem>
			<para>
			Click the connection you're using and click the
			book_view view. Click the <guibutton>Next</> button.
			</para>
		    </listitem>

		    <listitem>
			<para>
			Move the authorid and id fields from the
			Displayed Fields listbox to the Available Fields
			list box. Move the title field to the top of the
			Displayed Fields, and move the price field above
			the format field.
			Click the <guibutton>Next</> button.
			</para>
		    </listitem>

		    <listitem>
			<para>
			On the Table Properties page click the Read Only
			checkbox then click the <guibutton>Next</>
			button.
			</para>
		    </listitem>

		    <listitem>
			<para>
			On the SQL page we will leave the Filter
			(<literal>WHERE</> clause) empty. Move the
			title field to the Sort By list box and click
			<guibutton>Next</>. Now click <guibutton>Finish</>.
			</para>
		    </listitem>

		    <listitem>
			<para>
			Change this &dt;'s name to "BookDataTable".
			</para>
		    </listitem>
		</orderedlist>
		</para>
	    </listitem>

	    <listitem>
		<para>
		Shift+Click the top &dt; so that both &dt;s
		are selected and then click the <guibutton>Lay out Vertically
		(in Splitter)</> toolbar button. 
		</para>
	    </listitem>

	    <listitem>
		<para>
		Click on the form and click the <guibutton>Lay
		out Vertically</> toolbar button. 
		</para>
	    </listitem>

	</orderedlist>
	</para>

	<para>
	Run the form by clicking <guimenuitem>Preview|Preview Form</>.
	All the authors are displayed in the top &dt;
	and all the book are displayed in the bottom
	&dt;. Unfortunately we only want the book of the currently
	selected author showing in the bottom &dt;. We will deal with
	this by filtering the records in the book_view according to the
	author in the author table.
	</para>

	<sidebar><title>Using the Table Editor</>
	<para>
	<figure><title>Edit Table Dialog</title>
	<graphic format="jpg" fileref="images/edit-table-dialog.jpg"></graphic>
	</figure>
	&dt;s are created and set up using the SQL Table Wizard. Like
	any other &qd; widget their properties may be changed in the
	Properties window. Some of the column and row based properties
	can also be be changed using the Edit Table dialog. This
	dialog is invoked by right clicking the &dt; and left
	clicking the <guimenuitem>Edit</> menu item. The right hand half
	of the Edit Table dialog is where we choose the fields we wish
	to display, their order and their labels. The procedure for
	creating columns is as follows:

	<orderedlist numeration="arabic">
	    <listitem>
		<para>
		Click the <guibutton>New Column</> button
		</para>
	    </listitem> 

	    <listitem>
		<para>
		Click the triangle at the right hand side of the
		Field combobox to drop down the list of available
		fields
		</para>
	    </listitem>

	    <listitem>
		<para>
		Click the field you wish to include at this point
		</para>
	    </listitem>

	    <listitem>
	    <para>
		<emphasis>Optionally</> edit the Label if the default
		isn't appropriate 
	    </para>
	    </listitem>

	    <listitem>
	    <para>
	    <emphasis>Optionally</> click the Pixmap <guibutton>...</>
	    button to choose a pixmap to be displayed to the left of the
	    column's label
	    </para>
	    </listitem>
	</orderedlist>

	Repeat the steps listed above for each column you wish to add.
	Once all the fields have been added you can change their
	ordering by using the blue up and down arrow buttons. At any
	point you can press <guibutton>Apply</> to see how the table
	will look. Finally click the &ok; button to save the
	properties you have set. You can always return to the table
	editor to change these settings later.
	</para>
	</sidebar>

	<para>
	To filter the book_view's records we need to capture the author
	&dt;'s <function>currentChanged()</> signal and change the
	BookDataTable's filter accordingly.

	<orderedlist numeration="arabic">
	    <listitem>
		<para>
		Click <guimenuitem>Edit|Slots</>. In the Edit Slots
		dialog click <guimenuitem>New Slot</> and enter a slot
		name of <literal>newCurrentAuthor(const QSqlRecord*)</>.
		Click &ok;.
		</para>
	    </listitem> 

	    <listitem>
		<para>
		Click <guimenuitem>Connect Signal/Slots</>, then click
		the AuthorDataTable and drag to the form; release the
		mouse on the form. The Edit Connections dialog will
		appear. Click the <function>currentChanged</> signal
		and the <function>newCurrentAuthor</> slot. Click &ok;.
		</para>
	    </listitem>

	    <listitem>
		<para>
		Click the Source tab of the Object Hierarchy window
		(click <guimenuitem>Window|Object Hierarchy</> to make
		the window visible if necessary). Click the
		newCurrentAuthor slot and an editor window will
		appear.
		</para>
	    </listitem>

	    <listitem>
	    <para>
		We must change the BookForm::newCurrentAuthor slot to
		specify the parameter name and perform the necessary
		action:
<programlisting>
\scan eg/book/book3/book.cpp /BookForm::newCurrentAuthor/ /^}/
</programlisting>
	    </para>
	    </listitem>
	</orderedlist>
	</para>

	<para>
	We can now browse authors and see their books in the
	BookDataTable. Unfortunately we cannot edit the books themselves
	because the BookDataTable is based on a view and our database
	might not support editable views. In the next section we will
	address this issue by drilling down to a dialog through which we
	can edit books. For now we will add some buttons to the main
	BookForm which we will use to invoke the book editing dialog.

	<orderedlist numeration="arabic">
	    <listitem>
		<para>
		Click the form, then click the <guibutton>Break
		Layout</> toolbar button. Drag the bottom of the form
		down to make room for some buttons.
		</para>
	    </listitem> 

	    <listitem>
		<para>
		Add four buttons to the bottom of the form. Change
		their names and labels to the following:

		<itemizedlist>
		    <listitem><para>UpdatePushButton -- &amp;Update Book</para>
		    </listitem>
		    <listitem><para>InsertPushButton -- &amp;Insert Book</para>
		    </listitem>
		    <listitem><para>DeletePushButton -- &amp;Delete Book</para>
		    </listitem>
		    <listitem><para>QuitPushButton -- &amp;Quit</para>
		    </listitem>
		</itemizedlist>

		We will only provide the Quit button with functionality
		for the time being.
		</para>
	    </listitem>

	    <listitem>
		<para>

		</para>
	    </listitem>

	    <listitem>
	    <para>
	    </para>
	    </listitem>
	</orderedlist>
	</para>

    </sect2>

</sect1>

<sect1 id="using-qdatabrowser-and-qdataview">
<title>Using &db;and &dv;</>
 
    <sect2 id="">
    <title>Drilling Down to a Form with &qd;</>

    <para>

    </para>

	<sect3 id="editing-view-records">
	    <title>Editing View Records</>

	<para>
	Since we cannot edit views in-place we will need to create a
	pop-up dialog which contains the details of the book the user
	wishes to edit. To achieve this we need to make the book_view
	read only, set up some buttons which the user can press to
	invoke the dialog and finally create the dialog itself. 
	</para>

	<para>
	<orderedlist numeration="arabic">

	    <listitem>
		<para>
		Click on the book_view &dt;; click on the readOnly property and
		set it to True.
		</para>
	    </listitem>

	    <listitem>
		<para>
		Right click on the form and click the <guimenuitem>Break
		Layout</> menu item from the pop up menu. Make some space below
		the book view &dt; e.g. by dragging the bottom of the form down.
		Insert a button at the bottom of the form: click the
		<guibutton>PushButton</> toolbar button then click the bottom of
		the form. Now insert two more buttons to the right of the first
		one. Shift+Click the buttons then click the <guibutton>Lay Out
		Horizontally</> toolbar button. Click the form and then click
		the <guibutton>Lay Out Vertically</> toolbar button.
		</para>
	    </listitem>

	    <listitem>
		<para>
		Click the first (left-most) button and change its name to
		"InsertBookPushButton" and its text to "&amp;Insert Book". Click
		the second (middle) button and change its name to
		"UpdateBookPushButton" and its text to "&amp;Update Book". Click
		the third (right-most) button and change its name to
		"DeleteBookPushButton" and its text to "&amp;Delete Book".
		</para>
	    </listitem>

	    <listitem>
		<para>
		Click <guimenuitem>Edit|Slots</> to invoke the Edit Slots
		dialog. Click the <guibutton>New Slot</> button and replace the
		default slot name with <literal>insertBook()</>. Click the
		<guibutton>New Slot</> button again and replace the default slot
		with <literal>updateBook()</>. Create one more slot called
		<literal>deleteBook()</>. Click &ok; to save the
		new slots. 
		</para>
	    </listitem>

	    <listitem>
		<para>
		Click the <guibutton>Connect Signal/Slots</> toolbar button
		then click the Insert Book <classname>QPushButton</> and drag to
		the form; release the mouse over the form. The Edit Connections
		dialog will appear showing Signals for the InsertBookPushButton
		and Slots for BookFormBase. Click the clicked() signal and the
		insertBook() slot. Click &ok;. In the same way
		connect the Update Book <classname>QPushButton</>'s clicked()
		signal to the updateBook() slot and connect the Delete Book
		<classname>QPushButton</>'s clicked() signal to the
		deleteBook() slot.
		</para>
	    </listitem>
	
	</orderedlist>
	</para>
	
	<para>
	The buttons will invoke a &dv; through which
	the user will be able to &i;, &u; or &d; records in the book
	table. To make the slots available in our subclass we need a few
	additions to our code.
<example><title>BookForm from <filename>qt/tools/designer/eg/book/book5/bookform.h</></><programlisting>
\scan eg/book/book5/bookform.h /class BookForm/ /^};/
</programlisting></example>
	Our BookForm class now contains declarations for the slots we
	created; we need to do this because we will be reimplementing
	them. For now we will just put stub functions in the
	implementation file:
<example><title>BookForm from <filename>qt/tools/designer/eg/book/book5/bookform.cpp</></><programlisting>
\scan eg/book/book5/bookform.cpp /void BookForm::insert/ 0 
\scan /void BookForm::update/ 0
\scan /void BookForm::delete/ 0
</programlisting></example>
	We will put the appropriate code into these stubs once we have
	created the pop-up dialog which the user will use to edit the
	book table: this is covered in <xref
	linkend="subclassing-the-qsqldialog-form"> "Subclassing the &dv;
	Form". 
	</para>

	</sect3>

    </sect2>

</sect1>

<sect1 id="using-qdatabrowser-to-create-data-aware-forms">
<title>Using &dv; to Create Data-Aware Forms</title>

<para>
The &dv; class provides an easy way of generating data aware forms. In
this section we will explain how to create a simple &dv; that provides
browsing and editing of the book table. We will then specialise the
dialog and integrate it with the book_view &dt;.
<figure><title>?</title>
<graphic format="jpg" fileref="images/book-dialog.jpg"></graphic>
</figure>
</para>

    <sect2 id="browsing-a-table-through-a-qsqldialog-form">
    <title>Browsing a Table through a &dv; Form</>
    <!-- Do a form over the book table with navigation: book6 -->

    <para>
    Click <guimenuitem>File|New</> to invoke the New Form dialog. Click the
    SQL Dialog template and then click &ok; to invoke the SQL Form Wizard.
    </para>

    <para>
	<orderedlist numeration="arabic">
	    <listitem>
		<para>
		The <emphasis>Database Connection and Table</>
		wizard page is used to set up a connection if one doesn't exist
		and to choose the table or view for the &dt;. (See <xref
		linkend="setting-up-qt-designers-connections"> "Setting
		Up &qd;'s Connections".)
		</para>

		<para>
		Click the connection you wish to use, listed in the left hand
		list box, e.g. "(default)". The tables and views will appear in
		the right hand Table list box. Click the book table and then
		click the <guibutton>Next</> button. 
		</para>
	    </listitem>

	    <listitem>
		<para>
		The <emphasis>Displayed Fields</> wizard page
		wizard provides a means of selecting which fields should be
		displayed in the &dt; and in what order. By default all fields
		except the primary key (if there is one) are in the right hand
		Displayed Fields list box. The left and right blue arrow buttons
		can be used to move fields between the Displayed Fields and the
		Available Fields list boxes. The blue up and down arrow buttons
		are used to select the display order of the displayed fields. 
		</para>

		<para>
		Move the formatid and authorid fields to the Available
		Fields list box. Move the title field to the top of the
		Displayed Fields list box. Click <guibutton>Next</>.
		</para>
	    </listitem>

	    <listitem>
		<para>
		The <emphasis>Navigation and Editing</> wizard page allows
		us to choose which navigation and editing buttons should
		appear on the form.
		</para>
		
		<para>
		We will accept the defaults and simply click the
		<guibutton>Next</> button. 
		</para>
	    </listitem>

	    <listitem>
		<para>
		The <emphasis>SQL</> wizard page is used to set
		the &dt;'s Filter and Sort properties. The Filter is an SQL
		<literal>WHERE</> clause (without the word 'WHERE'). For
		example, to only list book that cost less than 50 (of our
		currency, e.g. dollars), we 
		would enter <literal>price < 50</>. The Available Fields
		list box lists all the fields. The Sort By list box lists the
		fields that the &dt; is to sort by and the direction of their
		sorting (ASCending or DESCending). The left and right blue
		arrows are used to move fields between the two list boxes. The
		up and down blue arrows move fields up and down within the Sort
		By list box. The ASC or DESC setting is changed with the sort
		order button.
		</para>

		<para>
		Move the title field into the Sort By list box and click
		<guibutton>Finish</>.
		</para>
	    </listitem>
	</orderedlist>
    </para>

    <para>
    Click <guimenuitem>File|Save</> and call the form
    <filename>editbook.ui</>. For ease of reference we will rename the form:
    click the form and change its name to "EditBookFormBase" and its caption
    to "Edit Book". If you click the <classname>QLineEdit</> box to the
    right of the price field you will see that its name has been set
    automatically to "QLineEditPrice". Run the form in preview mode (press
    Ctrl+T) and navigate through the book records.
    </para>

    <important>
    <para>
    Note: Whenever we create a new file for a project we must add it
    to the <literal>.pro</> project file and run <command>qmake</> on
    the project file so that the new form is included in the build, e.g.
    <literal>qmake -o Makefile book.pro</>.

    </para>
    </important>

    <para>
    To make our &dv; available to the user we must update our code slightly: 
<example><title>insertBook from <filename>qt/tools/designer/eg/book/book6/bookform.cpp</></><programlisting>
\scan eg/book/book6/bookform.cpp /void BookForm::insertBook/ /^}/
</programlisting></example>
    We put the same code into <literal>deleteBook</> and
    <literal>updateBook</>. The effect of this is that whichever button
    the user presses on the main form the same Edit Book dialog will appear.
    In the following sections we will specialise the dialog to remove its
    buttons and change its behaviour so that it only provides &i; if the user
    clicked the main form's Insert Book button, only provides &u; if the
    user clicked the Update Book button and similarly for the Delete Book
    button. We will also improve the appearance of the form and subclass
    it to provide &i;. We will deal with the foreign key fields in <xref
    linkend="using-foreign-keys-in-a-qsqldialog-form"> "Using Foreign Keys
    in a &dv; Form".
    </para>

	<sect3 id="subclassing-the-qsqldialog-form">
	<title>Subclassing the &dv; Form</>

	    <sect4 id="subclassing-to-perform-the-correct-action">
	    <title>Subclassing to Perform the Correct Action</>

		<para>
		We need to subclass EditBookFormBase so that we can
		pass it a parameter identifying which action it is to
		perform, i.e. &i;, &u; or &d;.
		</para>

		<para>
		We begin by creating a new header file for our inherited
		dialog class.
<example><title><filename>qt/tools/designer/eg/book/book7/editbookform.h</></><programlisting>
\scan eg/book/book7/editbookform.h /^#include/ /^};/
</programlisting></example>
		We include the headers generated from the
		<literal>.ui</> file, <filename>book.h</> and
		<filename>editbook.h</>. We add a new parameter to the
		constructor, action, which we'll used to identify which
		action should be  performed by the dialog. And we create
		an enum to give meaningful names to our actions.
		</para>

		<para>
<example><title><filename>qt/tools/designer/eg/book/book7/editbookform.cpp</></><programlisting>
\scan eg/book/book7/editbookform.cpp /^#include/ /^$/ 
\scan /^EditBookForm/ /break/
	// ...
</programlisting></example>
		We implement our constructor in
		<filename>editbookform.cpp</>. At this stage all we do
		is change the caption of the form to indicate the action
		to be performed. Later we will build in the appropriate
		functionality.
		</para>

		<para>
		Our BookForm subclass should now use our EditBookForm
		subclass.
<example><title>From <filename>qt/tools/designer/eg/book/book7/bookform.cpp</></><programlisting>
\scan eg/book/book7/bookform.cpp /void BookForm::insertBook/ /^}/
</programlisting></example>
		Apart from changing the class name all we need do is
		pass in the appropriate enum. We also pass the
		<emphasis>this</> pointer so that the parent class
		(BookForm) will take care of memory cleanup. We make the
		equivalent changes to updateBook and deleteBook.
		</para>

		<para>
		The final change is to the project file. We need to add
		<filename>editbookform.h</> to the <literal>HEADERS</>
		list and <filename>editbookform.cpp</> to the
		<literal>SOURCES</> list. We must of course regenerate
		the Makefile, e.g. <literal>qmake -o Makefile
		book.pro</>. If we run the book application at this
		point and press one of its buttons the BookForm dialog
		will pop up as before only this time the caption will
		reflect the button we pressed.
		</para>

	    </sect4>

	    <sect4 id="update-and-delete-in-forms">
	    <title>&u; and &d; in Forms</>

		<para>
		The EditBookForm already provides the capability to
		update and delete records. But we can only update
		the book title and price since we do not have
		access to the foreign keys, formatid and authorid,
		because we didn't include them when we used the SQL Form
		Wizard. We could add them now but that would leave us
		with numerical fields rather than the foreign key
		lookups we want, so we will leave this issue for the
		time being and come back to it in <xref
		linkend="using-foreign-keys-in-a-qsqldialog-form">
		"Using Foreign Keys in a &dv; Form". And there's an
		additional issue: we haven't told the dialog
		<emphasis>which</> book is to be edited. First we will focus
		on cleaning up the design of the form and then we'll
		pass in the current book to the dialog and add the
		ability to perform inserts. Start up &qd; and load in
		the book project. Click on the EditBookFormBase form in
		the Form List. (Click <guimenuitem>Window|Form List</>
		to get the list to appear.) 
		<orderedlist numeration="arabic">
		    <listitem>
			<para>
			Shift+Click the navigation buttons, First, Prev,
			Next and Last and press the Delete key.
			</para>
		    </listitem>

		    <listitem>
			<para>
			Shift+Click the Insert, Update and Delete
			buttons and drag them to the bottom of the form.
			Click the <guibutton>Lay Out Horizontally</>
			toolbar button.
			</para>
		    </listitem>

		    <listitem>
			<para>
			Shift+Click the Title label and the Price label
			and their QLineEdit boxes then click the
			<guibutton>Lay Out in a Grid</> toolbar button.
			</para>
		    </listitem>

		    <listitem>
			<para>
			Drag the buttons below the title and price and
			drag the bottom of the form up to make it
			smaller. Click the form itself and click the
			<guibutton>Lay Out Vertically</> toolbar button. 
			</para>
		    </listitem>
		</orderedlist>
		</para>

		<para>
		We now need to update our code so that only the
		appropriate button is enabled. Save the form in &qd; and
		edit the <filename>editbookform.cpp</> file. 
		We need the id of the current book from the
		EditBookForm constructor, so we need to update its
		signature and ensure that it uses the book id we've
		passed in.
<example><title>From <filename>qt/tools/designer/eg/book/book8/editbookform.cpp</></><programlisting>
\scan eg/book/book8/editbookform.cpp /^EditBookForm::EditBookForm/ /setFilter/
    // ...
</programlisting></example>
		The <function>setFilter()</> call is crucial; it ensures
		that the form shows the current book from the book_view.
		</para>

		<para>
		We also change the calls to the dialog to include the
		current book's id and to update the &dt; of book after
		the dialog has executed to reflect any changes the user
		made.
<example><title>From <filename>qt/tools/designer/eg/book/book8/bookform.cpp</></><programlisting>
\scan eg/book/book8/bookform.cpp /^void BookForm::update/ /^}/
</programlisting></example>
		In the full source code for the example we have also
		disabled the irrelevant buttons.
		</para>

	    </sect4>

	    <sect4 id="subclassing-to-provide-insert">
	    <title>Subclassing to Provide &i;</>
	    <!-- SUBCLASS THE CURSOR IF WE HAVEN'T ALREADY -->
	    <!-- book9 -->

		<para>
		Z
		</para>

	    </sect4>

	</sect3>

    </sect2>

    <sect2 id="using-foreign-keys-in-a-qsqldialog-form">
    <title>Using Foreign Keys in a &dv; Form</>
    <!-- book10 the last one! -->

    <para>
    intro - custom controls
    </para>

	<sect3 id="creating-custom-widgets">
	<title>Creating Custom Widgets</>
	<!-- AuthorComboBox and FormatComboBox -->

	<para>
	</para>

	</sect3>

	<sect3 id="subclassing-the-custom-widgets">
	<title>Subclassing the Custom Widgets</>
	<!-- AuthorComboBox and FormatComboBox book10 -->

	<para>
	</para>

	</sect3>


    </sect2>

<note><para>@@@@@ TODO QSqlWidget @@@@@</para></note>


</chapter>
