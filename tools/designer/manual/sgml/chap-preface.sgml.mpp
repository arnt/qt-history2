<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
<chapter>
<title>Preface</title>

<sect1>
    <title>Introduction</title>
    \p
    This manual presents \qd, a tool for designing and implementing user
    interfaces built with the Qt cross-platform application development
    framework. \qd makes it easy to
    experiment with user interface design. At any time you can generate the
    code required to reproduce the user interface from the files \qd produces,
    changing your design as often as you like. If you used the previous
    version you will find yourself immediately productive in the new version
    since the interface is fundamentally unchanged. But you will find new
    widgets and new and improved functionality which have been developed as a
    result of your feedback.
    \P
    
    \p
    \qd helps you build user interfaces with layout tools that move and
    scale your widgets (\i[controls] in Windows terminology) automatically at
    runtime. The resulting interfaces are both functional and attractive,
    comfortably suiting your users operating environments and preferences. \qd
    supports Qt's signals and slots mechanism for type-safe communication
    between widgets. \qd includes a code editor which you can use to embed
    your own custom slots inside the generated code. Those who prefer to
    separate generated code from hand crafted code can continue to use the
    subclassing approach pioneered in the first version of \qd.
    \P

    \p
    This manual has been almost completely rewritten to provide more and
    better examples and to explain the new features and functionality that \qd
    now provides. The manual is divided into two parts. The chapters in the
    first part introduce you to \qd by leading you through the development of
    example applications that demonstrate \qd's facilities. The second part is
    a comprehensive reference. Here's a brief overview of the chapters:
    <itemizedlist> 
    <listitem> 
    \p
    The first chapter will introduce you to \qd and will begin to take
    you step-by-step through the creation of a simple application. Along
    the way you will learn how to create a form and add widgets to it.
    In the course of the chapter you will use the form and property
    editors to customize the application, and learn how to lay out a form
    using the layout tools. In the second chapter we will develop the
    example further. We will use Qt's signals and slots mechanism and
    \qd's built-in code editor to create and implement our own custom
    slots. We will also explain how to use \cmd[qmake] to generate a
    Makefile so that you can compile and run your applications.
    \P
    </listitem>

    <listitem> 
    \p
    Chapter three will show you how to subclass a form; this allows you
    to clearly separate the user interface from the underlying code that
    implements its functionality. This chapter will also explain how you
    can create dialogs dynamically directly from
    <filename>.ui</filename> files using
    <classname>QWidgetFactory</classname>, and how to access
    sub-widgets.
    \P
    </listitem>

    <listitem> 
    <para>
    Chapter four demonstrates how to create an application's main
    window, including toolbars and menus. Chapter five introduces some
    of Qt's more advanced widgets.
    </para>
    </listitem>

    <listitem> 
    <para>
    Chapter six explains how you can create your own custom widgets.
    Both the simple method, that was introduced with the first version of
    \qd, and the new more powerful method using plugins, are explained.
    </para>
    </listitem>

    <listitem>
    <para>
    Chapter seven introduces Qt's SQL classes and takes you through an
    example that demonstrates how to execute SQL queries and how to set
    up master-detail relationships, perform drilldown and handle foreign
    keys.
    </para>
    </listitem>

    <listitem>
    <para>
    Chapter eight focuses on \qd itself, showing you how to customize
    Designer, how to integrate Designer with IDEs and how to create
    Makefiles if you don't wish to use \cmd[qmake]. 
    </para>
    </listitem>

    <listitem>
    <para>
    Chapter's nine to eleven contain the reference material describing
    \qd's menus, toolbars, dialogs and key bindings.
    </para>
    </listitem>

    </itemizedlist>
</sect1>

<sect1>
<title>What You Should Know</title>

    \p
    The manual assumes that you have some basic knowledge of C++ and the Qt
    application development framework. If you need to learn more about C++ or Qt there are a vast number
    of C++ books on the market, and a small but increasing number of Qt books.
    Qt comes with extensive online documentation and many example
    applications that you can try. For <xref
    linkend="creating-database-applications"> "Creating Database
    Applications" some knowledge of SQL and relational databases is
    required as specified at the beginning of that chapter.
    \P

</sect1>


<sect1 id="whatsnewindesigner">
<title>What's new in Designer?</title>
<para> 
This version of \qd has a great deal more functionality than its
predecessor. The code for custom slots can be edited directly in
Designer; main windows with actions, toolbars and menus can be created;
layouts that incorporate splitters can be used; plugins allow you to
package any number of custom widgets and make them available to
Designer; dialogs can be created dynamically from
<filename>.ui</filename> files. \qd incorporates many other enhancements
from small improvements to the user interface to improved efficiency,
for example the ability to share pixmaps across all the forms in an
application.
<figure><title>Qt Designer</title>
\img[designer]
</figure>
</para>
</sect1>

<sect1>
<title>Feedback</title>

    \p
    If you have comments, suggestions, criticisms or even praise
    regarding this manual, please let us know, at \c[doc@trolltech.com].
    Bug reports on Qt or \qd should be sent to
    \c[qt-bugs@trolltech.com]. You might also like to join the
    \i[qt-interest] mailing list, which Designer's developers read and
    contribute to; see the website for further details.
    \P
    
    \p
    Commercial Qt licensees can report bugs or request support through the
    channels assigned to you when you bought your licence. 
    \P

</sect1>

</chapter>
