<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN">

<chapter id="creating-database-applications">
<title>Creating Database Applications</>

<para>
This chapter shows you how to use Qt's data-aware widgets from within
\qd. It demonstrates \ins, \upd and \del in both \class[QDataTable]s
(tables) and \class[QDataBrowser]s (forms). It also shows how to code
Master-Detail relationships and Drilldown. A simple approach to Foreign
key handling is presented, and a more sophisticated approach is
given in the SQL module documentation.
</para>

<para>
If you wish to run the examples or create your own applications using
these widgets you need access to an SQL database and a Qt database driver
that can connect to the database. At the time of writing the drivers
that Qt supports are QODBC (Open Database Connectivity), QOCI (Oracle),
QPSQL6 (PostgreSQL 6), QPSQL7 (PostgreSQL 7) and QMYSQL (MySQL). 
</para>

<para>
Although you can use the Qt data-aware widgets to browse and edit data
in SQL databases without having to write any SQL, a basic understanding
of SQL is highly recommended. We assume some familiarity with
<literal>SELECT</>, \ins, \upd and \del statements. We also assume a basic
understanding of the concepts of normalisation and of primary and
foreign keys. A standard text covering SQL databases is <citetitle
pubwork="book">An Introduction to Database Systems (7th ed.)</> by C. J.
Date, ISBN 0201385902. 
</para>

<para>
In the following text we describe the creation of the 'book'
application. The application demonstrates how to use \class[QDataTable]s
including in-place record editing and setting up master-detail
relationships between \class[QDataTable]s. It also explains how to drill
down from a \class[QDataTable] to another widget, for example to a
\class[QDataBrowser] or a \class[QDataView] and how to perform record
editing in \class[QDataBrowser]s. A great deal of functionality is
available from the classes directly in \qd although subclassing is
always available for finer control. If you want to build the example you
will need to create the example schema on your database.
<figure><title>The Book Application</title>
\img[book-main]
</figure>
</para>

<sidebar><title>The Example Schema</title>
<para>
Note that the examples in this chapter all use the tables, views and
records which are defined in the
<filename>qt/tools/designer/eg/book/book.sql</> file. This file has been
tested with PostgreSQL 6. You may need to modify the SQL in this file to
recreate the example database on your own system. 
<example><title>Schema <literal>CREATE TABLE</> Statements</><programlisting>
\scan eg/book/book.sql /CREATE TABLE\s*author/ /CREATE TABLE\s*format/
</programlisting></example>
The book table is simplified for the purposes of example. It can only
relate a book to a single author (authorid) and lacks an ISBN field.
The format table is used to store 'paperback', 'hardback', etc.
<example><title>Schema <literal>CREATE VIEW</> Statements</><programlisting>
\scan eg/book/book.sql /CREATE VIEW/ /CREATE VIEW/
</programlisting></example>
The book_view is used to present the book's format as a textual value
rather than as a raw id. The author_view maps one-to-one with the author
table and allows us to select an author on the basis of a single field,
in a combobox for example.
</para>
</sidebar>

<sect1 id="setting-up-database-connections">
<title>Setting Up Database Connections</>

    <para>
    There are two aspects of database connections that we must consider.
    Firstly the connection we wish to use within \qd itself, and
    secondly the connection we wish to use in the applications that we
    create.
    </para>

    <sect2 id="setting-up-qt-designers-connections">
	<title>Setting Up \qd's Connections</>

	<para>
	<figure><title>Database Connections Dialog</title>
	\img[database-connections]
	</figure>
	Choose <guimenuitem>Edit|Database Connections</> from the menu
	bar. The Database Connections dialog will appear. Click
	<guibutton>New Connection</>. For applications that use a single
	database it will probably be most convenient to use the default
	connection name of '(default)'. If you use more than one
	database each one must be given a unique name. A driver must be
	chosen from the Driver combo box. The database name may be
	available in the Database Name combo box or may have to be typed
	in. The database name, username, password and hostname should be
	provided by your database systems administrator. When the
	Connection information has been completed click
	<guibutton>Connect</>. If the connection is made the connection
	name will appear in the list box on the left hand side of the
	dialog. You can now close the dialog; the connection settings
	will remain in force until you change or delete them or quit
	\qd. 
	</para>

	<para>
	\qd can remember database connection settings in
	<command>qmake</> project files. Create a new project, e.g.
	click <guimenuitem>File|New Project</> and complete the Project
	Settings dialog. (See <xref linkend="using-project-files">
	"Using Project Files".) Next time you start \qd instead of
	opening individual <literal>.ui</> files open the
	<literal>.pro</> project file instead and \qd will
	automatically reload the project's connection settings.  To
	activate the connection click <guimenuitem>Edit|Database
	Connections</>. The connections previously saved with the
	project will be listed in the left hand list box. Click the
	connection you wish to use and then click <guibutton>Connect</>.
	This connection will be used from now on, e.g. for previewing
	\class[QDataTable]s. Opening a project file also causes \qd to load in the
	list of forms associated with the project into the Form List
	window. In most of the discussion that follows we will assume
	that you use project files and have clicked <guibutton>Connect</>
	so that there is always a connection available when you work in
	\qd.
	</para>

    </sect2>

    <sect2 id="setting-up-connections-for-applications">
    <title>Setting Up Connections for Applications</>

	<para>
	The applications you create must make their own connections to
	the SQL database. 
<example><title>createConnections() function</><programlisting>
bool createConnections()
{
    // create the default database connection
    \b[QSqlDatabase] *defaultDB = \b[QSqlDatabase::addDatabase]( &quot;QPSQL6&quot; );
    defaultDB-&gt;setDatabaseName( &quot;book&quot; );
    defaultDB-&gt;setUserName( &quot;bookuser&quot; );
    defaultDB-&gt;setPassword( &quot;bookpw&quot; );
    defaultDB-&gt;setHostName( &quot;bookhost&quot; );
    if ( ! defaultDB-&gt;open() ) { 
        qWarning( &quot;Failed to open books database: &quot; + 
                  defaultDB-&gt;lastError().driverText() );
        qWarning( defaultDB-&gt;lastError().databaseText() );
        return FALSE;
    }

    return TRUE;
}
</programlisting></example>
	We call <function>addDatabase</> passing it the name of the
	driver we wish to use. We then set the connection information by
	calling the <literal>set...</> functions. Finally we attempt to
	open the connection. If we succeed we return TRUE, otherwise we
	output some error information and return FALSE. 
<example><title>From <filename>qt/tools/designer/eg/book/book1/main.cpp</></><programlisting>
\scan eg/book/book1/main.cpp /int main/ /^}/
</programlisting></example>
	All the examples presented in this chapter call
	<function>createConnections</> after creating the
	<classname>QApplication</> object in their <filename>main.cpp</>
	file and make use of the default connection. If you need to
	connect to multiple databases use the two-argument form of
	<function>addDatabase</>, passing it both the name of the driver
	and a unique identifier. This is explained in the <ulink
	url="http://doc.trolltech.com/sql.html">Qt SQL Module
	documentation</>.
	</para>
	
	<para>
	Note that you do not need to keep a reference to database
	connections. If you use a single database connection, this
	becomes the default connection and database functions will use
	this connection automatically. We can always get a pointer to
	any of our connections by calling
	<function>QSqlDatabase::database()</>.
	</para>

    </sect2>
</sect1>

<sect1 id="using-qdatatable">
<title>Using \class[QDataTable]</>

    <para>
    \class[QDataTable]s may be placed on any form and provide browsing of database
    tables and views. \class[QDataTable]s can also be used to update or delete records
    in-place. Inserting records via a \class[QDataTable] usually requires connecting
    to the <function>primeInsert()</> signal, so that we can generate
    primary keys for example, or provide default values. If we wish to
    present records using a form view (perhaps combining data from
    several tables and views) we might use several \class[QDataBrowser]s
    and \class[QDataView]s. 
    </para>

    <sect2 id="quickly-viewing-a-database-table">
    <title>Quickly Viewing a Database Table</>

	<para>
	This example, along with all the other examples in this chapter,
	has the project name 'book' and uses the database created by
	the <filename>book.sql</> script. As we work through the chapter
	we will build the 'book' application. Create or copy the
	<filename>qt/tools/designer/eg/book/book1/main.cpp</> file shown
	earlier. The project file for this first example is
	<filename>qt/tools/designer/eg/book/book1/book.pro</>. Start a new
	project by clicking <guimenuitem>File|New Project</>. Complete
	the dialog by entering a project name and a project file name. 
	Now click <guimenuitem>Edit|Database Connections</>. Fill in the
	connection information appropriate to your database then press
	<guibutton>Connect</>. The connection name should now appear in
	the left hand list box. (If this doesn't happen you'll need to
	contact your database systems administrator for help.) Close the
	dialog.
	</para>

	<para>
	We will now create a new form with a \class[QDataTable] that's connected to
	one of our database tables. 
	</para>

	<para>
	Click <guimenuitem>File|New</>. The New Form dialog presents us
	with a number of form templates to choose from. Choose the
	'Dialog' form and click \ok. Now click
	<guimenuitem>File|Save</>. You will be prompted for a filename,
	call it <filename>book.ui</>. 
	</para>

	<sect3 id="setting-up-a-qdatatable">
	<title>Setting up a \class[QDataTable]</title>

	    <para>
	    To place a \class[QDataTable] widget on the form either
	    click <guimenuitem>Tools|Views|QDataTable</> or click the
	    \button[QDataTable] toolbar button. Click on the form and
	    the SQL Table Wizard will appear. 

	    <orderedlist numeration="arabic">
		<listitem>
		    <para>
		    The <emphasis>Database Connection and Table</>
		    wizard page is used to set up a connection if one
		    doesn't exist and to choose the table or view for
		    the \class[QDataTable]. (See <xref
		    linkend="setting-up-qt-designers-connections">
		    "Setting Up \qd's Connections".)
		    </para>

		    <para>
		    Click the connection you wish to use, listed in the
		    left hand list box, e.g. "(default)". The tables and
		    views will appear in the right hand Table list box.
		    Click the author table and then click the
		    <guibutton>Next</> button. 
		    </para>
		</listitem>

		<listitem>
		    <para>
		    The <emphasis>Displayed Fields</> wizard page
		    provides a means of selecting which fields should be
		    displayed in the \class[QDataTable] and in what
		    order. By default all fields except the primary key
		    (if there is one) are in the Displayed Fields list
		    box. The left and right pointing blue arrow buttons
		    can be used to move fields between the Displayed
		    Fields and the Available Fields list boxes. The blue
		    up and down pointing arrow buttons are used to
		    select the display order of the displayed fields. 
		    </para>

		    <para>
		    The default settings are the ones we want so simply
		    click <guibutton>Next</>.
		    </para>
		</listitem>

		<listitem>
		    <para>
		    The <emphasis>Table Properties</> wizard page provides
		    convenient access to some of the database-related
		    properties of the \class[QDataTable]. 
		    </para>

		    <para>
		    Click the Confirm Deletes checkbox, then click
		    <guibutton>Next</>. 
		    </para>
		</listitem>

		<listitem>
		    <para>
		    The <emphasis>SQL</> wizard page is used to set
		    the \class[QDataTable]'s Filter and Sort properties. The Filter is an SQL
		    <literal>WHERE</> clause (without the word 'WHERE'). For
		    example, to only list authors whose surnames begin with 'P', we
		    would enter <literal>title LIKE 'P%'</>. We'll leave
		    the filter empty. The Available Fields list box
		    lists all the fields. The Sort By list box lists the
		    fields that the \class[QDataTable] is to sort by and
		    the direction of their sorting (ASCending or
		    DESCending). The left and right blue arrows are used
		    to move fields between the two list boxes. The up
		    and down blue arrows move fields up and down within
		    the Sort By list box. The ASC or DESC setting is
		    changed with the sort order button.
		    </para>

		    <para>
		    Move the surname and forename fields into the Sort By
		    list box and click <guibutton>Next</>.
		    </para>

		<listitem>
		    <para>
		    The <emphasis>Finish</> wizard page gives us the
		    opportunity to go back and change any of our
		    settings. We will be able to change them later
		    through the \class[QDataTable]'s properties so we
		    can finish with the wizard.
		    </para>

		    <para>
		    Click <guibutton>Finish</>. 
		    </para>
		</listitem>

	    </orderedlist>
	    </para>

	    <para>
	    The table will appear on the form with each column labelled with
	    a default column name. If you wish to change the settings
	    most of them are available in the property window. The display
	    names, the fields they are based upon, and the order of
	    appearance of the columns can be changed using the Edit Table
	    dialog (explained later) by right clicking the \class[QDataTable] and left
	    clicking Edit.
	    </para>

	</sect3>


	<sect3>
	<title>Laying out the Form</title>

	    <para>
	    Click on the form and click the <guibutton>Lay out Vertically</>
	    toolbar button. Now click <guimenuitem>Preview|Preview Form</>;
	    the form will run and the table will automatically display all
	    the records.
	    </para>

	    <para>
	    To turn the form we've created into a runnable application we
	    must add the <filename>main.cpp</> file to the project file and
	    make the project. We should also do some renaming to make things
	    easier to understand.
	    
	    <orderedlist numeration="arabic">
		<listitem>
		    <para>
		    Click on the form and change its name to 'BookForm' and
		    its caption to 'Book'. Click on the \class[QDataTable] and change its
		    name to 'AuthorDataTable'.
		    </para>
		</listitem>

		<listitem>
		    <para>
		    Click <guimenuitem>File|Save All</>. 
		    </para>
		</listitem>

		<listitem>
		    <para>
		    Open the project file, e.g. <filename>book.pro</>, in a
		    plain text editor and add the line: 
		    <literal>SOURCES += main.cpp</> 
		    at the end of the file.
		    </para>
		</listitem>

		<listitem>
		    <para>
		    Run <command>qmake</> to generate the make file,
		    e.g. <literal>qmake -o Makefile book.pro</>, then make
		    and run the <command>book</> program.
		    </para>
		</listitem>

	    </orderedlist>
	    </para>

	    <para>
	    This example shows how easy it is to use \class[QDataTable] to show
	    the contents of a database table or view. You can use the
	    application we've just built to update and delete author
	    records. In the versions that follow we will cover insertions,
	    setting up master-detail relationships, drilldown and foreign
	    key lookups.
	    </para>

	    <sidebar><title>A Note on Foreign Keys</title>
	    <para>
	    In most relational databases tables contain fields which are
	    foreign keys into other tables. In our book database example the
	    formatid in the book table is a foreign key into the format
	    table, and the authorid in the book table is a foreign key into
	    the author table. When we present a form to the end user we do
	    not usually want the foreign key itself to be visible but rather
	    the text associated with it. Thus, we would want the format name
	    to appear rather than the format id when we show the book table.
	    Whilst this can be achieved programmatically, e.g. using
	    calculated fields, it is far easier to create a view that
	    encompasses the fields we wish to make visible to the user. A
	    view also places the burden of work on the database rather than
	    the client application. In the examples we have created the
	    book_view view to demonstrate this approach.
	    </para>
	    </sidebar>

	</sect3>

    </sect2>

    <sect2 id="inserting-records-in-qdatatables">
    <title>Inserting Records in \class[QDataTable]s</>

	<para>
	Record insertion into a relational database usually requires
	the generation of a unique primary key. Also we often want to
	create default values for some fields to minimize the user's
	work. We will create a slot to capture the \class[QDataTable]s
	<function>primeInsert</> signal and populate the
	<classname>QSqlRecord</> insertion buffer with a unique primary
	key.

	<orderedlist numeration="arabic">
	    <listitem>
		<para>
		Click <guimenuitem>Edit|Slots</> to invoke the Edit
		Slots dialog. Click <guimenuitem>New Slot</>, then enter
		the slot name \fn[primeInsertAuthor(QSqlRecord*)]
		into the Slot Properties' Slot line edit box. Click
		\ok.
		</para>
	    </listitem>

	    <listitem>
		<para> 
		Click the <guibutton>Connect Signal/Slots</>
		toolbar button, then click the AuthorDataTable, drag to
		the form and release the mouse. The Edit Connections
		dialog will now appear. Click the \fn[primeInsert()]
		signal and then the \fn[primeInsertAuthor()] slot to make
		the connection. Now click \ok.
		</para>
	    </listitem>

	    <listitem>
		<para>
		Click the Source tab of the Object Hierarchy window
		(click <guimenuitem>Window|Object Hierarchy</> to make
		the window visible if necessary). Click the
		\fn[primeInsertAuthor()] slot and an editor window will
		appear.
		</para>
	    </listitem>

	    <listitem>
		<para>
		We must change the \fn[BookForm::primeInsertAuthor()] slot to
		specify the parameter name and perform the necessary
		action:
<programlisting>
\scan eg/book/book2/book.cpp /BookForm::primeInsertAuthor/ /^}/
</programlisting>
		The \class[QSqlQuery] constructor executes the query and
		we call \fn[next()] to navigate to the first record of
		the resultant record set. The signal passed us a pointer
		to the insertion buffer and we then put the value we've
		retrieved, i.e. the next sequence number, into the
		buffer's id field.
		(Note that not all databases support the nextval
		function so you may need to read your database's
		documentation to see how to generate unique keys in
		code.) 
		</para>
	    </listitem>

	</orderedlist>
	</para>

	<para>
	If we rebuild the application it will now support \ins as well as
	\upd and \del. We could easily have added additional code to
	insert default values, e.g. today's date into a date field, if
	necessary.
	</para>

	<para>
	Browsing is
	supported by clicking records and by using the arrow keys. Once
	a record is active (highlighted) we can edit the database. Press
	the <keycap>Insert</> key to \ins a new record;
	press <keycap>F2</> to \upd the current record;
	press the <keycap>Delete</> key to \del the
	current record. All these operations take place live and
	immediately. Users can be given the opportunity to confirm
	their edits by setting the \class[QDataTable]'s confirmEdits property to True.
	If the confirmEdits property is True user confirmation will
	be required for all insertions, updates and deletes. For finer
	control you can set the confirmInsert, confirmUpdate and
	confirmDelete properties individually.
	</para>

	<sidebar><title>\class[QDataTable] User Interface Interaction</>
	<para>
	The default user-interface behaviour for \class[QDataTable]s is as follows:
	    \list[*]
		\item\p
		Users can move to records by clicking the scrollbar and
		clicking records with the mouse. They can also use the
		keyboard's navigation keys, e.g. the arrow keys, Page Up
		and Page Down, Home and End.
		\P\Item

		\item\p
		\ins is initiated by right-clicking the record and
		clicking Insert or by pressing the Ins (Insert) key. The
		user moves between fields using Tab and Shift+Tab. The
		\ins will take place if the user presses Return or Tabs
		off the end of the last field. If autoEdit is TRUE the
		insert will take place if the user navigates to another
		record. \ins is cancelled by pressing Esc (Escape). If
		autoEdit is FALSE navigating to another record also
		cancels the \ins. Setting confirmInsert to TRUE will
		require the user to confirm each \ins.
		\P\Item

		\item\p
		\upd is initiated by right-clicking the record and clicking
		Update or by pressing F2. The update will take place if
		the user presses Return or Tabs off the end of the last
		field. If autoEdit is TRUE the update will take place if
		the user navigates to another record. \upd is cancelled
		by pressing <keycap>Escape</>. If autoEdit is FALSE
		navigating to another record also cancels the \upd.
		Setting confirmUpdate to TRUE will require the user to
		confirm each \upd.
		\P\Item

		\item\p
		\del is achieved by right-clicking the record and
		clicking Delete or by pressing the <keycap>Delete</> key.
		Setting confirmDelete to TRUE will require the user to
		confirm each \del.
		\P\Item

	    </itemizedlist>

	    You can change this default behaviour programmatically if
	    required.
	</para>
	</sidebar>

    </sect2>

    <sect2 id="relating-two-tables-together">
    <title>Relating Two Tables Together (Master-Detail)</>

	<para>
	Databases often have pairs of tables that are related. For
	example an invoice table might list the numbers, dates and
	customers for invoices, but not the actual invoice items which
	the invoice item table might store. In the book application we 
	wish to have a \class[QDataTable] that we can use to browse
	through the authors table and a second \class[QDataTable] to
	show the books they've written. 
	</para>

	<para>
	Open the book project if it isn't already in \qd. We will
	modify this project to show two \class[QDataTable]s that
	relate the author table to the book_view view. 

	<orderedlist numeration="arabic">
	    <listitem>
		<para>
		Click the author \class[QDataTable] and then click the
		<guibutton>Break Layout</> toolbutton.
		</para>
	    </listitem>

	    <listitem>
		<para>
		Resize the \class[QDataTable] up so that it only
		occupies the top half of the form.
		</para>
	    </listitem>

	    <listitem>
		<para>
		Now click on the \class[QDataTable] toolbutton and click
		on the bottom half of the form. The SQL Table Wizard
		will appear. (This Wizard is explained in <xref
		linkend="quickly-viewing-a-database-table"> "Quickly
		Viewing a Database Table".) 
		<orderedlist numeration="arabic" inheritnum="inherit">
		    <listitem>
			<para>
			Click the connection you're using and click the
			book_view view. Click the <guibutton>Next</> button.
			</para>
		    </listitem>

		    <listitem>
			<para>
			Move the authorid and id fields from the
			Displayed Fields listbox to the Available Fields
			list box. Move the title field to the top of the
			Displayed Fields, and move the price field above
			the format field.
			Click the <guibutton>Next</> button.
			</para>
		    </listitem>

		    <listitem>
			<para>
			On the Table Properties page click the Read Only
			checkbox then click the <guibutton>Next</>
			button.
			</para>
		    </listitem>

		    <listitem>
			<para>
			On the SQL page we will leave the Filter
			(<literal>WHERE</> clause) empty. Move the
			title field to the Sort By list box and click
			<guibutton>Next</>. Now click <guibutton>Finish</>.
			</para>
		    </listitem>

		    <listitem>
			<para>
			Change this \class[QDataTable]'s name to "BookDataTable".
			</para>
		    </listitem>
		</orderedlist>
		</para>
	    </listitem>

	    <listitem>
		<para>
		Shift+Click the top \class[QDataTable] so that both \class[QDataTable]s
		are selected and then click the <guibutton>Lay out Vertically
		(in Splitter)</> toolbar button. 
		</para>
	    </listitem>

	    <listitem>
		<para>
		Click on the form and click the <guibutton>Lay
		out Vertically</> toolbar button. 
		</para>
	    </listitem>

	</orderedlist>
	</para>

	<para>
	Run the form by clicking <guimenuitem>Preview|Preview Form</>.
	All the authors are displayed in the top \class[QDataTable]
	and all the books are displayed in the bottom
	\class[QDataTable]. However we only want the books of the
	currently selected author showing in the bottom
	\class[QDataTable]. We will deal with this by filtering the
	records in the book_view according to the author in the author
	table.
	</para>

	<sidebar><title>Using the Table Editor</>
	<para>
	<figure><title>Edit Table Dialog</title>
	\img[edit-table-dialog]
	</figure>
	\class[QDataTable]s are created and set up using the SQL Table Wizard. Like
	any other \qd widget their properties may be changed in the
	Properties window. Some of the column and row based properties
	can also be be changed using the Edit Table dialog. This
	dialog is invoked by right clicking the \class[QDataTable] and left
	clicking the <guimenuitem>Edit</> menu item. The right hand half
	of the Edit Table dialog is where we choose the fields we wish
	to display, their order and their labels. The procedure for
	creating columns is as follows:

	<orderedlist numeration="arabic">
	    <listitem>
		<para>
		Click the <guibutton>New Column</> button.
		</para>
	    </listitem> 

	    <listitem>
		<para>
		Click the down-pointing arrow at the right hand side of
		the Field combobox to drop down the list of available
		fields.
		</para>
	    </listitem>

	    <listitem>
		<para>
		Click the field you wish to include at this point.
		</para>
	    </listitem>

	    <listitem>
	    <para>
		<emphasis>Optionally</> edit the Label if the default
		isn't appropriate.
	    </para>
	    </listitem>

	    <listitem>
	    <para>
	    <emphasis>Optionally</> click the Pixmap <guibutton>...</>
	    button to choose a pixmap to be displayed to the left of the
	    column's label.
	    </para>
	    </listitem>
	</orderedlist>

	Repeat the steps listed above for each column you wish to add.
	Once all the fields have been added you can change their
	ordering by using the blue up and down arrow buttons. At any
	point you can press <guibutton>Apply</> to see how the table
	will look. Finally click the \ok button to save the
	properties you have set. You can always return to the table
	editor to change these settings later.
	</para>
	</sidebar>

	<sect3 id="filtering-one-qdatatable-by-another">
	<title>Filtering One \class[QDataTable] by Another</title>

	    <para>
	    To filter the book_view's records we need to capture the author
	    \class[QDataTable]'s <function>currentChanged()</> signal and change the
	    BookDataTable's filter accordingly.

	    <orderedlist numeration="arabic">
		<listitem>
		    <para>
		    Click <guimenuitem>Edit|Slots</>. In the Edit Slots
		    dialog click <guimenuitem>New Slot</> and enter a slot
		    name of \fn[newCurrentAuthor(QSqlRecord*)].
		    Click \ok.
		    </para>
		</listitem> 

		<listitem>
		    <para>
		    Click <guimenuitem>Connect Signal/Slots</>, then click
		    the AuthorDataTable \class[QDataTable] and drag to
		    the form; release the mouse on the form. The Edit
		    Connections dialog will appear. Click the
		    <function>currentChanged</> signal and the
		    <function>newCurrentAuthor</> slot. Click \ok.
		    </para>
		</listitem>

		<listitem>
		    <para>
		    Click the Source tab of the Object Hierarchy window
		    (click <guimenuitem>Window|Object Hierarchy</> to make
		    the window visible if necessary). Click the
		    \fn[newCurrentAuthor()] slot and an editor window will
		    appear.
		    </para>
		</listitem>

		<listitem>
		<para>
		    We must change the \fn[BookForm::newCurrentAuthor()] slot to
		    specify the parameter name and perform the necessary
		    action:
<programlisting>
\scan eg/book/book3/book.cpp /BookForm::newCurrentAuthor/ /^}/
</programlisting>
		All that's required now is to change the BookDataTable's
		filter and refresh the \class[QDataTable] to show the
		results of the filter.
		</para>
		</listitem>
	    </orderedlist>
	    </para>

	</sect3>

	<sect3 id="preparing-the-interface-for-drilldown">
	<title>Preparing the Interface for Drilldown</title>

	    <para>
	    We can now browse authors and see their books in the
	    BookDataTable. Unfortunately we cannot edit the books themselves
	    because the BookDataTable is based on a view and our database
	    might not support editable views. In the next section we will
	    address this issue by drilling down to a dialog through which we
	    can edit books. For now we will add some buttons to the main
	    BookForm which we will use to invoke the book editing dialog.

	    <orderedlist numeration="arabic">
		<listitem>
		    <para>
		    Click the form, then click the <guibutton>Break
		    Layout</> toolbar button. Resize the form
		    to make room for some buttons at the bottom.
		    </para>
		</listitem> 

		<listitem>
		    <para>
		    Add two buttons to the bottom of the form. Change
		    their names and labels to the following:

		    <itemizedlist>
			<listitem><para>EditPushButton -- &amp;Edit Books</para>
			</listitem>
			<listitem><para>QuitPushButton -- &amp;Quit</para>
			</listitem>
		    </itemizedlist>
		    Hold down the Shift key and Click both buttons (i.e.
		    Shift+Click the buttons) and click the
		    <guibutton>Lay Out Horizontally</> toolbar button.
		    Click the form and click the <guibutton>Lay Out
		    Vertically</> toolbar
		    button.
		    </para>
		</listitem>

		<listitem>
		    <para>
		    We will only provide the Quit button with functionality
		    for the time being.
		    Click <guimenuitem>Connect Signal/Slots</>, then click
		    the Quit button and drag to the form; release the
		    mouse on the form. The Edit Connections dialog will
		    appear. Click the <function>clicked</> signal
		    and the <function>accept</> slot. Click \ok.
		    </para>
		</listitem>
	    </orderedlist>
	    </para>
	</sect3>

    </sect2>

</sect1>

<sect1 id="using-qdatabrowser-and-qdataview">
<title>Using \class[QDataBrowser] and \class[QDataView]</>

<para>
<figure><title>The Book Application's Edit Books Dialog</title>
\img[book-dialog]
</figure>
</para>


    <sect2 id="drilling-down-to-a-form-with-qdatabrowser">
    <title>Drilling Down to a Form with \class[QDataBrowser]</>

	<sect3 id="setting-up-a-qdatabrowser">
	<title>Setting up a \class[QDataBrowser]</title>

	<para>
	We will create a new form to allow users to edit book records. Click
	the <guibutton>New</> toolbar button, click the Dialog template from
	the New Form dialog and click \ok. Change the name of the form to
	EditBookForm and its caption to 'Edit Books'. Click the
	<guibutton>Save</> toolbar button and call the file
	<filename>editbook.ui</>. Now that we have the form we can add a
	\class[QDataBrowser] to show the book records.

	<orderedlist numeration="arabic">
	    <listitem>
		<para>
		Click the <guibutton>Data Browser</> toolbar button, then
		click the form. The Data Browser Wizard will appear.
		</para>
	    </listitem> 

	    <listitem>
		<para>
		The <emphasis>Database Connection and Table</>
		wizard page is used to set up a connection if one doesn't exist
		and to choose the table or view for the \class[QDataBrowser]. (See <xref
		linkend="setting-up-qt-designers-connections"> "Setting
		Up \qd's Connections".)
		</para>

		<para>
		Click the connection you wish to use, listed in the
		Connection list box, e.g. "(default)". The tables and views
		will appear in the Table list box. Click the book table and
		then click the <guibutton>Next</> button. 
		</para>
	    </listitem>

	    <listitem>
		<para> 
		The <emphasis>Displayed Fields</> wizard page provides a
		means of selecting which fields should be displayed in
		the \class[QDataBrowser] and in what order. By default
		all fields except the primary key (if there is one) are
		in the right hand Displayed Fields list box. The left
		and right blue arrow buttons can be used to move fields
		between the Displayed Fields and the Available Fields
		list boxes. The blue up and down arrow buttons are used
		to select the display order of the displayed fields. 
		<para>

		<para>
		We don't want to see the formatid and authorid foreign keys
		on the form, so move them both to the Available Fields list
		box. Move the title field to the top of the Displayed Fields
		list. Click the <guibutton>Next</> button. 
		</para>
	    </listitem>

	    <listitem>
		<para>
		The <emphasis>Navigation and Editing</> wizard page allows
		us to choose which navigation and editing buttons should
		appear on the form.
		</para>
		
		<para>
		We will accept the defaults and simply click the
		<guibutton>Next</> button. 
		</para>
	    </listitem>

	    <listitem>
		<para>
		The <emphasis>SQL</> wizard page is used to set
		the \class[QDataBrowser]'s Filter and Sort properties. The Filter is an SQL
		<literal>WHERE</> clause (without the word 'WHERE'). For
		example, to only list book that cost less than 50 (of our
		currency, e.g. dollars), we 
		would enter <literal>price < 50</>. We will leave the
		filter empty. The Available Fields list box lists all
		the fields. The Sort By list box lists the fields that
		the \class[QDataBrowser] is to sort by and the direction
		of their sorting (ASCending or DESCending). The left and
		right blue arrows are used to move fields between the
		two list boxes. The up and down blue arrows move fields
		up and down within the Sort By list box. The ASC or DESC
		setting is changed with the sort order button.
		</para>

		<para>
		Move the title field into the Sort By list box and click
		<guibutton>Next</>.
		</para>
	    </listitem>

	    <listitem>
		<para>
		The <emphasis>Layout</> wizard page is used to specify the
		initial layout of the form.
		</para>

		<para>
		Change the Number of Columns to 1, then click
		<guibutton>Next</>. Now click <guibutton>Finish</>.
		</para>
	    </listitem>

	    <listitem>
		<para>
		The \class[QDataBrowser] will now appear on the form.
		Resize the form up to make it shorter. Click
		the \class[QDataBrowser] then click the <guibutton>Break
		Layout</> toolbar button. Click the buttons then click
		the <guibutton>Break Layout</> toolbar button. Add
		another button called 'PushButtonClose' with the text
		'&amp;Close' and place it to the right of the Delete button.
		</para>
	    </listitem>

	    <listitem>
		<para>
		Shift+Click the Insert, Update, Delete and Close
		buttons, then click the <guibutton>Lay Out
		Horizontally</> toolbar button. Click the
		\class[QDataBrowser], then click the <guibutton>Lay Out
		in a Grid</> toolbar button. Finally click the form and
		click the <guibutton>Lay Out Vertically</> toolbar
		button. Now click the \class[QDataBrowser] and rename it
		'BookDataBrowser'.
		</para>
	    </listitem>

	    <listitem>
		<para>
		We will be creating our own database cursor so we could
		set the BookDataBrowser's frameworkCode property to
		FALSE to prevent \qd from generating redundant code for
		the cursor.
		</para>
	    </listitem>

	</orderedlist>
	</para>

	<sidebar><title>\class[QDataBrowser] User Interface Interaction</>
	<para>
	The user-interface behaviour for \class[QDataBrowser]s
	is created by connecting slots and signals. The slots provided are:
	    \list[*]
		\item\p
		\fn[insert()], \fn[update()] and \fn[del()] for edits;
		\P\Item

		\item\p
		\fn[first()], \fn[next()], \fn[prev()], and \fn[last()] for
		navigation;
		\P\Item

		\item\p
		\fn[refresh()] to refresh the cursor from the database; 
		\P\Item

		\item\p
		\fn[readFields()] to read data from the cursor's edit
		buffer and \fn[writeFields()] to write the form's data to
		the cursor's edit buffer;
		\P\Item

		\item\p
		\fn[clearValues()] to clear the form's values. 
		\P\Item

	    </itemizedlist>
	</para>
	
	<para>	
	If you use \qd's
	\class[QDataBrowser] wizard you will be given the option of
	creating a default set of buttons for navigation and editing.
	The behaviour of these buttons is set up using the slots
	described above to provide the following functionality:
	    \list[*]
		\item\p
		\ins is initiated by pressing the Insert button. The
		user moves between fields using Tab and Shift+Tab. If
		the user presses the Update button the \ins will take
		place and the user will be taken to the record they have
		just inserted. If the user presses the Insert button
		(i.e. a second time) the \ins will take place and a new
		insertion will be initiated. If autoEdit is TRUE the
		\ins will take place if the user navigates to another
		record. \ins is cancelled by pressing the
		<keycap>Escape</>
		key or by pressing the Delete button. If autoEdit is
		FALSE navigating to another record also cancels the
		\ins. Setting confirmInsert to TRUE will require the
		user to confirm each \ins.
		\P\Item

		\item\p
		\upd is automatically initiated whenever the user
		navigates to a record. An update will take place if the
		user presses the Update button. If autoEdit is TRUE the
		update will take place if the user navigates to another
		record. \upd is cancelled by pressing the
		<keycap>Escape</>
		key or by pressing the Delete button. If autoEdit is
		FALSE navigating to another record also cancels the
		\upd. Setting confirmUpdate to TRUE will require the
		user to confirm each \upd.
		\P\Item

		\item\p
		\del is achieved by pressing the Delete button.
		Setting confirmDelete to TRUE will require the user to
		confirm each \del.
		\P\Item

	    </itemizedlist>
	</para>
	</sidebar>

	</sect3>

	<sect3 id="performing-the-drilldown">
	<title>Performing the Drilldown</title>

	<para>
	We now have a working form for editing book records. We need to
	start the form when the user clicks our 'Edit Books' button, and to
	navigate to the record they have selected in the BookDataTable.
	We also need to provide a means of editing the foreign keys,
	e.g. authorid.

	<orderedlist numeration="arabic">
	    <listitem>
		<para> 
		We need to make a new slot to connect the Edit Books'
		button's <function>clicked()</> signal to. Click on the Book
		form to make it \qd's active form. Invoke the Edit Slots
		dialog and create a new slot called \fn[editClicked()]. Now
		click the <guibutton>Connect Signal/Slots</> toolbar button.
		Click the Edit Books button and drag to the form; release
		the mouse on the form. In the Edit Connections dialog
		connect the <function>clicked()</> signal to the
		<function>editClicked()</> slot. Click \ok to leave the
		dialog.
		</para>
	    </listitem> 

	    <listitem>
		<para>
		In the
		Object Hierarchy window click Source and then click the
		<function>editClicked</> function. We need to change it to
		the following:
<programlisting>
\scan eg/book/book6/book.cpp /BookForm::editClicked/ /^}/
</programlisting>
		</para>

		\p
		We create our dialog as before. We also create
		a cursor over the book table and set the dialog's
		\class[QDataBrowser], BookDataBrowser, to use this new
		cursor. We set the \class[QDataBrowser]'s filter and
		sort to those that applied to the main form's book_view
		\class[QDataTable]. We refresh the \class[QDataBrowser]
		and seek to the same record the user was viewing on the
		main form. Then we exec the dialog and delete it when
		the user has finished with it. Finally we update the
		BookDataTable in the main form to reflect any changes
		that were made in the dialog.
		\P
	    </listitem> 

	    <listitem>
		<para>
		Because our code refers to a class declared in
		<filename>editbook.h</> and to a \class[QDataBrowser] we need to add two
		includes. Click on the BookForm, then click on the Source
		tab of the Object Hierarchy window. Right click the 'Includes (In
		Declaration)' item and click New. Type in
		<filename>editbook.h</>. Now add a second include, this
		time, <filename>qdatabrowser.h</>.
		</para>
	    </listitem> 

	</orderedlist>
	</para>

	<para>
	Now when we navigate through the author and book records in the
	BookForm we can click the Edit Books button to launch our Edit Books
	dialog. Although the dialog supports \upd, \del and navigation over
	the book table, we cannot edit the foreign keys nor perform
	inserts. We will deal with insertion in the same way as we did
	with the \class[QDataTable], then we will handle the foreign
	keys.
	</para>

	</sect3>
	
	<sect3 id="inserting-into-a-qdatabrowser">
	<title>Inserting into a \class[QDataBrowser]</title>

	<para>
	We will create a slot to receive the Edit Books form's
	<function>primeInsert()</> signal so that we can insert a unique
	primary key. 

	<orderedlist numeration="arabic">
	    <listitem>
		<para> 
		Click on the Edit Books form, then
		create a new Slot called \fn[primeInsertBook(QSqlRecord*)].
		</para>
		<para>
		Click <guimenuitem>Edit|Slots</>, then click the
		<guibutton>New Slot</> button and type the new slot name
		in the Slot Properties Slot edit box. Click \ok.
		</para>
	    </listitem> 

	    <listitem>
		<para>
		Connect the BookDataBrowser's <function>primeInsert()</>
		signal to the \fn[primeInsertBook()] slot. 
		</para>
		<para>
		Click the
		<guibutton>Connect Signal/Slots</> toolbar button, then
		click the BookDataBrowser and drag to the form; release
		the mouse on the form. Now click the
		<function>primeInsert()</> signal and the
		primeInsertBook slot. Click \ok.
		</para>
	    </listitem> 

	    <listitem>
		<para>
		In the
		Object Hierarchy window click Source and then click the
		<function>primeInsertBook</> slot. We need to change
		it to the following:
<programlisting>
\scan eg/book/book6/editbook.cpp /EditBookForm::primeInsertBook/ /^}/
</programlisting>
		</para>
	    </listitem> 

	    <listitem>
		<para>
		We will also tidy up the user interface slightly. Click
		the Update button and set its default property to True.
		Connect the Close button's \fn[clicked()] signal to the
		EditBookForm's \fn[accept()] slot.
		</para>
	    </listitem> 

	</orderedlist>
	</para>
	</sect3>


	<sect3 id="handling-foreign-keys-in-a-qdatabrowser">
	<title>Handling Foreign Keys in a \class[QDataBrowser]</title>

	<para>
	Qt's SQL module provides two approaches to dealing with foreign
	keys. The most powerful and flexible is to subclass widgets and
	use property maps to relate the widgets to the database. This
	approach is described in the <ulink
	url="http://doc.trolltech.com/sql.html#Custom_Editor_Widgets">Qt
	SQL Module documentation</>, particularly the StatusPicker
	example. A simpler approach that can be taken wholly within \qd
	is presented here. 
	</para>

	<para>
	We will add a new field to the EditBookForm so that authors can
	be edited along with the title and price. Once we've handled the
	visual design we'll write the code to make it all work.

	\list[1]
	\item\p
	First we'll add the new widgets. Click the BookDataBrowser and
	click the \button[Break Layout] toolbar button. Resize the form
	to make it larger and drag each set of buttons down to make some
	room below the title and price QLineEdits. Click the
	\button[Text Label] toolbar button and click on the form beneath
	the Price label. Click the Text Label and change its text to
	'Author'. Click the \button[ComboBox] toolbar button and click
	on the form beneath the price QLineEdit. In the Property Window
	change the ComboBox's name to ComboBoxAuthor and change its
	sizePolicy hSizeType to Expanding. 
	\P\Item

	\item\p
	Now we'll lay out the dialog. Shift+Click the Author label and
	the ComboBox then click the \button[Lay Out Horizontally]
	toolbar button. Now click the BookDataBrowser and click the
	\button[Lay Out in a Grid] toolbar button.
	\P\Item
	\List1

	\p
	We need to write some code so that the ComboBox will populate
	with author names and scroll to the current book's author. We
	also need to ensure that we put the author's id into the book
	table's authorid field when a book record is inserted or
	updated. We'll ensure the code is executed at the right time by
	putting it in slots and connecting signals to our slots. 
	\P

	\list[1]
	\item\p
	Create two new slots called \fn[beforeUpdateBook(QSqlRecord
	*buffer)] and \fn[primeUpdateBook(QSqlRecord *buffer)]. (Click
	\menu[Edit|Slots], then in the Edit Slots dialog click New Slot
	and enter the first new slot. Click New Slot again and enter the
	second slot then click \ok.)
	\P\Item

	\item\p
	When the user navigates through the dialog each time they move
	to a new record a \fn[primeUpdate()] signal is emitted. We connect
	to this so that we can update the ComboBox's display. Just
	before a record is updated or inserted into the database a
	\fn[beforeUpdate()] or \fn[beforeInsert()] signal is emitted. We
	connect our \fn[beforeUpdateBook()] slot to both these signals so
	that we can ensure that the book's authorid field is correctly
	populated.
	\P

	\p
	Click the BookDataBrowser and drag the mouse to the form;
	release the mouse and the Edit Connections dialog will appear.
	Connect the \fn[beforeUpdate()] signal to our
	\fn[beforeUpdateBook()] slot. Connect the \fn[beforeInsert()] signal
	to our \fn[beforeUpdateBook()] slot. Finally connect the
	\fn[primeUpdate()] signal to our \fn[primeUpdateBook()] slot.
	\P\Item

	\item\p
	All that remains is to write the underlying code. All the
	code snippets are taken from 
	\f[qt/tools/designer/eg/book/book7/editbook.ui].
	    \list[1,1]
	    \item\p
	    We start with
	    the \fn[init()] function; this is called after the dialog is
	    constructed and we will use it to populate the ComboBox with
	    author names.
<programlisting>
\scan eg/book/book7/editbook.cpp /EditBookForm::init/ /^}/ 
</programlisting>
	    Here we execute a query to get a list of author names and
	    insert each one into the ComboBox. 
	    \P\Item

	    \item\p
	    We next write the code which will be executed just before a
	    record is updated (or inserted) in the database.
<programlisting>
\scan eg/book/book7/editbook.cpp /EditBookForm::beforeUpdateBook/ /^}/ 
</programlisting>
	    We look up the id of the ComboBox's current author and place
	    it in the update (or insert) buffer's authorid field. 	    
	    \P\Item

	    \item\p
	    As the user navigates through the records we ensure
	    that the ComboBox reflects the current author.  xset r on
<programlisting>
\scan eg/book/book7/editbook.cpp /EditBookForm::primeUpdateBook/ /^}/ 
</programlisting>
	    Firstly we look up the book's author and secondly we iterate
	    through the ComboBox's items until we find the author and
	    set the ComboBox's current item to the matching author.
	    \P\Item
	    \List1
	\P
	\List1

    \p
    If the author name has changed or been deleted the query will
    fail and no author id will be inserted into the buffer causing the \ins
    to fail.  An alternative is to record
    the author id's as we populate the ComboBox and store them in a 
    \class[QMap] which we can then look up as required. This approach
    requires changes to the \fn[init()], \fn[beforeUpdateBook()] and
    \fn[primeInsertBook()] functions and the addition of a new function,
    \fn[mapAuthor()]. 
    The relevant code from
    \f[qt/tools/designer/eg/book/book8/editbook.ui] is shown below.

	    \list[1,1]
	    <listitem>
	    <para>
	    First we need to create a class variable to map author names
	    to author id's. Click in the Source tab of the Object
	    Hierarchy, then right click the Class Variables item and
	    click <guimenuitem>New</guimenuitem>. Type in
	    'QMap&lt;QString,int&gt; authorMap;'.
	    </para>
	    </listitem>
	    \item\p
	    We now record the author id's in the \fn[init()] function.
<programlisting>
\scan eg/book/book8/editbook.cpp /EditBookForm::init/ /^}$/ 
</programlisting>
	    After inserting each author's name into the ComboBox we
	    populate a \class[QMap] with the author's name and id.
	    \P\Item

	    \item\p
	    Instead of looking up the author's id in the database we
	    look it up in the static \class[QMap].
<programlisting>
\scan eg/book/book8/editbook.cpp /EditBookForm::beforeUpdateBook/ /^}/ 
</programlisting>
	    \P\Item

	    \item\p
	    We use a single function for storing author id's and
	    returning them so that we can use a static data structure. 
<programlisting>
\scan eg/book/book8/editbook.cpp /EditBookForm::mapAuthor/ /^}/ 
</programlisting>
	    If the populate flag is TRUE, we store the author's name and
	    id in the \class[QMap], otherwise we look up the given
	    author name and set id appropriately.
	    \P\Item
	    \List1
    \P

\p
Another approach which is especially useful if the same foreign key
lookups are required in different parts of the application is to
subclass a cursor and use this for our lookups. This is described in the
<ulink url="http://doc.trolltech.com/sql.html">Qt SQL Module
documentation</>, particulary the section on subclassing
\class[QSqlCursor].
\P

\p
We could apply the same techniques to the formatid foreign key
but won't demonstrate this since it is essentially a repetition.
\P

<para>
The book example demonstrates the basic techniques needed for SQL
programming with Qt. Additional information on the Qt SQL classes,
especially the \class[QSqlQuery] and \class[QSqlCursor] classes is
provided in the <ulink url="http://doc.trolltech.com/sql.html">Qt SQL
Module documentation</>.
</para>

	</sect3>

    </sect2>

</sect1>

</chapter>
