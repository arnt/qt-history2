<chapter id="main-windows">
<title>Creating Main Windows with Actions, Toolbars and Menus</>

<para id="ajoq">
<indexterm><primary>Actions and Action Groups</primary></indexterm>

<indexterm><primary>Main Window</primary><secondary>Creating</secondary></indexterm>

<indexterm><primary>Creating Main Windows</primary></indexterm>

<indexterm><primary>Creating Menus</primary></indexterm>

<indexterm><primary>Menus</primary><secondary>Adding</secondary></indexterm>

<indexterm><primary>Creating Toolbars</primary></indexterm>

<indexterm><primary>Toolbars, Creating</primary></indexterm>

<indexterm><primary>Toolbar Buttons</primary><secondary>Adding</secondary></indexterm>

<indexterm><primary>Adding</primary><secondary>Menus</secondary></indexterm>

<indexterm><primary>Adding</primary><secondary>Toolbars</secondary></indexterm>

<indexterm><primary>Adding</primary><secondary>Actions and Action Groups</secondary></indexterm>

<indexterm><primary>Adding</primary><secondary>Toolbar Buttons</secondary></indexterm>

In this chapter we will explain how to create an application's main
window and how to add actions (explained shortly), menus and toolbars.
We will also demonstrate how some common actions, like cut and paste in
a <indexterm><primary>QTextEdit</primary></indexterm>
<classname>QTextEdit</>, can be performed automatically simply by making the
appropriate signals and slots connections. We will build the <emphasis>richedit</>
application to illustrate the necessary techniques. 
<figure><title>The Richedit Application</title>
<graphic fileref="images\richedit-main.png"></graphic>
</figure>
</para>

<para id="ajpc">
<indexterm><primary>Projects</primary></indexterm>

We begin by creating a project file. Start <emphasis>Qt Designer</> or if it is already
running, close any existing project and files. Click 
<indexterm><primary>Menu Options</primary><secondary>File|New Project</secondary></indexterm>
<guimenuitem>File|New Project</> to invoke the <indexterm><primary>Dialogs</primary><secondary>Project Settings</secondary></indexterm>
Project Settings dialog. Enter a
name for the project, e.g. richedit, and a name for the  project file,
e.g. richedit.pro. Click <guibutton>OK</>. If you're unfamiliar with Actions and
Action Groups the sidebar provides the necessary introduction; otherwise
skip ahead to "Designing the Main Window".
</para>

<sidebar><title>Actions and Action Groups</>
<para id="ajpo">
An <emphasis>action</> is an operation that the user initiates through the user
interface, for example, saving a file or changing some text's font
weight to bold.
</para>

<para id="ajpu">
We often want the user to be able to perform an action using a variety
of means. For example, to save a file we might want the user to be able
to press <keycap>Ctrl+S</>, or to click the <guibutton>Save</> toolbar button
or to click the <indexterm><primary>Menu Options</primary><secondary>File|Save</secondary></indexterm>
<guimenuitem>File|Save</> menu option. Although the means of
invoking the action are all different, the underlying operation is the
same and we don't want to duplicate the code that performs the
operation. In Qt we can create an action (a <indexterm><primary>QAction</primary></indexterm>
<classname>QAction</> object)
which will call the appropriate function when the action is invoked. We
can assign an accelerator, (e.g. <keycap>Ctrl+S</>), to an action. We
can also add an action to a menu item and to a toolbar button.
</para>

<para id="ajqh">
If the action has an on/off state, e.g. bold is on or off, when the user
changes the state, for example by clicking a toolbar button, the state
of everything associated with the action, e.g. menu items and toolbar
buttons, are updated. 
</para>

<para id="ajqo">
Some actions should operate together like radio buttons. For example, if
we have left align, center align and right align actions, only one
should be 'on' at any one time. An <emphasis>action group</> (a
<indexterm><primary>QActionGroup</primary></indexterm>
<classname>QActionGroup</> object) is used to group a set of actions together.
If the action group's <literal>exclusive</> property is TRUE then only one of
the actions in the group can be on at any one time. If the user changes
the state of an action in an action group where <literal>exclusive</> is TRUE,
everything associated with the actions in the action group, e.g. menu
items and toolbar buttons, are updated.
</para>

<para id="ajra">
<indexterm><primary>Actions and Action Groups</primary></indexterm>

<emphasis>Qt Designer</> can create actions and action groups visually, can assign
accelerators to them, and can associate them with menu items and toolbar
buttons. 
</para>
</sidebar>

    <sect1 id="designing-the-main-window">
    <title>Designing the Main Window</title>
    <para id="ajrj">
    <indexterm><primary>Main Window</primary><secondary>Creating</secondary></indexterm>

    <indexterm><primary>Creating Main Windows</primary></indexterm>

    <indexterm><primary>Main Window</primary><secondary>Wizard</secondary></indexterm>

    <indexterm><primary>Wizards</primary><secondary>Main Window</secondary></indexterm>

    <indexterm><primary>Creating Menus</primary></indexterm>

    <indexterm><primary>Menus</primary><secondary>Adding</secondary></indexterm>

    <indexterm><primary>Adding</primary><secondary>Menus</secondary></indexterm>

    <indexterm><primary>Creating Toolbars</primary></indexterm>

    <indexterm><primary>Toolbars, Creating</primary></indexterm>

    <indexterm><primary>Toolbar Buttons</primary><secondary>Adding</secondary></indexterm>

    <indexterm><primary>Adding</primary><secondary>Toolbars</secondary></indexterm>

    <indexterm><primary>Adding</primary><secondary>Actions and Action Groups</secondary></indexterm>

    <indexterm><primary>Adding</primary><secondary>Toolbar Buttons</secondary></indexterm>

    We will use the main window wizard to build a main window. The
    wizard allows us to create actions and a menu bar and a toolbar
    through which the user can invoke the actions. We will also create
    our own actions, menus and toolbar. We will add some widgets to the
    toolbar and add a main widget to the main window. Finally we will
    connect signals to slots to take advantage of Qt's default
    functionality and minimize our coding.
    </para>
    
	<sect2><title>Creating the Main Window</title>
	<para id="ajru">
	Click <indexterm><primary>Menu Options</primary><secondary>File|New</secondary></indexterm>
<guimenuitem>File|New</> to invoke the <indexterm><primary>Dialogs</primary><secondary>New Form</secondary></indexterm>
New Form dialog, click
	Mainwindow, then click <guibutton>OK</>. A new <indexterm><primary>QMainWindow</primary></indexterm>
<classname>QMainWindow</> form will
	be created and the Mainwindow Wizard will pop up.

	<orderedlist numeration="arabic">

	<listitem><para id="ajsb">
	The <emphasis>Choose available menus and toolbars</> wizard page appears
	first. It presents three categories of default actions, File
	Actions, Edit Actions and Help Actions. For each category you
	can choose to have <emphasis>Qt Designer</> create menu items, toolbar buttons and
	signal/slots connections for the relevant actions. You can
	always add or delete actions, menu items, toolbar buttons and
	connections later.
	</para>

	<para id="ajsl">
	<indexterm><primary>Creating Menus</primary></indexterm>

	<indexterm><primary>Menus</primary><secondary>Adding</secondary></indexterm>

	<indexterm><primary>Creating Toolbars</primary></indexterm>

	<indexterm><primary>Toolbars, Creating</primary></indexterm>

	<indexterm><primary>Toolbar Buttons</primary><secondary>Adding</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Menus</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Toolbars</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Actions and Action Groups</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Toolbar Buttons</secondary></indexterm>

	<indexterm><primary>Signals and Slots</primary><secondary>Connecting Actions</secondary></indexterm>

	We will accept the defaults for File Actions, i.e. have menu
	items, toolbar buttons and the relevant connections created. But
	for the Edit Actions we don't want any connections created since
	we'll be connecting the actions directly to the
	<indexterm><primary>QTextEdit</primary></indexterm>
<classname>QTextEdit</> we'll create later, so uncheck the Edit Action's
	Create Slots and Connections checkbox. We won't have any Help
	Actions on the toolbar so uncheck the Help Action's Toolbar
	checkbox. Click <guibutton>Next</> to move on to the next wizard
	page.
	</para></listitem>

	<listitem><para id="ajsx">
	<indexterm><primary>Creating Toolbars</primary></indexterm>

	<indexterm><primary>Toolbars, Creating</primary></indexterm>

	<indexterm><primary>Toolbar Buttons</primary><secondary>Adding</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Toolbar Buttons</secondary></indexterm>

	<indexterm><primary>Separator</primary><secondary>Menu item</secondary></indexterm>

	<indexterm><primary>Separator</primary><secondary>Toolbar button</secondary></indexterm>

	The <emphasis>Setup Toolbar</> wizard page is used to populate a toolbar
	with actions from each of the default action categories. The
	Category combobox is used to select which set of actions you
	wish to work on. The Actions list box lists the actions
	available for the current category. The Toolbar listbox lists
	the toolbar buttons you want to create. The blue left and right
	arrow buttons are used to move actions into or out of the
	Toolbar list box. The blue up and down arrow buttons are used to
	move actions up and down within the Toolbar list box. Note that
	the '&lt;Separator&gt;' item in the Actions list box may be moved to
	the Toolbar list box as often as required and will cause a
	separator to appear in the finished toolbar.
	</para>

	<para id="ajtm">
	Copy the New, Open and Save Actions to the
	Toolbar list box. Copy a &lt;Separator&gt; to the Toolbar list
	box. Change the Category to Edit and copy the Undo, Redo, Cut
	Copy and Paste actions to the Toolbar list box. Click
	<guibutton>Next</> and then click <guibutton>Finish</>.
	</para></listitem>

	</orderedlist>
	</para>

	<para id="ajtx">
	If you preview the form (<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+T</secondary></indexterm>
<keycap>Ctrl+T</>) the File and Edit
	menus will be available and you'll be able to drag the toolbar
	either into an independent window of its own, or to dock it to
	the left, right, bottom or top of the window. The menus and
	toolbars are not functional yet but we will rectify this as we
	progress.
	</para>
	
	</sect2>

	<sect2><title>Creating and Deleting Actions and Action Groups</title>

	    <sect3><title>Creating Actions</title>
	    <para id="ajul">
	    <indexterm><primary>Actions and Action Groups</primary><secondary>Adding Actions</secondary></indexterm>

	    <indexterm><primary>Adding</primary><secondary>Actions and Action Groups</secondary></indexterm>

	    Our application requires more menu items and toolbar buttons
	    than the the defaults we created with the main window wizard.
	    But before we create the menu items and toolbar buttons we
	    will create the actions that they'll invoke. The Action
	    Editor appears automatically when you create a main window.
	    You can also access it through the Window menu (click
	    <indexterm><primary>Menu Options</primary><secondary>Window|Action Editor</secondary></indexterm>
<guimenuitem>Window|Action Editor</>). 
	    </para>

	    <para id="ajuv">
	    For the richedit application we need to create actions for
	    indicating bold, italic and underlined font attributes, and to
	    set text alignment.
	    </para>

	    <para id="ajvb">
	    Right click in the <indexterm><primary>Dialogs</primary><secondary>Action Editor</secondary></indexterm>
Action Editor where the actions are
	    listed, then left click New Action. This will create a new
	    action called 'Action' at the top of the list of actions.
	    The Property Editor will change to show the default settings
	    for the new action. We'll now go through all the properties
	    we need to change.
	    <orderedlist numeration="arabic">
	    <listitem><para id="ajvi">
	    Change the <indexterm><primary>Properties</primary><secondary>name</secondary></indexterm>
name of the action to 'boldAction'. 
	    </para></listitem>
	    
	    <listitem><para id="ajvm">
	    Since bold can only be on or off change the
	    <indexterm><primary>Properties</primary><secondary>toggleAction</secondary></indexterm>
toggleAction property to True. 
	    </para></listitem>

	    <listitem><para id="ajvr">
	    <indexterm><primary>Adding</primary><secondary>Pixmaps</secondary></indexterm>

	    <indexterm><primary>Pixmaps</primary><secondary>Adding</secondary></indexterm>

	    The <indexterm><primary>Properties</primary><secondary>iconSet</secondary></indexterm>
iconSet property is used to set an icon which will
	    appear to the left of the action's name in any menu you
	    associate the action with. The <indexterm><primary>Properties</primary><secondary>iconSet</secondary></indexterm>
iconSet is also used for the
	    toolbar button if you associate the action with a toolbar.
	    Click the ellipsis button (<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>...</secondary></indexterm>
<keycap>...</>) to invoke the
	    <indexterm><primary>Dialogs</primary><secondary>Edit Pixmap Collection</secondary></indexterm>
Edit Pixmap Collection dialog. The pixmap we require
	    is not in the default collection. Click the <guibutton>Add</>
	    button and a file dialog will appear. The icons we require
	    are in the Qt examples directory, <filename>qt/examples/textedit/</>.
	    Navigate to the textedit directory and select the
	    <filename>textbold.xpm</> file. Click the new textbold icon in the
	    pixmap collection then click <guibutton>OK</>. <!-- (See <xref
	    linkend="choose-a-pixmap-dialog"> "Edit Pixmap Collection
	    Dialog" and <xref linkend="the-pixmap-collection-dialog">
	    "Edit Pixmap Collection Dialog".) -->
	    </para></listitem>
	    
	    <listitem><para id="ajwi">
	    Change the <indexterm><primary>Properties</primary><secondary>text</secondary></indexterm>
text property to 'bold'. This automatically
	    changes the <indexterm><primary>Properties</primary><secondary>menuText</secondary></indexterm>
menuText, <indexterm><primary>Properties</primary><secondary>toolTip</secondary></indexterm>
toolTip and <indexterm><primary>Properties</primary><secondary>statusTip</secondary></indexterm>
statusTip 
	    properties.
	    </para></listitem>

	    <listitem><para id="ajwn">
	    Change the menu text to '&amp;Bold'. If we choose to
	    associate this action with a menu item then this property is
	    used; otherwise it is ignored.
	    </para></listitem>

	    <listitem><para id="ajwt">
	    Change the <indexterm><primary>Properties</primary><secondary>accel</secondary></indexterm>
accel property to 'CTRL+B'. This will associate
	    the <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+B</secondary></indexterm>
<keycap>Ctrl+B</> keyboard accelerator with this action.
	    </para></listitem>

	    </orderedlist>
	    Note that at this point the only way to invoke this action is to
	    use the keyboard accelerator (<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+B</secondary></indexterm>
<keycap>Ctrl+B</>), because we
	    have not yet associated the action with a menu item or with a
	    toolbar button.
	    </para>

	    <para id="ajxf">
	    <indexterm><primary>Adding</primary><secondary>Actions and Action Groups</secondary></indexterm>

	    We need to add two more actions, italic and underline. For each
	    one right click the <indexterm><primary>Dialogs</primary><secondary>Action Editor</secondary></indexterm>
Action Editor and click New
	    Action. Then repeat the steps listed above to change each
	    action's properties: 
	    <itemizedlist>
	    <listitem><para id="ajxl">
	    For the italic action change its <indexterm><primary>Properties</primary><secondary>name</secondary></indexterm>
name to 'italicAction' and
	    ensure its <indexterm><primary>Properties</primary><secondary>toggleAction</secondary></indexterm>
toggleAction property is True. The 
	    <indexterm><primary>Properties</primary><secondary>iconSet</secondary></indexterm>
iconSet is in
	    the textedit directory and is called <filename>textitalic.xpm</>; add
	    its pixmap in the same way that we added the bold pixmap.
	    (For example, click the ellipsis (<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>...</secondary></indexterm>
<keycap>...</>), click
	    <guibutton>Add</>, navigate to the textedit directory and click
	    the <filename>textitalic.xpm</> pixmap. Then click the textitalic
	    pixmap in the pixmap collection and click <guibutton>OK</>). Change the
	    action's <indexterm><primary>Properties</primary><secondary>text</secondary></indexterm>
text to 'italic', its <indexterm><primary>Properties</primary><secondary>menuText</secondary></indexterm>
menuText 
	    to '&amp;Italic' and
	    its <indexterm><primary>Properties</primary><secondary>accel</secondary></indexterm>
accel to 'CTRL+I'.
	    </para></listitem>

	    <listitem><para id="ajxy">
	    For the underline action change its <indexterm><primary>Properties</primary><secondary>name</secondary></indexterm>
name 
	    to 'underlineAction'
	    and set its <indexterm><primary>Properties</primary><secondary>toggleAction</secondary></indexterm>
toggleAction property to True. The 
	    <indexterm><primary>Properties</primary><secondary>iconSet</secondary></indexterm>
iconSet is in
	    the same directory and is called <filename>textunder.xpm</>; add it
	    in the same way as the previous pixmaps. Change its <indexterm><primary>Properties</primary><secondary>text</secondary></indexterm>
text to
	    'underline', its <indexterm><primary>Properties</primary><secondary>menuText</secondary></indexterm>
menuText to '&amp;Underline' and its 
	    <indexterm><primary>Properties</primary><secondary>accel</secondary></indexterm>
accel to 'CTRL+U'.
	    </para></listitem>
	    </itemizedlist>
	    </para>

	    </sect3>

	    <sect3><title>Creating Action Groups</title>
	    <para id="ajym">
	    <indexterm><primary>Actions and Action Groups</primary><secondary>Adding Action Groups</secondary></indexterm>

	    <indexterm><primary>Adding</primary><secondary>Actions and Action Groups</secondary></indexterm>

	    It is perfectly possible to have bold, italic and underline
	    all active at once. But for alignment, i.e. left align,
	    right align and centered, it only makes sense for one of
	    them to be active at any one time. Because we need the
	    alignment actions to operate in sync with one another we
	    must create an Action Group which will automatically
	    manage the behaviour of the actions it contains in the way
	    we require. 
	    </para>

	    <para id="ajyx">
	    <indexterm><primary>Actions and Action Groups</primary><secondary>Exclusive Actions</secondary></indexterm>

	    <indexterm><primary>Exclusive Actions, Actions and Action Groups</primary></indexterm>

	    Right click the <indexterm><primary>Dialogs</primary><secondary>Action Editor</secondary></indexterm>
Action Editor then left click New Action
	    Group. Change the action group's <indexterm><primary>Properties</primary><secondary>name</secondary></indexterm>
name in the Property
	    Editor to 'alignActionGroup', and change its <indexterm><primary>Properties</primary><secondary>text</secondary></indexterm>
text to
	    'align'. The '<indexterm><primary>Properties</primary><secondary>exclusive</secondary></indexterm>
exclusive' property's default is True.
	    This ensures that only one action within the action group
	    can be 'on' at any one time which is the behaviour we
	    require.
	    </para>

	    <para id="ajzg">
	    We create the actions within the action group in almost the
	    same way as before. The only difference is that we must
	    right click the alignActionGroup (rather than an Action) and
	    then left click New Action to create a new action <emphasis>within</>
	    the action group. We will create three new actions within
	    the alignActionGroup:
	    <orderedlist numeration="arabic">
	    <listitem><para id="ajzo">
	    <indexterm><primary>Adding</primary><secondary>Pixmaps</secondary></indexterm>

	    <indexterm><primary>Pixmaps</primary><secondary>Adding</secondary></indexterm>

	    Create a new action within the alignActionGroup action
	    group. Change the <indexterm><primary>Properties</primary><secondary>name</secondary></indexterm>
name of this action to 'leftAlignAction'
	    and ensure its <indexterm><primary>Properties</primary><secondary>toggleAction</secondary></indexterm>
toggleAction property is True. Use the
	    <indexterm><primary>Properties</primary><secondary>iconSet</secondary></indexterm>
iconSet in the textedit directory called <filename>textleft.xpm</>,
	    adding the pixmap to the pixmap collection in the same way
	    as we added the textbold pixmap earlier. Change its <indexterm><primary>Properties</primary><secondary>text</secondary></indexterm>
text to
	    'left', its menuText to '&amp;Left' and its <indexterm><primary>Properties</primary><secondary>accel</secondary></indexterm>
accel to
	    'CTRL+L'.
	    </para></listitem>

	    <listitem><para id="ajzz">
	    Create another new action within alignActionGroup. Change
	    this action's <indexterm><primary>Properties</primary><secondary>name</secondary></indexterm>
name to 'rightAlignAction' and set its
	    <indexterm><primary>Properties</primary><secondary>toggleAction</secondary></indexterm>
toggleAction property to True. Set its <indexterm><primary>Properties</primary><secondary>iconSet</secondary></indexterm>
iconSet to
	    <filename>textright.xpm</> using the pixmap collection as before.
	    Change its <indexterm><primary>Properties</primary><secondary>text</secondary></indexterm>
text to 'right', its menuText to
	    '&amp;Right' and its <indexterm><primary>Properties</primary><secondary>accel</secondary></indexterm>
accel to 'CTRL+R'.
	    </para></listitem>

	    <listitem><para id="akai">
	    Create a third action within alignActionGroup. Change its
	    <indexterm><primary>Properties</primary><secondary>name</secondary></indexterm>
name to 'centerAlignAction' and make its
	    <indexterm><primary>Properties</primary><secondary>toggleAction</secondary></indexterm>
toggleAction property True. Change its <indexterm><primary>Properties</primary><secondary>iconSet</secondary></indexterm>
iconSet
	    to <filename>textcenter.xpm</>. Change its <indexterm><primary>Properties</primary><secondary>text</secondary></indexterm>
text to 'center'
	    and its <indexterm><primary>Properties</primary><secondary>menuText</secondary></indexterm>
menuText to '&amp;Center'. We won't set an
	    accelerator for this action.
	    </para></listitem>
	    </orderedlist>

	    Note that the <indexterm><primary>Properties</primary><secondary>toolTip</secondary></indexterm>
toolTip and <indexterm><primary>Properties</primary><secondary>statusTip</secondary></indexterm>
statusTip properties were
	    inherited from the action group; you may wish to change
	    these to be specific to the actions concerned.
	    </para>

	    </sect3>

	    <sect3><title>Deleting Actions and Action Groups</title>
	    <para id="akaz">
	    <indexterm><primary>Actions and Action Groups</primary><secondary>Deleting</secondary></indexterm>

	    <indexterm><primary>Deleting</primary><secondary>Actions and Action Groups</secondary></indexterm>

	    We have some actions that we don't intend providing for this
	    first release, for example, the editFindAction and the
	    filePrintAction. Click editFindAction and then click the
	    <indexterm><primary>Toolbar Buttons</primary><secondary>Delete Action</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Delete Action</secondary></indexterm>
<guibutton>Delete Action</> toolbar button. Delete the
	    filePrintAction in the same way. Action Groups (including
	    any actions they contain) can also be deleted with the
	    <indexterm><primary>Toolbar Buttons</primary><secondary>Delete Action</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Delete Action</secondary></indexterm>
<guibutton>Delete Action</> toolbar button.
	    </para>

	    </sect3>
	
	</sect2>

	<sect2><title>Creating and Populating a Toolbar</title>
	<para id="akbo">
	<indexterm><primary>Creating Toolbars</primary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Toolbars</secondary></indexterm>

	<indexterm><primary>Toolbars, Creating</primary></indexterm>

	All the actions we require are now in place and we are ready to
	create a new toolbar and add some of our actions to it. Right
	click on the right hand side of the toolbar area, or on the
	form, then left click Add Toolbar. The new toolbar is empty and
	is visible only by its <emphasis>toolbar handle</>. (Toolbar handle's are
	usually represented as a gray area containing either two thick
	vertical lines or with many small pits). 
	</para>
	
	<para id="akby">
	<indexterm><primary>Actions and Action Groups</primary><secondary>Adding to a Toolbar</secondary></indexterm>

	<indexterm><primary>Separator</primary><secondary>Toolbar button</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Actions and Action Groups to a Toolbar</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Toolbar Separators</secondary></indexterm>

	We'll add the new actions we've just created. Drag the
	alignActionGroup, (not any action it contains), to the new
	toolbar and drop it on the toolbar handle to the right
	of the vertical lines. The three alignment actions will be added
	to the toolbar. The bold, italic and underline actions do not
	belong to an action group, and must be dragged to the toolbar
	individually. Drag the bold action to the toolbar: when the
	mouse is over the toolbar a thick red line will appear
	indicating the position at which the toolbar button will be
	inserted; drop the bold action on the toolbar. Drag the italic
	and underline actions to the toolbar and drop them next to the
	bold button. Separate the alignment toolbar buttons from the
	font related buttons by right clicking the centered toolbar
	button and clicking Insert Separator.
	</para>

	<para id="akcp">
	<indexterm><primary>Separator</primary><secondary>Toolbar button</secondary></indexterm>

	<indexterm><primary>Deleting</primary><secondary>Toolbar Separators</secondary></indexterm>

	<indexterm><primary>Deleting</primary><secondary>Toolbars</secondary></indexterm>

	Toolbar buttons and separators (usually represented as indented
	vertical gray lines), can be dragged and dropped into new
	positions in the toolbar at any time. Separators can be inserted
	by right clicking a toolbar button and clicking Insert
	Separator. Toolbar buttons and separators can be deleted by
	right clicking them and clicking Delete Item. Toolbars can be
	deleted by right clicking their toolbar handle and clicking
	Delete Toolbar.
	</para>

	<para id="akda">
	<indexterm><primary>Previewing</primary><secondary>Toolbars</secondary></indexterm>

	If you preview the application you'll find that both the
	original and new toolbar can be dragged to different docking
	points or dragged out of the application as independent tool
	windows.
	</para>

	    <sect3><title>Adding Widgets to the Toolbar</title>
	    <para id="akdi">
	    <indexterm><primary>Toolbars</primary><secondary>Adding Widgets</secondary></indexterm>

	    <indexterm><primary>Widgets</primary><secondary>Adding to Toolbars</secondary></indexterm>

	    <indexterm><primary>Adding</primary><secondary>Widgets</secondary></indexterm>

	    We want our users to be able to choose the font and font size
	    from the toolbar. To achieve this we'll create a font combobox
	    and a font size spinbox and place them in the formatting toolbar
	    we created in the previous section.
	    </para>

	    <para id="akdp">
	    <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>

	    <indexterm><primary>Widgets</primary><secondary>SpinBox</secondary></indexterm>

	    <indexterm><primary>Separator</primary><secondary>Toolbar button</secondary></indexterm>

	    Click <emphasis>Qt Designer</>'s <indexterm><primary>Toolbar Buttons</primary><secondary>ComboBox</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
<guibutton>ComboBox</> toolbar button and click
	    the last (right-most) toolbar button in the application's
	    new toolbar. Change the combobox's name to 'fontComboBox'.
	    Click the <indexterm><primary>Toolbar Buttons</primary><secondary>SpinBox</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>SpinBox</secondary></indexterm>
<guibutton>SpinBox</> toolbar button and click the
	    combobox we've just added to insert the spinbox next to it.
	    Change the spinbox's <indexterm><primary>Properties</primary><secondary>minValue</secondary></indexterm>
minValue property to 6, its
	    <indexterm><primary>Properties</primary><secondary>value</secondary></indexterm>
value property to 10 and its <indexterm><primary>Properties</primary><secondary>suffix</secondary></indexterm>
suffix to a space
	    followed by 'pt'. Insert a separator to the left of the
	    combobox. 
	    </para>
	   
	   <para id="akea">
	   Although you can put any widget into a toolbar we recommend
	   that widgets which can be associated with an action should
	   <emphasis>not</> be added to the toolbar directly. For these widgets,
	   i.e. menu items, toolbar buttons and lists of items, you should
	   create an action (drop down action for a list of items),
	   associate the action with the widget, and add the action to
	   the toolbar. Widgets that can sensibly be inserted directly
	   into a toolbar are <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
ComboBoxes, <indexterm><primary>Widgets</primary><secondary>SpinBox</secondary></indexterm>
SpinBoxes 
	   and <indexterm><primary>Widgets</primary><secondary>Line Edit</secondary></indexterm>
Line Edits. 
	   </para>

	    </sect3>

	</sect2>

	<sect2><title>Creating Menus</title>
	<para id="akeq">
	<indexterm><primary>Creating Menus</primary></indexterm>

	<indexterm><primary>Menus</primary><secondary>Adding</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Menus</secondary></indexterm>

	We'll now add the actions we added to the new toolbar to a new
	menu and modify the existing menus slightly. 
	</para>

	<para id="akev">
	<indexterm><primary>Menus</primary><secondary>Adding Menu Items</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Menu Items</secondary></indexterm>

	Right click our application's menu bar and click Add Menu Item.
	A new menu item called 'Menu' will appear. Right click this menu
	item and click Rename Item. Change its name to 'F&amp;ormat'.
	Click the menu item and a red bar will appear beneath it --
	this is the empty menu. Drag the alignActionGroup to the Format
	menu item and drop the action group on the menu. (The menu's red
	bar will appear and a thick red line will be drawn where the new
	menu items will appear -- drop when the red line is in the
	position you require.) Now if you click the Format menu item
	the three alignment actions will be displayed. Just like the
	toolbar we must add the bold, italic and underline actions
	individually. Drag the bold action to the Format menu and move
	the mouse so that the red line is positioned at the bottom of
	the menu, then drop the action. Repeat this process for the
	italic and underline actions.
	</para>

	<para id="akfn">
	<indexterm><primary>Creating Menus</primary></indexterm>

	<indexterm><primary>Menus</primary><secondary>Adding</secondary></indexterm>

	<indexterm><primary>Separator</primary><secondary>Menu item</secondary></indexterm>

	<indexterm><primary>Menus</primary><secondary>Adding Menu Separators</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Menu Separators</secondary></indexterm>

	<indexterm><primary>Menus</primary><secondary>Deleting</secondary></indexterm>

	<indexterm><primary>Deleting</primary><secondary>Menus</secondary></indexterm>

	<indexterm><primary>Deleting</primary><secondary>Menu Items</secondary></indexterm>

	<indexterm><primary>Deleting</primary><secondary>Menu Separators</secondary></indexterm>

	We'll now deal with the separators in the menus. Firstly we'll
	add a separator in the Format menu and then we'll remove some
	redundant separators from the other menus. Click the Format menu
	and right click the bold item; click Insert Separator. Click the
	File menu and right click one of the separators above the Exit
	action; click Delete Item. Click the Edit menu, right click the
	separator at the very bottom of the menu and click Delete Item.
	Delete Item can be used to delete separators, menu
	items and menus.
	</para>

	<para id="akfz">
	<indexterm><primary>Menus</primary><secondary>Moving</secondary></indexterm>

	Click the Format menu and drag it to the left of the Help menu,
	then drop the Format menu. (A thick red bar will appear to
	indicate the insertion postion.) Both menus and menu items may
	be dragged and dropped to different positions in the same way. 
	</para>

	<para id="akgg">
	<indexterm><primary>Previewing</primary><secondary>Menus</secondary></indexterm>

	Preview the application and try clicking the alignment and font
	style toolbar buttons and menu items. Qt will automatically keep
	the state of the menu items and the toolbar buttons
	synchronized.
	</para>
		
	</sect2>

	<sect2><title>Adding and Connecting the Main Widget</title>
	<para id="akgq">
	<indexterm><primary>Main Widget</primary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Main Widgets</secondary></indexterm>

	<indexterm><primary>Widgets</primary><secondary>Adding a Main Widget</secondary></indexterm>

	<indexterm><primary>Main Window</primary><secondary>Adding a Main Widget</secondary></indexterm>

	<indexterm><primary>Signals and Slots</primary></indexterm>

	Our application is a rich text editor, but so far there has been
	nowhere for the user to edit text. We'll add a <indexterm><primary>QTextEdit</primary></indexterm>
<classname>QTextEdit</>
	widget and use Qt's signals and slots mechanism to minimize the
	code we have to write to make it functional.
	</para>

	<para id="akgx">
	Click <emphasis>Qt Designer</>'s Richtext Editor (<indexterm><primary>Toolbar Buttons</primary><secondary>Text Edit</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Text Edit</secondary></indexterm>
<guibutton>Text Edit</>) toolbar
	button and click in the center of the form. Click the form, then
	click the <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Horizontally</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Horizontally</secondary></indexterm>
<guibutton>Lay Out Horizontally</> toolbar button. We're
	now ready to make the connections we need; but first we will do
	some renaming to make things easier to understand. Click on the
	<indexterm><primary>Widgets</primary><secondary>Text Edit</secondary></indexterm>
Text Edit widget and change its <indexterm><primary>Properties</primary><secondary>name</secondary></indexterm>
name property to
	'textEdit'. Change the <indexterm><primary>Properties</primary><secondary>textFormat</secondary></indexterm>
textFormat property to 'RichText'.
	Change the <indexterm><primary>Properties</primary><secondary>name</secondary></indexterm>
name of the form to 'EditorForm' and its
	caption to 'Rich Edit'. 
	</para>

	<para id="akhi">
	<indexterm><primary>Clipboard</primary></indexterm>

	<indexterm><primary>Cut and Paste (in Applications)</primary></indexterm>

	The <indexterm><primary>QTextEdit</primary></indexterm>
<classname>QTextEdit</> widget contains built-in functionality for
	cut and paste and various other editing functions. By connecting
	the appropriate signals to our textEdit we can take advantage of
	this functionality without the need to write any code. 
	</para>
	    
		
	    <sect3><title>Connecting Actions to Change Font Attributes</title>
	    <para id="akhr">
	    <indexterm><primary>Signals and Slots</primary><secondary>Connecting Actions</secondary></indexterm>

	    Click the underlineAction in the <indexterm><primary>Dialogs</primary><secondary>Action Editor</secondary></indexterm>
Action Editor, then
	    click the Connect button. The <indexterm><primary>Dialogs</primary><secondary>Edit Connections</secondary></indexterm>
Edit Connections dialog will
	    appear. Click the <indexterm><primary>Signals and Slots</primary><secondary>toggled()</secondary></indexterm>
<function>toggled()</> signal. Since we wish to
	    connect this signal to the text edit widget drop down the
	    Slots combobox and click textEdit. The text edit's slots
	    that can respond to a toggled signal will appear in the
	    right hand list box. Click the <indexterm><primary>Signals and Slots</primary><secondary>setUnderline()</secondary></indexterm>
<function>setUnderline()</> slot,
	    then click <guibutton>OK</>.
	    </para>

	    <para id="akib">
	    Connect up the bold and italic actions in the same way. (For
	    example, click the bold action and click Connect. Click the
	    <indexterm><primary>Signals and Slots</primary><secondary>toggled()</secondary></indexterm>
<function>toggled()</> signal, change the Slots combobox item to
	    textEdit and click the <indexterm><primary>Signals and Slots</primary><secondary>setBold()</secondary></indexterm>
<function>setBold()</> slot. Click <guibutton>OK</>.) If
	    you preview the form you'll find that you can enter text and
	    that choosing bold, italic or underline will work.
	    </para>

	    </sect3>

	    <sect3><title>Connecting Actions to Implement Cut, Copy and Paste, &amp; Undo and Redo</title>
	    <para id="akin">
	    <indexterm><primary>Clipboard</primary></indexterm>

	    <indexterm><primary>Cut and Paste (in Applications)</primary></indexterm>

	    <indexterm><primary>Signals and Slots</primary><secondary>Connecting for Cut</secondary></indexterm>

	    <indexterm><primary>Signals and Slots</primary><secondary>Connecting for Copy</secondary></indexterm>

	    <indexterm><primary>Signals and Slots</primary><secondary>Connecting for Paste</secondary></indexterm>

	    <indexterm><primary>Signals and Slots</primary><secondary>Connecting for Undo</secondary></indexterm>

	    <indexterm><primary>Signals and Slots</primary><secondary>Connecting for Redo</secondary></indexterm>

	    <indexterm><primary>Previewing</primary><secondary>Signals and Slots</secondary></indexterm>

	    <indexterm><primary>Signals and Slots</primary><secondary>Previewing</secondary></indexterm>

	    The cut, copy, paste, undo and redo actions are connected in
	    the same way as the font attributes. For example, click the
	    editPasteAction action and click Connect. Click the
	    <indexterm><primary>Signals and Slots</primary><secondary>activated()</secondary></indexterm>
<function>activated()</> signal, change the Slots combobox item to
	    textEdit and click the <indexterm><primary>Signals and Slots</primary><secondary>paste()</secondary></indexterm>
<function>paste()</> slot. Click <guibutton>OK</> to
	    save the connection. Connect the cut, copy, undo and redo
	    actions in the same way. (For example, click the
	    editCopyAction action, click Connect, click the
	    <indexterm><primary>Signals and Slots</primary><secondary>activated()</secondary></indexterm>
<function>activated()</> signal, change the Slots combobox item to
	    textEdit, click the <indexterm><primary>Signals and Slots</primary><secondary>copy()</secondary></indexterm>
<function>copy()</> slot then click <guibutton>OK</>.) Then
	    the cut, copy, paste, undo and redo actions will all work in
	    preview mode.
	    </para>
	    </sect3>

	    <sect3><title>Connecting for Text Alignment</title>
	    
	    <para id="akjf">
	    <indexterm><primary>Signals and Slots</primary><secondary>Connecting for Text Alignment</secondary></indexterm>

	    <indexterm><primary>Text Alignment</primary></indexterm>

	    We need to create a slot to receive signals from alignment
	    actions and set the textEdit widget's alignment state
	    accordingly. One approach would be to connect each
	    individual alignment action to our slot, but because the
	    align actions are in a group we will connect the
	    alignActionGroup to our slot and determine which alignment
	    the user chose from the <indexterm><primary>QAction</primary></indexterm>
<classname>QAction</> pointer that is
	    passed. 
	    </para>

	    <para id="akjq">
	    Create a new slot with the signature
	    <function>changeAlignment(QAction *align)</>. (Click
	    <indexterm><primary>Menu Options</primary><secondary>Edit|Slots</secondary></indexterm>
<guimenuitem>Edit|Slots</>, click <guibutton>New Slot</>, enter the slot's
	    signature and click <guibutton>OK</>.) Click alignActionGroup in the
	    <indexterm><primary>Dialogs</primary><secondary>Action Editor</secondary></indexterm>
Action Editor, then click <guibutton>Connect</>. Connect the
	    <indexterm><primary>Signals and Slots</primary><secondary>selected(QAction*)</secondary></indexterm>
<function>selected(QAction*)</> signal to our change alignment slot,
	    then click <guibutton>OK</>.
	    </para>

	    <para id="akka">
	    We'll have to write the code to set the alignment ourselves;
	    we'll cover this in <xref linkend="aligning-text"> "Aligning
	    Text".
	    </para>

	    </sect3>

	    <sect3><title>Connecting for Font Names and Sizes</title>
	    <para id="akkj">
	    <indexterm><primary>Connecting</primary><seealso>Signals and Slots</seealso></indexterm>

	    <indexterm><primary>Signals and Slots</primary><secondary>Connecting for Font Sizes</secondary></indexterm>

	    <indexterm><primary>Signals and Slots</primary><secondary>Connecting for Font Names</secondary></indexterm>

	    <indexterm><primary>Font Sizes</primary></indexterm>

	    <indexterm><primary>Previewing</primary><secondary>Signals and Slots</secondary></indexterm>

	    <indexterm><primary>Signals and Slots</primary><secondary>Previewing</secondary></indexterm>

	    We'll start by dealing with font size since it's easiest.
	    Click the <indexterm><primary>Toolbar Buttons</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<guibutton>Connect Signals/Slots</> toolbar button then
	    click the spinbox and drag to the text edit widget; release
	    on the text edit. Click the <indexterm><primary>Signals and Slots</primary><secondary>valueChanged(int)</secondary></indexterm>
<function>valueChanged(int)</> signal
	    and on the textEdit's <indexterm><primary>Signals and Slots</primary><secondary>setPointSize(int)</secondary></indexterm>
<function>setPointSize(int)</> slot. Click <guibutton>OK</>
	    and font sizes are done. (Since font sizes are handled
	    purely through built-in signals and slots they work in
	    preview mode.)
	    </para>

	    <para id="akku">
	    Connect the fontComboBox's <indexterm><primary>Signals and Slots</primary><secondary>activated()</secondary></indexterm>
<function>activated()</> signal to the
	    textEdit's <indexterm><primary>Signals and Slots</primary><secondary>setFamily()</secondary></indexterm>
<function>setFamily()</> slot. This connection will
	    handle updating the textEdit's font family with the user's
	    choice of font. We will have to populate the combobox with
	    the font names for the user to choose from in code. (See the
	    <indexterm><primary>Functions</primary><secondary>init()</secondary></indexterm>
<function>init()</> function in <xref linkend="changing-fonts">
	    "Changing Fonts".) It's a good idea to connect the
	    fontComboBox's <indexterm><primary>Signals and Slots</primary><secondary>activate()</secondary></indexterm>
<function>activate()</> signal to the textEdit's
	    <indexterm><primary>Signals and Slots</primary><secondary>setFocus()</secondary></indexterm>
<function>setFocus()</> slot; this will ensure that after the user
	    has changed font the focus will return to the text. 
	    </para>

	    <para id="aklh">
	    The richedit application is nearly complete. We will have to
	    write code to handle text alignment, font family and
	    file loading and saving. We will also write the code
	    for application exit to deal correctly with any unsaved changes.
	    </para>

	    </sect3>
	
	</sect2>

    </sect1>

    <sect1><title>Converting the Design into an Executable Application</title>
    <para id="aklv">
    <indexterm><primary>Code Editing</primary></indexterm>

    <indexterm><primary>Adding</primary><secondary>Code</secondary><seealso>Code Editing</seealso></indexterm>

    We've built the user interface through <emphasis>Qt Designer</> and connected those slots
    that provided sufficient default functionality. The last steps are to
    code the slots that require customization and then to create
    <indexterm><primary>Files and file types</primary><secondary>main.cpp</secondary></indexterm>
<filename>main.cpp</> so that we can compile and build our application.
    </para>
   	<sect2><title>Implementing the Main Window's Functionality</title>
	<para id="akmc">
	When the user starts the richedit application we want the focus
	to be in the textEdit widget so we'll add one line of code to
	the <indexterm><primary>Functions</primary><secondary>init()</secondary></indexterm>
<function>init()</> function to achieve this. (All the code snippets
	are from <filename>qt/tools/designer/examples/richedit/richedit.ui</>.
<programlisting>
textEdit-&gt;setFocus();  
</programlisting>
	</para>

	    <sect3><title>New Files and Loading and Saving Existing 
	    Files</title>
	    <para id="akmp">
	    The code for these tasks is straightforward. When the user
	    clicks <indexterm><primary>Menu Options</primary><secondary>File|New</secondary></indexterm>
<guimenuitem>File|New</> we check to see if there are
	    unsaved changes in the existing text and give them the
	    opportunity to save, continue without saving or cancel the
	    operation. When the user opts to open an existing file or
	    exit the application we perform the same check and offer
	    them the same choices. 	    
	    </para>

	    <para id="akmz">
<programlisting>
void EditorForm::fileNew()
{
    if ( saveAndContinue( &quot;New&quot; ) )
            textEdit-&gt;clear();
}
</programlisting>
	    The <function>fileNew()</> function clears the text and the filename.
	    </para>

	    <para id="akng">
<programlisting>
void EditorForm::fileOpen()
{
    if ( saveAndContinue( &quot;Open&quot; ) ) {
            <emphasis role="bold">QString</> fn( <emphasis role="bold">QFileDialog::getOpenFileName</>( 
                        <emphasis role="bold">QString::null</>, 
                        &quot;Rich Text Files (*.htm*)&quot;, this ) );   
        if ( !fn.isEmpty() ) {
            fileName = fn;
            <emphasis role="bold">QFile</> file( fileName );
            if ( file.open( IO_ReadOnly ) ) {
                <emphasis role="bold">QTextStream</> ts( &amp;file );
                textEdit-&gt;setText( ts.read() );
            }
        }
    }
}
</programlisting>
	    The <function>fileOpen()</> function asks the user to choose a file
	    using <indexterm><primary>Functions</primary><secondary>QFileDialog::getOpenFileName()</secondary></indexterm>
<function>QFileDialog::getOpenFileName()</>. If they 
	    choose a file we set the fileName member to its name, open
	    it and read its contents directly into the text edit via a
	    text stream. 
	    </para>

	    <para id="aknr">
<programlisting>
void EditorForm::fileSave()
{
    if ( fileName.isEmpty() ) {
        fileSaveAs();
    } else {
        <emphasis role="bold">QFile</> f( fileName );
        if ( f.open( IO_WriteOnly ) ) {
            <emphasis role="bold">QTextStream</> ts( &amp;f );
            ts &lt;&lt; textEdit-&gt;text();
            textEdit-&gt;setModified( FALSE );
        }
    }
}
</programlisting>
	    If there is no current file name we call
	    <function>fileSaveAs()</> which will prompt for a
	    file name and if a file name is given calls
	    <function>fileSave()</>. If we have a file name we
	    open a file and write the text from the text edit into the
	    file via a text stream. We also set the text edit's modified
	    property to FALSE.
	    </para>

	    <para id="akoe">
<programlisting>
void EditorForm::fileSaveAs()
{
    <emphasis role="bold">QString</> fn = <emphasis role="bold">QFileDialog::getSaveFileName</>( 
                                    &quot;&quot;, &quot;Rich Text Files (*.htm*)&quot;, this );
    if ( !fn.isEmpty() ) {
        fileName = fn;
        fileSave();
    }
}
</programlisting>
	    The <function>fileSaveAs</> function prompts the user for a file
	    name and if they give a file name, saves the text to the
	    file by calling <function>fileSave()</>.
	    </para>

	    <para id="akon">
<programlisting>
void EditorForm::fileExit()
{
    if ( saveAndContinue( &quot;Exit&quot; ) )
        qApp-&gt;exit();
}
</programlisting>
	    When we exit the application we must perform the same check
	    for unsaved changes as we've done in the preceding
	    functions, so we've included the <function>fileExit()</> function's
	    code here.
	    </para>

	    <para id="akox">
<programlisting>
int EditorForm::saveAndContinue( const <emphasis role="bold">QString</> &amp; action )
{
    int continueAction = 1;
    
    if ( textEdit-&gt;isModified() ) {  
        switch( <emphasis role="bold">QMessageBox::information</>(     
                this, &quot;Rich Edit&quot;,   
                &quot;The document contains unsaved changes.\n&quot;   
                &quot;Do you want to save the changes?&quot;,   
                &quot;&amp;Save&quot;, &quot;&amp;Don't Save&quot;, &quot;&amp;Cancel &quot; + action,   
                0,<emphasis> // Enter == button 0   
</>
                2 ) ) {<emphasis> // Escape == button 2   
</>
        case 0:<emphasis> // Save; continue  
</>
                     fileSave();  
                break;   
            case 1:<emphasis> // Do not save; continue
</>
                break;   
            case 2:<emphasis> // Cancel
</>
                continueAction = 0;
                break;  
            }          
    }  
    
    return continueAction;
}
</programlisting>
	    The <function>saveAndContinue()</> function is included for
	    completeness. 	    
	    </para>

	    </sect3>

	    <sect3 id="aligning-text"><title>Aligning Text</title>
	    <para id="akpi">
<programlisting>
void EditorForm::changeAlignment( <emphasis role="bold">QAction</> * align )
{
    if ( align == leftAlignAction ) 
        textEdit-&gt;setAlignment( Qt::AlignLeft );
    else if ( align == rightAlignAction )
        textEdit-&gt;setAlignment( Qt::AlignRight );
    else if ( align == centerAlignAction )
        textEdit-&gt;setAlignment( Qt::AlignCenter );
}
</programlisting>
	    We compare the chosen alignment action's pointer to the
	    the pointers stored in the form and if we get a match set
	    the appropriate alignment in the textEdit widget.
	    </para>

	    </sect3>

	    <sect3 id="changing-fonts"><title>Changing Fonts</title>
	    <para id="akpu">
	    We've already connected the fontComboBox's <indexterm><primary>Signals and Slots</primary><secondary>activated()</secondary></indexterm>
<function>activated()</>
	    signal to the textEdit's <indexterm><primary>Signals and Slots</primary><secondary>setFamily()</secondary></indexterm>
<function>setFamily()</> slot so we just
	    have to populate the combobox with the font names when we
	    call <indexterm><primary>Functions</primary><secondary>init()</secondary></indexterm>
<function>init()</>.
<programlisting>
void EditorForm::init()
{
    textEdit-&gt;setFocus();  
 
    <emphasis role="bold">QFontDatabase</> fonts;
    fontComboBox-&gt;insertStringList( fonts.families() );
    <emphasis role="bold">QString</> font = textEdit-&gt;family();
    font = font.lower();
    for ( int i = 0 ; i &lt; fontComboBox-&gt;count(); i++ ) {
        if ( font == fontComboBox-&gt;text( i ) ) {
            fontComboBox-&gt;setCurrentItem( i );
            break;
        }
    }
}
</programlisting>
	    The first line sets the focus as we've already mentioned. We
	    then create a <indexterm><primary>QFontDatabase</primary></indexterm>
<classname>QFontDatabase</> object and insert its
	    list of font families into the fontComboBox. Finally we set
	    the fontComboBox's current item to the textEdit's current
	    font.
	    </para>

	    </sect3>

	</sect2>

	<sect2><title>Making the Application Run</title>
	<para id="akqo">
	<indexterm><primary>Object Hierarchy</primary></indexterm>

	<indexterm><primary>Forms</primary><secondary>Forward declarations</secondary></indexterm>

	<indexterm><primary>Forward declarations</primary></indexterm>

	<indexterm><primary>Includes</primary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Forward declarations</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Includes</secondary></indexterm>

	With all the connections and code in place we are now ready to
	make our application run. Click on the Source tab of the Object
	Hierarchy window and click on the Includes (in Implementation)
	item. We need to include the files that our source code
	depends on. Right click the Includes item and click New. Type in
	<literal>&lt;qapplication.h&gt;</> for <function>fileExit()</>'s <indexterm><primary>Functions</primary><secondary>exit()</secondary></indexterm>
<function>exit()</> call.
	In the same way add <literal>&lt;qmessagebox.h&gt;</> for
	<function>saveAndContinue()</>'s message box, <literal>&lt;qfiledialog.h&gt;</>
	for the <function>fileOpen()</> and <function>fileSaveAs()</> functions, and
	<literal>&lt;qfontdatabase.h&gt;</> for the <indexterm><primary>QFontDatabase</primary></indexterm>
<classname>QFontDatabase</> class
	in <indexterm><primary>Functions</primary><secondary>init()</secondary></indexterm>
<function>init()</>.
	</para>

	<para id="akrc">
	<indexterm><primary>Forms</primary><secondary>Class variables</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Class variables</secondary></indexterm>

	<indexterm><primary>Class variables</primary></indexterm>

	We referred to a member variable, <literal>fileName</literal>,
	in our source code so we must add it to the form. Click the
	Source tab, right click the Class Variables item, click New from
	the pop up menu, then enter 'QString fileName;'.
	</para>

	<para id="akrj">
	<indexterm><primary>Adding</primary><secondary>Files to Projects</secondary></indexterm>

	<indexterm><primary>Projects</primary><secondary>Adding Files</secondary></indexterm>

	Create a <indexterm><primary>Files and file types</primary><secondary>main.cpp</secondary></indexterm>
<filename>main.cpp</> file in a plain text editor. Ours looks
	like this:
<programlisting>
#include &lt;qapplication.h&gt;
#include &quot;richedit.h&quot;

int main( int argc, char *argv[] ) 
{
    <emphasis role="bold">QApplication</> app( argc, argv );

    EditorForm richeditForm;
    app.setMainWidget( &amp;richeditForm );
    richeditForm.show();

    return app.exec();
}
</programlisting>
	</para>

	<para id="akrs">
	In a plain text editor open the <indexterm><primary>Files and file types</primary><secondary>richedit.pro</secondary></indexterm>
<filename>richedit.pro</> project file
	and add the line <literal>SOURCES += main.cpp</> to the end of the file.
	The file should look similar to this:
<programlisting>
TEMPLATE        = app
CONFIG += qt warn_on release
TARGET        = richedit
INTERFACES        = richedit.ui 
DBFILE        = richedit.db
IMAGEFILE        = images.cpp
PROJECTNAME        = richedit
LANGUAGE        = C++
{SOURCES+=images.cpp}
SOURCES += main.cpp
</programlisting>
	<indexterm><primary>Makefiles</primary></indexterm>

	All that's left to do is to generate the Makefile, compile and
	run. The Makefile is created with <indexterm><primary>qmake</primary></indexterm>
<command>qmake</>:
	<literal>qmake -o Makefile richedit.pro</>. 
	</para>

	<para id="akse">
	The richedit application demonstrates how easy it is to create a
	Qt application's main window with menus and dockable toolbars. A
	great deal of functionality was obtained by connecting the
	appropriate built-in signals and slots. The remaining
	functionality was achieved by connecting built-in signals to our
	own custom slots. We could continue developing the application,
	for example updating the fontComboBox, the font size spinbox and
	the actions with the font attributes as the user moves the
	cursor through their text. But our objective has been to
	demonstrate the creation of a main window with actions, menus
	and toolbars so we must stop at this point and leave further
	development and experimentation to you.
	</para>
	
	</sect2>

 
    </sect1>

</chapter>

