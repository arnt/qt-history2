<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
<chapter>
<title id="subclassingdynamicdialogs">
Subclassing and Dynamic Dialogs</title>
<para>
This chapter describes two different approaches that you can take to
creating forms with \qd. Subclassing is used to extend the functionality
of a form by creating your own class based upon a form you create in
\qd. Dynamic dialogs are <filename>.ui</filename> files which can be
executed by a Qt application; this keeps the GUI design and the code
quite distinct and is useful in environments where the GUI may have to
change more often than the underlying application.
</para>

<sect1 id="subclassing">
<title>Subclassing</title>
<para>
We'll start with a general description of how to subclass a form and
follow with a short example.
</para>

<sect2 id="turningdesignersuifilesintosourcecode">
<title>Turning Designer's .ui files into Source Code </title>
<para>
\qd reads and writes \cmd[qmake] <filename>.pro</filename> files
which are used to record the files used to build the application and
from which Makefiles are generated. Designer also reads and writes
<function>.ui</function> (user interface) files. These are XML files
that record the widgets, layouts, source code and settings you've used
for a form. Every <filename>.ui</filename> file is converted by
\cmd[uic] (user interface compiler) into a C++ <filename>.h</filename>
file and a C++ <filename>.cpp</filename> file. These C++ files are then
read by \cmd[moc] (meta object compiler -- the tool that converts Qt's
signals and slots into standard C++), and finally compiled by your
compiler into a working application.
</para>

<para>
If you create applications wholly within \qd you need only create a
<filename>main.cpp</filename> and add 
<programlisting>
SOURCES += main.cpp
</programlisting>
at the end of your project's <filename>.pro</filename> file. You can
then use \cmd[qmake] to generate the Makefile. Running \cmd[make] or
\cmd[nmake] will then call \cmd[uic], \cmd[moc] and your compiler as
necessary to build your application.
</para>

<para>
If you use \qd to create your main window and dialogs, but also add
other C++ files, or if you subclass any of your forms you will need to
add these files to the <filename>.pro</filename> file so that they are
compiled with the rest of your application's source files. Each
<filename>.h</filename> file that you create separately from \qd should
be added to the <literal>HEADERS</literal> line, and each
<filename>.cpp</filename> file should be added to the
<literal>SOURCES</literal> line, just as we've done for
<filename>main.cpp</filename>. If you get undefined reference errors it
is worth checking that you've added the names of all your header and
implementation files to the <filename>.pro</filename> file.
</para>

</sect2>


<sect2 id="subclassingaform">
<title>Subclassing a Form </title>

<para>
Adding slots directly in \qd is a useful technique suitable for most
situations. But in some cases we want to use our own constructor or
destructor rather than the supplied <function>init()</function> and
<function>destroy()</function> functions. Also, for more complex
applications, it may be easier to debug the code in separate files since
the line numbers in error messages refer to the lines where our code
appears in the generated code rather where they appear in \qd's code
editor.
</para>

<para>
If we're going to subclass a form it may be helpful to use a naming
convention for the form to help us see which files are generated from
\qd's <filename>.ui</filename> files and which are hand coded. 
</para>
<para>
For example, suppose we have an application with a dialog that we want
to subclass. If we were writing the code directly in \qd we might call
the dialog form 'SettingsDialog' and the <filename>.ui</filename>
file, <filename>settingsdialog.ui</filename>. If we intend
subclassing we suggest that you call the form 'SettingsDialogBase'
and its <filename>.ui</filename> file,
<filename>settingsdialogbase.ui</filename>. You would then call your
subclass files <filename>settingsdialog.h</filename> and
<filename>settingsdialog.cpp</filename>. The class name of the form
would be 'SettingsDialogBase', and you would derive from this class
calling your subclass 'SettingsDialog'. 
</para>
<para>
Any subclass of a form should include the <literal>Q_OBJECT</literal>
macro. Once you've created your subclass be sure to add the
<filename>.h</filename> and the <filename>.cpp</filename> files to the
<filename>.pro</filename> project file. For example we would add the
following lines for our subclassed 'SettingsDialog' at the end of the
<filename>.pro</filename> file:
<programlisting>
HEADERS += settingsdialog.h
SOURCES += settingsdialog.cpp
</programlisting>
\qd will have added
<programlisting>
INTERFACES = settingsdialogbase.ui
</programlisting>
to the project file. The <filename>settingsdialog.h</filename> and
<filename>settingsdialog.cpp</filename> files will be generated from the
<filename>.ui</filename> file.
</para>
</sect2>


<sect2 id="asubclassingexample">
<title>A Subclassing Example </title>
<para>
We will write a small example dialog to show the use of subclassing in
practice. Our dialog will ask the user to enter either a Customer ID or
a Customer Name but not both. We'll implement this functionality in a
subclass. We'll start by creating the base form and
connecting up its signals and slots, then we'll create the subclass and
a simple <filename>main.cpp</filename> so that we can test it.
</para>
<orderedlist numeration="arabic">
<listitem>
<para>
Click <guimenuitem>File|New Project</guimenuitem> and type in a project
name of 'customer' and a project file name of 'customer.pro' then click
\ok. 
</para>
</listitem>
<listitem>
<para>
Click <guimenuitem>File|New</guimenuitem> to invoke the New Form
dialog. The default form is Dialog which is what we want; click \ok.
</para>
</listitem>
<listitem>
<para>
Resize the form to make it smaller; it should be about 3 inches (5 cm)
wide by about 1.5 inches (3 cm) high. Change the form's name to
'CustomerDialogBase' and the caption to 'Customer ID'. Save the form as
'customerdialogbase.ui'
</para>
</listitem>
<listitem>
<para>
Click the <guibutton>Text Label</guibutton> toolbar button, then click
on the form towards the top left.
</para>
</listitem>
</orderedlist>

</sect2>

</sect1>

<sect1 id="creatingdynamicdialogsfromuifiles">
<title>Creating Dynamic Dialogs from .ui Files </title>
<para>

</para>
</sect1>
</chapter>

