<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
<chapter>
<title>Using Qt Designer's Value Editors</title>
<para>
\qd provides value editors which allow you to set up and create default
values for some of the widgets. In this chapter we'll explain how to use
the value editors, but first we'll briefly describe the Choose a Pixmap
dialog since this is used by many of the value editors. 
</para>

<sect1 id="sharedpixmaps">
<title>Shared Pixmaps </title>
<para>
The first version of \qd kept static pixmaps (icons) in each form's
<filename>.cpp</filename> file. This was inefficient if the same pixmaps
were required in several different forms. \qd now creates a default
file, <filename>images.cpp</filename>, in which it places a single copy
of each pixmap used in the application.
</para>
<para>
To add pixmaps to the application click <guimenuitem>Edit|Pixmap
Collection</guimenuitem> to invoke the Choose a Pixmap dialog. Any
pixmaps already in the project are shown in the icon view. You can add
additional pixmaps by clicking <guibutton>Add</guibutton> which will pop
up a file dialog through which you can choose a pixmap. 
</para>
<para>
If you create a widget which has an iconSet or pixmap
property you can click the ellipsis button next to the pixmap to invoke
the Choose a Pixmap dialog through which you can select a pixmap for
the widget. Some widgets can hold multiple pixmaps, for example a list
box can hold both pixmaps and text. The list box's value editor can be
used to add pixmaps as required. (This is described in <xref
linkend="listbox"> "ListBox".)
</para>
<para>
If you really want to store pixmaps in a particular form rather than in
<filename>images.cpp</filename> you can do so: right click the form,
then click <guimenuitem>Form Settings</guimenuitem>; click 'Save
Inline', then click \ok.
</para>
</sect1>


<sect1 id="listbox">
<title>ListBox and ComboBox</title>
<para>
<figure>
<title>Edit List Box Dialog</title>
\img[listbox]
</figure>
This value editor allows us to hard-code list items. We can always
change them in code at runtime. A list item consists of some text or a
pixmap or both. Item's are added by clicking the <guibutton>New
Item</guibutton> button and deleted by clicking <guibutton>Delete
Item</guibutton>. The order of items can be changed by clicking an item
in the list to select it and clicking the up or down blue arrows to move
the selected item. If you want a pixmap click the ellipsis
(<guibutton>...</guibutton>) button which will pop up the Choose a
Pixmap dialog. You can either choose one of the pixmaps shown or click
<guibutton>Add</guibutton> to add one from somewhere in your filesystem.
To remove a pixmap click the item, then click the scissors button. 
</para>
<para>
You can see how the list will look on the form by clicking
<guibutton>Apply</guibutton>. If you want to revert all your changes
after you've applied them click \ok (or <guibutton>Cancel</guibutton>)
then press <keycap>Ctrl+Z</keycap> (undo).
</para>
<para>
The same value editor is used for list boxes and combo boxes.
</para>
</sect1>


<sect1 id="listviewtreeview">
<title>ListView (Tree View) </title>
<para>

</para>
</sect1>


<sect1 id="textedit">
<title>TextEdit </title>
<para>
This widget is a multi-line editor (replacing <classname>QMultiLineEdit</classname>),
which can also display rich text
</para>
</sect1>

<sect1 id="table">
<title>Table </title>
<para>

</para>
</sect1>


<sect1 id="iconview">
<title>IconView </title>
<para>

</para>
</sect1>
</chapter>
