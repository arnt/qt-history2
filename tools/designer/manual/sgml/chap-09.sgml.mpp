<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
<chapter>
<title>The File Format of .ui Files</title>

    <para>
    Qt Designer's <filename>.ui</> files are a type of XML file. They
    follow a certain <emphasis>Document Type Definition</> (DTD)
    called <literal>UI</>. This chapter is not a formal specification
    of the DTD but rather a description of how these files are
    constructed and the syntax they follow. This information will
    enable you to quickly change things directly in the files without
    having to start Qt Designer or even mass-manipulate
    <filename>.ui</> files with Perl scripts or other text
    manipulation tools. It is also conceivable to have a tool that
    extracts translatable strings from the <filename>.ui</> files,
    even though Qt has other methods for this that apply at a later
    stage (namely, on the generated source files).
    </para>

    <para>
    Each <filename>.ui</> file consists of the following parts in this
    order:
    </para>

    <orderedlist>
	<listitem>
	<para>
	The literal string <literal>&lt;!DOCTYPE UI&gt;&lt;UI&gt;.</>
	</para>
	</listitem>

	<listitem>
	<para>
	Header elements.
	</para>
	</listitem>

	<listitem>
	<para>
	Exactly one <literal>&lt;widget&gt;</> element to describe the
	top-level widget of the form.
	</para>
	</listitem>

	<listitem>
	<para>
	Optionally, a collection of pixmaps in an
	<literal>&lt;images&gt;</> element.
	</para>
	</listitem>

	<listitem>
	<para>
	Optionally, a section that describes the used custom widgets.
	</para>
	</listitem>

	<listitem>
	<para>
	Optionally, a section on defined connections and slots.
	</para>
	</listitem>

	<listitem>
	<para>
	Optionally, a section on the tab-chain.
	</para>
	</listitem>

	<listitem>
	<para>
	The literal string <guimenuitem>&lt;|UI&gt;.</>
	</para>
	</listitem>
    </orderedlist>

    <para>
    We will now explain each of these parts.
    </para>

    <sect1>
    <title>Header Elements</title>

	<para>
	Header elements describe general information about the form.
	All are optional.
	</para>

	<programlisting>
&lt;class&gt;
</programlisting>

	<para>
	If this element is specified, its content is used as the name
	of the class that <command>uic</> generates. Otherwise the
	name of the top-level widget is used.
	</para>

	<programlisting>
&lt;comment&gt;
</programlisting>

	<para>
	If you have entered a comment in the <guilabel>Form
	Settings</>dialog, this is where it will appear. It will not
	appear in the generated source code, however.
	</para>

	<programlisting>
&lt;author&gt;
</programlisting>

	<para>
	This element contains information about the author of the
	form, but the information will not appear in the generated
	source code.
	</para>

	<programlisting>
&lt;include&gt;
</programlisting>

	<para>
	Any specified additional include files in the <guilabel>Form
	Settings</>dialog will appear here.
	</para>

	<programlisting>
&lt;pixmapfunction&gt;
</programlisting>

	<para>
	This element names any function specified for loading pixmaps.
	If you use this function, images cannot be listed in the
	<literal>&lt;images&gt;</> element (described later in this
	chapter).
	</para>
    </sect1>

    <sect1>
    <title>The &lt;widget&gt; Element</title>

	<para>
	As its name implies, the widget element describes one widget.
	At the uppermost level of the <filename>.ui</> file there can
	be only one such element for the top-level widget of the form,
	but this element can in turn contain other
	<literal>&lt;widget&gt;</> elements.
	</para>

	<para>
	A <literal>&lt;widget&gt;</> element can have the following
	subelements:
	</para>

	<programlisting>
&lt;class&gt;
</programlisting>

	<para>
	There can be only one such element to describe the C++ class
	of the widget (like <classname>QWidget</>).
	</para>

	<programlisting>
&lt;property&gt;
</programlisting>

	<para>
	There can be any number of such elements that describe the
	properties of the widget that differ from the default (see the
	next section for a description of how
	<literal>&lt;property&gt;</> elements should look).
	</para>

	<programlisting>
&lt;attribute&gt;
</programlisting>

	<para>
	There can be any number of such elements that describe the
	attributes of the widget. Attributes are like properties but
	are not defined in the widget and need to be treated
	specially. This element has the same syntax as the
	<literal>&lt;property&gt;</> element.
	</para>

	<programlisting>
&lt;item&gt;
</programlisting>

	<para>
	There can be any number of such elements that describe the
	items of this widget if the widget can contain items (like
	list boxes or icon views). See Section 9.2.6 for the exact
	syntax of this item.
	</para>

	<programlisting>
&lt;column&gt;
</programlisting>

	<para>
	There can be any number of such elements that describe the
	columns of this widget if the widget is a list view. See
	Section 9.2.7 for the exact syntax of this item.
	</para>

	<variablelist>
	    <varlistentry>
		<term>Child widgets</term>
		<listitem>
		<para>
		Child widgets can be specified in one of four ways:
		</para>
		</listitem>
	    </varlistentry>
	</variablelist>

	<orderedlist>
	    <listitem>
	    <para>
	    Any number of <literal>&lt;widget&gt;</> elements If the
	    widget does not use any layout management, the children
	    are directly specified as <literal>&lt;widget&gt;</>
	    elements.
	    </para>
	    </listitem>

	    <listitem>
	    <para>
	    One <literal>&lt;hbox&gt;</> element If the widget uses a
	    horizontal box layout as its outermost layout, only one
	    <literal>&lt;hbox&gt;</> is specified, which in turn
	    specifies the child widgets (see Section 9.2.2 for the
	    exact syntax of this element).
	    </para>
	    </listitem>

	    <listitem>
	    <para>
	    One <literal>&lt;vbox&gt;</> element If the widget uses a
	    vertical box layout as its outermost layout, only one
	    <literal>&lt;vbox&gt;</> is specified, which in turn
	    specifies the child widgets (see Section 9.2.3 for the
	    exact syntax of this element).
	    </para>
	    </listitem>

	    <listitem>
	    <para>
	    One <literal>&lt;grid&gt;</> element If the widget uses a
	    grid layout as its outermost layout, only one
	    <literal>&lt;grid&gt;</> is specified, which in turn
	    specifies the child widgets (see Section 9.2.4 for the
	    exact syntax of this element).
	    </para>
	    </listitem>
	</orderedlist>
    </sect1>

    <sect1>
    <title>The &lt;property&gt; Element</title>

	<para>
	This element describes a property of a widget or a layout.
	Each property has as its first child a
	<literal>&lt;name&gt;</> element to describe the name of the
	property (like <literal>geometry</>); its second child is an
	element whose name describes the type and whose contents
	describe the value of the property. Table 9-1 lists the
	possible type names together with a description of their
	values.
	</para>
    </sect1>

    <sect1>
    <title>The &lt;hbox&gt; Element</title>

	<para>
	This element describes a layout that arranges its children
	from left to right. It must be a child of a
	<literal>&lt;widget&gt;</> element. This widget is normally a
	container widget (e.g., a <classname>QGroupBox</>) or a temporary
	<classname>QLayoutWidget</>. The following child elements are
	defined:
	</para>

	<screen>
&lt;property&gt;
</screen>

	<para>
	There can be any number of these elements, which describe a
	property of the layout.
	</para>

	<screen>
&lt;widget&gt;
</screen>

	<para>
	There can be any number of these elements, which describe a
	child widget that is managed by the layout.
	</para>

	<screen>
&lt;spacer&gt;
</screen>

	<para>
	There can be any number of these elements, which describe a
	spacer in the layout (see Section 9.2.5).
	</para>
    </sect1>

    <sect1>
    <title>The &lt;vbox&gt; Element</title>

	<para>
	This element describes a layout that arranges its children
	from top to bottom. It must be a child of a
	<literal>&lt;widget&gt;</> element. This widget is usually a
	container widget (e.g., a <classname>QGroupBox</>) or a temporary
	<classname>QLayoutWidget</>. The following child elements are
	defined:
	</para>

	<screen>
&lt;property&gt;
</screen>

	<para>
	There can be any number of these elements, which describe a
	property of the layout.
	</para>

	<programlisting>
&lt;widget&gt;
</programlisting>

	<para>
	There can be any number of these elements, which describe a
	child widget that is managed by the layout.
	</para>

	<programlisting>
&lt;spacer&gt;
</programlisting>

	<para>
	There can be any number of these elements, which describe a
	spacer in the layout (see Section 9.2.5).
	</para>
    </sect1>

    <sect1>
    <title>The &lt;grid&gt; Element</title>

	<para>
	This element describes a layout that arranges its children in
	a grid. It must be a child of a <literal>&lt;widget&gt;</>
	element. This is normally a container widget (e.g., a
	<classname>QGroupBox</>) or a temporary <classname>QLayoutWidget</>.
	The following child elements are defined:
	</para>

	<screen>
&lt;property&gt;
</screen>

	<para>
	There can be any number of these elements, which describe a
	property of the layout.
	</para>

	<screen>
&lt;widget&gt;
</screen>

	<para>
	There can be any number of these elements, which describe a
	child widget that is managed by the layout.
	</para>

	<para>
	Besides the elements ordinarily defined as subelements of
	<literal>&lt;widget&gt;</>, there can be
	<literal>&lt;row&gt;</> and <literal>&lt;col&gt;</> elements,
	which specify the position of the widget in the grid. These
	elements themselves can have one or both of the attributes
	<literal>rowspan</> and <literal>colspan</>, which specify the
	number of rows and columns the cell should cover. The default
	is 1.
	</para>

	<screen>
&lt;spacer&gt;
</screen>

	<para>
	There can be any number of these elements, which describe a
	spacer in the layout (see the next section).
	</para>

	<para>
	Besides the elements ordinarily defined as subelements of
	<literal>&lt;spacer&gt;</>, there can be
	<literal>&lt;row&gt;</> and <literal>&lt;col&gt;</> elements,
	which specify the position of the widget in the grid. These
	elements themselves can have one or both of the attributes
	<literal>rowspan</> and <literal>colspan</>, which specify the
	number of rows and columns the cell should cover. The default
	is 1.
	</para>
    </sect1>

    <sect1>
    <title>The &lt;spacer&gt; Element</title>

	<para>
	This element describes a spacer item inside a layout. It has
	four properties:
	</para>

	<screen>
name
</screen>

	<para>
	This property of the type <literal>string</> describes the
	name of the item.
	</para>

	<screen>
orientation
</screen>

	<para>
	This property, of the type <literal>enum</> with the valid
	values <literal>Horizontal</> and <literal>Vertical</>,
	describes the orientation of the item.
	</para>

	<screen>
sizeType
</screen>

	<para>
	This property of the type <literal>enum</> describes how the
	item expands in its direction. See the Qt Reference
	Documentation for size policies for more information.
	</para>

	<screen>
geometry
</screen>

	<para>
	This property of the type <literal>rect</> describes the
	geometry of the spacer, which is normally useful only for
	fixed spacing.
	</para>
    </sect1>

    <sect1>
    <title>The &lt;item&gt; Element</title>

	<para>
	This element describes an item of a widget if this widget can
	contain items (like list boxes, icon views, etc.). The item
	element contains exactly one child element that describes the
	item. This child element is a <literal>&lt;property&gt;</>
	element. Valid property names are <literal>text</> and
	<literal>pixmap</>, depending on where to insert the item.
	</para>

	<para>
	As list views can hold a tree of items, the
	<literal>&lt;item&gt;</> element can contain other
	<literal>&lt;item&gt;</> elements which are then child items.
	Also, as list views can have many columns, an
	<literal>&lt;item&gt;</> element contains a <literal>text</>
	and a <literal>pixmap</> property for each column. The columns
	of a list view are described with a <literal>&lt;column&gt;</>
	element (see Section 9.2.7 below).
	</para>
    </sect1>

    <sect1>
    <title>The &lt;column&gt; Element</title>

	<para>
	This element describes the columns of a list view widget. A
	list view can contain multiple column elements. A column
	element may contain the following properties, all of them
	optional:
	</para>

	<screen>
text
</screen>

	<para>
	This property of type <literal>string</> contains the column
	label.
	</para>

	<screen>
pixmap
</screen>

	<para>
	This property of type <literal>pixmap</> contains the column
	pixmap.
	</para>

	<screen>
resizable
</screen>

	<para>
	This property of type <literal>bool</> indicates whether the
	column may be resized by the user.
	</para>

	<screen>
movable
</screen>

	<para>
	This property of type <literal>bool</> indicates whether the
	column may be moved by the user.
	</para>
    </sect1>

    <sect1>
    <title>Pixmaps Within The &lt;images&gt; Element</title>

	<para>
	Images are saved in a shared fashion to decrease file size.
	This means that each image is assigned a key that is used in
	the pixmap, image, or icon set properties. These images are
	later saved all at once in the image collection. The images
	are written in either PNG format or compressed XPM format with
	each character converted to a hex code. The format is
	specified in the <literal>&lt;data&gt;</> element, using the
	<literal>format</> attribute. Here is an example of an image
	collection with one entry:
	</para>

	<screen>
&lt;images&gt;
  &lt;image&gt;
    &lt;name&gt;key&lt;/name&gt;
    &lt;data format="PNG|XPM.GZ"&gt;PNG or XMP.GZ data in hexadecimal format&lt;/data&gt;
  &lt;/image&gt;
&lt;/images&gt;
</screen>
    </sect1>

    <sect1>
    <title>Custom Widgets</title>

	<para>
	A form created by Qt Designer can contain custom widgets. In
	order to create code for them, some information about these
	custom widgets has to be stored. This is done in the
	<literal>&lt;customwidgets&gt;</> element. This element
	contains any number of <literal>&lt;customwidget&gt;</>
	subelements, which in turn have the following child elements:
	</para>

	<screen>
&lt;class&gt;
</screen>

	<para>
	This element contains the class name of the custom widget.
	</para>

	<screen>
&lt;header&gt;
</screen>

	<para>
	This element specifies the header file of the custom widget
	that will be included in the code generation. This element has
	an attribute named <literal>location</>, which can have the
	values <literal>local</> or <literal>global</>.
	</para>

	<screen>
&lt;sizehint&gt;
</screen>

	<para>
	By means of its two subelements <literal>&lt;width&gt;</> and
	<literal>&lt;height&gt;</>, this element describes the size
	hint that should be used in Qt Designer.
	</para>

	<screen>
&lt;pixmap&gt;
</screen>

	<para>
	This element describes the pixmap that should be used to
	represent the custom widget in Qt Designer.
	</para>

	<screen>
&lt;signal&gt;
</screen>

	<para>
	There can be any number of these elements, which describe the
	signals the custom widget has.
	</para>

	<screen>
&lt;slots&gt;
</screen>

	<para>
	There can be any number of these elements, which describe the
	slots the custom widget has.
	</para>

	<screen>
&lt;property&gt;
</screen>

	<para>
	There can be any number of these elements, which describe the
	properties of this custom widget. This element has an
	attribute named <literal>type</>, which describes the type of
	the property.
	</para>
    </sect1>

    <sect1>
    <title>Defined Connections And Slots</title>

	<para>
	The element <literal>&lt;connections&gt;</> contains any
	number of <literal>&lt;connection&gt;</> elements, each of
	which describes one connection between the widgets of this
	form. The <literal>&lt;connection&gt;</> element has the
	following subelements; there can only be one of each:
	</para>

	<screen>
&lt;sender&gt;
</screen>

	<para>
	This element specifies the name of the sender widget.
	</para>

	<screen>
&lt;signal&gt;
</screen>

	<para>
	This element specifies the name of the signal.
	</para>

	<screen>
&lt;receiver&gt;
</screen>

	<para>
	This element specifies the name of the receiver widget.
	</para>

	<screen>
&lt;slot&gt;
</screen>

	<para>
	This element specifies the name of the slot.
	</para>

	<para>
	Since it is possible to add custom slots to forms that widgets
	can connect to, these custom slots are also defined in this
	element. For each slot there is a <literal>&lt;slot&gt;</>
	element, with an attribute called <literal>access</> to
	describe the access policy of this slot; valid values are
	<literal>public</> and <literal>protected</>.
	</para>
    </sect1>

    <sect1>
    <title>Tab-Chain</title>

	<para>
	The tab-chain of the form is defined in a
	<literal>&lt;tabstops&gt;</> element, which in turn has any
	number of <literal>&lt;tabstop&gt;</> elements. Each of these
	specifies the name of the widget. There is one
	<literal>&lt;tabstop&gt;</> element for each widget in the
	form that can accept focus. The order of the
	<literal>&lt;tabstop&gt;</> specifies the order of the
	tab-chain.
	</para>
    </sect1>
</chapter>
