<chapter id="creating-database-applications">
<title>Creating Database Applications</>

<para id="afge">
<indexterm><primary>Databases</primary></indexterm>

<indexterm><primary>SQL</primary></indexterm>

This chapter shows you how to use Qt's data-aware widgets from within
<emphasis>Qt Designer</>. It demonstrates <literal>INSERT</>, <literal>UPDATE</> and <literal>DELETE</> in both <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>s
(tables) and <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</>s (forms). It also shows how to code
Master-Detail relationships and Drilldown. A simple approach to foreign
key handling is presented here; a more sophisticated approach is shown
in the online SQL module documentation.
</para>

<para id="afgn">
<indexterm><primary>Databases</primary><secondary>Drivers</secondary></indexterm>

<indexterm><primary>QODBC3, Database driver</primary></indexterm>

<indexterm><primary>QOCI8, Database driver</primary></indexterm>

<indexterm><primary>QPSQL7, Database driver</primary></indexterm>

<indexterm><primary>QMYSQL3, Database driver</primary></indexterm>

<indexterm><primary>Databases</primary><secondary>Drivers</secondary><tertiary>QODBC3</tertiary></indexterm>

<indexterm><primary>Databases</primary><secondary>Drivers</secondary><tertiary>QOCI8</tertiary></indexterm>

<indexterm><primary>Databases</primary><secondary>Drivers</secondary><tertiary>QPSQL7</tertiary></indexterm>

<indexterm><primary>Databases</primary><secondary>Drivers</secondary><tertiary>QMYSQL3</tertiary></indexterm>

If you wish to run the examples or create your own applications using
these widgets you need access to an SQL database and a Qt database driver
that can connect to the database. At the time of writing the drivers
that Qt supports are QODBC3 (Open Database Connectivity), QOCI8 (Oracle),
QPSQL7 (PostgreSQL 6 and 7) and QMYSQL3 (MySQL).
</para>

<para id="afgv">
<indexterm><primary>Widgets</primary><secondary>Data Aware</secondary></indexterm>

<indexterm><primary>Data Aware Widgets</primary></indexterm>

<indexterm><primary>Databases</primary><secondary>Data Aware Widgets</secondary></indexterm>

Although you can use the Qt data-aware widgets to browse and edit data
in SQL databases without having to write any SQL, a basic understanding
of SQL is highly recommended. We assume that you have some familiarity with
<literal>SELECT</>, <literal>INSERT</>, <literal>UPDATE</> and <literal>DELETE</> statements. We also assume a basic
understanding of the concepts of normalisation and of primary and
foreign keys. A standard text covering SQL databases is <citetitle
pubwork="book">An Introduction to Database Systems (7th ed.)</> by C. J.
Date, ISBN 0201385902.
</para>

<para id="afhg">
<indexterm><primary>In-place Editing</primary></indexterm>

<indexterm><primary>Databases</primary><secondary>In-place Editing</secondary></indexterm>

In the following text we describe the creation of a 'book' database
application. The application demonstrates how to use
<indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>s including in-place record editing and how to set
up master-detail relationships between <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>s. It also
explains how to drill down from a <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> to another
widget, for example, to a <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</> or a <indexterm><primary>QDataView</primary></indexterm>
<classname>QDataView</>
and how to perform record editing in a <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</>. A great
deal of functionality is available from the classes directly in <emphasis>Qt Designer</>
although subclassing is always available for finer control. If you
want to build the 'book' examples you will need to create the example
schema on your database.  <figure><title>The Book Application</title>
<graphic fileref="images\book-main.png"></graphic>
</figure>
</para>

<sidebar><title>The Example Schema</title>
<para id="afhx">
Note that the examples in this chapter all use the tables, views and
records which are defined in the
<filename>qt/tools/designer/examples/book/book.sql</> file. This file has
been tested with PostgreSQL 6 and PostgreSQL 7. You may need to modify
the SQL in this file to recreate the example database on your own
system.

<example><title>Schema <literal>CREATE TABLE</> Statements</><programlisting>
CREATE TABLE author 
( id integer, 
forename varchar(40), 
surname varchar(40) );
CREATE TABLE book 
( id integer, 
title varchar(40), 
price numeric(10,2), 
authorid integer, 
notes varchar(255) );
CREATE TABLE sequence
( tablename varchar(10),
sequence numeric);
</programlisting></example>

The 'book' table is simplified for the purposes of the example. It can
only relate a book to a single author (authorid) and lacks an ISBN
field.  The 'sequence' table is used for generating unique index
values for the example tables.  Note that SQL databases often provide
their own method for creating sequences (for example, using the
<literal>CREATE SEQUENCE</> command) which is very likely to be a more
optimal solution. For the sake of portability the examples will use a
'sequence' table which will work with the vast majority of SQL
databases.
</para>
</sidebar>

<sect1 id="setting-up-database-connections">
<title>Setting Up Database Connections</>

    <para id="afja">
    <indexterm><primary>Databases</primary><secondary>Connecting to Database Servers</secondary></indexterm>

    <indexterm><primary>Connecting</primary><secondary>Databases to Database Servers</secondary></indexterm>

    There are two aspects of database connections that we must consider.
    Firstly the connection we wish to use within <emphasis>Qt Designer</> itself, and
    secondly the connection we wish to use in the applications that we
    create.
    </para>

    <sect2 id="setting-up-qt-designers-connections">
	<title>Setting Up <emphasis>Qt Designer</>'s Connections</>

	<para id="afjk">
	<figure><title>Database Connections Dialog</title>
	<graphic fileref="images\database-connections.png"></graphic>
	</figure>
	Choose <indexterm><primary>Menu Options</primary><secondary>Edit|Database Connections</secondary></indexterm>
<guimenuitem>Edit|Database Connections</> from the menu
	bar. The <indexterm><primary>Dialogs</primary><secondary>Database Connections</secondary></indexterm>
Database Connections dialog will appear. Click
	<guibutton>New Connection</>. For applications that use a single
	database it will probably be most convenient to use the default
	connection name of '(default)'. If you use more than one
	database then each one must be given a unique name. A driver must be
	chosen from the Driver combo box. The database name may be
	available in the Database Name combo box or may have to be typed
	in. The database name, username, password and hostname should be
	provided by your database system administrator. When the
	Connection information has been completed click
	<guibutton>Connect</>. If the connection is made the connection
	name will appear in the list box on the left hand side of the
	dialog. You can now close the dialog; the connection settings
	will remain in effect until you change or delete them or exit
	from <emphasis>Qt Designer</>.
	</para>

	<para id="afkg">
	<indexterm><primary>Projects</primary><secondary>Database Connections</secondary></indexterm>

	<emphasis>Qt Designer</> can remember database connection settings in
	<command>qmake</> project files. Create a new project, e.g.
	click <indexterm><primary>Menu Options</primary><secondary>File|New Project</secondary></indexterm>
<guimenuitem>File|New Project</> and complete the 
	<indexterm><primary>Dialogs</primary><secondary>Project Settings</secondary></indexterm>
Project Settings dialog. 
	<!-- (See <xref linkend="using-project-files">
	"Using Project Files".) --> Next time you start <emphasis>Qt Designer</> instead of
	opening individual <literal>.ui</> files open the
	<literal>.pro</> project file instead and <emphasis>Qt Designer</> will
	automatically reload the project's connection settings.  To
	activate the connection click <indexterm><primary>Menu Options</primary><secondary>Edit|Database Connections</secondary></indexterm>
<guimenuitem>Edit|Database Connections</>. 
	The connections previously saved with the
	project will be listed in the left hand list box. Click the
	connection you wish to use and then click <guibutton>Connect</>. This
	connection will be used from now on, e.g. for previewing
	<indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>s. Opening a project file also causes <emphasis>Qt Designer</> to
	load in the list of forms associated with the project into the
	Form List window. In most of the explanation that follows we
	will assume that you use project files and have clicked
	<guibutton>Connect</> so that there is always a connection available
	when you work in
	<emphasis>Qt Designer</>.
	</para>

    </sect2>

    <sect2 id="setting-up-connections-for-applications">
    <title>Setting Up Connections for Applications</>

	<para id="aflh">
	The applications you create must make their own connections to
	the SQL database.
<example><title><indexterm><primary>Functions</primary><secondary>createConnections()</secondary></indexterm>
<function>createConnections()</> function</><programlisting>
bool createConnections()
{
    // create the default database connection
    <emphasis role="bold">QSqlDatabase</> *defaultDB = <emphasis role="bold">QSqlDatabase::addDatabase</>( &quot;QPSQL7&quot; );
    if ( ! defaultDB ) {
        qWarning( "Failed to connect to driver" );
        return FALSE;
    }
    defaultDB-&gt;setDatabaseName( &quot;book&quot; );
    defaultDB-&gt;setUserName( &quot;bookuser&quot; );
    defaultDB-&gt;setPassword( &quot;bookpw&quot; );
    defaultDB-&gt;setHostName( &quot;bookhost&quot; );
    if ( ! defaultDB-&gt;open() ) {
        qWarning( &quot;Failed to open books database: &quot; +
                  defaultDB-&gt;lastError().driverText() );
        qWarning( defaultDB-&gt;lastError().databaseText() );
        return FALSE;
    }

    return TRUE;
}
</programlisting></example>
	We call <indexterm><primary>Functions</primary><secondary>addDatabase()</secondary></indexterm>
<function>addDatabase()</> passing it the name of the
	driver we wish to use. We then set the connection information by
	calling the <literal>set...</> functions. Finally we attempt to
	open the connection. If we succeed we return TRUE, otherwise we
	output some error information and return FALSE.
<example><title>From <filename>qt/tools/designer/examples/book/book1/main.cpp</></><programlisting>
int main( int argc, char *argv[] ) 
{
    <emphasis role="bold">QApplication</> app( argc, argv );

    if ( ! createConnections() ) 
        return 1;

    BookForm bookForm;
    app.setMainWidget( &amp;bookForm );
    bookForm.show();

    return app.exec();
}
</programlisting></example>
	<indexterm><primary>Databases</primary><secondary>Connecting to Multiple Database Servers</secondary></indexterm>

	All the examples presented in this chapter call
	<indexterm><primary>Functions</primary><secondary>createConnections()</secondary></indexterm>
<function>createConnections()</> after creating the
	<indexterm><primary>QApplication</primary></indexterm>
<classname>QApplication</> object in their <indexterm><primary>Files and file types</primary><secondary>main.cpp</secondary></indexterm>
<filename>main.cpp</>
	file and make use of the default connection. If you need to
	connect to multiple databases use the two-argument form of
	<indexterm><primary>Functions</primary><secondary>addDatabase()</secondary></indexterm>
<function>addDatabase()</>, passing it both the name of the driver
	and a unique identifier. This is explained further in the <ulink
	url="http://doc.trolltech.com/sql.html">Qt SQL Module
	documentation</>.
	</para>

	<para id="afna">
	Note that you do not need to keep a reference to database
	connections. If you use a single database connection, this
	becomes the default connection and database functions will use
	this connection automatically. We can always get a pointer to
	any of our connections by calling
	<indexterm><primary>Functions</primary><secondary>QSqlDatabase::database()</secondary></indexterm>
<function>QSqlDatabase::database()</>.
	</para>

    </sect2>
</sect1>

<sect1 id="using-qdatatable">
<title>Using <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</></>

    <para id="afnp">
    <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>s may be placed on any form to provide browsing
    of database tables and views. <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>s can also be used
    to update or delete records in-place, i.e. inside the cells
    themselves. Inserting records via a <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> usually
    requires connecting to the <indexterm><primary>Signals and Slots</primary><secondary>primeInsert()</secondary></indexterm>
<function>primeInsert()</> signal, so that we
    can generate primary keys for example, or provide default values.
    If we wish to present records using a form view (perhaps combining
    data from several tables and views) we might use several
    <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</>s and <indexterm><primary>QDataView</primary></indexterm>
<classname>QDataView</>s.
    </para>

    <sect2 id="quickly-viewing-a-database-table">
    <title>Quickly Viewing a Database Table</>

	<para id="afoe">
	This example, along with all the other examples in this chapter,
	has the project name 'book' and uses the database created by
	the <indexterm><primary>Files and file types</primary><secondary>book.sql</secondary></indexterm>
<filename>book.sql</> script. As we work through the chapter
	we will build the 'book' application step by step. Create or copy the
	<filename>qt/tools/designer/examples/book/book1/main.cpp</> file shown
	earlier. The project file for this first example is
	<filename>qt/tools/designer/examples/book/book1/book.pro</>. Start a new
	project by clicking <indexterm><primary>Menu Options</primary><secondary>File|New Project</secondary></indexterm>
<guimenuitem>File|New Project</>. Complete
	the <indexterm><primary>Dialogs</primary><secondary>Project Settings</secondary></indexterm>
Project Settings dialog by entering a project name and
	a project file name. Now click <indexterm><primary>Menu Options</primary><secondary>Edit|Database Connections</secondary></indexterm>
<guimenuitem>Edit|Database Connections</>.
	Fill in the
	connection information appropriate to your database then press
	<guibutton>Connect</>. The connection name should now appear in
	the left hand list box. (If this doesn't happen you'll need to
	contact your database systems administrator for help.) Close the
	dialog.
	</para>

	<para id="afow">
	We will now create a new form with a <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> that's
	connected to one of our database tables.
	</para>

	<para id="afpb">
	Click <indexterm><primary>Menu Options</primary><secondary>File|New</secondary></indexterm>
<guimenuitem>File|New</>. The <indexterm><primary>Dialogs</primary><secondary>New Form</secondary></indexterm>
New Form dialog presents us
	with a number of form templates to choose from. Choose the
	'Dialog' form and click <guibutton>OK</>. Now click
	<indexterm><primary>Menu Options</primary><secondary>File|Save</secondary></indexterm>
<guimenuitem>File|Save</>. You will be prompted for a filename,
	call it <filename>book.ui</>.
	</para>

	<sect3 id="setting-up-a-qdatatable">
	<title>Setting up a <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</></title>

	    <para id="afpm">
	    <indexterm><primary>Databases</primary><secondary>SQL Table Wizard</secondary></indexterm>

	    <indexterm><primary>Wizards</primary><secondary>SQL Table</secondary></indexterm>

	    To place a <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> widget on the form either
	    click <indexterm><primary>Menu Options</primary><secondary>Tools|Views|QDataTable</secondary></indexterm>
<guimenuitem>Tools|Views|QDataTable</> or click the
	    <indexterm><primary>Toolbar Buttons</primary><secondary>QDataTable</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>QDataTable</secondary></indexterm>
<guibutton>QDataTable</> toolbar button. Click on the form and
	    the SQL Table Wizard will appear.

	    <orderedlist numeration="arabic">
		<listitem>
		    <para id="afpu">
		    The <emphasis>Database Connection and Table</>
		    wizard page is used to set up a connection if one
		    doesn't exist and to choose the table or view for
		    the <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>. (See <xref
		    linkend="setting-up-qt-designers-connections">
		    "Setting Up <emphasis>Qt Designer</>'s Connections".)
		    </para>

		    <para id="afqd">
		    Click the connection you wish to use, listed in the
		    left hand list box, e.g. "(default)". The available
		    tables and views will appear in the right hand Table
		    list box. Click the 'author' table and then click
		    the <guibutton>Next</> button.
		    </para>
		</listitem>

		<listitem>
		    <para id="afqn">
		    The <emphasis>Displayed Fields</> wizard page
		    provides a means of selecting which fields should be
		    displayed in the <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> and in what
		    order. By default all fields except the primary key
		    (if there is one) are in the Displayed Fields list
		    box. The left- and right-pointing blue arrow buttons
		    can be used to move fields between the Displayed
		    Fields and the Available Fields list boxes. The blue
		    up and down pointing arrow buttons are used to
		    select the display order of the displayed fields.
		    </para>

		    <para id="afra">
		    The default settings are the ones we want so simply
		    click <guibutton>Next</>.
		    </para>
		</listitem>

		<listitem>
		    <para id="afrh">
		    <indexterm><primary>Properties</primary><secondary>DataTable</secondary></indexterm>

		    The <emphasis>Table Properties</> wizard page provides
		    convenient access to some of the database-related
		    properties of the <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>.
		    </para>

		    <para id="afrn">
		    Make sure the Confirm Deletes checkbox is checked,
		    then click <guibutton>Next</>.
		    </para>
		</listitem>

		<listitem>
		    <para id="afru">
		    The <emphasis>SQL</> wizard page is used to set the
		    <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>'s Filter and Sort properties. The
		    Filter is an SQL <literal>WHERE</> clause (without
		    the word 'WHERE'). For example, to only list authors
		    whose surnames begin with 'P', we would enter
		    <literal>title LIKE 'P%'</>. We'll leave
		    the filter empty. The Available Fields list box
		    lists all the fields. The Sort By list box lists the
		    fields that the <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> is to sort by and
		    the direction of their sorting (ASCending or
		    DESCending). The left and right blue arrows are used
		    to move fields between the two list boxes. The up
		    and down blue arrows move fields up and down within
		    the Sort By list box. The ASC or DESC setting is
		    changed with the 'sort order' toolbar button.
		    </para>

		    <para id="afsl">
		    Move the surname and forename fields into the Sort By
		    list box and click <guibutton>Next</>.
		    </para>
		</listitem>

		<listitem>
		    <para id="afss">
		    The <emphasis>Finish</> wizard page gives us the
		    opportunity to go back and change any of our
		    settings. We will be able to change them later
		    through the <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>'s properties so we
		    can finish with the wizard.
		    </para>

		    <para id="afta">
		    Click <guibutton>Finish</>.
		    </para>
		</listitem>

	    </orderedlist>
	    </para>

	    <para id="afti">
	    The table will appear on the form with each column labelled with
	    a default column name. If you wish to change the settings
	    then most of them are available in the property window. The
	    display names, the fields they are based upon, and the order
	    of appearance of the columns can be changed using the 
	    <indexterm><primary>Dialogs</primary><secondary>Edit Table</secondary></indexterm>
Edit Table dialog (explained later) by right clicking the
	    <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> and left clicking <guibutton>Edit</>.
	    </para>

	</sect3>


	<sect3>
	<title>Laying out the Form</title>

	    <para id="afty">
	    Click on the form and click the <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Vertically</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Vertically</secondary></indexterm>
<guibutton>Lay Out Vertically</>
	    toolbar button. Now click <indexterm><primary>Menu Options</primary><secondary>Preview|Preview Form</secondary></indexterm>
<guimenuitem>Preview|Preview Form</>;
	    the form will run and the table will automatically display all
	    the records.
	    </para>

	    <para id="afuf">
	    To turn the form we've created into an executable application we
	    must add the <indexterm><primary>Files and file types</primary><secondary>main.cpp</secondary></indexterm>
<filename>main.cpp</> file to the project file and
	    make the project. We should also do some renaming to make things
	    easier to understand.

	    <orderedlist numeration="arabic">
		<listitem>
		    <para id="afun">
		    Click on the form and change its name to 'BookForm'
		    and its caption to 'Book'. Click on the
		    <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> and change its name to
		    'AuthorDataTable'.
		    </para>
		</listitem>

		<listitem>
		    <para id="afuv">
		    Click <indexterm><primary>Menu Options</primary><secondary>File|Save All</secondary></indexterm>
<guimenuitem>File|Save All</>.
		    </para>
		</listitem>

		<listitem>
		    <para id="afvb">
		    Open the project file, e.g. <indexterm><primary>Files and file types</primary><secondary>book.pro</secondary></indexterm>
<filename>book.pro</>, in a
		    plain text editor and add the line:
		    <literal>SOURCES += main.cpp</>
		    at the end of the file.
		    </para>
		</listitem>

		<listitem>
		    <para id="afvk">
		    Run <indexterm><primary>qmake</primary></indexterm>
<command>qmake</> to generate the make file,
		    e.g. <literal>qmake -o Makefile book.pro</>, then make
		    and run the <command>book</> program.
		    </para>
		</listitem>

	    </orderedlist>
	    </para>

	    <para id="afvu">
	    This example shows how easy it is to use <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>
	    to show the contents of a database table or view. You can
	    use the application we've just built to update and delete
	    author records. In the examples that follow we will cover
	    insertions, setting up master-detail relationships,
	    drilldown and foreign key lookups.
	    </para>

	    <sidebar><title>A Note on Foreign Keys</title>
	    <para id="afwe">
	    <indexterm><primary>Foreign Keys</primary></indexterm>

	    <indexterm><primary>Databases</primary><secondary>Foreign Keys</secondary></indexterm>

	    In most relational databases tables contain fields which
	    are foreign keys into other tables. In our 'book' database
	    example the authorid in the book table is a foreign key
	    into the author table. When we present a form to the end
	    user we do not usually want the foreign key itself to be
	    visible but rather the text associated with it. Thus, we
	    would want the author's name to appear rather than the
	    author id when we show book information.  In many
	    databases, this can be achieved by using a view.  See your
	    database's documentation for details.
	    </para>
	    </sidebar>

	</sect3>

    </sect2>

    <sect2 id="inserting-records-in-qdatatables">
    <title>Inserting Records in <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>s</>

	<para id="afwz">
	<indexterm><primary>Inserting Records</primary></indexterm>

	<indexterm><primary>Databases</primary><secondary>Inserting Records</secondary></indexterm>

	Record insertion into a relational database usually requires
	the generation of a primary key value which uniquely
	identifies the record in the table. Also we often want to
	create default values for some fields to minimize the user's
	work. We will create a slot to capture the <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>s
	<indexterm><primary>Signals and Slots</primary><secondary>primeInsert()</secondary></indexterm>
<function>primeInsert()</> signal and populate the
	<indexterm><primary>QSqlRecord</primary></indexterm>
<classname>QSqlRecord</> insertion buffer with a unique
	primary key.

	<orderedlist numeration="arabic">
	    <listitem>
		<para id="afxl">
		Click <indexterm><primary>Menu Options</primary><secondary>Edit|Slots</secondary></indexterm>
<guimenuitem>Edit|Slots</> to invoke the 
		<indexterm><primary>Dialogs</primary><secondary>Edit Slots</secondary></indexterm>
Edit Slots dialog. Click <indexterm><primary>Menu Options</primary><secondary>New Slot</secondary></indexterm>
<guimenuitem>New Slot</>, then enter
		the slot name <function>primeInsertAuthor(QSqlRecord*)</>
		into the Slot Properties' Slot line edit box. Click
		<guibutton>OK</>.
		</para>
	    </listitem>

	    <listitem>
		<para id="afxv">
		Click the <indexterm><primary>Toolbar Buttons</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<guibutton>Connect Signals/Slots</>
		toolbar button, then click the AuthorDataTable, drag to
		the form and release the mouse. The <indexterm><primary>Dialogs</primary><secondary>Edit Connections</secondary></indexterm>
Edit Connections
		dialog will now appear. Click the <indexterm><primary>Signals and Slots</primary><secondary>primeInsert()</secondary></indexterm>
<function>primeInsert()</>
		signal and then the <function>primeInsertAuthor()</> slot to make
		the connection. Now click <guibutton>OK</>.
		</para>
	    </listitem>

	    <listitem>
		<para id="afyg">
		Click the Source tab of the Object Hierarchy window
		(click <indexterm><primary>Menu Options</primary><secondary>Window|Object Hierarchy</secondary></indexterm>
<guimenuitem>Window|Object Hierarchy</> to make
		the window visible if necessary). Click the
		<function>primeInsertAuthor()</> slot and an editor window will
		appear.
		</para>
	    </listitem>

	    <listitem>
		<para id="afyq">
		We must change the <function>BookForm::primeInsertAuthor()</> slot to
		specify the parameter name and perform the necessary
		action:
<programlisting>
void BookForm::primeInsertAuthor( <emphasis role="bold">QSqlRecord</> * buffer )
{
    <emphasis role="bold">QSqlQuery</> query;
    query.exec( &quot;UPDATE sequence SET sequence = sequence + 1 WHERE tablename='author';&quot; );
    query.exec( &quot;SELECT sequence FROM sequence WHERE tablename='author';&quot; );
    if ( query.next() ) {
        buffer-&gt;setValue( &quot;id&quot;, query.value( 0 ) );
    }
}
</programlisting>
		A <indexterm><primary>QSqlQuery</primary></indexterm>
<classname>QSqlQuery</> object is used to increment and
		retrieve a unique 'sequence' number for the author
		table. The signal passed us a pointer to the insertion
		buffer and we then put the value we've retrieved,
		i.e. the next sequence number, into the buffer's id
		field.  (Again, note that SQL databases often support
		a native 'sequence' function.  The method used here is
		inappropriate for production systems, and is for
		example purposes only.  See your database's
		documentation for details on how to generate unique
		keys in code.  In many cases, the database can
		generate them automatically, or the database may
		provide a special syntax for dealing with sequences.)
		</para>
	    </listitem>

	</orderedlist>
	</para>

	<para id="afzq">
	<indexterm><primary>Deleting</primary><secondary>Records</secondary><seealso>Databases</seealso></indexterm>

	<indexterm><primary>Databases</primary><secondary>Deleting Records</secondary></indexterm>

	<indexterm><primary>Updating Records</primary></indexterm>

	<indexterm><primary>Databases</primary><secondary>Updating Records</secondary></indexterm>

	If we rebuild the application it will now support <literal>INSERT</> as well as
	<literal>UPDATE</> and <literal>DELETE</>. We could easily have added additional code to
	insert default values, e.g. today's date into a date field, if
	necessary.
	</para>

	<para id="afzx">
	<indexterm><primary>Databases</primary><secondary>Browsing</secondary></indexterm>

	<indexterm><primary>Databases</primary><secondary>Confirmations</secondary></indexterm>

	<indexterm><primary>Browsing Databases</primary></indexterm>

	Browsing is
	supported by clicking records and by using the arrow keys. Once
	a record is active (highlighted) we can edit the it. Press
	the <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Insert</secondary></indexterm>
<keycap>Insert</> key to <literal>INSERT</> a new record;
	press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>F2</secondary></indexterm>
<keycap>F2</> to <literal>UPDATE</> the current record;
	press the <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Del</secondary></indexterm>
<keycap>Del</> key to <literal>DELETE</> the
	current record. All these operations take place 
	immediately. Users can be given the opportunity to confirm
	their edits by setting the <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>'s confirmEdits
	property to True. If the confirmEdits property is True then user
	confirmation will be required for all insertions, updates and
	deletes. For finer control you can set the confirmInsert,
	confirmUpdate and confirmDelete properties individually.
	</para>

	<sidebar><title><indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> User Interface Interaction</>
	<para id="agao">
	<indexterm><primary>Databases</primary><secondary>User Interface Interaction</secondary></indexterm>

	<indexterm><primary>User Interface Interaction, Databases</primary></indexterm>

	The default user-interface behaviour for <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>s is as follows:
	    <itemizedlist>
		<listitem><para id="agar">
		Users can move to records by clicking the scrollbar and
		clicking records with the mouse. They can also use the
		keyboard's navigation keys, e.g. <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Left Arrow</secondary></indexterm>
<keycap>Left Arrow</>, 
		<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Right Arrow</secondary></indexterm>
<keycap>Right Arrow</>, <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Up Arrow</secondary></indexterm>
<keycap>Up Arrow</>, <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Down Arrow</secondary></indexterm>
<keycap>Down Arrow</>,
		<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Page Up</secondary></indexterm>
<keycap>Page Up</>, <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Page Down</secondary></indexterm>
<keycap>Page Down</>, <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Home</secondary></indexterm>
<keycap>Home</> and <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>End</secondary></indexterm>
<keycap>End</>.
		</para></listitem>

		<listitem><para id="agay">
		<literal>INSERT</> is initiated by right-clicking the record and
		clicking Insert or by pressing the <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ins</secondary></indexterm>
<keycap>Ins</> (Insert)
		key. The user moves between fields using <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Tab</secondary></indexterm>
<keycap>Tab</> and
		<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Shift+Tab</secondary></indexterm>
<keycap>Shift+Tab</>. The <literal>INSERT</> will take place if the user
		presses <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Enter</secondary></indexterm>
<keycap>Enter</> or <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Tab</secondary></indexterm>
<keycap>Tab</>s
		off the last field. If autoEdit is TRUE the
		insert will take place if the user navigates to another
		record. <literal>INSERT</> is cancelled by pressing <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Esc</secondary></indexterm>
<keycap>Esc</> (Escape). If
		autoEdit is FALSE navigating to another record also
		cancels the <literal>INSERT</>. Setting confirmInsert to TRUE will
		require the user to confirm each <literal>INSERT</>.
		</para></listitem>

		<listitem><para id="agbl">
		<literal>UPDATE</> is initiated by right-clicking the record and clicking
		Update or by pressing <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>F2</secondary></indexterm>
<keycap>F2</>. The update will take place if
		the user presses Enter or Tabs off the last
		field. If autoEdit is TRUE the update will take place if
		the user navigates to another record. <literal>UPDATE</> is cancelled
		by pressing <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Esc</secondary></indexterm>
<keycap>Esc</>. If autoEdit is FALSE
		navigating to another record also cancels the <literal>UPDATE</>.
		Setting confirmUpdate to TRUE will require the user to
		confirm each <literal>UPDATE</>.
		</para></listitem>

		<listitem><para id="agbx">
		<literal>DELETE</> is achieved by right-clicking the record and
		clicking Delete or by pressing the <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Del</secondary></indexterm>
<keycap>Del</> (Delete) key.
		Setting confirmDelete to TRUE will require the user to
		confirm each <literal>DELETE</>.
		</para></listitem>

	    </itemizedlist>

	    You can change this default behaviour programmatically if
	    required.
	</para>
	</sidebar>

    </sect2>

    <sect2 id="relating-two-tables-together">
    <title>Relating Two Tables Together (Master-Detail)</>

	<para id="agcq">
	<indexterm><primary>Databases</primary><secondary>Master-Detail Relationships</secondary></indexterm>

	<indexterm><primary>Master-Detail Relationships</primary></indexterm>

	Databases often have pairs of tables that are related. For
	example, an invoice table might list the numbers, dates and
	customers for invoices, but not the actual invoice items, which
	an invoice item table might store. In the 'book' application we
	wish to have a <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> that we can use to browse
	through the authors table and a second <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> to
	show the books they've written.
	</para>

	<para id="agda">
	Open the book project if it isn't already open <emphasis>Qt Designer</>. We will
	modify this project to show two <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>s that
	relate the author table to the book table.

	<orderedlist numeration="arabic">
	    <listitem>
		<para id="agdh">
		Click the author <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> and then click the
		<indexterm><primary>Toolbar Buttons</primary><secondary>Break Layout</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Break Layout</secondary></indexterm>
<guibutton>Break Layout</> toolbutton.
		</para>
	    </listitem>

	    <listitem>
		<para id="agdo">
		Resize the <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> so that it only
		occupies the top half of the form.
		</para>
	    </listitem>

	    <listitem>
		<para id="agdv">
		Now click on the <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> toolbutton and click
		on the bottom half of the form. The SQL Table Wizard
		will appear. (This Wizard is explained in <xref
		linkend="quickly-viewing-a-database-table"> "Quickly
		Viewing a Database Table".)
		<orderedlist numeration="arabic" inheritnum="inherit">
		    <listitem>
			<para id="aged">
			Click the connection you're using and click
			the book table. Click the <guibutton>Next</>
			button.
			</para>
		    </listitem>

		    <listitem>
			<para id="agel">
			Since we do not want them visible, make sure
			the authorid and id fields are moved to the
			Available Fields list box by using the arrow
			buttons. Move the title field to the top of
			the Displayed Fields, and move the price field
			above the notes field.  Click the
			<guibutton>Next</> button.
			</para>
		    </listitem>

		    <listitem>
			<para id="agex">
			On the Table Properties page click the Read Only
			checkbox then click the <guibutton>Next</>
			button.
			</para>
		    </listitem>

		    <listitem>
			<para id="agff">
			On the SQL page we will leave the Filter
			(<literal>WHERE</> clause) empty. Move the
			title field to the Sort By list box and click
			<guibutton>Next</>. Now click <guibutton>Finish</>.
			</para>
		    </listitem>

		    <listitem>
			<para id="agfo">
			Change this <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>'s name to "BookDataTable".
			</para>
		    </listitem>
		</orderedlist>
		</para>
	    </listitem>

	    <listitem>
		<para id="agfx">
		<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Shift+Click</secondary></indexterm>
<keycap>Shift+Click</> the top <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> so that both
		<indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>s are selected and then click the
		<indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Vertically (in Splitter)</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Vertically (in Splitter)</secondary></indexterm>
<guibutton>Lay Out Vertically (in Splitter)</> toolbar
		button.
		</para>
	    </listitem>

	    <listitem>
		<para id="aggf">
		Click on the form and click the 
		<indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Vertically</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Vertically</secondary></indexterm>
<guibutton>Lay Out Vertically</> toolbar button.
		</para>
	    </listitem>

	</orderedlist>
	</para>

	<para id="aggo">
	Run the form by clicking <indexterm><primary>Menu Options</primary><secondary>Preview|Preview Form</secondary></indexterm>
<guimenuitem>Preview|Preview Form</>.
	All the authors are displayed in the top <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>
	and all the books are displayed in the bottom
	<indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>. However we only want the books of the
	currently selected author showing in the bottom
	<indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>. We will deal with this by filtering the
	records in the book table according to the author selected in
	the author table.
	</para>

	<sidebar><title>Using the Table Editor</>
	<para id="agha">
	<indexterm><primary>Value Editors</primary><secondary>SQL Table Editor</secondary></indexterm>

	<figure><title>Edit Table Dialog</title>
	<graphic fileref="images\edit-dbtable-dialog.png"></graphic>
	</figure>
	<indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>s are created and set up using the SQL Table
	Wizard. Like any other <emphasis>Qt Designer</> widget their properties may be
	changed in the Properties window. Some of the column and row
	based properties can also be be changed using the <indexterm><primary>Dialogs</primary><secondary>Edit Table</secondary></indexterm>
Edit Table
	dialog. This dialog is invoked by right clicking the
	<indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> and left clicking the <indexterm><primary>Menu Options</primary><secondary>Edit</secondary></indexterm>
<guimenuitem>Edit</> menu item.
	The right hand half of the <indexterm><primary>Dialogs</primary><secondary>Edit Table</secondary></indexterm>
Edit Table dialog is where we choose
	the fields we wish to display, their order and their labels. The
	procedure for creating columns is as follows:

	<orderedlist numeration="arabic">
	    <listitem>
		<para id="aghq">
		Click the <guibutton>New Column</> button.
		</para>
	    </listitem>

	    <listitem>
		<para id="aghw">
		Drop down the Field combobox to list the available
		fields.
		</para>
	    </listitem>

	    <listitem>
		<para id="agid">
		Click the field you wish to include at this point.
		</para>
	    </listitem>

	    <listitem>
	    <para id="agij">
		<emphasis>Optionally</> edit the Label if the default
		isn't appropriate.
	    </para>
	    </listitem>

	    <listitem>
	    <para id="agiq">
	    <emphasis>Optionally</> click the Pixmap ellipsis
	    (<guibutton>...</>) button to choose a pixmap to be
	    displayed to the left of the column's label.
	    </para>
	    </listitem>
	</orderedlist>

	Repeat the steps listed above for each column you wish to add.
	Once all the fields have been added you can change their
	ordering by using the blue up and down arrow buttons. At any
	point you can press <guibutton>Apply</> to see how the table
	will look. Finally click the <guibutton>OK</> button to save the
	properties you have set. You can always return to the table
	editor to change these settings later.
	</para>
	</sidebar>

	<sect3 id="filtering-one-qdatatable-by-another">
	<title>Filtering One <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> by Another</title>

	    <para id="agjl">
	    <indexterm><primary>Databases</primary><secondary>Relating Tables</secondary></indexterm>

	    To filter the book table's records we need to capture the author
	    <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>'s <indexterm><primary>Functions</primary><secondary>currentChanged()</secondary></indexterm>
<function>currentChanged()</> signal and change the
	    BookDataTable's filter accordingly.

	    <orderedlist numeration="arabic">
		<listitem>
		    <para id="agjs">
		    Click <indexterm><primary>Menu Options</primary><secondary>Edit|Slots</secondary></indexterm>
<guimenuitem>Edit|Slots</>. In the <indexterm><primary>Dialogs</primary><secondary>Edit Slots</secondary></indexterm>
Edit Slots
		    dialog click <indexterm><primary>Menu Options</primary><secondary>New Slot</secondary></indexterm>
<guimenuitem>New Slot</> and enter a slot
		    name of <function>newCurrentAuthor(QSqlRecord*)</>.
		    Click <guibutton>OK</>.
		    </para>
		</listitem>

		<listitem>
		    <para id="agkb">
		    Click <indexterm><primary>Menu Options</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<guimenuitem>Connect Signals/Slots</>, then click
		    the AuthorDataTable <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> and drag to
		    the form; release the mouse on the form. The 
		    <indexterm><primary>Dialogs</primary><secondary>Edit Connections</secondary></indexterm>
Edit Connections dialog will appear. Click the
		    <indexterm><primary>Signals and Slots</primary><secondary>currentChanged()</secondary></indexterm>
<function>currentChanged()</> signal and the
		    <function>newCurrentAuthor</> slot. Click <guibutton>OK</>.
		    </para>
		</listitem>

		<listitem>
		    <para id="agkm">
		    Click the Source tab of the Object Hierarchy window
		    (click <indexterm><primary>Menu Options</primary><secondary>Window|Object Hierarchy</secondary></indexterm>
<guimenuitem>Window|Object Hierarchy</> to make
		    the window visible if necessary). Click the
		    <function>newCurrentAuthor()</> slot and an editor window will
		    appear.
		    </para>
		</listitem>

		<listitem>
		<para id="agkw">
		    We must change the <function>BookForm::newCurrentAuthor()</> slot to
		    specify the parameter name and perform the necessary
		    action:
<programlisting>
void BookForm::newCurrentAuthor( <emphasis role="bold">QSqlRecord</> *author )
{
    BookDataTable-&gt;setFilter( &quot;authorid=&quot; + author-&gt;value( &quot;id&quot; ).toString() );  
    BookDataTable-&gt;refresh();
}
</programlisting>
		All that's required now is to change the BookDataTable's
		filter and refresh the <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</> to show the
		results of the filter.
		</para>
		</listitem>
	    </orderedlist>
	    </para>

	</sect3>

	<sect3 id="preparing-the-interface-for-drilldown">
	<title>Preparing the Interface for Drilldown</title>

	    <para id="aglq">
	    <indexterm><primary>Databases</primary><secondary>Drilldown</secondary></indexterm>

	    <indexterm><primary>Drilldown</primary></indexterm>

	    We can now browse and edit authors and see their books in the
	    BookDataTable.  In the next section we explore
	    <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</>, which will allow us to drill down to
	    a dialog through which we can edit books. For now we will
	    add some buttons to the main BookForm which we will use to
	    invoke the book editing dialog.

	    <orderedlist numeration="arabic">
		<listitem>
		    <para id="agma">
		    Click the form, then click the 
		    <indexterm><primary>Toolbar Buttons</primary><secondary>Break Layout</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Break Layout</secondary></indexterm>
<guibutton>Break Layout</> toolbar button. Resize the form
		    to make room for some buttons at the bottom.
		    </para>
		</listitem>

		<listitem>
		    <para id="agmi">
		    Add two buttons to the bottom of the form. Change
		    their names and labels to the following:

		    <itemizedlist>
			<listitem><para id="agmn">EditPushButton -- &amp;Edit Books</para>
			</listitem>
			<listitem><para id="agmp">QuitPushButton -- &amp;Quit</para>
			</listitem>
		    </itemizedlist>
		    Hold down the Shift key and Click both buttons (i.e.
		    <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Shift+Click</secondary></indexterm>
<keycap>Shift+Click</> the buttons) and click the
		    <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Horizontally</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Horizontally</secondary></indexterm>
<guibutton>Lay Out Horizontally</> toolbar button.
		    Click the form and click the 
		    <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Vertically</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Vertically</secondary></indexterm>
<guibutton>Lay Out Vertically</> toolbar
		    button.
		    </para>
		</listitem>

		<listitem>
		    <para id="agnc">
		    We will provide the Quit button with functionality
		    now and work on the rest shortly.
		    Click <indexterm><primary>Menu Options</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<guimenuitem>Connect Signals/Slots</>, then click
		    the Quit button and drag to the form; release the
		    mouse on the form. The <indexterm><primary>Dialogs</primary><secondary>Edit Connections</secondary></indexterm>
Edit Connections dialog will
		    appear. Click the <indexterm><primary>Functions</primary><secondary>clicked()</secondary></indexterm>
<function>clicked()</> signal
		    and the <indexterm><primary>Signals and Slots</primary><secondary>accept()</secondary></indexterm>
<function>accept()</> slot. Click <guibutton>OK</>.
		    </para>
		</listitem>
	    </orderedlist>
	    </para>
	</sect3>

    </sect2>

</sect1>

<sect1 id="using-qdatabrowser-and-qdataview">
<title>Using <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</> and <indexterm><primary>QDataView</primary></indexterm>
<classname>QDataView</></>

<para id="agnx">
<figure><title>The Book Application's Edit Books Dialog</title>
<graphic fileref="images\book-dialog.png"></graphic>
</figure>
</para>


    <sect2 id="drilling-down-to-a-form-with-qdatabrowser">
    <title>Drilling Down to a Form using <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</></>

	<sect3 id="setting-up-a-qdatabrowser">
	<title>Setting up a <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</></title>

	<para id="agok">
	<indexterm><primary>Databases</primary><secondary>Drilldown</secondary></indexterm>

	<indexterm><primary>Drilldown</primary></indexterm>

	<indexterm><primary>Databases</primary><secondary>Data Browser Wizard</secondary></indexterm>

	<indexterm><primary>Wizards</primary><secondary>Data Browser</secondary></indexterm>

	We will now create a new form to allow users to edit book
	records. Click the <indexterm><primary>Toolbar Buttons</primary><secondary>New</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>New</secondary></indexterm>
<guibutton>New</> toolbar button, click the
	Dialog template from the <indexterm><primary>Dialogs</primary><secondary>New Form</secondary></indexterm>
New Form dialog and click <guibutton>OK</>. Change
	the name of the form to EditBookForm and its caption to 'Edit
	Books'. Click the <indexterm><primary>Toolbar Buttons</primary><secondary>Save</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Save</secondary></indexterm>
<guibutton>Save</> toolbar button and call the
	file <filename>editbook.ui</>. Now that we have the form we can add a
	<indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</> to show the book records.

	<orderedlist numeration="arabic">
	    <listitem>
		<para id="agov">
		Click the <indexterm><primary>Toolbar Buttons</primary><secondary>Data Browser</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Data Browser</secondary></indexterm>
<guibutton>Data Browser</> toolbar button, then
		click the form. The Data Browser Wizard will appear.
		</para>
	    </listitem>

	    <listitem>
		<para id="agpc">
		The <emphasis>Database Connection and Table</> wizard
		page is used to set up a connection if one doesn't exist
		and to choose the table or view for the
		<indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</>. (See <xref
		linkend="setting-up-qt-designers-connections"> "Setting
		Up <emphasis>Qt Designer</>'s Connections".)
		</para>

		<para id="agpk">
		Click the connection you wish to use, listed in the
		Connection list box, e.g. "(default)". The available
		tables and views will appear in the Table list
		box. Click the book table and then click the
		<guibutton>Next</> button.
		</para>
	    </listitem>

	    <listitem>
		<para id="agpu">
		The <emphasis>Displayed Fields</> wizard page provides a
		means of selecting which fields should be displayed in
		the <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</> and in what order. By default
		all fields except the primary key (if there is one) are
		in the right hand Displayed Fields list box. The left
		and right blue arrow buttons can be used to move fields
		between the Displayed Fields and the Available Fields
		list boxes. The blue up and down arrow buttons are used
		to select the display order of the displayed fields.
		</para>

		<para id="agqg">
		We don't want to see the authorid foreign key field on
		the form, so move it to the Available Fields list
		box. Also, move the title field to the top of the
		Displayed Fields list. Click the <guibutton>Next</>
		button.
		</para>
	    </listitem>

	    <listitem>
		<para id="agqq">
		The <emphasis>Navigation and Editing</> wizard page allows
		us to choose which navigation and editing buttons should
		appear on the form.
		</para>

		<para id="agqw">
		We will accept the defaults and simply click the
		<guibutton>Next</> button.
		</para>
	    </listitem>

	    <listitem>
		<para id="agrd">
		The <emphasis>SQL</> wizard page is used to set the
		<indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</>'s Filter and Sort properties. The
		Filter is an SQL <literal>WHERE</> clause (without the
		word 'WHERE'). For example, to only list books that
		cost less than 50 (of some currency, e.g. dollars), we
		would enter <literal>price &lt; 50</>. We will leave the
		filter empty. The Available Fields list box lists all
		the fields. The Sort By list box lists the fields that
		the <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</> is to sort by and the
		direction of their sorting (ASCending or
		DESCending). The left and right blue arrows are used
		to move fields between the two list boxes. The up and
		down blue arrows move fields up and down within the
		Sort By list box. The ASC or DESC setting is changed
		with the sort order button.
		</para>

		<para id="agrv">
		Move the title field into the Sort By list box and click
		<guibutton>Next</>.
		</para>
	    </listitem>

	    <listitem>
		<para id="agsc">
		The <emphasis>Layout</> wizard page is used to specify the
		initial layout of the form.
		</para>

		<para id="agsh">
		Change the Number of Columns to 1, then click
		<guibutton>Next</>. Now click <guibutton>Finish</>.
		</para>
	    </listitem>

	    <listitem>
		<para id="agso">
		The <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</> will now appear on the form.
		Resize the form to make it shorter. Click
		the <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</> then click the <guibutton>Break
		Layout</> toolbar button. Click the buttons then click
		the <indexterm><primary>Toolbar Buttons</primary><secondary>Break Layout</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Break Layout</secondary></indexterm>
<guibutton>Break Layout</> toolbar button. Add
		another button called 'PushButtonClose' with the text
		'&amp;Close' and place it to the right of the Delete button.
		</para>
	    </listitem>

	    <listitem>
		<para id="agta">
		<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Shift+Click</secondary></indexterm>
<keycap>Shift+Click</> the Insert, Update, Delete and Close
		buttons, then click the <guibutton>Lay Out
		Horizontally</> toolbar button. Click the
		<indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</>, then click the <guibutton>Lay Out
		in a Grid</> toolbar button. Finally click the form and
		click the <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Vertically</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Vertically</secondary></indexterm>
<guibutton>Lay Out Vertically</> toolbar
		button. Now click the <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</> and rename it
		'BookDataBrowser'.
		</para>
	    </listitem>

	    <listitem>
		<para id="agtn">
		<emphasis>Qt Designer</> will generate the necessary code to make the
		browser operational (including generating the
		appropriate cursor, sort and filter code).
		</para>

		<para id="agtt">
		For finer control over the form, we will be creating
		our own database cursor.  Therefore, set the
		BookDataBrowser's frameworkCode property to FALSE in
		the Properties window to prevent <emphasis>Qt Designer</> from generating
		redundant code for the cursor.
		</para>
	    </listitem>

	</orderedlist>
	</para>

	<sidebar><title><indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</> User Interface Interaction</>
	<para id="agug">
	The user-interface behaviour for <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</>s
	is created by connecting slots and signals. The slots provided are:
	    <itemizedlist>
		<listitem><para id="aguk">
		<indexterm><primary>Functions</primary><secondary>insert()</secondary></indexterm>
<function>insert()</>, <indexterm><primary>Functions</primary><secondary>update()</secondary></indexterm>
<function>update()</> and <indexterm><primary>Functions</primary><secondary>del()</secondary></indexterm>
<function>del()</> for editing;
		</para></listitem>

		<listitem><para id="aguo">
		<indexterm><primary>Functions</primary><secondary>first()</secondary></indexterm>
<function>first()</>, <indexterm><primary>Functions</primary><secondary>next()</secondary></indexterm>
<function>next()</>, <indexterm><primary>Functions</primary><secondary>prev()</secondary></indexterm>
<function>prev()</>, and <indexterm><primary>Functions</primary><secondary>last()</secondary></indexterm>
<function>last()</> for
		navigation;
		</para></listitem>

		<listitem><para id="agut">
		<indexterm><primary>Functions</primary><secondary>refresh()</secondary></indexterm>
<function>refresh()</> to refresh the cursor from the database;
		</para></listitem>

		<listitem><para id="agux">
		<indexterm><primary>Functions</primary><secondary>readFields()</secondary></indexterm>
<function>readFields()</> to read data from the cursor's edit
		buffer and <indexterm><primary>Functions</primary><secondary>writeFields()</secondary></indexterm>
<function>writeFields()</> to write the form's data to
		the cursor's edit buffer;
		</para></listitem>

		<listitem><para id="agvd">
		<indexterm><primary>Functions</primary><secondary>clearValues()</secondary></indexterm>
<function>clearValues()</> to clear the form's values.
		</para></listitem>

	    </itemizedlist>
	</para>

	<para id="agvk">
	If you use <emphasis>Qt Designer</>'s
	<indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</> wizard you will be given the option of
	creating a default set of buttons for navigation and editing.
	The behaviour of these buttons is set up using the slots
	described above to provide the following functionality:
	    <itemizedlist>
		<listitem><para id="agvr">
		<literal>INSERT</> is initiated by pressing the <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ins</secondary></indexterm>
<keycap>Ins</> (Insert) button. The
		user moves between fields using <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Tab</secondary></indexterm>
<keycap>Tab</> and <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Shift+Tab</secondary></indexterm>
<keycap>Shift+Tab</>. If
		the user presses the Update button the <literal>INSERT</> will take
		place and the user will be taken to the record they have
		just inserted. If the user presses the Insert button
		(i.e. a second time) the <literal>INSERT</> will take place and a new
		insertion will be initiated. If autoEdit is TRUE the
		<literal>INSERT</> will take place if the user navigates to another
		record. <literal>INSERT</> is cancelled by pressing the
		<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Esc</secondary></indexterm>
<keycap>Esc</>
		key or by pressing the <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Del</secondary></indexterm>
<keycap>Del</> (Delete) button. If autoEdit is
		FALSE then navigating to another record also cancels the
		<literal>INSERT</>. Setting confirmInsert to TRUE will require the
		user to confirm each <literal>INSERT</>.
		</para></listitem>

		<listitem><para id="agwi">
		<literal>UPDATE</> is automatically initiated whenever the user
		navigates to a record. An update will take place if the
		user presses the Update button. If autoEdit is TRUE the
		update will take place if the user navigates to another
		record. <literal>UPDATE</> is cancelled by pressing the
		<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Esc</secondary></indexterm>
<keycap>Esc</>
		key or by pressing the <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Del</secondary></indexterm>
<keycap>Del</> button. If autoEdit is
		FALSE then navigating to another record also cancels the
		<literal>UPDATE</>. Setting confirmUpdate to TRUE will require the
		user to confirm each <literal>UPDATE</>. </para></listitem>

		<listitem><para id="agwu">
		<literal>DELETE</> is achieved by pressing the <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Del</secondary></indexterm>
<keycap>Del</> button.
		Setting confirmDelete to TRUE will require the user to
		confirm each <literal>DELETE</>.
		</para></listitem>

	    </itemizedlist>
	</para>
	</sidebar>

	</sect3>

	<sect3 id="performing-the-drilldown">
	<title>Performing the Drilldown</title>

	<para id="agxj">
	<indexterm><primary>Databases</primary><secondary>Drilldown</secondary></indexterm>

	<indexterm><primary>Drilldown</primary></indexterm>

	We now have a working form for editing book records. We need to
	start the form when the user clicks our 'Edit Books' button, and to
	navigate to the record they have selected in the BookDataTable.
	We also need to provide a means of editing the foreign keys,
	e.g. authorid.

	<orderedlist numeration="arabic">
	    <listitem>
		<para id="agxs">
		We need to make a new slot to connect the Edit Books'
		button's <indexterm><primary>Signals and Slots</primary><secondary>clicked()</secondary></indexterm>
<function>clicked()</> signal to. Click on the Book
		form to make it <emphasis>Qt Designer</>'s active form. Invoke the 
		<indexterm><primary>Dialogs</primary><secondary>Edit Slots</secondary></indexterm>
Edit Slots
		dialog and create a new slot called <function>editClicked()</>. Now
		click the <indexterm><primary>Toolbar Buttons</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<guibutton>Connect Signals/Slots</> toolbar button.
		Click the Edit Books button and drag to the form; release
		the mouse on the form. In the <indexterm><primary>Dialogs</primary><secondary>Edit Connections</secondary></indexterm>
Edit Connections dialog
		connect the <indexterm><primary>Signals and Slots</primary><secondary>clicked()</secondary></indexterm>
<function>clicked()</> signal to the
		<function>editClicked()</> slot. Click <guibutton>OK</> to leave the
		dialog.
		</para>
	    </listitem>

	    <listitem>
		<para id="agyh">
		<indexterm><primary>Object Hierarchy</primary></indexterm>

		In the
		Object Hierarchy window click Source and then click the
		<function>editClicked</> function. We need to change it to
		the following:
<programlisting>
void BookForm::editClicked()
{
    EditBookForm *dialog = new EditBookForm( this, &quot;Edit Book Form&quot;, TRUE );
    <emphasis role="bold">QSqlCursor</> cur( &quot;book&quot; );
    dialog-&gt;BookDataBrowser-&gt;setCursor( &amp;cur );
    dialog-&gt;BookDataBrowser-&gt;setFilter( BookDataTable-&gt;filter() );
    dialog-&gt;BookDataBrowser-&gt;setSort(<emphasis role="bold">QSqlIndex::fromStringList</>( 
            BookDataTable-&gt;sort(), &amp;cur ) );
    dialog-&gt;BookDataBrowser-&gt;refresh();
    int i = BookDataTable-&gt;currentRow();
    if ( i == -1 ) i = 0;<emphasis> // Always use the first row
</>
    dialog-&gt;BookDataBrowser-&gt;seek( i );
    dialog-&gt;exec();
    delete dialog;
    BookDataTable-&gt;refresh();
}
</programlisting>
		</para>

		<para id="agyr"> We create our dialog as before. We also create a
		cursor over the book table and set the dialog's
		<indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</>, BookDataBrowser, to use this new
		cursor. We set the <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</>'s filter and
		sort to those that applied to the main form's book
		<indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>. We refresh the
		<indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</> and seek to the same record the
		user was viewing on the main form. Then we exec the
		dialog and delete it when the user has finished with
		it. Finally we update the BookDataTable in the main
		form to reflect any changes that were made in the
		dialog.  </para>
	    </listitem>

	    <listitem>
		<para id="agzg">
		Because our code refers to a class declared in
		<filename>editbook.h</> and to a <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</>
		we need to add two additional include files. Click on
		the BookForm, then click on the Source tab of the
		Object Hierarchy window. Right click the 'Includes (In
		Declaration)' item and click New. Type in
		<filename>"editbook.h"</>. Now add a second include,
		this time, <filename>&lt;qdatabrowser.h&gt;</>.
		</para>
	    </listitem>

	</orderedlist>
	</para>

	<para id="agzv">
	Now when we navigate through the author and book records in the
	BookForm we can click the Edit Books button to launch our Edit Books
	dialog. Although the dialog supports <literal>UPDATE</>, <literal>DELETE</> and navigation over
	the book table, we cannot edit the foreign keys nor perform
	inserts. We will deal with insertion in the same way as we did
	with the <indexterm><primary>QDataTable</primary></indexterm>
<classname>QDataTable</>, then we will handle the foreign
	key relationship to author.
	</para>

	</sect3>

	<sect3 id="inserting-into-a-qdatabrowser">
	<title>Inserting into a <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</></title>

	<para id="ahak">
	We will create a slot to receive the Edit Books form's
	<indexterm><primary>Signals and Slots</primary><secondary>primeInsert()</secondary></indexterm>
<function>primeInsert()</> signal so that we can insert a unique
	primary key.

	<orderedlist numeration="arabic">
	    <listitem>
		<para id="ahar">
		Click on the Edit Books form, then
		create a new Slot called <function>primeInsertBook(QSqlRecord*)</>.
		</para>
		<para id="ahav">
		Click <indexterm><primary>Menu Options</primary><secondary>Edit|Slots</secondary></indexterm>
<guimenuitem>Edit|Slots</>, then click the
		<guibutton>New Slot</> button and type the new slot name
		in the Slot Properties Slot edit box. Click <guibutton>OK</>.
		</para>
	    </listitem>

	    <listitem>
		<para id="ahbd">
		Connect the BookDataBrowser's <indexterm><primary>Signals and Slots</primary><secondary>primeInsert()</secondary></indexterm>
<function>primeInsert()</>
		signal to the <function>primeInsertBook()</> slot.
		</para>
		<para id="ahbh">
		Click the
		<indexterm><primary>Toolbar Buttons</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<guibutton>Connect Signals/Slots</> toolbar button, then
		click the BookDataBrowser and drag to the form; release
		the mouse on the form. Now click the
		<indexterm><primary>Signals and Slots</primary><secondary>primeInsert()</secondary></indexterm>
<function>primeInsert()</> signal and the
		primeInsertBook slot. Click <guibutton>OK</>.
		</para>
	    </listitem>

	    <listitem>
		<para id="ahbs">
		In the
		Object Hierarchy window click Source and then click the
		<function>primeInsertBook</> slot. We need to change
		it to the following:
<programlisting>
void EditBookForm::primeInsertBook( <emphasis role="bold">QSqlRecord</> * buffer )
{
    <emphasis role="bold">QSqlQuery</> query;  
    query.exec( &quot;UPDATE sequence SET sequence = sequence + 1 WHERE tablename='book';&quot; );  
    query.exec( &quot;SELECT sequence FROM sequence WHERE tablename='book';&quot; );  
    if ( query.next() ) {  
        buffer-&gt;setValue( &quot;id&quot;, query.value( 0 ) );  
    }     
}
</programlisting>
		</para>
	    </listitem>

	    <listitem>
		<para id="ahce">
		We will also tidy up the user interface slightly. Click
		the Update button and set its default property to True.
		Connect the Close button's <indexterm><primary>Signals and Slots</primary><secondary>clicked()</secondary></indexterm>
<function>clicked()</> signal to the
		EditBookForm's <indexterm><primary>Signals and Slots</primary><secondary>accept()</secondary></indexterm>
<function>accept()</> slot.
		</para>
	    </listitem>

	</orderedlist>
	</para>
	</sect3>


	<sect3 id="handling-foreign-keys-in-a-qdatabrowser">
	<title>Handling Foreign Keys in a <indexterm><primary>QDataBrowser</primary></indexterm>
<classname>QDataBrowser</></title>

	<para id="ahcu">
	<indexterm><primary>Foreign Keys</primary></indexterm>

	<indexterm><primary>Databases</primary><secondary>Foreign Keys</secondary></indexterm>

	Qt's SQL module provides two approaches to dealing with foreign
	keys. The most powerful and flexible is to subclass widgets and
	use property maps to relate the widgets to the database. This
	approach is described in the <ulink
	url="http://doc.trolltech.com/sql.html#Custom_Editor_Widgets">Qt
	SQL Module documentation</>, particularly the StatusPicker
	example. A simpler approach that can be taken wholly within <emphasis>Qt Designer</>
	is presented here.
	</para>

	<para id="ahdf">
	We will add a new field to the EditBookForm so that authors can
	be edited along with the title and price. Once we've handled the
	visual design we'll write the code to make it all work.

	<orderedlist numeration="arabic">
	<listitem><para id="ahdl">
	First we'll add the new widgets. Click the BookDataBrowser and
	click the <indexterm><primary>Toolbar Buttons</primary><secondary>Break Layout</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Break Layout</secondary></indexterm>
<guibutton>Break Layout</> toolbar button. Resize the form
	to make it larger and drag each set of buttons down to make some
	room below the title and price QLineEdits. Click the
	<indexterm><primary>Toolbar Buttons</primary><secondary>Text Label</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Text Label</secondary></indexterm>
<guibutton>Text Label</> toolbar button and click on the form beneath
	the Price label. Click the <indexterm><primary>Widgets</primary><secondary>Text Label</secondary></indexterm>
Text Label and change its text to
	'Author'. Click the <indexterm><primary>Toolbar Buttons</primary><secondary>ComboBox</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
<guibutton>ComboBox</> toolbar button and click
	on the form beneath the price QLineEdit. In the Property Window
	change the <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
ComboBox's <indexterm><primary>Properties</primary><secondary>name</secondary></indexterm>
name to ComboBoxAuthor and
	change its <indexterm><primary>Properties</primary><secondary>sizePolicy</secondary></indexterm>
sizePolicy <indexterm><primary>Properties</primary><secondary>hSizeType</secondary></indexterm>
hSizeType to Expanding.
	</para></listitem>

	<listitem><para id="ahdy">
	Now we'll lay out the dialog. <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Shift+Click</secondary></indexterm>
<keycap>Shift+Click</> the Author label and
	the <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
ComboBox then click the <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Horizontally</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Horizontally</secondary></indexterm>
<guibutton>Lay Out Horizontally</>
	toolbar button. Now click the BookDataBrowser and click the
	<indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out in a Grid</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out in a Grid</secondary></indexterm>
<guibutton>Lay Out in a Grid</> toolbar button.
	</para></listitem>
	</orderedlist>
	</para>

	<para id="aheh">
	We need to write some code so that the <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
ComboBox will be
	populated with author names and scroll to the current book's
	author. We also need to ensure that we put the author's id into
	the book table's authorid field when a book record is inserted
	or updated. We'll ensure the code is executed at the right time
	by putting it in slots and connecting signals to our slots.

	<orderedlist numeration="arabic">
	<listitem><para id="aheq">
	Create two new slots called 
	<function>beforeUpdateBook(QSqlRecord *buffer)</> and 
	<function>primeUpdateBook(QSqlRecord *buffer)</>. (Click
	<indexterm><primary>Menu Options</primary><secondary>Edit|Slots</secondary></indexterm>
<guimenuitem>Edit|Slots</>, then in the <indexterm><primary>Dialogs</primary><secondary>Edit Slots</secondary></indexterm>
Edit Slots dialog click New Slot
	and enter the first new slot. Click New Slot again and enter the
	second slot then click <guibutton>OK</>.)
	</para></listitem>

	<listitem><para id="ahey">
	When the user navigates through the dialog, each time they move
	to a new record, a <indexterm><primary>Signals and Slots</primary><secondary>primeUpdate()</secondary></indexterm>
<function>primeUpdate()</> signal is emitted. We connect
	to this so that we can update the <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
ComboBox's display. Just
	before a record is updated or inserted into the database a
	<indexterm><primary>Signals and Slots</primary><secondary>beforeUpdate()</secondary></indexterm>
<function>beforeUpdate()</> or <indexterm><primary>Signals and Slots</primary><secondary>beforeInsert()</secondary></indexterm>
<function>beforeInsert()</> signal is emitted. We
	connect our <function>beforeUpdateBook()</> slot to both these signals so
	that we can ensure that the book's authorid field is correctly
	populated.
	</para>

	<para id="ahfj">
	Click the BookDataBrowser and drag the mouse to the form;
	release the mouse and the <indexterm><primary>Dialogs</primary><secondary>Edit Connections</secondary></indexterm>
Edit Connections dialog will appear.
	Connect the <indexterm><primary>Signals and Slots</primary><secondary>beforeUpdate()</secondary></indexterm>
<function>beforeUpdate()</> signal to our
	<function>beforeUpdateBook()</> slot. Connect the <indexterm><primary>Signals and Slots</primary><secondary>beforeInsert()</secondary></indexterm>
<function>beforeInsert()</> signal
	to our <function>beforeUpdateBook()</> slot. Finally connect the
	<indexterm><primary>Signals and Slots</primary><secondary>primeUpdate()</secondary></indexterm>
<function>primeUpdate()</> signal to our <function>primeUpdateBook()</> slot.
	</para></listitem>

	<listitem><para id="ahfs">
	All that remains is to write the underlying code. All the
	code snippets are taken from
	<filename>qt/tools/designer/examples/book/book7/editbook.ui</>.
	    <orderedlist numeration="arabic" inheritnum="inherit">
	    <listitem><para id="ahfx">
	    We start with the <indexterm><primary>Functions</primary><secondary>init()</secondary></indexterm>
<function>init()</> function; this is called after
	    the dialog is constructed and we will use it to populate the
	    <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
ComboBox with author names.
<programlisting>
void EditBookForm::init()
{
    <emphasis role="bold">QSqlQuery</> query( &quot;SELECT surname FROM author ORDER BY surname;&quot; );    
    while ( query.next() ) 
        ComboBoxAuthor-&gt;insertItem( query.value( 0 ).toString()); 
}
</programlisting>
	    Here we execute a query to get a list of author names and
	    insert each one into the <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
ComboBox.
	    </para></listitem>

	    <listitem><para id="ahgj">
	    We next write the code which will be executed just before a
	    record is updated (or inserted) in the database.
<programlisting>
void EditBookForm::beforeUpdateBook( <emphasis role="bold">QSqlRecord</> * buffer )
{
    <emphasis role="bold">QSqlQuery</> query( &quot;SELECT id FROM author WHERE surname ='&quot; + 
        ComboBoxAuthor-&gt;currentText() + &quot;';&quot; );
    if ( query.next() )
        buffer-&gt;setValue( &quot;authorid&quot;, query.value( 0 ) );
}
</programlisting>
	    We look up the id of the <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
ComboBox's current author
	    and place it in the update (or insert) buffer's authorid
	    field.
	    </para></listitem>

	    <listitem><para id="ahgt">
	    As the user navigates through the records we ensure
	    that the <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
ComboBox reflects the current author.  
<programlisting>
void EditBookForm::primeUpdateBook( <emphasis role="bold">QSqlRecord</> * buffer )
{
   <emphasis> // Who is this book's author?
</>
    <emphasis role="bold">QSqlQuery</> query( &quot;SELECT surname FROM author WHERE id='&quot; +  
        buffer-&gt;value( &quot;authorid&quot; ).toString() + &quot;';&quot; ); 
    <emphasis role="bold">QString</> author = &quot;&quot;;    
    if ( query.next() )
        author = query.value( 0 ).toString();
   <emphasis> // Set the ComboBox to the right author
</>
    for ( int i = 0; i &lt; ComboBoxAuthor-&gt;count(); i++ ) {
        if ( ComboBoxAuthor-&gt;text( i ) == author ) {
            ComboBoxAuthor-&gt;setCurrentItem( i ) ;
            break;
        }
    }
}
</programlisting>
	    Firstly we look up the book's author and secondly we iterate
	    through the <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
ComboBox's items until we find the author and
	    set the <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
ComboBox's current item to the matching author.
	    </para></listitem>
	    </orderedlist>
	</para>
	</orderedlist>
    </para>

    <para id="ahhi">
    If the author name has changed or been deleted the query will
    fail and no author id will be inserted into the buffer causing the <literal>INSERT</>
    to fail.  An alternative is to record
    the author id's as we populate the <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
ComboBox and store them in a
    <indexterm><primary>QMap</primary></indexterm>
<classname>QMap</> which we can then look up as required. This approach
    requires changes to the <indexterm><primary>Functions</primary><secondary>init()</secondary></indexterm>
<function>init()</>, <function>beforeUpdateBook()</> and
    <function>primeInsertBook()</> functions and the addition of a new function,
    <function>mapAuthor()</>.
    The relevant code from
    <filename>qt/tools/designer/examples/book/book8/editbook.ui</> is shown below.

	    <orderedlist numeration="arabic" inheritnum="inherit">
	    <listitem>
	    <para id="ahhw">
	    First we need to create a class variable to map author names
	    to author id's. Click in the Source tab of the Object
	    Hierarchy, then right click the Class Variables item and
	    click <indexterm><primary>Menu Options</primary><secondary>New</secondary></indexterm>
<guimenuitem>New</>. Type in
	    'QMap&lt;QString,int&gt; authorMap;'.
	    </para>
	    </listitem>
	    <listitem><para id="ahie">
	    We now record the author id's in the <indexterm><primary>Functions</primary><secondary>init()</secondary></indexterm>
<function>init()</> function.
<programlisting>
void EditBookForm::init()
{
    <emphasis role="bold">QSqlQuery</> query( &quot;SELECT surname, id FROM author ORDER BY surname;&quot; );    
    while ( query.next() ) {
        ComboBoxAuthor-&gt;insertItem( query.value( 0 ).toString() ); 
        int id = query.value( 1 ).toInt();
        mapAuthor( query.value( 0 ).toString(), id, TRUE );
    }
}
</programlisting>
	    After inserting each author's name into the <indexterm><primary>Widgets</primary><secondary>ComboBox</secondary></indexterm>
ComboBox we
	    populate a <indexterm><primary>QMap</primary></indexterm>
<classname>QMap</> with the author's name and id.
	    </para></listitem>

	    <listitem><para id="ahin">
	    Instead of looking up the author's id in the database we
	    look it up in the <indexterm><primary>QMap</primary></indexterm>
<classname>QMap</>.
<programlisting>
void EditBookForm::beforeUpdateBook( <emphasis role="bold">QSqlRecord</> * buffer )
{
    int id;
    mapAuthor( ComboBoxAuthor-&gt;currentText(), id, FALSE );
    buffer-&gt;setValue( &quot;authorid&quot;, id );
}
</programlisting>
	    </para></listitem>

	    <listitem><para id="ahiv">
	    We use a single function for storing author id's and
	    returning them so that we can use a static data structure.
<programlisting>
void EditBookForm::mapAuthor( const <emphasis role="bold">QString</> &amp; name, int &amp; id, bool populate )
{
    if ( populate ) 
        authorMap[ name ] = id;
    else
        id = authorMap[ name ];
}
</programlisting>
	    If the populate flag is TRUE, we store the author's name and
	    id in the <indexterm><primary>QMap</primary></indexterm>
<classname>QMap</>, otherwise we look up the given
	    author name and set id appropriately.
	    </para></listitem>
	    </orderedlist>
    </para>

<para id="ahji">
<indexterm><primary>Databases</primary><secondary>Foreign Keys</secondary></indexterm>

<indexterm><primary>Foreign Keys</primary></indexterm>

Another approach which is especially useful if the same foreign key
lookups are required in different parts of the application is to
subclass a cursor and use this for our lookups. This is described in the
<ulink url="http://doc.trolltech.com/sql.html">Qt SQL Module
documentation</>, particulary the section on subclassing
<indexterm><primary>QSqlCursor</primary></indexterm>
<classname>QSqlCursor</>.
</para>

<para id="ahjr">
The 'book' example demonstrates the basic techniques needed for SQL
programming with Qt. Additional information on the Qt SQL classes,
especially the <indexterm><primary>QSqlQuery</primary></indexterm>
<classname>QSqlQuery</> and <indexterm><primary>QSqlCursor</primary></indexterm>
<classname>QSqlCursor</> classes is
provided in the <ulink url="http://doc.trolltech.com/sql.html">Qt SQL
Module documentation</>.
</para>

	</sect3>

    </sect2>

</sect1>

</chapter>
