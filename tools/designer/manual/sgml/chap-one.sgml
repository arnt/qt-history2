<chapter>
<title>Creating a Qt Application</title>

<sect1 id="runningampexitingqtdesigner">
<title>Starting and Exiting <emphasis>Qt Designer</> </title>
<para id="aktf">
<indexterm><primary>Starting Qt Designer</primary></indexterm>

<emphasis>Qt Designer</> is controlled in the same way as any other modern
desktop application.
To start <emphasis>Qt Designer</> under Windows click the <indexterm><primary>Menu Options</primary><secondary>Start</secondary></indexterm>
<guimenuitem>Start</>
button and click <indexterm><primary>Menu Options</primary><secondary>Programs|Qt X.x.x|Designer</secondary></indexterm>
<guimenuitem>Programs|Qt X.x.x|Designer</>.
(X.x.x is the Qt version number, e.g. 3.0.0.) If you're running a Unix
or Linux operating system you can either double click the <emphasis>Qt Designer</> icon or enter
<literal>designer &amp;</literal> in an xterm.
</para>
<para id="aktp">
<indexterm><primary>Exiting Qt Designer</primary></indexterm>
<indexterm><primary>Getting Help</primary></indexterm>

When you've finished using <emphasis>Qt Designer</> click
<indexterm><primary>Menu Options</primary><secondary>File|Exit</secondary></indexterm>
<guimenuitem>File|Exit</>; you will be prompted to save any
unsaved changes. Help is available by pressing <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>F1</secondary></indexterm>
<keycap>F1</> or
from the <indexterm><primary>Menu Options</primary><secondary>Help</secondary></indexterm>
<guimenuitem>Help</> menu.
</para>
<para id="aktx">
To get the most benefit from the tutorial chapters we recommend that you
start <emphasis>Qt Designer</> now and create the example applications as you read. Most of
the work involves using <emphasis>Qt Designer</>'s menus, dialogs and editors, with only
small amounts of code to type in. 
</para>
<para id="akud">
When you start <emphasis>Qt Designer</>, by default, you will see a menu bar and various
toolbars at the top. 
<indexterm><primary>Widgets and Source window</primary><seealso>Object Explorer</seealso></indexterm>

<indexterm><primary>Object Explorer</primary></indexterm>

<indexterm><primary>Pixmaps</primary></indexterm>

On the left hand side are three windows, the first is the Files
window, the second is the Widgets and Source window (the Object
Explorer) and the third is the
Properties window. The Files window lists the files and images
associated with the project; to open any form single click it in the
Files list. The Widgets and Source window lists the current form's
widgets and slots. The Properties window is used to view and change the
properties of forms and widgets. We will cover the use of <emphasis>Qt Designer</>'s windows,
dialogs, menu options and toolbar buttons as we create example
applications.
</para>
<para id="akut">
In this chapter we will build an application called 'multiclip' which
allows you to store and retrieve multiple text clippings to and from the
clipboard.
<figure><title>The Multiclip Application</title>
<graphic fileref="images\multiclip.png"></graphic>
</figure>
</para>
</sect1>

<sect1 id="creatinganewproject">
<title>Creating a New Project </title>
<para id="akvf">
<indexterm><primary>Projects</primary></indexterm>

<indexterm><primary>Projects</primary><secondary>Creating New</secondary></indexterm>

<indexterm><primary>Creating Projects</primary><seealso>Projects</seealso></indexterm>

<indexterm><primary>Pixmaps</primary><secondary>In Projects</secondary></indexterm>

<indexterm><primary>Pixmaps</primary><secondary>Adding to Forms</secondary></indexterm>

Whenever you create a new application we
<emphasis>strongly</> recommend that you create a project file and open the
project rather than individual <indexterm><primary>Files and file types</primary><secondary>.ui</secondary></indexterm>
<filename>.ui</> files. Opening a project has
the advantage that all the forms you create for the project are
available via a single mouse click rather than having to be loaded
individually through file open dialogs. An additional benefit of using
project files is that they allow you to store all your images in a
single file rather than duplicate them in each form in which they
appear.
</para>
<para id="akvr">
<indexterm><primary>Adding</primary><secondary>Forms</secondary></indexterm>

<indexterm><primary>Forms</primary><secondary>Adding</secondary></indexterm>

Start <emphasis>Qt Designer</> if you haven't already. Click <indexterm><primary>Menu Options</primary><secondary>File|New Project</secondary></indexterm>
<guimenuitem>File|New Project</> to invoke
the <indexterm><primary>Dialogs</primary><secondary>Project Settings</secondary></indexterm>
Project Settings dialog. Enter 'multiclip' as the project's name and
'multiclip.pro' as the project's filename, then click <guibutton>OK</>.  The name of
the current project is shown in the
<guibutton>Files</>
toolbar which is the top left toolbar by
default. Once we have a project we can add forms and begin to build our
application. (See <xref
linkend="customizingqtdesigner"> "Customizing <emphasis>Qt Designer</>" for
information on changing <emphasis>Qt Designer</>'s toolbars and windows to suit your
preferences.)
</para>
</sect1>

<sect1 id="creatinganewform">
<title>Creating a New Form </title>
<para id="akwi">
<indexterm><primary>Dialogs</primary><secondary>Creating New</secondary></indexterm>

<indexterm><primary>Creating Forms</primary><seealso>Dialogs</seealso></indexterm>

<indexterm><primary>Adding</primary><secondary>Forms</secondary></indexterm>

Click <indexterm><primary>Menu Options</primary><secondary>File|New</secondary></indexterm>
<guimenuitem>File|New</> to invoke the <indexterm><primary>Dialogs</primary><secondary>New Form</secondary></indexterm>
New Form dialog.
Several default forms are supplied but we will use the default Dialog
form, so just click <guibutton>OK</>. A new form called 'Form1' will appear. Note
that the new form is listed in the Files list and the Properties window
shows the form's default property settings.
</para>
<para id="akwr">
Click the Value beside the <indexterm><primary>Properties</primary><secondary>name</secondary></indexterm>
name property and change the form's name to
'MulticlipForm'.  Change the form's caption to 'Multiclip'. The
properties are ordered in accordance with the inheritance hierarchy, and
caption is roughly in the middle of the property editor. Save
the form: click <indexterm><primary>Menu Options</primary><secondary>File|Save</secondary></indexterm>
<guimenuitem>File|Save</>, enter the name
'multiclip.ui', then click the <guibutton>Save</> button. 
</para>

<sidebar id="usingthepropertyeditor">
<title>Using the Property Editor </title>
<para id="akxe">
<indexterm><primary>Using the Property Editor</primary></indexterm>
<indexterm><primary>Properties</primary></indexterm>

The Property Editor has two columns, the Property column which
lists property names and the Value column which lists the values. Some
property names have a plus sign '+' in a square to their left; this
signifies that the property name is the collective name for a set of
related properties. Click the form to make the Property Editor show the
form's properties. 
Click the <indexterm><primary>Properties</primary><secondary>sizePolicy</secondary></indexterm>
sizePolicy property's plus sign; you will
see two properties appear indented below sizePolicy, hSizeType and
vSizeType. These properties are edited in the same way as any
other properties.
</para>
<para id="akxu">
Some properties have simple values, for example, the <indexterm><primary>Properties</primary><secondary>name</secondary></indexterm>
name property
has a text value, the <indexterm><primary>Properties</primary><secondary>width</secondary></indexterm>
width property (within <indexterm><primary>Properties</primary><secondary>minimumSize</secondary></indexterm>
minimumSize
for example) has a numeric value. To change a text value click the
existing text and type in your new text. To change a numeric value click
the value and either type in a new number, or use the spin buttons to
increase or decrease the existing number until it reaches the value you
want. Some properties have a fixed list of values, for example the
<indexterm><primary>Properties</primary><secondary>mouseTracking</secondary></indexterm>
mouseTracking property is boolean and can take the values True or
False. The <indexterm><primary>Properties</primary><secondary>cursor</secondary></indexterm>
cursor property also has a fixed list of values. If
you click the cursor property or the <indexterm><primary>Properties</primary><secondary>mouseTracking</secondary></indexterm>
mouseTracking property the
value will be shown in a drop down combobox; click the down arrow to see
what values are available. Some properties have complex sets of values;
for example the <indexterm><primary>Properties</primary><secondary>font</secondary></indexterm>
font property. If you click the font property an
ellipsis button (<guibutton>...</>) will appear; click this button and a
<indexterm><primary>Dialogs</primary><secondary>Select Font</secondary></indexterm>
Select Font dialog will pop up which you can use to change any of the
font settings. Other properties have ellipsis buttons which lead to
different dialogs depending on what settings the property can have. For
example, if you have a lot of text to enter for a <indexterm><primary>Properties</primary><secondary>text</secondary></indexterm>
text property
you could click the ellipsis button to invoke the multi-line text editor
dialog.
</para>
<para id="akyx">
<indexterm><primary>Properties</primary><secondary>Reverting changes</secondary></indexterm>

<indexterm><primary>Properties</primary><secondary>Initial values</secondary></indexterm>

The names of properties which have changed are shown in bold. If
you've changed a property but want to revert it to its default value
click the property's value and then click the red 'X' button 
to the right of the value. Some properties have an
<emphasis>initial</emphasis> value, e.g. 'TextEdit1', but no default
value; if you revert a property that has an initial value but no default
value (by clicking the red 'X') the value will become empty unless the
property, e.g. name, is not allowed to be empty.
</para>
<para id="akzj">
<indexterm><primary>Undo and Redo</primary><secondary>Properties</secondary></indexterm>

<indexterm><primary>Properties</primary><secondary>Undo and Redo</secondary><seealso>Undo and Redo</seealso></indexterm>

<indexterm><primary>Redo</primary><seealso>Undo and Redo</seealso></indexterm>

The property editor fully supports Undo and Redo
(<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+Z</secondary></indexterm>
<keycap>Ctrl+Z</> and <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+Y</secondary></indexterm>
<keycap>Ctrl+Y</>, also available
from the <indexterm><primary>Menu Options</primary><secondary>Edit</secondary></indexterm>
<guimenuitem>Edit</> menu). 
</para>
</sidebar>

</sect1>


<sect1 id="addingwidgets">
<title>Adding Widgets </title>
<para id="alaa">
<indexterm><primary>Forms</primary><secondary>Adding Widgets</secondary></indexterm>

<indexterm><primary>Adding</primary><secondary>Widgets</secondary></indexterm>

<indexterm><primary>Cut and Paste (in Applications)</primary></indexterm>

The multiclip application consists of a text box to display the current
clipboard text (if any), a list box showing the previous clippings, a
length indicator, a checkbox and buttons. If you run the application and
resize it all the widgets will scale properly. 
</para>
<para id="alah">
The <emphasis>Qt Designer</> approach to laying out a form is to place the required
widgets on the form in the approximate positions that they should
occupy and then use the layout tools to size and position them
correctly. We'll now add the multiclip form's widgets.
    <orderedlist numeration="arabic">
    <listitem>
	<para id="alao">
	<indexterm><primary>Tooltips</primary></indexterm>

	We'll start with the current clipping text box.
	Click the 
	<indexterm><primary>Toolbar Buttons</primary><secondary>Text Label</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Text Label</secondary></indexterm>
<guibutton>Text Label</> toolbar button and
	click towards the top left of the form. (If you hover the mouse
	over a toolbar button its name will appear in
	a tooltip.) We won't bother renaming the label since we'll never
	refer to it in code; but we need to change its text, so change
	its <indexterm><primary>Properties</primary><secondary>text</secondary></indexterm>
text property to 'Current Clipping'. (See the <xref
	linkend="usingthepropertyeditor"> "Using the Property Editor"
	sidebar for an explanation of the property editor.)
	</para>
	<para id="albb">
	Click the 
	<indexterm><primary>Toolbar Buttons</primary><secondary>Line Edit</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Line Edit</secondary></indexterm>
<guibutton>Line Edit</> toolbar button and
	click towards the top right of the form. Use the Property Editor
	to change the widget's name to 'currentLineEdit'.
	</para>
    </listitem>
    <listitem>
	<para id="albj">
	Now we'll add another label and the list box. Click the 
	<indexterm><primary>Toolbar Buttons</primary><secondary>Text Label</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Text Label</secondary></indexterm>
<guibutton>Text Label</> toolbar button and click below the
	Current Clipping label. Change the <indexterm><primary>Properties</primary><secondary>text</secondary></indexterm>
text property to 'Previous
	Clippings'. Don't worry
	about positioning the widgets precisely, nor about the fact that
	they are the wrong size; the layout tools (covered in the next
	section) will take care of this. 
	</para>
	<para id="albs">
	<indexterm><primary>Properties</primary><secondary>Property Editors</secondary></indexterm>

	<indexterm><primary>Deleting</primary><secondary>ListBox Items</secondary></indexterm>

	<indexterm><primary>Value Editors</primary><secondary>List Box</secondary></indexterm>

	Click the 
	<indexterm><primary>Toolbar Buttons</primary><secondary>List Box</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>List Box</secondary></indexterm>
<guibutton>List Box</> toolbar button and click
	the form below the 'Previous Clippings' label. Change the list
	box's name to 'clippingsListBox'. By default <emphasis>Qt Designer</> creates list
	boxes with a single initial value of 'New Item'. We don't want
	this value (we'll be populating our list box in code later), so
	we need to remove the value. Right click the list box then click
	the <indexterm><primary>Menu Options</primary><secondary>Edit</secondary></indexterm>
<guimenuitem>Edit</> menu item on the popup menu
	to invoke the listbox's value editor dialog. Click
	<guibutton>Delete Item</> to delete the default item,
	then click <guibutton>OK</>. (See the <xref linkend="valueeditors"> "Value
	Editors" sidebar.)
	</para>
    </listitem>
    <listitem>
	<para id="alck">
	We want to know the length of the current clipping so we'll add
	a label and an <indexterm><primary>Widgets</primary><secondary>LCD Number</secondary></indexterm>
LCD Number widget. 
	</para>
	<para id="alco">
	<indexterm><primary>Adding</primary><secondary>Text Labels</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Labels</secondary></indexterm>

	Click the 
	<indexterm><primary>Toolbar Buttons</primary><secondary>Text Label</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Text Label</secondary></indexterm>
<guibutton>Text Label</> toolbar button and
	<indexterm><primary>Widgets</primary><secondary>Line Edit</secondary></indexterm>
Line Edit. Change its <indexterm><primary>Properties</primary><secondary>text</secondary></indexterm>
text
	property's value to 'Length'. Click the 
	<indexterm><primary>Toolbar Buttons</primary><secondary>LCD Number</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>LCD Number</secondary></indexterm>
<guibutton>LCD Number</> toolbar button and click below
	the length label. Change the LCD Number's
	name to 'lengthLCDNumber'.
	</para>
    </listitem>
    <listitem>
	<para id="aldc">
	Multiclip can be made to detect clipboard changes and
	automatically add new clippings. We want the user to have
	control over whether this should
	happen or not so we will provide a check box which they can use
	to indicate their preference. 
	</para>
	<para id="aldi">
	Click the 
	<indexterm><primary>Toolbar Buttons</primary><secondary>Check Box</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Check Box</secondary></indexterm>
<guibutton>Check Box</> toolbar button and
	click below the 
	<indexterm><primary>Widgets</primary><secondary>LCD Number</secondary></indexterm>
LCD Number. Change the
	checkbox's name to 'autoCheckBox' and its text to 'A&amp;uto Add
	Clippings'. Note that the <indexterm><primary>Properties</primary><secondary>accel</secondary></indexterm>
accel property automatically changes
	to <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Alt+U</secondary></indexterm>
<keycap>Alt+U</> because the ampersand in the text
	signifies a keyboard shortcut.
	</para>
    </listitem>
    <listitem>
	<para id="aldw">
	The last widgets we require are the buttons. One way to add the
	same kind of widget multiple times is to add one, copy it, then
	paste repeatedly. We will use another approach.
	</para>
	<para id="aleb">
	<indexterm><primary>Adding</primary><secondary>Duplicate Widgets</secondary></indexterm>

	<indexterm><primary>Widgets</primary><secondary>Repeatedly Adding</secondary></indexterm>

	<indexterm><primary>Adding</primary><secondary>Push Buttons</secondary></indexterm>

	<emphasis>Double</emphasis> click the 
	<indexterm><primary>Toolbar Buttons</primary><secondary>Push Button</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Push Button</secondary></indexterm>
<guibutton>Push Button</> toolbar button; now click below the
	checkbox to place a button. Click below the button we've just
	added to add a second button. Add a third and fourth button. Now
	click the <indexterm><primary>Toolbar Buttons</primary><secondary>Pointer</secondary></indexterm>
<guibutton>Pointer</> toolbar button to switch off
	automatically adding the same widget. Change the first button's
	name to 'addPushButton' and its text to '&amp;Add Clipping'.
	Change the second button's name to 'copyPushButton' and its text
	to '&amp;Copy Previous'. Change the third button's name and text
	properties to 'deletePushButton' and '&amp;Delete Clipping'
	respectively. Similarly change the fourth button's name and text
	to 'quitPushButton' and '&amp;Quit'.
	</para>
    </listitem>
    </orderedlist>
All our widgets have been placed on the form with their properties
changed to suit our application's needs. In the next section we will use
<emphasis>Qt Designer</>'s layout tools to size and position the widgets correctly and in
such a way that when the user resizes the form the widgets will scale
properly.
</para>

<sidebar id="valueeditors">
<title>Value Editors</title>
<para id="alfc">
<indexterm><primary>Value Editors</primary></indexterm>

<indexterm><primary>Value Editors</primary><secondary>Dialogs</secondary></indexterm>

<indexterm><primary>Dialogs</primary><secondary>Value Editors</secondary></indexterm>

Whilst the Property Editor is used to customize the generic properties
of widgets, value editors are used to edit values held within instances
of particular widgets. For example a 
<indexterm><primary>QLineEdit</primary></indexterm>
<classname>QLineEdit</>
can only contain a single line of text, but a
<indexterm><primary>QListBox</primary></indexterm>
<classname>QListBox</> can contain any number of items each of
which may be a line of text, a pixmap, or both. To invoke a widget's
value editor double click the widget. (Alternatively right click the
widget and a popup menu will appear; if the first menu item is 'Edit',
you can click this to access the widget's value editor dialog.)
Different widgets have different value editors.
</para>
</sidebar>

</sect1>

<sect1 id="layingoutwidgetsandpreviewing">
<title>Laying Out Widgets &amp; Previewing </title>

    <sect2 id="introductiontolayouts">
    <title>Introduction to Layouts </title>
    <para id="algb"> 
    <indexterm><primary>Layouts</primary></indexterm>

    <indexterm><primary>Layouts</primary><secondary>Vertical</secondary></indexterm>

    <indexterm><primary>Layouts</primary><secondary>Horizontal</secondary></indexterm>

    <indexterm><primary>Layouts</primary><secondary>Grid</secondary></indexterm>

    Layouts work by grouping together widgets and groups of widgets,
    horizontally, vertically or in a grid. Widgets that are laid out
    together horizontally or vertically can be grouped either with a
    Layout or with a <indexterm><primary>Layouts</primary><secondary>Splitter</secondary></indexterm>
Splitter; the only difference is that a user can
    manipulate a Splitter themselves.
    </para>
    <para id="algj">
    If we want to lay out some widgets side by side we would select them
    and then click the 
    <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Horizontally</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Horizontally</secondary></indexterm>
<guibutton>Lay Out Horizontally</>
    toolbar button. If we want our widgets to be lined up one above
    the other we would use the <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Vertically</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Vertically</secondary></indexterm>
<guibutton>Lay Out Vertically</> toolbar
    button.
    Once we've grouped some widgets together we can then lay out the
    groups in relation to each other, again using vertical, horizontal
    or grid layouts. Once we have a collection of laid out groups we
    then click on the form itself and lay out the groups within the form
    using one of the layout buttons. 
    </para>
    <para id="algx">
    <indexterm><primary>Layouts</primary><secondary>Space filling</secondary></indexterm>

    <indexterm><primary>Widgets</primary><secondary>Push Button</secondary></indexterm>

    <indexterm><primary>Widgets</primary><secondary>Line Edit</secondary></indexterm>

    Some widgets will grow to fill the available space, vertically or
    horizontally or both ways. Buttons and line edits will fill
    horizontal space for example, whereas a <indexterm><primary>Widgets</primary><secondary>ListView</secondary></indexterm>
ListView will fill
    space in both directions. The easiest way to achieve the layout you
    want is to use <emphasis>Qt Designer</>'s layout tools. When you apply a layout to some
    widgets in some situations the widgets may not lay out the way you
    want. If a widget does not fill up enough space try changing its
    <indexterm><primary>Properties</primary><secondary>sizePolicy</secondary></indexterm>
sizePolicy to Expanding. If a widget takes up too much space one
    approach is to change its <indexterm><primary>Properties</primary><secondary>sizePolicy</secondary></indexterm>
sizePolicy, and another approach is to use
    a <emphasis>Spacer</emphasis> to consume excess space.
    </para>
    <para id="alhl">
    <indexterm><primary>Layouts</primary><secondary>Spacers</secondary></indexterm>
Spacers have no visual appearance on the running form and are used
    purely to insert space between widgets or groups of widgets. Suppose
    you have a widget that takes up too much space. You could break the
    layout and resize the widget to make room for a spacer. Then you
    would insert the spacer and layout the spacer with the widgets and
    the spacer will consume the excess space. If the spacer doesn't take
    up the right amount of space you can change its sizePolicy for finer
    control. 
    </para>
    <para id="alhy">
    <indexterm><primary>Undo and Redo</primary><secondary>Layouts</secondary></indexterm>

    <indexterm><primary>Layouts</primary><secondary>Undo and Redo</secondary><seealso>Undo and Redo</seealso></indexterm>

    <indexterm><primary>Layouts</primary><secondary>Spacers</secondary></indexterm>

    The best way to learn about layouts and spacers is to try
    them out. Experimenting with layouts is easy. If you make any
    changes that you aren't happy with you can easily undo them by
    clicking <indexterm><primary>Menu Options</primary><secondary>Edit|Undo</secondary></indexterm>
<guimenuitem>Edit|Undo</> or by pressing
    <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+Z</secondary></indexterm>
<keycap>Ctrl+Z</>. In the next section we'll lay out our
    multiclip example step-by-step.
    </para>
    </sect2>

    <sect2 id="layingoutwidgets">
    <title>Laying Out Widgets </title>
    <para id="alio">
    <indexterm><primary>Layouts</primary></indexterm>

    <indexterm><primary>Scaling widgets and application windows</primary></indexterm>

    <indexterm><primary>Automatically scaling widgets and application windows</primary></indexterm>

    <indexterm><primary>Absolute positioning</primary></indexterm>

    Layouts provide a means of grouping widgets and groups of widgets
    together in horizontal and vertical pairs and in grids. If you use
    layouts your forms and the widgets they contain will scale
    automatically when the user resizes the window. This is better than
    using absolute sizes and positions since you don't have to write any
    code to achieve the scaling and your users can make the most of
    their screen size whether they have a laptop or a very large screen
    desktop machine. Layouts use standard sizes for margins and widget
    spacing which helps give your applications a consistent and
    proportional look without requiring any effort on your part. Layouts
    are also easier and faster to use than absolute positioning; you can
    just place your widgets on the form in approximate positions and
    leave the layout tools to size and scale the widgets correctly.
    </para>

    <sidebar id="selectingwidgets">
    <title>Selecting Widgets and Inserting Widgets</title>
    <para id="aljh">
    <indexterm><primary>Object Explorer</primary></indexterm>

    <indexterm><primary>Selecting Widgets</primary></indexterm>

    <indexterm><primary>Rubber band, Selecting</primary></indexterm>

    <indexterm><primary>Selecting</primary><secondary>Rubber band</secondary></indexterm>

    <indexterm><primary>Grouping Widgets</primary></indexterm>

    <indexterm><primary>Widgets</primary><secondary>Grouping</secondary></indexterm>

    To select an individual widget, either click the widget itself or
    click its Name in the Object Explorer window. To select a group
    either click a fraction outside its red outline or click its Name in
    the Object Explorer window. To select multiple widgets or groups,
    click the form to deselect any selected widgets, then <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+Click</secondary></indexterm>
<keycap>Ctrl+Click</>
    one widget or group then drag the rubber band so that it touches the
    other widgets or groups that you want to select. This technique is
    particularly useful for selecting widgets that are
    <emphasis>inside</emphasis> another widget. For example to select
    the radio buttons in a button group but not the button group itself
    you would click the form then <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+Click</secondary></indexterm>
<keycap>Ctrl+Click</> one of the radio buttons
    and drag the rubber band to touch the other radio buttons.
    </para>
    <para id="aljx">
    <indexterm><primary>Layouts</primary><secondary>Break layout</secondary></indexterm>

    <indexterm><primary>Break layout</primary></indexterm>

    If we want to insert a widget into a gap between widgets
    which are in a layout we can click the toolbar button for the new
    widget and then click in the gap. <emphasis>Qt Designer</> will ask us if we want to
    break the layout and if we click <guibutton>Break Layout</>
    the layout will be broken and our widget inserted. We can then
    select the widgets and groups we want to lay out and lay them out
    again. The same effect can be achieved by clicking the group and
    either clicking the <indexterm><primary>Toolbar Buttons</primary><secondary>Break Layout</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Break Layout</secondary></indexterm>
<guibutton>Break Layout</> toolbar
    button or pressing <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+B</secondary></indexterm>
<keycap>Ctrl+B</>.
    </para>
 </sidebar>

    <para id="alkn">
    The layout we want to achieve is to have the current clipping label
    and currentLineEdit side by side at the top of the form. We want the
    previous clippings label and the clippingsListBox to occupy the left
    hand side of the form with the remaining widgets in a column on the
    right. We want to divide left and right with a splitter and make the
    left hand side larger by default. We'll leave the sizing of the
    widgets to <emphasis>Qt Designer</>. The layout controls are in the <indexterm><primary>Toolbar Buttons</primary><secondary>Layout</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Layout</secondary></indexterm>
<guibutton>Layout</>
    toolbar. (By default this is the fourth toolbar counting left to
    right.) We'll now lay out the widgets we've placed on the form.
    <orderedlist numeration="arabic">
    <listitem>
    <para id="alla">
    Click the current clipping label and <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Shift+Click</secondary></indexterm>
<keycap>Shift+Click</> the
    currentLineEdit <indexterm><primary>Widgets</primary><secondary>Line Edit</secondary></indexterm>
Line Edit. 
    (<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Shift+Click</secondary></indexterm>
<keycap>Shift+Click</> means hold down the shift key whilst
    clicking; this will ensure that <emphasis>Qt Designer</> performs multiple selections.)
    Most of the layout toolbar buttons will now be available. Click the
    <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Horizontally</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Horizontally</secondary></indexterm>
<guibutton>Lay Out Horizontally</> toolbar button. (If you hover
    the mouse over a toolbar button a tooltip giving the button's name
    will appear.) The two
    widgets will be moved together with a thin red line surrounding
    them. It doesn't matter that the widgets aren't the right size or in
    exactly the right place; as we progress with the layout <emphasis>Qt Designer</> will
    size and place them correctly.
    </para>
    </listitem>
    <listitem>
    <para id="allr">
    Click the Previous Clippings label and <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Shift+Click</secondary></indexterm>
<keycap>Shift+Click</> the
    clippingsListBox. Click the <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Vertically</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Vertically</secondary></indexterm>
<guibutton>Lay Out Vertically</> 
    toolbar button.
    </para>
    </listitem>
    <listitem>
    <para id="allz">
    <indexterm><primary>Selecting Widgets</primary></indexterm>

    <indexterm><primary>Rubber band, Selecting</primary></indexterm>

    <indexterm><primary>Selecting</primary><secondary>Rubber band</secondary></indexterm>

    <indexterm><primary>Grouping Widgets</primary></indexterm>

    <indexterm><primary>Widgets</primary><secondary>Grouping</secondary></indexterm>

    We want the remaining widgets to be grouped together vertically. We
    could <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Shift+Click</secondary></indexterm>
<keycap>Shift+Click</> each one but instead click the
    form above the Length label, then drag until the Length label, the
    LCD Number, the check box and all the buttons are all touching the
    rubber band (a black outline rectangle) that appears when you drag.
    Release the mouse, and all the remaining widgets should be selected.
    If you missed any <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Shift+Click</secondary></indexterm>
<keycap>Shift+Click</> them. Now click the 
    <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Vertically</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Vertically</secondary></indexterm>
<guibutton>Lay Out Vertically</> toolbar button.
    </para>
    </listitem>
    </orderedlist>
    </para>
    <para id="almn">
    We now have three groups of widgets which must be laid out in
    relation to each other and then laid out in relation to the form
    itself.
    <orderedlist numeration="arabic">
    <listitem>
    <para id="almt">
    <indexterm><primary>Layouts</primary><secondary>Rubber band</secondary></indexterm>

    <indexterm><primary>Grouping Widgets</primary></indexterm>

    <indexterm><primary>Widgets</primary><secondary>Grouping</secondary></indexterm>

    <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Shift+Click</secondary></indexterm>
<keycap>Shift+Click</>ing is used to select individual widgets. To select a
    group we must click the form to deselect any selected widgets, then
    <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+Click</secondary></indexterm>
<keycap>Ctrl+Click</> the group and drag so that the rubber band touches the
    groups we want to lay out and then release. With the buttons and
    other widgets already laid out and selected, <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+Click</secondary></indexterm>
<keycap>Ctrl+Click</> the list box
    and drag the rubber band over the one of the buttons, then release. Both
    groups should now be selected. Click the
    <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Horizontally (in Splitter)</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Horizontally (in Splitter)</secondary></indexterm>
<guibutton>Lay Out Horizontally (in Splitter)</> toolbar button. 
    </para>
    </listitem>
    <listitem>
    <para id="alnj">
    We now have two groups, the top one with the Current Clipping label
    and the line edit and the group we've just created with the list box,
    buttons and other widgets. We now want to lay these out in relation
    to the form. Click the form and click 
    the <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Vertically</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Vertically</secondary></indexterm>
<guibutton>Lay Out Vertically</> toolbar button. The widgets will
    be resized to fill the entire form.     
    </para>
    </listitem>
    </orderedlist>
    </para>

    <para id="alnw">
    <indexterm><primary>Layouts</primary><secondary>Spacers</secondary></indexterm>

    Unfortunately the Length label and the LCD Number take up far too
    much space, so we will have to revise the layout. With experience
    you will find that you do not need to rework layouts very often. We
    will insert a spacer which will use the extra space.
    <orderedlist numeration="arabic">
    <listitem>
    <para id="aloe">
    First we must make some room for the spacer. Click the LCD Number to
    select it. Now click the <indexterm><primary>Toolbar Buttons</primary><secondary>Break Layout</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Break Layout</secondary></indexterm>
<guibutton>Break Layout</> toolbar
    button. Move the LCD Number up a little bit, there's no need to be
    exact we just want to create some space below it.  
    </para>
    </listitem>
    <listitem>
    <para id="alon">
    <indexterm><primary>Layouts</primary><secondary>Spacers</secondary></indexterm>

    Now we'll add the spacer.
    Click the <indexterm><primary>Toolbar Buttons</primary><secondary>Spacer</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Spacer</secondary></indexterm>
<guibutton>Spacer</> toolbar button, then click the form
    in the space you've created between the LCD Number and the check
    box. A popup menu with two options, Horizontal and Vertical, will
    appear; click Vertical. We choose vertical because we want the spacer
    to consume excess vertical space.
    </para>
    </listitem>
    <listitem>
   <para id="aloz">
    <indexterm><primary>Layouts</primary><secondary>Spacers</secondary></indexterm>

    We need to regroup the buttons and other widgets in a vertical
    group. Drag the mouse from near the bottom right of the form so that
    the rubber band includes or touches the buttons, the
    check box, the spacer, the LCD Number and the Length label; then
    release. If you selected any other widgets by mistake, click the
    form and try the drag again. Click the 
    <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Vertically</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Vertically</secondary></indexterm>
<guibutton>Lay Out Vertically</> toolbar button.
    </para>
    </listitem>
    <listitem>
    <para id="alpl">
    <indexterm><primary>Layouts</primary><secondary>Splitters</secondary></indexterm>

    <indexterm><primary>Layouts</primary><secondary>Horizontal</secondary></indexterm>

    <indexterm><primary>Layouts</primary><secondary>Spacers</secondary></indexterm>

    We now have three groups as we had before, only this time with the
    small addition of the spacer. Select the list box and the buttons by
    clicking the form, dragging and releasing once the rubber band
    covers or touches both groups. 
    Click <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Horizontally (in Splitter)</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Horizontally (in Splitter)</secondary></indexterm>
<guibutton>Lay Out Horizontally (in Splitter)</> to regroup
    them with the splitter.
    </para>
    </listitem>
    <listitem>
    <para id="alpy">
    The last step is to lay out the form itself. Click the form and
    click <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Vertically</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Vertically</secondary></indexterm>
<guibutton>Lay Out Vertically</>. The form should now
    be laid out correctly.	
    </para>
    </listitem>
    </orderedlist>
    There are two small deficiencies in the layout that we have
    achieved. Firstly the list box and buttons take up an equal width
    whereas we'd rather have the list box take up about three quarters
    of the width. Secondly the Length label, the check box and the
    buttons extend right up to the splitter. They would look more
    attractive if there was a little bit of space separating them from
    the splitter.
    </para>
    <para id="alqo"> 
    Expanding the list box half of the splitter would require us to add
    the following code to the form's <indexterm><primary>Functions</primary><secondary>init()</secondary></indexterm>
<function>init()</> function:
<programlisting>
    QValueList&lt; int &gt; sizes;
    sizes &lt;&lt; 250 &lt;&lt; 40;
    Splitter-&gt;setSizes( sizes );
</programlisting>
    We won't add this code now since we'll deal with the code when we
    come to implement the application's functionality later in the
    chapter. 
    </para>
    <para id="alrb">
    <indexterm><primary>Layouts</primary><secondary>Spacing</secondary></indexterm>

    <indexterm><primary>Object Explorer</primary></indexterm>

    <indexterm><primary>Selecting Widgets</primary></indexterm>

    We will create some space around the splitter by changing the
    margins of the layout groups that it joins together. To click a
    layout either click a fraction above the layout's top red line or
    click the layout's name in the Object Explorer (the Widgets and
    Source window). (See <xref
    linkend="theobjectexplorer"> "The Object Explorer" sidebar for an
    explanation of the Object Explorer window.) Click the layout that
    contains the list box, and change the <indexterm><primary>Properties</primary><secondary>layoutMargin</secondary></indexterm>
layoutMargin property to 6,
    then press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Enter</secondary></indexterm>
<keycap>Enter</>. Click the layout that contains
    the buttons and other widgets, and change
    its <indexterm><primary>Properties</primary><secondary>layoutMargin</secondary></indexterm>
layoutMargin to the same value in the same way. 
    </para>

    <sidebar id="theobjectexplorer">
    <title>The Object Explorer</title>
    <para id="alru">
    <indexterm><primary>Object Explorer</primary></indexterm>

    View the Object Explorer (Widgets and Source) window by clicking
    <indexterm><primary>Menu Options</primary><secondary>Window|Views|Object Explorer</secondary></indexterm>
<guimenuitem>Window|Views|Object Explorer</>. The Object
    Explorer has two tabs, the Widgets tab which shows the object
    hierarchy, and the Source tab which shows the source code you have
    added to the form. Clicking the name of a widget in the Widget tab
    will select the widget and show its properties in the Property
    Editor. It is easy to see and select widgets
    in the Object Explorer which is especially useful for forms that
    have many widgets or which use layouts. 
    </para>
    <para id="alsg">
    <indexterm><primary>Code Editing</primary></indexterm>

    <indexterm><primary>Subclassing</primary></indexterm>

    <indexterm><primary>Forward declarations</primary></indexterm>

    <indexterm><primary>Includes</primary></indexterm>

    <indexterm><primary>Adding</primary><secondary>Code</secondary></indexterm>

    <indexterm><primary>Adding</primary><secondary>Forward declarations</secondary></indexterm>

    <indexterm><primary>Adding</primary><secondary>Includes</secondary></indexterm>

    <indexterm><primary>Adding</primary><secondary>Class variables</secondary></indexterm>

    <indexterm><primary>Class variables</primary></indexterm>

    <indexterm><primary>Deleting</primary><secondary>Forward declarations</secondary></indexterm>

    <indexterm><primary>Deleting</primary><secondary>Includes</secondary></indexterm>

    <indexterm><primary>Deleting</primary><secondary>Class variables</secondary></indexterm>

    <indexterm><primary>Forms</primary><secondary>Forward declarations</secondary></indexterm>

    <indexterm><primary>Forms</primary><secondary>Class variables</secondary></indexterm>

    <indexterm><primary>Forms</primary><secondary>Code editing</secondary></indexterm>

    <indexterm><primary>Forms</primary><secondary>destructor</secondary></indexterm>

    <indexterm><primary>Forms</primary><secondary>constructor</secondary></indexterm>

    In the original version of <emphasis>Qt Designer</> if you wanted to provide code for a
    form you had to subclass the form and put your code in the
    subclass. This version fully supports the subclassing
    approach, but now provides an alternative: placing your code
    directly into forms. Writing code in <emphasis>Qt Designer</> is not quite the same
    as subclassing, for example you cannot get direct access to the
    form's constructor or destructor. Instead two functions
    <indexterm><primary>Functions</primary><secondary>init()</secondary></indexterm>
<function>init()</> (called after construction) and
    <indexterm><primary>Functions</primary><secondary>destroy()</secondary></indexterm>
<function>destroy()</> (called before destruction) are
    created by default. You can also add your own class variables which
    will be put in the generated constructor's code, and you can add
    forward declarations and any includes you require. To add a variable
    or declaration right click the appropriate item, e.g. Class
    Variables, then click New then enter your text, e.g.
    <literal>QString fileName</literal>. If one or more items exist
    right clicking will popup a two item menu with New and Delete as
    options. To edit code just click the name of a function to invoke
    the code editor. Code editing and creating slots are covered later.
    </para>
    <para id="alte">
    <indexterm><primary>Subclassing</primary></indexterm>

    If you subclass the form you create your own 
    <indexterm><primary>Files and file types</primary><secondary>.cpp</secondary></indexterm>
<filename>.cpp</> files which can contain your own
    constructor, destructor, functions, slots, declarations and
    variables as your requirements dictate. (See <xref
    linkend="subclassing"> "Subclassing" for more information.) 
    </para>
    </sidebar>

    <para id="alto">
    <indexterm><primary>Absolute positioning</primary></indexterm>

    In the example we've presented we've used <emphasis>Qt Designer</>'s layout tools to lay
    out our widgets. We will use the layout tools again in the examples
    presented in later chapters. If you want to use absolute
    positioning, i.e. to place and size your widgets with exact pixel
    sizes you can easily do so. To place a widget click it and drag it
    to the desired position. To resize it, click it, and drag one of the
    sizing handles (these are small blue squares) until the size is
    right. To stop the widget from resizing when the window is resized
    change the <indexterm><primary>Properties</primary><secondary>hSizeType</secondary></indexterm>
hSizeType and <indexterm><primary>Properties</primary><secondary>vSizeType</secondary></indexterm>
vSizeType (these are
    properties within the <indexterm><primary>Properties</primary><secondary>sizePolicy</secondary></indexterm>
sizePolicy property), to Fixed.
    </para>
    </sect2>

    <sect2 id="previewing">
    <title>Previewing </title>
    <para id="aluh">
    <indexterm><primary>Previewing</primary></indexterm>

    <indexterm><primary>Preview Mode</primary><seealso>Previewing</seealso></indexterm>

    <indexterm><primary>Cross-platform previewing</primary></indexterm>

    Although <emphasis>Qt Designer</> presents an accurate view of our forms we often want to
    see what a form looks like when it is run. It is also useful to be
    able to test out some aspects of the form, for example how the form
    scales when resized or how the splitters work in practice. If we're
    building cross-platform applications it is also useful to see how
    the form will look in different environments.
    </para>
    <para id="alur">
    To see a preview either click <indexterm><primary>Menu Options</primary><secondary>Preview|Preview Form</secondary></indexterm>
<guimenuitem>Preview|Preview Form</> 
    or press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+T</secondary></indexterm>
<keycap>Ctrl+T</>. To leave preview mode 
    close the window in the standard way for
    your environment. To view previews which show how the application will
    look on other platforms click the <indexterm><primary>Menu Options</primary><secondary>Preview</secondary></indexterm>
<guimenuitem>Preview</>
    menu and click one of the menu items that drop down.
    </para>
    <para id="alvc"> 
    Preview the multiclip form and try out the splitter and try resizing
    the form. In all probability you moved the splitter to the right to
    reduce the size of the buttons to make the form more attractive. The
    splitter seemed like a good idea but in practice we want the buttons
    and the other widgets on the right hand side to take up a fixed
    amount of space. <emphasis>Qt Designer</> makes changing layouts very easy, so we'll fix
    this straight away.
    </para>
    <para id="alvl">
    <indexterm><primary>Layouts</primary><secondary>Splitters</secondary></indexterm>

    <indexterm><primary>Layouts</primary><secondary>Rubber band</secondary></indexterm>

    Click the splitter then click the <indexterm><primary>Toolbar Buttons</primary><secondary>Break Layout</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Break Layout</secondary></indexterm>
<guibutton>Break Layout</> 
    toolbar button; the splitter will be removed. Now
    click the form itself, near the bottom, and drag the rubber band so
    that it touches both the list box and some of the buttons, then
    release. The list box group and the buttons group are
    selected; click the <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Horizontally</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Horizontally</secondary></indexterm>
<guibutton>Lay Out Horizontally</>
    toolbar button. Click the form then click the 
    <indexterm><primary>Toolbar Buttons</primary><secondary>Lay Out Vertically</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Lay Out Vertically</secondary></indexterm>
<guibutton>Lay Out Vertically</> 
    toolbar button. The form is now laid out as
    we require. Preview the form (press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+T</secondary></indexterm>
<keycap>Ctrl+T</>) and try
    resizing it.
    </para>
    <para id="alwd">
    <indexterm><primary>Undo and Redo</primary><secondary>Layouts</secondary></indexterm>

    It would be useful if you experimented further with layouts since
    they work visually and are best learnt through practice. 
    To remove a layout click the <indexterm><primary>Toolbar Buttons</primary><secondary>Break Layout</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Break Layout</secondary></indexterm>
<guibutton>Break Layout</>
    toolbar button; to apply a layout select the
    relevant widgets or groups and click a layout button. You can
    preview as often as you like and you can always undo any changes
    that you make. 
    </para>
    <para id="alwo">
    <indexterm><primary>Layouts</primary><secondary>Grid</secondary></indexterm>

    <indexterm><primary>Layouts</primary><secondary>Break layout</secondary></indexterm>

    Let's try an experiment, to see how the grid layout works. Click
    the list box, then press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+B</secondary></indexterm>
<keycap>Ctrl+B</> (break layout).
    Click one of the buttons and press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+B</secondary></indexterm>
<keycap>Ctrl+B</>. Click
    the form at the bottom and drag until all the widgets are touching
    or within the rubber band, (but excluding the Current
    Clipping label and the currentLineEdit line edit); then release.
    Press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+G</secondary></indexterm>
<keycap>Ctrl+G</> (lay out in a grid). Click the form,
    then click <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+L</secondary></indexterm>
<keycap>Ctrl+L</> (lay out vertically). Our
    original design is back -- but this time using a grid layout. 
    </para>
    </sect2>

    <sect2 id="changingthetaborder">
    <title>Changing the Tab Order </title>
    <para id="alxi">
    <indexterm><primary>Tab Order</primary></indexterm>
<indexterm><primary>Tab Order Mode</primary><seealso>Tab Order</seealso></indexterm>

    Keyboard users press the <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Tab</secondary></indexterm>
<keycap>Tab</> key to move the focus
    from widget to widget as they use a form. The order in which the
    focus moves is called the tab order. Preview multiclip (press
    <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+T</secondary></indexterm>
<keycap>Ctrl+T</>) and try tabbing through the widgets. The
    tab order may not be what we want so we'll go into tab order mode
    and change it to the order we want.
    </para>
    <para id="alxs">
    <indexterm><primary>Tab Order</primary></indexterm>

    When you click the <indexterm><primary>Toolbar Buttons</primary><secondary>Tab Order</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Tab Order</secondary></indexterm>
<guibutton>Tab Order</> toolbar button a
    number in a blue circle will appear next to every widget that can
    accept keyboard focus. The numbers represent the each widget's tab
    order, starting from 1. You change the tab order by clicking the
    widgets in the order you want to be the new tab order. If you make
    a mistake and need to start again, double click the widget you
    want to be first, then click the other widgets in the required
    order as before. When you've finished press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Esc</secondary></indexterm>
<keycap>Esc</> to leave tab
    order mode. If you made a mistake or preferred the previous tab
    order you can undo your changes by leaving tab order and undoing
    (press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Esc</secondary></indexterm>
<keycap>Esc</> then <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+Z</secondary></indexterm>
<keycap>Ctrl+Z</>). 
    </para>
    <para id="alyh">
    <indexterm><primary>Tab Order</primary></indexterm>

    Click the <indexterm><primary>Toolbar Buttons</primary><secondary>Tab Order</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Tab Order</secondary></indexterm>
<guibutton>Tab Order</> toolbar button, then
    click the current clipping <indexterm><primary>Widgets</primary><secondary>Line Edit</secondary></indexterm>
Line Edit
    -- even if it is already number
    one in the tab order. Next click the previous clipping <indexterm><primary>Widgets</primary><secondary>ListBox</secondary></indexterm>
ListBox, 
    then the auto add clippings <indexterm><primary>Widgets</primary><secondary>CheckBox</secondary></indexterm>
CheckBox. Click each button in
    turn from top (add clipping) to bottom (quit). Press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Esc</secondary></indexterm>
<keycap>Esc</> to
    finish tab order mode, then preview the form and try tabbing through
    the widgets. 
    </para>
    <para id="alys">
    Note that you can stop clicking if the tab order numbers for all the
    widgets is correct; just press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Esc</secondary></indexterm>
<keycap>Esc</> to leave tab
    order mode.
    </para>
    </sect2>
</sect1>

<sect1 id="connectingupanapplication">
<title>Connecting Signals and Slots </title>
<para id="alzc">
<indexterm><primary>Signals and Slots</primary></indexterm>

<indexterm><primary>Connecting</primary><seealso>Signals and Slots</seealso></indexterm>

Qt provides the signals and slots mechanism for communicating between
widgets. Signals are emitted by widgets when particular events occur. We
can connect signals to slots, either pre-defined slots or those we
create ourselves. In older toolkits this communication would be achieved
using callbacks. (For a full explanation of Qt's signals and slots mechanism
see the on-line <ulink
url="http://doc.trolltech.com/signalsandslots.html">Signals and Slots</>
documentation.)
</para>

    <sect2 id="connectingpredefinedsignalsampslots">
    <title>Connecting Predefined Signals &amp; Slots </title>
    <para id="alzp">
    <indexterm><primary>Signals and Slots</primary></indexterm>

    Some of an application's functionality can be obtained simply by
    connecting pre-defined signals and slots. In multiclip there is only
    one pre-defined connection that we can use, but in the richedit
    application that we'll build in <xref linkend="main-windows">
    "Creating Main Windows with Actions, Toolbars &amp; Menus" we will
    use many pre-defined signals and slots to get a lot of the functionality
    we need without having to write any code. 
    </para>
    <para id="alzy">
    We will connect the Quit button's <indexterm><primary>Signals and Slots</primary><secondary>clicked()</secondary></indexterm>
<function>clicked()</>
    signal to the form's <indexterm><primary>Signals and Slots</primary><secondary>accept()</secondary></indexterm>
<function>accept()</> slot. The
    <indexterm><primary>Signals and Slots</primary><secondary>accept()</secondary></indexterm>
<function>accept()</> slot notifies the dialog's caller that
    the dialog is no longer required; since our dialog is our main
    window this will close the application. Preview the form (press
    <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+T</secondary></indexterm>
<keycap>Ctrl+T</>); click the <guibutton>Quit</>
    button. The button works visually but does nothing. Press
    <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Esc</secondary></indexterm>
<keycap>Esc</> or close the preview window to leave the
    preview.
    </para>
    <para id="amaj">
    <indexterm><primary>Signals and Slots</primary></indexterm>

    <indexterm><primary>Slots</primary><seealso>Signals and Slots</seealso></indexterm>

    Click the <indexterm><primary>Toolbar Buttons</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<guibutton>Connect Signals/Slots</> toolbar
    button. Click the Quit button, drag to the form and release. The
    <indexterm><primary>Dialogs</primary><secondary>Edit Connections</secondary></indexterm>
Edit Connections dialog will pop up. The top left hand list box
    lists the Signals that the widget we've clicked can emit. At the top
    right is a combobox which lists the form and its widgets; any of
    these are candidates for receiving signals. Since we released on the
    form rather than a widget the slots combobox shows the 
    form's name, 'MulticlipForm'. Beneath the combobox
    is a list box which shows the slots available in the form or widget
    shown in the combobox. Note that only those slots that can be
    connected to the highlighted signal are shown. If you clicked a
    different signal, for example the <indexterm><primary>Signals and Slots</primary><secondary>toggled()</secondary></indexterm>
<function>toggled()</>
    signal, the list of available slots would change. Click the
    <indexterm><primary>Signals and Slots</primary><secondary>clicked()</secondary></indexterm>
<function>clicked()</> signal, then click the
    <indexterm><primary>Signals and Slots</primary><secondary>accept()</secondary></indexterm>
<function>accept()</> slot. The connection will be shown in
    the Connections list box. Click <guibutton>OK</>.
    </para>
    <para id="ambb">
    We will make a great many signal/slot connections as we work through
    the examples, including connections to our own custom slots.
    Signal/slot connections (using pre-defined signals and slots) work
    in preview mode. Press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Ctrl+T</secondary></indexterm>
<keycap>Ctrl+T</> to preview the form;
    click the form's <guibutton>Quit</> button. The button now
    works correctly.
    </para>
    </sect2>

    <sect2 id="creatingampconnectingcustomslots">
    <title>Creating and Connecting Custom Slots </title>
    <para id="ambn">
    <indexterm><primary>Signals and Slots</primary></indexterm>

    <indexterm><primary>Subclassing</primary></indexterm>

    In the first version of <emphasis>Qt Designer</> you could create the signatures of your
    custom slots and make the connections, but you could not implement
    your slots directly. Instead you had to subclass the form and
    code your slots in the subclass. The subclassing approach is
    still available, and makes sense in some situations. But now you can
    implement your slots directly in <emphasis>Qt Designer</>, so for many
    straightforward dialogs and windows subclassing is no longer
    necessary.
    </para>
    <para id="ambx">
    The multiclip application requires four slots, one for each button,
    but only three need to be custom slots since we connected a signal
    to a pre-defined slot to make the Quit button functional. We need a
    slot for the Add Clipping button; this will add the current clipping
    to the list box. The Copy Previous button requires a slot which will
    copy the selected list box item to the current clipping line edit
    (and to the clipboard). The Delete Clipping button needs a slot to
    delete the current clipping and the current list box item. We will
    also need to write some initialization code so that when the
    application starts it will put the current clipboard text (if any)
    into the line edit. The code is written directly in <emphasis>Qt Designer</>; the
    snippets are taken from the generated
    <filename>qt/tools/designer/examples/multiclip/multiclip.cpp</>
    file. 
    </para>
    <para id="amcn">
    <indexterm><primary>Clipboard</primary></indexterm>

    We'll need Qt's global clipboard object throughout the
    code which would mean calling 
    <indexterm><primary>Functions</primary><secondary>QApplication::clipboard()</secondary></indexterm>
<function>QApplication::clipboard()</> or
    <indexterm><primary>Functions</primary><secondary>qApp-&gt;clipboard()</secondary></indexterm>
<function>qApp-&gt;clipboard()</> in several places. Rather
    than perform all these function calls we'll keep
    a pointer to the clipboard in the form itself. Click the Source tab
    of the Object Explorer. (If the Object Explorer isn't visible click
    <indexterm><primary>Menu Options</primary><secondary>Window|Views|Object Explorer</secondary></indexterm>
<guimenuitem>Window|Views|Object Explorer</>.) The Source
    tab shows us the functions in our form, the class variables, the
    forward declarations and the names of the include files we've asked for. 
    </para>
    <para id="amcz">
    <indexterm><primary>Forward declarations</primary></indexterm>

    <indexterm><primary>Includes</primary></indexterm>

    <indexterm><primary>Adding</primary><secondary>Code</secondary></indexterm>

    <indexterm><primary>Adding</primary><secondary>Forward declarations</secondary></indexterm>

    <indexterm><primary>Adding</primary><secondary>Includes</secondary></indexterm>

    <indexterm><primary>Adding</primary><secondary>Class variables</secondary></indexterm>

    <indexterm><primary>Deleting</primary><secondary>Forward declarations</secondary></indexterm>

    <indexterm><primary>Deleting</primary><secondary>Includes</secondary></indexterm>

    <indexterm><primary>Deleting</primary><secondary>Class variables</secondary></indexterm>

    <indexterm><primary>Class variables</primary></indexterm>

    <indexterm><primary>Forms</primary><secondary>Forward declarations</secondary></indexterm>

    <indexterm><primary>Forms</primary><secondary>Class variables</secondary></indexterm>

    <indexterm><primary>Forms</primary><secondary>Code editing</secondary></indexterm>

    Right click the Class Variables item, then click
    <indexterm><primary>Menu Options</primary><secondary>New</secondary></indexterm>
<guimenuitem>New</> on the popup menu. (If there had
    been any existing variables the popup menu would also have a Delete
    option.) Type in 'QClipboard *cb;' and press
    <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Enter</secondary></indexterm>
<keycap>Enter</>. In the <indexterm><primary>Functions</primary><secondary>init()</secondary></indexterm>
<function>init()</> function
    we will assign this pointer to Qt's global clipboard object. We also
    need to declare the clipboard header file. Right click Includes (in
    Declaration), then click <indexterm><primary>Menu Options</primary><secondary>New</secondary></indexterm>
<guimenuitem>New</>. Type in
    '&lt;qclipboard.h&gt;' and press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Enter</secondary></indexterm>
<keycap>Enter</>. Since we
    need to refer to the global application object,
    <literal>qApp</literal>, we need to add another include declaration.
    Right click Includes (in Implementation), then click
    <indexterm><primary>Menu Options</primary><secondary>New</secondary></indexterm>
<guimenuitem>New</>. Type in '&lt;qapplication.h&gt;' and
    press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>Enter</secondary></indexterm>
<keycap>Enter</>. The variable and declarations will be
    included in the code generated from <emphasis>Qt Designer</>'s <indexterm><primary>Files and file types</primary><secondary>.ui</secondary></indexterm>
<filename>.ui</>
    file.
    </para>
    <para id="amdr">
    We will invoke <emphasis>Qt Designer</>'s code editor and write the code.
    </para>
    <para id="amdu">
    <indexterm><primary>Code Editing</primary></indexterm>

    We'll look at the <indexterm><primary>Functions</primary><secondary>init()</secondary></indexterm>
<function>init()</> function first. <emphasis>Qt Designer</>
    creates an empty <indexterm><primary>Functions</primary><secondary>init()</secondary></indexterm>
<function>init()</> into which we can add
    our own code. To invoke the code editor click a function, e.g. click
    <indexterm><primary>Functions</primary><secondary>init()</secondary></indexterm>
<function>init()</> in the Source tab of the Object Hierarchy.
<programlisting>
void MulticlipForm::init()
{ 
    lengthLCDNumber-&gt;setBackgroundColor( darkBlue ); 
    currentLineEdit-&gt;setFocus(); 
     
    cb = qApp-&gt;clipboard(); 
    connect( cb, SIGNAL( dataChanged() ), SLOT( dataChanged() ) ); 
    if ( cb-&gt;supportsSelection() ) 
        connect( cb, SIGNAL( selectionChanged() ), SLOT( selectionChanged() ) ); 
     
    dataChanged(); 
}
</programlisting>
    The first couple of lines change the LCD
    number's background color and make the form start with the focus in the
    line edit. We take a pointer to Qt's global clipboard and keep it in our
    class variable, cb. We connect the clipboard's
    <indexterm><primary>Signals and Slots</primary><secondary>dataChanged()</secondary></indexterm>
<function>dataChanged()</> signal to a slot called
    <indexterm><primary>Signals and Slots</primary><secondary>dataChanged()</secondary></indexterm>
<function>dataChanged()</>; we will create this slot ourselves
    shortly. If the clipboard supports selection (under the X Window
    system for example), we also connect the clipboard's
    <indexterm><primary>Signals and Slots</primary><secondary>selectionChanged()</secondary></indexterm>
<function>selectionChanged()</> signal to a slot of the same name that
    we will create. Finally we call our <indexterm><primary>Signals and Slots</primary><secondary>dataChanged()</secondary></indexterm>
<function>dataChanged()</>
    slot to populate the line edit with the clipboard's text (if any) when
    the application begins.
    </para>

    <para id="ameq">
    Since we've referred to the <indexterm><primary>Signals and Slots</primary><secondary>dataChanged()</secondary></indexterm>
<function>dataChanged()</> and
    <indexterm><primary>Signals and Slots</primary><secondary>selectionChanged()</secondary></indexterm>
<function>selectionChanged()</> slots we'll code them next,
    starting with <indexterm><primary>Signals and Slots</primary><secondary>dataChanged()</secondary></indexterm>
<function>dataChanged()</>.
<programlisting>
void MulticlipForm::dataChanged()
{ 
    <emphasis role="bold">QString</> text;  
    text = cb-&gt;text();            
    clippingChanged( text ); 
    if ( autoCheckBox-&gt;isChecked() ) 
        addClipping(); 
}
</programlisting>
    We take a copy of the clipboard's text and call our own
    <function>clippingChanged()</> slot with the text we've
    retrieved. If the user has checked the Auto Add Clippings checkbox
    we call our <function>addClipping()</> slot to add the
    clipping to the list box.
    </para>

    <para id="amfe">
    <indexterm><primary>Clipboard</primary><secondary>Cross-platform</secondary></indexterm>

    <indexterm><primary>Cross-platform</primary><secondary>Clipboard</secondary></indexterm>

    <indexterm><primary>Windows, Microsoft</primary></indexterm>

    The <indexterm><primary>Signals and Slots</primary><secondary>selectionChanged()</secondary></indexterm>
<function>selectionChanged()</> slot is only applicable
    under the X Window System. Users of MS Windows can still include the
    code to ensure that the application works cross-platform.
<programlisting>
void MulticlipForm::selectionChanged()
{ 
    cb-&gt;setSelectionMode( TRUE );  
    dataChanged(); 
    cb-&gt;setSelectionMode( FALSE );  
}
</programlisting>
    We tell the clipboard to use selection mode, we call
    our <indexterm><primary>Signals and Slots</primary><secondary>dataChanged()</secondary></indexterm>
<function>dataChanged()</> slot to retrieve any selected
    text, then set the clipboard back to its default mode.
    </para>

    <para id="amfq">
    In the <indexterm><primary>Signals and Slots</primary><secondary>dataChanged()</secondary></indexterm>
<function>dataChanged()</> slot we called another
    custom slot, <function>clippingChanged()</>. 
<programlisting>
void MulticlipForm::clippingChanged( const <emphasis role="bold">QString</> &amp; clipping )
{ 
    currentLineEdit-&gt;setText( clipping ); 
    lengthLCDNumber-&gt;display( (int)clipping.length() );  
}
</programlisting>
    We set the line edit to whatever text is passed to the
    <function>clippingChanged()</> slot and update the LCD
    number with the length of the new text.
    </para>

    <para id="amgb">
    <indexterm><primary>Signals and Slots</primary></indexterm>

    The next slot we'll code will perform the Add Clipping function.
    This slot is called by our code internally (see the
    <indexterm><primary>Signals and Slots</primary><secondary>dataChanged()</secondary></indexterm>
<function>dataChanged()</> slot above), and when the user
    clicks the Add Clipping button.
    Since we want <emphasis>Qt Designer</> to be able to set up a connection to this slot
    instead of just typing it in the editor window we'll let <emphasis>Qt Designer</>
    create its skeleton for us. Click <indexterm><primary>Menu Options</primary><secondary>Edit|Slots</secondary></indexterm>
<guimenuitem>Edit|Slots</> to
    invoke the <indexterm><primary>Dialogs</primary><secondary>Edit Slots</secondary></indexterm>
Edit Slots dialog. Click <guibutton>New Slot</>
    and replace the default name of 'new_slot()' with 'addClipping()'.
    There is no need to change the access specifier or return type. Now
    that we've created our slot we can implement it in the code editor
    where it has now appeared.
    </para>
    <para id="amgp">
    The Add Clipping button is used to copy the clipping from the
    Current Clipping line edit into the list box. We also update the
    length number. 
<programlisting>
void MulticlipForm::addClipping()
{ 
    <emphasis role="bold">QString</> text = currentLineEdit-&gt;text(); 
    if ( ! text.isEmpty() ) { 
        lengthLCDNumber-&gt;display( (int)text.length() );          
        int i = 0; 
        for ( ; i &lt; (int)clippingsListBox-&gt;count(); i++ ) { 
            if ( clippingsListBox-&gt;text( i ) == text ) { 
                i = -1;<emphasis> // Do not add duplicates 
</>
                break; 
            } 
        } 
        if ( i != -1 )  
            clippingsListBox-&gt;insertItem( text, 0 );                
    } 
}
</programlisting>
    If there is some text we change the LCD's value to the length of the
    text. We then iterate over all the items in the list box to see if
    we have the same text already. If the text is not already in the
    list box we insert it.
    </para>
    <para id="amhb">
    <indexterm><primary>Signals and Slots</primary></indexterm>

    To make the Add Clipping button functional we need to connect the
    button's <indexterm><primary>Signals and Slots</primary><secondary>clicked()</secondary></indexterm>
<function>clicked()</> signal to our
    <function>addClipping()</> slot. Click the
    <indexterm><primary>Toolbar Buttons</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<guibutton>Connect Signals/Slots</> toolbar button. Click
    the Add Clipping button, drag to the form and release. (Make sure
    you drag to the form rather than another widget -- the form will
    have a thin pink border during the drag. If you make a mistake
    simply change the name in the Slots combobox.) The <indexterm><primary>Dialogs</primary><secondary>Edit Connections</secondary></indexterm>
Edit Connections
    dialog will appear. Click the <indexterm><primary>Signals and Slots</primary><secondary>clicked()</secondary></indexterm>
<function>clicked()</> signal
    and our <function>addClipping()</> slot. Click <guibutton>OK</> to
    confirm the connection. 
    </para>

    <para id="amhp">
    The Copy Previous button is used to copy the selected clipping from
    the list box into the line edit. The clipping is also placed on the
    clipboard. The procedure is the same as for the Add Clipping button:
    first we create the slot, then we implement it and finally we connect to
    it:
    <orderedlist numeration="arabic">
    <listitem>
    <para id="amhx">
    Create the slot.
    </para>
    <para id="amia">
    <indexterm><primary>Signals and Slots</primary></indexterm>

    Click the <indexterm><primary>Menu Options</primary><secondary>Edit|Slots</secondary></indexterm>
<guimenuitem>Edit|Slots</> menu item to invoke
    the <indexterm><primary>Dialogs</primary><secondary>Edit Slots</secondary></indexterm>
Edit Slots dialog. Click <guibutton>New Slot</> and
    replace the default 'new_slot()' name with 'copyPrevious()'. Click
    <guibutton>OK</>.
    </para>
    </listitem>
    <listitem>
    <para id="amii">
    Implement the slot.
    </para>
    <para id="amil">
<programlisting>
void MulticlipForm::copyPrevious()
{ 
    if ( clippingsListBox-&gt;currentItem() != -1 ) { 
        cb-&gt;setText( clippingsListBox-&gt;currentText() ); 
        if ( cb-&gt;supportsSelection() ) { 
            cb-&gt;setSelectionMode( TRUE ); 
            cb-&gt;setText( clippingsListBox-&gt;currentText() ); 
            cb-&gt;setSelectionMode( FALSE ); 
        } 
    } 
}
</programlisting>
    The code for Copy Previous checks to see if there is a selected item
    in the list box. If there is the item is copied to the line edit. If
    we are using a system that supports selection we have to repeat the
    copy, this time with selection mode set. We don't explicitly update
    the clipboard. When the line edit's text is changed it emits a
    <indexterm><primary>Signals and Slots</primary><secondary>dataChanged()</secondary></indexterm>
<function>dataChanged()</> signal which our
    <indexterm><primary>Signals and Slots</primary><secondary>dataChanged()</secondary></indexterm>
<function>dataChanged()</> slot receives. Our
    <indexterm><primary>Signals and Slots</primary><secondary>dataChanged()</secondary></indexterm>
<function>dataChanged()</> slot updates the clipboard.
    </para>
    </listitem>
    <listitem>
    <para id="amja">
    <indexterm><primary>Signals and Slots</primary></indexterm>

    Connect to the slot.
    </para>
    <para id="amjd">
    Click the <indexterm><primary>Toolbar Buttons</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<guibutton>Connect Signals/Slots</> toolbar
    button. Click the Copy Previous button, drag to the form and
    release. The <indexterm><primary>Dialogs</primary><secondary>Edit Connections</secondary></indexterm>
Edit Connections dialog will pop up. Click the
    <indexterm><primary>Signals and Slots</primary><secondary>clicked()</secondary></indexterm>
<function>clicked()</> signal and the
    <function>copyPrevious()</> slot. Click <guibutton>OK</>.
    </para>
    </listitem>
    </orderedlist>
    </para>

    <para id="amjo">
    We take the same approach to the Delete Clipping button.
    <orderedlist numeration="arabic">
    <listitem>
    <para id="amjs">
    <indexterm><primary>Signals and Slots</primary></indexterm>

    Click <indexterm><primary>Menu Options</primary><secondary>Edit|Slots</secondary></indexterm>
<guimenuitem>Edit|Slots</> to invoke the <indexterm><primary>Dialogs</primary><secondary>Edit Slots</secondary></indexterm>
Edit Slots
    dialog. Click <guibutton>New Slot</> and replace the
    default name with 'deleteClipping()'. Click <guibutton>OK</>.
    </para>
    </listitem>
    <listitem>
    <para id="amjz">
    The Delete button must delete the current item in the list box and
    clear the line edit. 
<programlisting>
void MulticlipForm::deleteClipping()
{  
    clippingChanged( &quot;&quot; );  
    clippingsListBox-&gt;removeItem( clippingsListBox-&gt;currentItem() ); 
}
</programlisting>
    We call our own <function>clippingChanged()</> slot with an
    empty string and use the list box's
    <function>removeItem()</> function to remove the current
    item.
    </para>
    </listitem>
    <listitem>
    <para id="amkm">
    <indexterm><primary>Signals and Slots</primary></indexterm>

    Connect the Delete Clipping button's <indexterm><primary>Signals and Slots</primary><secondary>clicked()</secondary></indexterm>
<function>clicked()</>
    signal to our <function>deleteClipping()</> slot.
    (Press <indexterm><primary>Keypresses (Qt Designer)</primary><secondary>F3</secondary></indexterm>
<keycap>F3</> -- which is the same as clicking the 
    <indexterm><primary>Toolbar Buttons</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<indexterm><primary>Widgets</primary><secondary>Connect Signals/Slots</secondary></indexterm>
<guibutton>Connect Signals/Slots</> toolbar button. Click the
    Delete Clipping button and drag to the form; release. The 
    <indexterm><primary>Dialogs</primary><secondary>Edit Connections</secondary></indexterm>
Edit Connections dialog will appear. Click the
    <indexterm><primary>Signals and Slots</primary><secondary>clicked()</secondary></indexterm>
<function>clicked()</> signal and the
    <function>deleteClipping()</> slot. Click <guibutton>OK</>.)
    </para>
    </listitem>
    </orderedlist>
    </para>

   </sect2>

</sect1>


<sect1 id="compilingampbuildinganapplication">
<title>Compiling and Building an Application </title>
<para id="amlh">
<indexterm><primary>Compiling and Building Applications</primary></indexterm>

<indexterm><primary>Makefiles</primary></indexterm>

<indexterm><primary>Adding</primary><secondary>Files to Projects</secondary></indexterm>

<indexterm><primary>Projects</primary><secondary>Adding Files</secondary></indexterm>

So far we have written about 99% of a Qt application entirely
in <emphasis>Qt Designer</>. To make the application compile and run we must create a
<indexterm><primary>Files and file types</primary><secondary>main.cpp</secondary></indexterm>
<filename>main.cpp</> file from which we can call our form.
We'll then need to update the project file accordingly and generate a
Makefile. We can use the Makefile to generate the application. We will
cover these matters briefly here, and in more detail in <xref
linkend="subclassing"> "Subclassing".
</para>

<para id="amlr">
First we need to create a <indexterm><primary>Files and file types</primary><secondary>main.cpp</secondary></indexterm>
<filename>main.cpp</> file.
<programlisting>
#include &lt;qapplication.h&gt;
#include &quot;multiclip.h&quot;
int main( int argc, char *argv[] ) 
{
    <emphasis role="bold">QApplication</> app( argc, argv );

    MulticlipForm clippingForm;
    app.setMainWidget( &amp;clippingForm );
    clippingForm.show();

    return app.exec();
}
</programlisting>
The program creates a <indexterm><primary>QApplication</primary></indexterm>
<classname>QApplication</> object and an
instance of our MulticlipForm, sets the form to be the main widget and
shows the form. The <function>app.exec()</> call starts off the
event loop.
</para>

<para id="ammd">
<indexterm><primary>Adding</primary><secondary>Source Files to Project Files</secondary></indexterm>

We need to add <indexterm><primary>Files and file types</primary><secondary>main.cpp</secondary></indexterm>
<filename>main.cpp</> to the
<indexterm><primary>Files and file types</primary><secondary>.pro</secondary></indexterm>
<filename>.pro</> file. Open <indexterm><primary>Files and file types</primary><secondary>multiclip.pro</secondary></indexterm>
<filename>multiclip.pro</>
in a plain text editor (such as notepad, vim, xemacs, etc.). It will look
similar to this:
<programlisting>
TEMPLATE    = app
CONFIG     += qt warn_on release
TARGET      = multiclip
INTERFACES  = multiclip.ui
IMAGEFILE   = images.cpp
PROJECTNAME = multiclip
LANGUAGE    = C++
SOURCES    += images.cpp
</programlisting>
Add a new line at the end of the file: 
<programlisting>
SOURCES += main.cpp
</programlisting>
Save the updated project file. Now start up a console (or xterm), change
directory to the multiclip application and run <indexterm><primary>qmake</primary></indexterm>
<command>qmake</>. A Makefile
compatible with your system will be generated:
<programlisting>
qmake -o Makefile multiclip.pro
</programlisting>
You can now make the application, e.g. by running <indexterm><primary>make</primary></indexterm>
<command>make</> or
<indexterm><primary>nmake</primary></indexterm>
<command>nmake</>. Try compililng and running multiclip. There are many
improvement you could make and experimenting with both the layout and
the code will help you learn more about Qt and <emphasis>Qt Designer</>.
</para>

<para id="amnl">
This chapter has introduced you to creating cross-platform applications
with <emphasis>Qt Designer</>. We've created a form, populated it with widgets and laid the
widgets out neatly and scalably. We've used Qt's signals and slots
mechanism to make the application functional and generated the Makefile.
These techniques for adding widgets to a form and laying them out with
the layout tools; and for creating, coding and connecting slots will be
used time and again as you create applications with <emphasis>Qt Designer</>. The following
chapters will present further examples and explore more techniques for
using <emphasis>Qt Designer</>.
</para>
</sect1>

</chapter>
