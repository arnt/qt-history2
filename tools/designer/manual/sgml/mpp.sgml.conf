# $Id: mpp.sgml.conf,v 1.1 2001/01/21 12:14:02 mark Exp $

# Copyright (c) 2001 Mark Summerfield. All Rights Reserved.
# May be used/distributed under the GPL.

# This is an example of the kind of things you can do; it is incomplete.

# These are written as-is
\macro sgml-ok {% "<guibutton>OK</>" %}
\macro sgml-p {% "<para>\n" %}
\macro sgml-P {% "\n</para>" %}
\macro sgml-item {% "<listitem>" %}
\macro sgml-Item {% "</listitem>" %}
\macro sgml-ins {% "<literal>INSERT</>" %}
\macro sgml-upd {% "<literal>UPDATE</>" %}
\macro sgml-del {% "<literal>DELETE</>" %}
\macro sgml-qd {% "<emphasis>Qt Designer</>" %}

# These require a parameter
\macro sgml-b {% qq{<emphasis role="bold">$_[1]</>} %}
\macro sgml-i {% "<emphasis>$_[1]</>" %}
\macro sgml-c {% "<literal>$_[1]</>" %}
\macro sgml-cmd {% "<command>$_[1]</>" %}
\macro sgml-f {% "<filename>$_[1]</>" %}
\macro sgml-fn {% "<function>$_[1]</>" %}
\macro sgml-class {% "<classname>$_[1]</>" %}
\macro sgml-title {% "<title>$_[1]</>" %}
\macro sgml-button {% "<guibutton>$_[1]</>" %}
\macro sgml-menu {% "<guimenuitem>$_[1]</>" %}

\macro sgml-img {%
    my $self = shift;	
    local $_ = shift;

    my $type = $self->get( 'img' );

    qq{<graphic format="$type" fileref="images/$_.$type"></graphic>};
%}

\macro sgml-list {%
    my $self = shift;	# Call as \list[*] or \list[1] or \list[1,1]
    local $_ = shift;

    my ( $type, $inherit ) = split ',';
    if ( $type eq '*' ) {
	return "<itemizedlist>";
    }
    else {
	$inherit = ( defined $inherit and $inherit ) ? ' inheritnum="inherit"' : '';
	return qq{<orderedlist numeration="arabic"$inherit>};
    }
%}

\macro sgml-List1 {% '</orderedlist>' %}
\macro sgml-List {% '</itemizedlist>' %}

\macro sgml-pre {%    
    my $self = shift;	# Special sub called before start of file

    use HTML::Entities;

    $self->set( 'img', 'png' );
%}

\macro sgml-post {%    
    my $self = shift;	# Special sub called after end of file

%}

\macro sgml-filter {% 
    my $self = shift;	# Special sub called to filter file
    local $_ = shift;
    
    $_;
%}

\macro sgml-scanfilter_orig {%
    my $self = shift;	# Special sub called to filter scanned file
    local $_ = shift;

    encode_entities( $_ );
%}

\macro sgml-scanfilter {% # We'll use this
    my $self = shift;	# Crude syntax highlighting
    local $_ = shift;	

    $_ = encode_entities( $_ );

    s/\b(Q[A-Z][-a-zA-Z0-9:.>]+)\b/<emphasis role="bold">$1<\/>/gmsx;
    s/(\s\/\/\s.*)$/<emphasis>$1<\/>\n/gmsx;
    s/(\/\*.*?\*\/)(.*)/<emphasis>$1<\/>$2/gmsx;

    $_;
%}


