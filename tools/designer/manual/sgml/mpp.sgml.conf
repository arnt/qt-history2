# $Id: $

# Copyright (c) 2001 Mark Summerfield. All Rights Reserved.
# May be used/distributed under the GPL.

# This is an example of the kind of things you can do; it is incomplete.

# Usages
#   \ok		    OK button
#   \qd		    Qt Designer
#   \p		    <para>	\P </para>
#   \item	    <listitem>	\Item </listitem>
#   \b[bold]
#   \i[italic]
#   \cmd[grep]
#   \f[main.cpp]
#   \fn[currentText()]
#   \class[QSqlCursor]	    
#   \title[The Title]	    
#   \menu[File|Save]	   
#   \img[]	    name of image file - no path or suffix necessary
#   \list[*]	    start bulleted list	\List to end
#   \list[1]	    start numbered list \List1 to end
#   \list[1,1]	    start inherited numbered list \List1 to end
#   \x[term]	    index term; can use \x[term1|term2] and
#		    \x[term1|term2|term3] for multilevels -- docbook only
#		    supports 3 levels.
#		    If you want see also use this:
#		    \x[term1|term2^sa1^sa2]
#   \c[code]

\macro sgml-pre {%    
    my $self = shift;	# Special sub called before start of file

    use HTML::Entities;

    $self->set( 'img', 'png' );
    $self->set( 'dpi', 150 );
%}

\macro sgml-img {%
    my $self = shift;	
    local $_ = shift;
    my $dpi  = $self->get( 'dpi' );
    my $image;

    if ( index( $_, '|' ) > -1 ) {
	( $image, $dpi ) = split /\|/;
    }
    else {
	$image = $_;
    }

    my $type = $self->get( 'img' );

    qq{<graphic fileref="images\\$image.$type"></graphic>};
%}


# These are written as-is
\macro sgml-qd {% "<emphasis>Qt Designer</>" %}
\macro sgml-ok {% "<guibutton>OK</>" %}
\macro sgml-item {% "<listitem>" %}
\macro sgml-Item {% "</listitem>" %}
\macro sgml-ins {% "<literal>INSERT</>" %}
\macro sgml-upd {% "<literal>UPDATE</>" %}
\macro sgml-del {% "<literal>DELETE</>" %}

# These require a parameter
\macro sgml-b {% qq{<emphasis role="bold">$_[1]</>} %}
\macro sgml-i {% "<emphasis>$_[1]</>" %}
\macro sgml-c {% "<literal>$_[1]</>" %}
\macro sgml-title {% "<title>$_[1]</>" %}
\macro sgml-button {% "<guibutton>$_[1]</>" %}

\macro sgml-cmd {% 
    "<indexterm><primary>$_[1]</primary></indexterm>\n" .
    "<command>$_[1]</>";
%}

\macro sgml-dlg {% 
    "<indexterm><primary>Dialogs</primary><secondary>$_[1]</secondary></indexterm>\n" .
    "$_[1]";
%}

\macro sgml-lay {% 
    "<indexterm><primary>Layouts</primary><secondary>$_[1]</secondary></indexterm>\n" .
    "$_[1]";
%}

\macro sgml-prop {% 
    "<indexterm><primary>Properties</primary><secondary>$_[1]</secondary></indexterm>\n" .
    "$_[1]";
%}

\macro sgml-f {% 
    "<indexterm><primary>Files and file types</primary><secondary>$_[1]</secondary></indexterm>\n" .
    "<filename>$_[1]</>";
%}

\macro sgml-fs {% 
    "<indexterm><primary>Signals and Slots</primary><secondary>$_[1]</secondary></indexterm>\n" .
    "<function>$_[1]</>";
%}

\macro sgml-fn {% 
    "<indexterm><primary>Functions</primary><secondary>$_[1]</secondary></indexterm>\n" .
    "<function>$_[1]</>";
%}


\macro sgml-fe {% 
    "<filename>$_[1]</>";
%}

\macro sgml-fse {% 
    "<function>$_[1]</>";
%}

\macro sgml-fne {% 
    "<function>$_[1]</>";
%}

\macro sgml-class {% 
    "<indexterm><primary>$_[1]</primary></indexterm>\n" .
    "<classname>$_[1]</>";
%}

\macro sgml-menu {% 
    my $s = "<indexterm><primary>Menu Options</primary>";
    $s .= "<secondary>$_[1]</secondary>";
    return $s . "</indexterm>\n<guimenuitem>$_[1]</>";
%}

\macro sgml-toolbutton {% 
    my $x = "<indexterm><primary>Toolbar Buttons</primary><secondary>$_[1]</secondary></indexterm>\n"; 
    $x .= "<indexterm><primary>Widgets</primary><secondary>$_[1]</secondary></indexterm>\n" if $_[1] !~ /Pointer/i; 
    return $x . "<guibutton>$_[1]</>";
%}

\macro sgml-widget {%
    "<indexterm><primary>Widgets</primary><secondary>$_[1]</secondary></indexterm>\n" .
    $_[1];
%}

\macro sgml-key {% 
    "<indexterm><primary>Keypresses (Qt Designer)</primary><secondary>$_[1]</secondary></indexterm>\n" .
    "<keycap>$_[1]</>";
%}


\macro sgml-x {%
    my $self = shift;	
    local $_ = shift;

    my @term = split /\|/;

    my $i = index( $term[$#term], "^" );
    my @seealso = ();
    if ( $i > -1 ) {
	$_ = substr( $term[$#term], $i + 1 );
	@seealso = split /\^/ if $_;
	$term[$#term] = substr( $term[$#term], 0, $i );
    }
    $_ = "<indexterm><primary>$term[0]</primary>";
    $_ .= "<secondary>$term[1]</secondary>" if @term > 1;
    $_ .= "<tertiary>$term[2]</tertiary>"   if @term > 2;

    foreach my $sa ( @seealso ) {
	$_ .= "<seealso>$sa</seealso>";
    }
    
    return $_ . "</indexterm>\n";
%}


\macro sgml-list {%
    my $self = shift;	# Call as \list[*] or \list[1] or \list[1,1]
    local $_ = shift;

    my ( $type, $inherit ) = split ',';
    if ( $type eq '*' ) {
	return "<itemizedlist>";
    }
    else {
	$inherit = ( defined $inherit and $inherit ) ? ' inheritnum="inherit"' : '';
	return qq{<orderedlist numeration="arabic"$inherit>};
    }
%}

\macro sgml-List1 {% '</orderedlist>' %}
\macro sgml-List {% '</itemizedlist>' %}

\macro sgml-post {%    
    my $self = shift;	# Special sub called after end of file

%}


\macro sgml-filter {% 
    my $self = shift;	# Special sub called to filter file
    local $_ = shift;
    
    $_;
%}

\macro sgml-scanfilter_orig {%
    my $self = shift;	# Special sub called to filter scanned file
    local $_ = shift;

    encode_entities( $_ );
%}

\macro sgml-scanfilter {% # We'll use this
    my $self = shift;	# Crude syntax highlighting
    local $_ = shift;	

    $_ = encode_entities( $_ );

    s/\t/        /gmsx;
    s/\b(Q[A-Z][-a-zA-Z0-9:.>]+)\b/<emphasis role="bold">$1<\/>/gmsx;
    s/(\s\/\/\s.*)$/<emphasis>$1<\/>\n/gmsx;
    s/(\/\*.*?\*\/)(.*)/<emphasis>$1<\/>$2/gmsx;

    $_;
%}


