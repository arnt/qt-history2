Roadmap for Qt Designer Interface hierarchy


General
=======

Qt's interface architecture is based on four classes:

- QUnknownInterface is the base class for all interfaces, and provides
  the functionality to identify and access further interfaces
- QApplicationInterface and QApplicationComponentInterface build the
  application's side of the interface hierarchy and provide access to
  application components.
- QPlugInInterface serves as an entry point interface for shared
  libraries and provides information about the library.



Interfaces in the Qt Designer (sketch)
======================================

All interfaces for the Qt Designer are accessible by including a single
header file, designerinterface.h, which is located in the
tools\designer\plugins subdirectory of your local Qt installation.

Supported PlugIn Interfaces:
----------------------------

- ActionInterface

  This subinterface provides a pure virtual function "create()" which 
  has to be implemented in all plugins, so that it returns an instance
  of the QAction class.
  Additionally, the group function returns a name of a subset of 
  actions which the created action belongs to, e.g. "File".
  Note that you can use QActionGroup, which is a subclass of QAction,
  to provide a set of related actions.

- WidgetInterface

  This subinterface provides a pure virtual function "create()" which 
  has to be implemented in all plugins, so that it returns an instance 
  of a subclass of QWidget. All properties, signals and slots the 
  widget class provides will be fully integrated into the Qt Designer.
  The Interface declares additional, pure virtual functions that are
  used to provide more information about the widget. These are group,
  toolTip and whatsThis that may return arbitrary strings, iconSet and 
  includeFile that are supposed to return a filename, and isContainer,
  which has to return TRUE when the widget is capable of nesting child
  widgets.

- FilterInterface

  The featureList of this function can return a string describing a
  filter as used by the QFileDialog class, e.g. My Filetype (*.mft).
  The import function will get the desired filter and the filename
  which it is supposed to convert into a list of UI files. The function
  returns a QStringList with the filenames of the resulting files. 
  The created files are deleted by the designer as soon as they are
  loaded.


Provided Application Interfaces:
--------------------------------

DesignerApplicationInterface
    |
    |-- DesignerFormListInterface			*DesignerFormWindowInterface
    |	    |						    |
    |	    |-- DesignerActiveFormWindowInterface	    |-- DesignerWidgetListInterface	*DesignerWidgetInterface
    |							    |
    |							    |-- DesignerActiveWidgetInterface
    |
    |
    |-- DesignerMainWindowInterface
    |	    |
    |	    |-- DesignerStatusBarInterface
    |	    |
    |	    |-- DesignerPropertyEditorInterface
    |	    |
    |	    |-- DesignerHierarchyViewInterface
    |
    |
    |-- DesignerConfigurationInterface


Interfaces in general are accessible using queryInterface(...). 
Interfaces marked with * are results of an iteration over the 
corresponding list interface (since it can't be specified which 
instance of a certain interface queryInterface() will return it 
wouldn't make sense to query for a DesignerWidgetInterface)


Comments
--------

- DesignerApplicationInterface

  Is created by the DesignerApplication object and acquired using the 
  requestApplicationInterface method. This interface provides the 
  QComponentInterfaces to the the plugin (see graph).
  There is no functionality beyond this right now.
  ## property ideas from MSDN, IApplication members ##
  ## - title
  ## - name
  ## - path
  ## - current directory
  ## - version

- DesignerFormWindowInterface

  Represents the currently active form window, and can provide
  a DesignerSelectionInterface.
  Properties (*=faked):
    - caption (*)
    - modified (*)

  Functions:
    - save
    - close
    - undo
    - redo
    - insertWidget

- DesignerSelectionInterface

  Represents the currently selected widgets and can provide
  a DesignerWidgetInterface
  Properties
    - count

  Functions:
    - delete

- DesignerWidgetInterface

  Represents the currently active widget.
  Properties
    - as defined by the widget

  Functions:
    - delete

- DesignerPropertyEditorInterface

  Represents the Property Editor in the Qt Designer and can provide a
  DesignerWidgetInterface.
  Properties
    -

  Functions:
    -

- DesignerFormListInterface

  Provides access to the list of forms opened in the Qt Designer, and 
  can provide a DesignerFormWindowInterface.
  Properties
    - count (read only)

  Functions:
    - newForm
    - loadForm
    - saveActiveForm
    - saveAllForms
    - closeAll
    - addColumn/removeColumn (see p4 example requirements)
    - setColumnIndicator

- DesignerHierarchyViewInterface

  Represents the Hierarchy View in the Designer, and can provide a 
  DesigerWidgetInterface.
  Functions:
    - 

- DesignerMainWindowInterface

  Represents the Main Window of the Designer { and can provide a
  DesignerStatusBarInterface }
  Properties:
    - statusText

  Functions:
    - 

- DesignerConfigurationInterface

  Represents the current configuration of the Qt Designer.


Example PlugIn "P4" (Perforce integration)
------------------------------------------

Requirements:
-------------
- Support for commands edit, submit, revert, add, delete, sync, diff
- toggleable Auto-edit when controlled form is changed
- getting state of loaded files
- indicating state of file in the FormList
- submitting/reverting of multiple files
- reloading of the form after sync/revert

