\chapter Introduction

This document introduces \QA, a tool for presenting on-line
documentation. It also introduces the Qt Reference Documentation which
is accessible using \QA, or with a web browser. The document is
divided into the following sections:

\list
\i Introduction to the Qt Reference Documentation
\i The 1 Minute Guide to using Qt Assistant
\i Qt Assistant in More Detail
\i Full Text Searching
\i Customizing Qt Assistant with Profiles
\i Adding Documentation to Profiles
\endlist

\chapter Introduction to the Qt Reference Documentation

The documentation for the Qt library is written in-line in the \File
.cpp files by the developers themselves. The documentation team
revises the documentation to ensure that it is accurate and usable,
and to provide quality control. The documentation team also writes the
larger texts, such as the class descriptions that introduce a class
along with the concepts the class uses, as well as introducing the
functions and properties that the class provides. 

The documentation focuses on the API rather than the internals, since
we make great efforts to keep our API consistent and compatible with
each new version, but we may change the internals considerably to improve
performance and enhance functionality.

The Qt Reference Documentation consists of almost 1,500 HTML pages
(over 2,500 printed pages). The overwhelming majority of pages
document Qt classes. Since developers differ in the way they
think and work we provide a variety of approaches to navigating the
documentation set: 

\list

\i The \link classes.html All Classes\endlink page lists every class
in Qt's public API, and consists of several hundred classes.

\i The \link mainclasses.html Main Classes\endlink page lists the
classes you're most likely to use most often, and provides a much
shorter and more managable list than the All Classes list.

\i The \link groups.html Grouped Classes\endlink page presents a list
of groups, each of which leads to a list of related classes, for
example, the \link advanced.html Advanced Widgets\endlink list.

\i The \link hierarchy.html Inheritance Hierarchy\endlink page
presents a list of classes in terms of the hierarchy of Qt classes.

\i The \link functions.html All Functions\endlink page lists all the
functions provided by Qt classes, each one with links to the class(es)
in which it appears.

\endlist

No matter where you find yourself in the Qt documentation, you will
find extensive cross-referencing. Even snippets of example code
contain clickable links, so that for example, if you come across a
class declaration in a code example, the class name will be a
clickable link to the class's documentation.

In addition to the class documentation some of Qt's modules have
extensive descriptions, and there are many overview documents which
describe various aspects of the Qt library; all these are linked from
the reference documentation home page. There are also two tutorials
and numerous example programs in the examples subdirectory of the Qt
distribution.

\chapter The 1 Minute Guide to Using Qt Assistant

Under Windows, \QA is available as a menu option on the Qt menu. On
Unix, run \c{assistant} from an xterm.

When you start up \QA, you will be presented with a standard
main-window style application, with a menu bar and toolbar. Below
these, on the left hand side is a navigation window called the \e
Sidebar, and on the right, taking up most of the space, is the
documentation window. By default, the Qt Reference Documentation's home
page is shown in the documentation window.

\QA works in a similar way to a web browser. If you click underlined
text (which signifies a cross-reference), the documentation window will
present the relevant page. You can bookmark pages of particular
interest and you can click the \Toolbutton Previous and \Toolbutton
Next toolbar buttons to navigate within the pages you've visited. 

Although \QA can be used just like a web browser to navigate through
the Qt documentation set, \QA offers a powerful means of navigation
that web browsers don't provide. \QA uses an intelligent algorithm to
index all the pages in the documentation sets that it presents so that
you can search for particular words and phrases. \QA also provides
full text searching for finding specific words in documentation.
Documents with the highest occurrences of the word you are looking for
appear first and every occurrence of the word within the documentation
is highlighted. 

To perform an index search, click the \Toolbutton Index tab on the Sidebar
(or click \Key Ctrl+I). In the 'Look For' line edit enter a word, e.g.
'homedirpath'. As you type, words are found and highlighted in a list
beneath the line edit. If the highlighted text matches what you're
looking for, double click it, (or press \Key Enter) and the
documentation window will display the relevant page. You rarely have
to type in the whole word before \QA finds a match. Note that for some
words there may be more than one possible page that is relevant. 

\omit
For example, enter 'setenabled' in the 'Look For' line edit.
As you type, words are found and highlighted in the list beneath the
line edit, as before. Once the highlighted text matches what you're
looking for, double click it, (or press \Key Enter). In the case of
setEnabled, it is a function name which occurs in several classes, so
a dialog pops up listing the possible choices. Click the choice you're
interested in (or move to it using the \Key Up and \Key Down arrow
keys and press \Key Enter). The relevant page will display in the
documentation window. 
\endomit

\QA can be customized by creating profiles, a collection of
documentation. Profiles can be created for your own use, or for an
application you will distribute. With profiles, you can select which
documentation you want the end user of your application to be able to
view.

\chapter Qt Assistant in More Detail

\section1 The Sidebar

The sidebar provides four ways of navigating documentation:
\list 1
\i The \Toolbutton Contents tab presents a tree view of the
documentation sets that are available. If you click an item, its
documentation will appear in the documentation window. If you double
click an item or click a '+' sign to the left of an item, the item's
sub-items will appear. Click a sub-item to make its page appear in the
documentation window. Click a '-' sign to the left of an item to hide
its sub-items.
\i The \Toolbutton Index tab is used to look up key words or phrases.
See \l{The 1 Minute Guide to using Qt Assistant} for how to use this
tab.
\i The \Toolbutton Bookmarks tab lists any bookmarks you've made.
Double click a bookmark to make its page appear in the documentation
window. The \Toolbutton Bookmarks tab has a \Button{New Bookmark}
button and a \Button{Delete Bookmark} button at the bottom. Click
\Button{New Bookmark} to bookmark the page that is showing in the
documentation window. Click a bookmark in the list, then click 
\Button{Delete Bookmark} to delete the highlighted bookmark.
\i The \Toolbutton Search tab provides full text search of \e all
the documents. For further information see \l{Full Text Searching}.
\endlist

If you want the documentation window to use as much space as possible,
you can easily hide or show the Sidebar. If the Sidebar is showing,
press \Key Ctrl+T, \Key Ctrl+I, \Key Ctrl+B or \Key Ctrl+S to hide it.
If the Sidebar is hidden, press \Key Ctrl+T to show it on the Contents
tab, or press \Key Ctrl+I to show it on the Index tab (with the focus
in the 'Look For' line edit box), or press \Key Ctrl+B to show it on
the Bookmarks tab, or press \Key Ctrl+S to show it on the (full text)
Search tab.

The Sidebar is a dock window, so you can drag it to the top, left,
right or bottom of \QA's window, or you can drag it outside \QA to
float it.

\section1 The Documentation Window

The documentation window provides a convenient feature for viewing
documentation by adding tabs for each page you are viewing. Simply
click the \Button {Add Page} button and a new tab will appear with the
page name as the caption. This makes it easier to switch between pages
when you are viewing different documentation. You can also delete
a tab by clicking the \Button {Close Page} button located on
the right side of the documentation window.

\section1 The Toolbar

The toolbar provides fast access to the most common actions.
\list
\i \Toolbutton Previous takes you to the previous page. The menu
option is \Menu Go|Previous and the keyboard shortcut is \Key{Alt+Left
Arrow}.
\i \Toolbutton Next takes you to the next page. The menu
option is \Menu Go|Next and the keyboard shortcut is \Key{Alt+Right
Arrow}.
\i \Toolbutton Home takes you to the home page (normally the home page
of the Qt Reference Documentation). The menu
option is \Menu Go|Home and the keyboard shortcut is \Key{Ctrl+Home}.
\i \Toolbutton Copy copies any selected text to the clipboard. The menu
option is \Menu Edit|Copy and the keyboard shortcut is \Key{Ctrl+C}.
\i \Toolbutton{Find in Text} invokes the \Dialog{Find Text} dialog. The menu
option is \Menu{Edit|Find in Text} and the keyboard shortcut is \Key{Ctrl+F}.
\i \Toolbutton{Print} invokes the \Dialog{Print} dialog. The menu
option is \Menu{File|Print} and the keyboard shortcut is \Key{Ctrl+P}.
\i \Toolbutton{Zoom in} increases the font size. The menu
option is \Menu{View|Zoom in} and the keyboard shortcut is \Key{Ctrl++}.
\i \Toolbutton{Zoom out} decreases the font size. The menu
option is \Menu{View|Zoom out} and the keyboard shortcut is \Key{Ctrl+-}.
\i \Toolbutton{What's This?} provides a description of a \QA feature.
The menu option is \Menu{Help|What's This?} and the keyboard shortcut
is \Key{Shift+F1}.
\endlist

The remaining toolbar buttons are bookmarks and will vary depending on
your configuration.

\section1 The Menus

\section2 The File Menu

\list
\i \Menu{File|Print} invokes the \Dialog{Print} dialog.
\i \Menu{File|Exit} terminates \QA.
\endlist

\section2 The Edit Menu

\list
\i \Menu{Edit|Copy} copies any selected text to the clipboard.
\i \Menu{Edit|Find in Text} invokes the \Dialog{Find Text} dialog.
\i \Menu{Edit|Settings} invokes the \Dialog{Settings} dialog.
\endlist

\section2 The View Menu

\list
\i \Menu{View|Zoom in} increases the font size.
\i \Menu{View|Zoom out} decreases the font size.
\i \Menu{View|Views|Sidebar} toggles the display of the Sidebar.
\i \Menu{View|Views|Toolbar} toggles the display of the Toolbar.
\i \Menu{View|Views|Line up} lines up the toolbar buttons in the
Toolbar.
\endlist

\section2 The Go Menu

\list
\i \Menu{Go|Previous} displays the previous page.
\i \Menu{Go|Next} displays the next page.
\i \Menu{Go|home} goes to the home page.
\endlist
This menu also has additional items; these are pre-defined bookmarks
that vary depending on your configuration.

\section2 The Bookmarks Menu

\list
\i \Menu{Bookmarks|Add} adds the current page to the list of bookmarks.
\endlist
This menu may have additional items, i.e. any bookmarks that you have
already made. If you want to delete a bookmark go to the Bookmarks tab
on the Sidebar.

\section1 The Dialogs

\section2 The Print Dialog

This dialog is platform-specific. It gives access to various printer
options and can be used to print the current page.

\section2 The Find Text Dialog

This dialog is used to find text in the current page. Enter the text
you want to find in the Find line edit. If you check the 'Whole words
only' checkbox, the search will only consider whole words, i.e. if you
search for 'spin' with this checkbox checked it will not match
'spinbox', but will match 'spin'. If you check the 'Case sensitive'
check box then, for example, 'spin' will match 'spin' but not 'Spin'.
You can search Forward or Backward from your current position in the
page by clicking one of the Direction radio buttons. Click the \Button
Find button to search (or search again), and click the \Button Close
button to finish.

\section2 The Settings Dialog

The Settings dialog is used to set your preferences for \QA. The
dialog has four tabs: General Settings, Web Settings, PDF Settings,
and Profiles. \QA will remember your settings between sessions,
including window sizes and positions, and which pages you have open.
Each of the tabs is discussed as follows: 

\list
\i General Settings

To change the base font used throughout \QA, select a 
font type from the Font combobox. To choose a new fixed-width 
font, for example, to show code snippets, choose a font type from 
the 'Fixed font' combobox. To change the color of hypertext 
links, click the 'Link color' color button. Uncheck the 
'Underline links' checkbox if you don't want underlined links. 

\i Web Settings 

Some pages contain links to external web pages. In order to display
these links, you must specify a web browser. Type the name of your
browser's executable in the Web Browser Application line edit.
Alternatively, click the \Button {(ellipsis)} button to invoke the
\Widget {Set Web Browser} dialog and navigate until you find the web
browser you want to use. Click \Button {Save} to accept the selection.

To change \QA's default home page, enter the file name in the Home
Page line edit. Alternatively, click the \Button {(ellipsis)} button
to invoke the \Widget {Set Homepage} dialog. Navigate until you find
the home page file you want to use and then click \Button {Save} to
accept the selection.

\i PDF Settings

Some pages contain links to PDF documents. In order to display these
links, you must specify a PDF viewer. Type in the name of your PDF viewer's
executable in the line edit. Alternatively, click the \Button {(ellipsis)}
button to invoke the \Widget {Set PDF Browser} dialog and navigate
until you find the PDF viewer you want to use. Click \Button Save to
accept the selection. 

\i Documentation

Profiles are a means by which \QA can be made aware of additional
documentation sets that it can show to its users. Documentation sets
are specified using document content files (see \l{Adding
Documentation to a Profile}). Profiles can also be used to control the
toolbar icons used as shortcuts to documentation sets, and to change
\QA's title bar.

To change profiles, simply click the profile you require, then click
\OK. If you want to add a new profile click \Button Add, and if you
want to modify an existing profile, click the relevant profile, then
click \Button Modify. To delete a profile, click it, then click
\Button Delete. Profiles are documented in \l{Customizing Qt
Assistant with Profiles}.
\endlist

\chapter Full Text Searching

From Qt 3.1, \QA offers a powerful full text search engine. In order
to search for certain words or text, go to the 'Search' tab in the
sidebar. Then enter the text you are looking for and press \Key Enter
or click \Button Search. The search is always case insensitive, so
Foo, fOo and FOO are all treated as the same. The following are
examples of search patterns that can be used:

\list
\i \c deep -- lists all the documents that contain the word 'deep'

\i \c{deep*} -- lists all the documents that contain a word beginning
with 'deep'

\i \c{deep copy} -- lists all documents that contain both 'deep' \e
and 'copy'

\i \c{"deep copy"} -- list all documents that contain the phrase 'deep copy'
\endlist

The wildcard (*) character cannot be used within quotes. 

The list of documents is ordered according to the number of
occurrences of the search text they contain, with those with the
highest number of occurrences appearing first. Simply click any
document in the list to have it display in the document pane.

If the documentation has changed, e.g. if documents have been added or
removed, \QA will reindex.

\chapter Customizing Qt Assistant with Profiles

You can change several aspects of \QA's behavior to adapt it to your
needs. This is achieved by creating and modifying profiles. A profile
is a collection of document content files and related information.

\section1 How to Create a Profile

To add or modify a profile, click \Menu Edit|Settings to invoke the
\Widget Settings dialog. Click the Profiles tab and then click \Button
Add to add a new profile, or \Button Modify to edit an existing
profile. Click \Button Delete to delete a profile from the list.

The Profiles tab displays an 'Available Profiles' window that
contains a list of all the profiles available. 

To add or modify a profile, click \Button Modify or \Button Add to invoke the \Widget {Edit
Profile}. Enter the following information:

\list
\i Name- This field is used to name the profile. This name is used both in the settings dialog (where you
choose which profile to use) and when you start \QA specifying a
particular profile on the command line.
\i Title- This field is used to specify a caption for \QA. 
\i Icon- This field enables you to associate an icon with the profile.
Enter the path and file name. Alternatively, click the \Button {(ellipsis)} button and choose the icon from the \Widget {Choose an Application Icon} dialog. 
\i Base Path- This field contains your application's path (see below). 
\i Start Page- This field specifies which page \QA should initially display when the profile is used. Usually, this is the HTML file which contains the documentation's table of contents. 
\i About Menu Text- This field descibes the text that appears in the \Menu Help menu, e.g. About Application.
\i About URL- This field can be used to point to an HTML file that
descibes the contents in the About dialog.
\endlist

The Documentation window displays the documentation content files the profile
contains. Click \Button Add to add more documentation content files or click \Button
Delete to delete existing documentation content files. See \l{Documentation Content
File Format} for more information.

After you have created the profile, click \OK and \QA will save the
profile.

To use \QA as the help system for an application, it must be
initialized with a profile that identifies the location and content of
the help files supplied with the application. The profile is created
using this dialog. It must then be exported into a file (click
the \Button Export button and choosing a file from the Save Profile As
dialog). When exporting, \QA determines the relative path between the
documentation content files and the application path. When \QA and the
documentation are installed the relative paths are converted to
absolute paths that take account of where the application is actually
installed. The next section explains how to initialize \QA using the
exported profile file.

\section1 How to Use a Profile

To create a profile for your own use, click \Button Add or \Button
Modify, enter the information into the Edit Profile dialog and then
click \OK. The new or modified profile will be saved.

To create a profile for an application that you are distributing,
create the profile and then export it to a file as described in the
previous section. 

To use a profile that has been exported, call \QA from
your installation program with the following option:
\code assistant
-addProfile path/to/profile path/to/application 
\endcode 
This command will not launch \QA in GUI mode, but will simply
register your profile and then terminate. The \c{path/to/profile} is
the path to the profile file on the installation media. The
\c{path/to/application} is the path to the \e installed application on
the user's hard disk, i.e. the specified application path from the
profile is replaced by \c{path/to/application}. When the user runs \QA
it will use the profile that was installed with the \c{-addProfile}
call.

The base path (\c{path/to/application}) is the path to the "root" of
the application. For example, \c{C:\Program Files\MyApp}. The
documentation might be stored in \c{C:\Program Files\MyApp\help} and
the executable in \c{C:\Program Files\MyApp\bin}.

If you don't provide the path, \QA will use the path from the old
profile file.

When \QA is run for the first time it tries to find a profile so that
it can find documents to display. If it can't find a profile and no
profile is specified on the command line, a default profile containing all Qt
related documentation is created. If the first run finds a profile,
then no Qt profile will be created. If \QA has more than one profile,
you can specify the one you want to be displayed at startup like this:
\code assistant -profile profilename \endcode or later in the settings
dialog.

For small documentation sets, the sidebar might not be necessary. You
can hide the side bar on startup with the following:
\code
assistant -hideSidebar
\endcode

\chapter Adding Documentation to a Profile

In order to add new documentation to a profile you must specify a new
documentation content file.

Click \Menu {Edit|Settings} to invoke the \Widget Settings dialog. Click
the Profiles tab. Now select or create a new profile and click
\Button Add or \Button Modify to invoke the Edit Profile dialog. Then go to
the Documentation list and click \Button Add to invoke the \Widget
{Add Documentation} dialog. Select a new documentation content file; the file must be an
XML file in \QA's documentation content file format. \QA will read
the file, and if the file is valid it is added to the profile.

The format of the documentation content file is described in the
following next section.

\section1 Documentation Content File Format

The Documentation Content file must contain the documentation's table
of contents and all important keywords for the index. In addition, it
may inherit an icon for the documentation which will be used in the
\QA toolbar. You can also specify an extra directory path for
additional images used in the documentation.

An example of a content file that uses all the available tags and
attributes is shown below:

\c demodoc.dcf

\code
<!DOCTYPE DCF>
<DCF ref="demo.html" icon="handbook.png" imagedir="../img/"
     title="Development Demo Handbook">
<section ref="./chap1/chap1.html" title="Chapter1">
    <section ref="./chap1/section1.html" title="Section1">
	<keyword ref="./chap1/section1.html#foo">foo</keyword>
	<keyword ref="./chap1/section1.html#bla">bla</keyword>
	<section ref="./chap1/section1.html#subsection1" title="Subsection 1"/>
	<section ref="./chap1/section1.html#subsection2" title="Subsection 2"/>
	<section ref="./chap1/section1.html#subsection3" title="Subsection 3"/>
    </section>
    <section ref="./chap1/section2" title="Section2">
	<section ref="./chap1/section2.html#subsection1" title="Subsection 1"/>
	<section ref="./chap1/section2.html#subsection2" title="Subsection 2"/>
	<section ref="./chap1/section2.html#subsection3" title="Subsection 3"/>
    </section>
</section>
<section ref="./chap2/chap2.html" title="Chapter2">
    <keyword ref="./chap2/chap2.html#foo">foo</keyword>
    <section ref="./chap2/section1.html" title="Section1"/>
</section>
</DCF>
\endcode

Sections may be nested as deeply as necessary. All references should
be related. 

Note that any \c keyword tags for a given section must appear \e
before any sections nested within the given section.

The paths in the \c refs attribute are always written Unix-style
(forward slashes) and are relative to the location of the
documentation content file itself.

