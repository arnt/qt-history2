From: Arnt Gulbrandsen <agulbra@troll.no>
To: "John M. Wagner" <jwag@together.net>
Cc: qt-interest@nvg.unit.no
Subject: Re: Tools?
References: <32AD532B.4035EACC@together.net>
Date: 10 Dec 1996 16:38:17 +0100
In-Reply-To: "John M. Wagner"'s message of Tue, 10 Dec 1996 07:10:19 -0500
Message-ID: <d6wohg276l2.fsf@lupinella.troll.no>
X-Mailer: Gnus v5.2.25/XEmacs 19.14

"John M. Wagner" <jwag@together.net>
> P.S. I use emacs as my editor/IDE, if that helps.

Emacs helps with EVERYTHING!  I eat with knife, fork and emacs.

Seriously, emacs can help you do quite a few programming chores.
cc-mode, makefile-mode, etags, autoinsert and font-lock are some of
the tools it provides.  I won't explain, more like mention each
cursorily:

cc-mode is an emacs 'major mode' for editing c and c++ source code.
It does fancy indentation, reformatting of source, and so on.

I do this in ~/.emacs to select mode by file suffix:

(setq auto-mode-alist
      (append '(("\\.y$" . c++-mode)
		("\\.h$"  . c++-mode)
		("\\.pl$"  . perl-mode)
		("Makefile" . makefile-mode)
		) auto-mode-alist))

(The defaults are fairly good, perhaps they are good enough by now.)

Here are the variables I have in my ~/.emacs in order to configure
cc-mode appropriately for editing c++.

(setq c++-mode-hook
      '(lambda ()
	 (font-lock-mode)
	 (setq c-tab-always-indent nil
	       c-access-key "\\<\\(signals\\|public\\|protected\\|private\\|public slots\\|protected slots\\|private slots\\):"
	       c-basic-offset 4
	       c-hanging-comment-ender-p nil
	       c-offsets-alist (append '((case-label   . 0)
					 (access-label . -)
					 (label        . 0)
					 (statement-cont . c-lineup-math)
					 ) c-offsets-alist))
	 (define-key c-mode-map "\ef" 'c-forward-into-nomenclature)
	 (define-key c-mode-map "\eb" 'c-backward-into-nomenclature)))

Much of that is subject to religious belief.  In particular,
c-basic-offset and the define-key settings are a matter of taste.  The
above setup produces the indentation you see in Qt.  (Almost, I have
one more trick, but it's too long to discuss here.)

Note the c-c c-q (control-c control-q) and c-c c-s commands: c-c c-q
reindents all of the function you are working on.  It tends to show up
misaligned if()s very sharply.  c-c c-s is more subtle, it shows (in
the minibuffer) what emacs thinks you are writing.  With a bit of
experience it can be useful, even though emacs' descriptions aren't
all one could wish for.

etags is harder.  It lets you move to the implementation of a function
by function name, and so on.  I use xemacs, which handles much of this
automatically: I press m-. (meta-. or alt-.) and follow the prompts,
xemacs does the rest.  For fsf emacs you will probably need to
configure it a little - read the info file.  (c-h i)

autoinsert is an emacs feature which inserts some standard text when
you create a new file.  Here is what I have in .emacs:

(setq auto-insert-alist '(("main\\.cpp$" . "main.cpp")
			  ("\\.cpp$" . "cpp")
			  ("\\.c$" . "c")
			  ("[Mm]akefile" . "makefile")
			  ("\\.h$" . "h")))
(setq auto-insert-directory "~/.autoinsert/")
(setq auto-insert-query nil)
(add-hook 'find-file-hooks 'auto-insert)

If I create a new file called 'main.cpp' emacs inserts the contents of
~/.autoinsert/main.cpp into the buffer.  If I create a file matching
*.cpp (except main.cpp) emacs inserts ~/.autoinsert/cpp, and so on.
If anyone wants copies of my standard files, mail me (directly, don't
cc qt-interest).  Good "empty" files save typing.

Finally, font-lock: Nifty package to do syntax colouring.  This is an
edited excerpt, I hope it works:

(cond (window-system
       (setq font-lock-face-attributes 
	     '((font-lock-comment-face "firebrick")
	       (font-lock-string-face "gray40")
	       (font-lock-keyword-face "blue" )
	       (font-lock-function-name-face "blue" nil t)
	       (font-lock-variable-name-face nil nil nil)
	       (font-lock-type-face "blueviolet")
	       (font-lock-reference-face "darkgreen"))
	     font-lock-maximum-decoration
	     '((c++-mode . t) (c-mode . t) (t . 2)))
       ))

(add-hook 'font-lock-mode-hook 'turn-on-fast-lock)

(setq fast-lock-save-events '(save-buffer kill-buffer kill-emacs))
(setq fast-lock-cache-directories '("~/.emacs-flc"))

Finally, I customize makefile-mode a bit:

(add-hook 'makefile-mode-hook
	  '(lambda ()
	     (font-lock-mode)
	     (define-key makefile-mode-map "$" 'self-insert-command)))

Without that, $ behaves badly when editing makefiles.

Hope it helps and that I haven't been too terse.

--Arnt (who did some digital image manipulation in emacs lisp once)
