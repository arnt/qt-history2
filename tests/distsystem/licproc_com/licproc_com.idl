// licproc_com.idl : IDL source for licproc_com.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (licproc_com.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
	[
		object,
		uuid(4881DDEE-ECE8-4496-9F4A-FD33FC500FED),
		dual,
		helpstring("ILicProc Interface"),
		pointer_default(unique)
	]
	interface ILicProc : IDispatch
	{
		[id(1), helpstring("method dummy")] HRESULT dummy(DWORD bar);
		[id(2), helpstring("method publishLicense")] HRESULT publishLicense(DWORD licenseId, BSTR custId, BSTR licensee, BSTR licenseeEmail, BSTR login, BSTR password, BSTR expiryDate, BSTR companyId);
		[id(3), helpstring("method publishLine")] HRESULT publishLine(DWORD licenseId, BSTR itemId, DWORD usLicense, BSTR companyId);
		[id(4), helpstring("method setServer")] HRESULT setServer(BSTR srv, BSTR user, BSTR password, BSTR db);
		[id(5), helpstring("method updateDb")] HRESULT updateDb(DWORD licenseId, BSTR versionTag, BSTR companyId);
		[id(6), helpstring("method publishVersionTag")] HRESULT publishVersionTag(BSTR tag, BSTR versionString, BSTR subDir, BSTR companyId);
		[id(7), helpstring("method publishFilemap")] HRESULT publishFilemap(BSTR tag, BSTR itemId, BSTR fileName, BSTR fileDesc, BSTR companyId);
		[id(8), helpstring("method clearVersionTags")] HRESULT clearVersionTags(BSTR companyId);
		[id(9), helpstring("method clearFilemap")] HRESULT clearFilemap(BSTR companyId);
		[id(10), helpstring("method deleteVersionTag")] HRESULT deleteVersionTag(BSTR tag, BSTR companyId);
		[id(11), helpstring("method deleteFilemap")] HRESULT deleteFilemap(BSTR tag, BSTR itemId, BSTR fileName, BSTR companyId);
		[id(12), helpstring("method deleteLicense")] HRESULT deleteLicense(BSTR licenseId, BSTR companyId);
	};
	[
		object,
		uuid(F1D51A88-5C83-4F00-86DB-A4B32B42FFA4),
		dual,
		helpstring("IBase64Codec Interface"),
		pointer_default(unique)
	]
	interface IBase64Codec : IDispatch
	{
		[id(1), helpstring("method Encode")] HRESULT Encode( int numBytes );
		[id(2), helpstring("method Decode")] HRESULT Decode( int numBytes );
		[propget, id(3), helpstring("property EncodedData")] HRESULT EncodedData([out, retval] BSTR *pVal);
		[propput, id(3), helpstring("property EncodedData")] HRESULT EncodedData([in] BSTR newVal);
		[propget, id(4), helpstring("property DecodedData")] HRESULT DecodedData([out, retval] BYTE* *pVal);
		[propput, id(4), helpstring("property DecodedData")] HRESULT DecodedData([in] BYTE* newVal);
	};

[
	uuid(5F5A3404-F6FD-4DE0-94AA-98F71EC8CE91),
	version(1.0),
	helpstring("licproc_com 1.0 Type Library")
]
library LICPROC_COMLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(5A084CF4-C6E2-42B5-A918-1FAD5EA08F38),
		helpstring("LicProc Class")
	]
	coclass LicProc
	{
		[default] interface ILicProc;
	};
	[
		uuid(B5FDF0C6-247C-4056-9B2E-BB9DEC497CA8),
		helpstring("Base64Codec Class")
	]
	coclass Base64Codec
	{
		[default] interface IBase64Codec;
	};
};
