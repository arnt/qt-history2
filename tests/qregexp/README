Most of QRegExp's features can be disabled by defining a QT_NO_REGEXP_XXX
preprocessor symbol.

As of July 11, 2000, a full-featured production qregexp.o takes 62692 bytes with
egcs-2.91.66 -O2 (Linux on Intel).  Here's how many bytes can be gained by
defining the following symbols:

 12152	QT_NO_REGEXP_CAPTURE
  7404	QT_NO_REGEXP_OPTIM
  6620	QT_NO_REGEXP_CCLASS
  4232	QT_NO_REGEXP_LOOKAHEAD
  4012	QT_NO_REGEXP_BACKREF
  2228	QT_NO_REGEXP_ANCHOR_ALT
  1752	QT_NO_REGEXP_WILDCARD
  1436	QT_NO_REGEXP_INTERVAL
   596	QT_NO_REGEXP_ESCAPE

Here's an overview of the features:

1.  QT_NO_REGEXP_CAPTURE makes it impossible to call QRegExp::capturedTexts()
    and makes all back-references match the empty string.

2.  QT_NO_REGEXP_OPTIM disables optimizations, but it does not affect the
    results.

3.  QT_NO_REGEXP_CCLASS disables character classes, namely \D, \S, \W, \d, \s,
    \w, [^...], and [...].  However, . (dot) is always supported.

4.  QT_NO_REGEXP_LOOKAHEAD turns (?=...) and (?!...) into syntax errors.

5.  QT_NO_REGEXP_BACKREF turns \1, \2, etc., into syntax errors.

6.  QT_NO_REGEXP_ANCHOR_ALT introduces rare and subtle bugs in weird regular
    expressions that alternate anchors (e.g., ($|^)).

7.  QT_NO_REGEXP_WILDCARD treats all patterns as regular-expression patterns.

8.  QT_NO_REGEXP_INTERVAL turns { into syntax errors.

9.  QT_NO_REGEXP_ESCAPE disables \0377, \x7f, \b, \n, etc.

QT_NO_REGEXP_CAPTURE and QT_NO_REGEXP_BACKREF overlap slightly; otherwise,
features are independent.

By disabling all features, we obtain a qregexp.o that takes 24596 bytes.
