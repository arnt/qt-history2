// licensekeys.idl : IDL source for licensekeys.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (licensekeys.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
	[
		object,
		uuid(E19839D3-A96B-4732-957A-D857F1F90EBB),
		dual,
		helpstring("ILicenseKeyGenerator Interface"),
		pointer_default(unique)
	]
	interface ILicenseKeyGenerator : IDispatch
	{
		[id(1), helpstring("method dummy")] HRESULT dummy([out,retval]BSTR* str);
		[id(2), helpstring("method reset")] HRESULT reset(BSTR keyHome);
		[id(3), helpstring("method newKey")] HRESULT newKey(BSTR keyHome, BSTR expiryDate,int us, int enterprise, int windows,int unix,int embedded, int mac, int extra1, int extra2,[out,retval]BSTR* key);
		[id(4), helpstring("method decodeExpiryDate")] HRESULT decodeExpiryDate(BSTR key,[out,retval]BSTR* expDate);
		[id(5), helpstring("method unlocksUS")] HRESULT unlocksUS(BSTR key,[out,retval]int* valid);
		[id(6), helpstring("method unlocksEnterprise")] HRESULT unlocksEnterprise(BSTR key,[out,retval]int* valid);
		[id(7), helpstring("method unlocksWindows")] HRESULT unlocksWindows(BSTR key,[out,retval]int* valid);
		[id(8), helpstring("method unlocksUnix")] HRESULT unlocksUnix(BSTR key,[out,retval]int* valid);
		[id(9), helpstring("method unlocksEmbedded")] HRESULT unlocksEmbedded(BSTR key,[out,retval]int* valid);
		[id(10), helpstring("method unlocksMac")] HRESULT unlocksMac(BSTR key,[out,retval]int* valid);
		[id(11), helpstring("method unlocksExtra1")] HRESULT unlocksExtra1(BSTR key,[out,retval]int* valid);
		[id(12), helpstring("method unlocksExtra2")] HRESULT unlocksExtra2(BSTR key,[out,retval]int* valid);
	};

[
	uuid(EB42E3F8-17A9-488D-85A4-E3200046107B),
	version(1.0),
	helpstring("licensekeys 1.0 Type Library")
]
library LICENSEKEYSLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(3F868798-3D8A-4186-8B6C-4AF8E238357B),
		helpstring("LicenseKeyGenerator Class")
	]
	coclass LicenseKeyGenerator
	{
		[default] interface ILicenseKeyGenerator;
	};
};
