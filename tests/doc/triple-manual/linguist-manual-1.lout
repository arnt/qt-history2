@Chapter
    @PartNumber { Part III }
    @PartTitle { Qt's Translation Tools }
    @Title { Introduction }
    @Tag { introductionxxxxxxxx }
@Begin
@LP
Qt provides excellent support for translating applications into
local languages. This Guide explains how to use Qt's translation
tools for each of the roles involved in translating an application.
The Guide begins with a brief overview of the issues that must
be considered, followed by chapters devoted to each role and
the supporting tools provided.

@LP
The @NamePageRef{release.manager} chapter is aimed at the person with
overall responsibility for the release of the application. They will
typically coordinate the work of the software engineers and the
translator. The chapter describes the use of two tools. The @File{lupdate}
tool is used to synchronize source code and translations. The @File{lrelease}
tool is used to create runtime translation files for use by the
released application.

@LP
The @NamePageRef{translators} chapter is for translators. It
describes the use of the @QLT tool. No computer knowledge
beyond the ability to start a program and use a text editor or word
processor is required.

@LP
The @NamePageRef{programmers} chapter is for Qt programmers. It
explains how to create Qt applications that are able to use translated
text. It also provides guidance on how to help the translator identify
the context in which phrases appear. This chapter's three short
tutorials cover everything the programmer needs to do.

@BeginSections
@Section
    @Title { Overview of the Translation Process }
    @Tag { overview.of.the.translation.process }
@Begin
@LP
Most of the text that must be translated in an application program
consists of either single words or short phrases. These typically
appear as window titles, menu items, pop-up help text (balloon
help), and labels to buttons, check boxes and radio buttons.

@LP
The phrases are entered into the source code by the programmer
in their native language using a simple but special syntax to
identify that the phrases require translation. The Qt tools provide
context information for each of the phrases to help the translator,
and the programmer is able to add additional context information
to phrases when necessary. The release manager generates a set
of translation files that are produced from the source files
and passes these to the translator. The translator opens the
translation files using @QLT, enters their translations
and saves the results back into the translation files, which
they pass back to the release manager. The release manager then
generates fast compact versions of these translation files ready
for use by the application. The tools are designed to be used
in repeated cycles as applications change and evolve, preserving
existing translations and making it easy to identify which new
translations are required. @QLT also provides a phrase
book facility to help ensure consistent translations across multiple
applications and projects.

@LP
Translators and programmers must address a number of issues because
of the subtleties and complexities of human language:

@BulletList
@LI{
A single phrase may need to be translated into several different
forms depending on context, e.g. @I{open} in English might become
@I{{@Char odieresis}ffnen}, `open file', or @I{aufbauen},
`open internet connection', in German.
}
@LI{
Keyboard accelerators may need to be changed but without introducing
conflicts, e.g. `"&"Quit' in English becomes `Avslutt' in Norwegian
which doesn't contain a `Q'. We cannot use a letter that is already
in use -- unless we change several accelerators.
}
@LI{
Phrases that contain variables, for example, `The 25 files selected
will take 63 seconds to process', where the two numbers are inserted
programmatically at runtime may need to be reworded because in
a different language the word order and therefore the placement
of the variables may have to change.
}
@EndList

The Qt translation tools provide clear and simple solutions to
these issues.

@End @Section
@EndSections
@End @Chapter
