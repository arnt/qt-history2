@Chapter
    @Title { Quick Start }
    @Tag { quick.start }
@Begin
@LP
This chapter provides a quick start for users of @QDR.
The chapter takes you step-by-step through the creation of a
small dialog-style metric conversion application. It introduces
adding widgets to a form, setting widget properties, making signals
and slots connections, laying out and adding custom code. This
chapter only covers a proportion of @QDR's functionality
and explanations and details are mostly left for the more detailed
@File{colortool} tutorial presented in the 
@TitlePageRef{creating.a.main.window.application} and
@TitlePageRef{creating.dialogs} chapters.

@Figure
    @Caption { 
@I{The Metric Conversion Dialog} }
 0.5 @Scale @IncludeGraphic { "images/qsmetric.eps.gz" }
@BeginSections
@Section
    @Title { Starting and Exiting @QDR }
    @Tag { starting.and.exiting.qt.designer }
@Begin
@LD @Heading { Starting{@PageMark{starting}} }
@BulletList 
@LI{
To start @QDR under Windows click the @Option{Start} button
and click @Option{Programs"|"Qt X.x.x"|"Designer}. (X.x.x is the Qt
version number, e.g. 3.1.0.)
}
@LI{
If you're running a Unix or Linux operating system you can either
double click the @QDR icon or enter @File{designer "&"} in an xterm.
}
@LI{
Start @QDR now. When @QDR starts, it shows
the @Win{New"/"Open} dialog. We'll just click @Option{Cancel} to skip
it.
}
@EndList

@LD @Heading { Exiting{@PageMark{exiting}} }
When you've finished using @QDR click @Option{File"|"Exit};
you will be prompted to save any unsaved changes.

@End @Section
@Section
    @Title { Creating the Project }
    @Tag { creating.the.project }
@Begin
@LP
The metric conversion application is a standard C++ application,
so we must create a C++ project and add our files and code to
this project.

@PP
Create the new project as follows:

@NumberedList
@LI{
Click @Option{File"|"New} to invoke the @Win{New File} dialog.
}
@LI{
Click "\""C++ Project"\"" to create a C++ project, then click @Option{OK}
to pop up the @Win{Project Settings} dialog.
}
@LI{
Click the ellipsis @Option{...} button next to the Project File
line edit to invoke the @Win{Save As} dialog. Use this dialog to
navigate to where you want to create the new project, ideally
creating a new folder for it (e.g. called "\""metric"\""), using the
@Option{Create New Folder} toolbar button.
}
@LI{
Enter a filename of "\""metric.pro"\"", then click @Option{Save}. The project's
name will now be "\""metric"\""; click @Option{OK} to close the @Win{Project
Settings} dialog.
}
@LI{
Click @Option{File"|"Save} to save the project.
}
@EndList
@Figure 0.5 @Scale @IncludeGraphic { "images/qs-projset.eps.gz" }

@End @Section
@Section
    @Title { Creating the Dialog }
    @Tag { creating.the.dialog }
@Begin
@NumberedList
@LI{
Click @Option{File"|"New} to invoke the @Win{New File} dialog, then
click "\""Dialog"\"", then click @Option{OK}.
}
@LI{
Drag a corner of the new form to make it a lot smaller. Change
the form's name (in the Property Editor) to "\""ConversionForm"\"",
and change its caption to "\""Metric Conversion"\"".
}
@LI{
Click @Option{File"|"Save}, accept the default form name, and then
click @Option{Save} to save it.
}
@EndList
@Figure 0.5 @Scale @IncludeGraphic { "images/qs-newdlg.eps.gz"
}
@LP
See also @TitlePageRef{creating.dialogs} and @TitlePageRef{layouts}.

@LD @Heading { Adding Widgets to the Dialog{@PageMark{adding.widgets.to.the.dialog}} }
@I { Adding Text Labels{@PageMark{adding.text.labels}} }
@NumberedList
@LI{
Click the @Option{Common Widgets} button listed in the Toolbox toolbar
at the left of @QDR's main window.
}
@LI{
Double click the @Option{TextLabel} button and click towards the top
left of the dialog.
}
@LI{
Click four more times below the top text label until you have
5 labels from top to bottom. Don't worry about exact placement
of the labels since the layout tools will handle this automatically.
}
@LI{
Click the @Option{Pointer} toolbar button to deselect the text label.
}
@EndList
See also @PageRef{adding.the.widgets}.

@PP
Now we will change the properties of the text labels to suit
the application.

@NumberedList
@LI{
Click on the top text label. Go to the @Win{Property Editor} window
and change the label's @Prop{text} property to "\""Enter "&"Number:"\"".
}
@LI{
Click the second label. Change the label's @Prop{text} property
to "\""Convert "&"From:"\"".
}
@LI{
Click the third label. Change the label's @Prop{text} property to
"\""Convert "&"To:"\"".
}
@LI{
Click the fourth label. Change the label's @Prop{text} property
to "\""Result:"\"".
}
@LI{
Click the fifth label. Change the label's @Prop{text} property to
"\"""&"Decimals:"\"".
}
@EndList
@Figure 0.5 @Scale @IncludeGraphic { "images/qs-txtlbl.eps.gz"
}
@LP
See also @TitlePageRef{using.the.property.editor}.
@LP
@I { Adding Line Edits, Comboboxes, and Spinboxes{@PageMark{adding.line.edits.comboboxes.and.spinboxes}} }
@NumberedList
@LI{
Click the @Option{Common Widgets} button listed in the Toolbox toolbar
at the left of @QDR's main window.
}
@LI{
Click the @Option{LineEdit} button and then click to the right of
the Enter Number label. Change its @Prop{name} property to "\""numberLineEdit"\"".
Change the @Prop{hAlign} property to AlignRight and change @Prop{vAlign}
to AlignTop. Finally, change @Prop{wordwrap} to False. Note that
whenever you click a widget, its properties appear in the @Prop{Property
Editor}.
}
@LI{
Double click the @Option{ComboBox} button and click to the right of
the Convert From label. Now click to the right of the Convert
To label. Click the @Option{Pointer} toolbar button to deselect the
ComboBox. Change the @Prop{name} property of the first combobox
to "\""fromComboBox"\"". Change the @Prop{name} property of the second
to "\""toComboBox"\"".
}
@LI{
Click the @Option{LineEdit} button and then click to the right of
the "\""Result"\"" label. Change its @Prop{name} property to "\""resultLineEdit"\"".
Change the @Prop{paletteBackground} property to a shade of yellow
(just to make the result stand out). Change @Prop{hAlign} to AlignRight,
@Prop{vAlign} to AlignVCenter and @Prop{wordwrap} to False. Now change
the @Prop{readOnly} property to "\""False"\"", if it isn't already.
}
@LI{
Click the @Option{SpinBox} button and then click to the right of the
Decimals label. Place the SpinBox below the right side of the
resultLineEdit. Change the spinbox's @Prop{name} property to "\""decimalsSpinBox"\"".
Change its @Prop{max value} property to "\""6"\"" and the @Prop{value} to
"\""3"\"".
}
@LI{
Click @Option{File"|"Save}.
}
@EndList

@Figure 0.5 @Scale @IncludeGraphic { "images/qs-addwidg.eps.gz"
}
@LP
Now we need to relate each of the text labels to the corresponding
widget. We do this by creating "\""buddies"\"".

@PP
A widget that does not accept focus itself, e.g. a QLabel, can
have an accelerator that will pass the focus to its "\""buddy"\"",
e.g. a QLineEdit, by setting the first widget's @Prop{buddy} property
to the name of the buddy widget.

@NumberedList
@LI{
Click the @Option{Set Buddy} button (@Option{F5}). Click the Enter Number
label and drag the rubber band to the numberLineEdit; then release.
}
@LI{
Click the @Option{Set Buddy} button. Click the Convert From label
and drag the rubber band to the fromComboBox; then release.
}
@LI{
Click the @Option{Set Buddy} button. Click the Convert To label and
drag the rubber band to the toComboBox; then release.
}
@LI{
Click the @Option{Set Buddy} button. Click the Decimals label and
drag the rubber band to the decimalsSpinBox; then release.
}
@EndList
@I { Adding Push Buttons{@PageMark{adding.push.buttons}} }
@NumberedList
@LI{
Click the @Option{Common Widgets} button in the Toolbox.
}
@LI{
Double click the @Option{Pushbutton} button and click towards the
bottom left of the dialog, below the Decimals label.
}
@LI{
Click to the right of the new push button two more times so that
you have three push buttons horizontally in a row at the bottom
of the dialog.
}
@LI{
Click the @Option{Pointer} toolbar button to deselect the push button.
}
@EndList

We will change a few properties for each of the push buttons
in the @Win{Property Editor} window.

@NumberedList
@LI{
Click the first push button starting from the left of the dialog.
Change its name to "\""clearPushButton"\"" and its text to "\"""&"Clear"\"".
}
@LI{
Click the second push button and change its name to "\""calculatePushButton"\"",
its text to "\""Calculate"\"" and its default property to "\""True"\"".
}
@LI{
Click the third push button and change its name to "\""quitPushButton"\""
and its text to "\"""&"Quit"\"".
}
@EndList

@Figure 0.5 @Scale @IncludeGraphic { "images/qs-pushbutt.eps.gz"
}

@I { Adding Spacers{@PageMark{adding.spacers}} }
@LP
We need to add spacers to absorb redundant space in our dialog
so that it will lay out nicely at whatever size the user resizes
it to. Usually spacers are added as you experiment with the layout,
but since this is a quick guide to @QDR, we will add
the spacers now since we already know that they will be needed.

@NumberedList
@LI{
Click the @Option{Common Widgets} button in the Toolbox.
}
@LI{
Click the @Option{Spacer} button and click to the right of the Decimal
label and drag right towards the spinbox; then release. A horizontal
spacer will appear.
}
@LI{
Click the @Option{Spacer} button again and click to the right of the
Calculate push button and drag right towards the Quit push button;
then release.
}
@LI{
Click the @Option{Spacer} button and click just below the spin box
and drag vertically towards the buttons; then release. A vertical
spacer will appear.
}
@EndList

@Figure 0.5 @Scale @IncludeGraphic { "images/qs-spacers.eps.gz"
}

@LP
Click @Option{File"|"Save} to save the dialog.
@LP
@I { Editing Widgets{@PageMark{editing.widgets}} }
@LP
We'll now edit some of the widgets to contain the values needed
for the conversions.

@PP
The fromComboBox:

@NumberedList
@LI{
Right click the fromComboBox and then click @Option{Edit} from the
context menu.
}
@LI{
Click @Option{New Item} and then delete the "\""New Item"\"" text and type
"\""Kilometers"\"". Click @Option{New Item} and change the text to "\""Meters"\"".
Repeat this two more times, changing the text to "\""Centimeters"\""
and to "\""Millimeters"\"" respectively.
}
@LI{
Click @Option{OK} to close the Edit Listbox dialog.
}
@EndList

@Figure 0.5 @Scale @IncludeGraphic { "images/qs-editlistbox1.eps.gz"
}
@LP
The toComboBox:

@NumberedList
@LI{
Right click the toComboBox and then click @Option{Edit} from the context
menu.
}
@LI{
Delete the "\""New Item"\"" text and type "\""Miles"\"". Click @Option{New Item}
and change the text to "\""Yards"\"". Repeat this two more times, changing
the text to "\""Feet"\"" and to "\""Inches"\"".
}
@LI{
Click @Option{OK} to close the Edit Listbox dialog.
}
@EndList
@LD @Heading { Laying Out the Dialog{@PageMark{laying.out.the.dialog}} }

We'll lay out the text labels and their corresponding widgets
first and we'll do the push buttons last.

@NumberedList
@LI{
Click the decimalsSpinBox and press @Option{Shift+Click} on the spacer
next to it. Click the @Option{Lay Out Horizontally} (@Option{Ctrl+H}) toolbar
button.
}
@LI{
Click and hold on the form to the left of the text labels and
then drag the rubber band so that it touches every label and
widget and spacer except for the push buttons and the spacer
between the push buttons and the spacer below the spin box. Release
the rubberband and notice that the desired widgets are selected.
Click the @Option{Lay Out in a Grid} (@Option{Ctrl+G}) toolbar button.
@LLP
@Figure @Location { Raw } 0.5 @Scale @IncludeGraphic { "images/qs-laygrid.eps.gz"
}

}
@LI{
Click the Clear push button in the @Win{Object Explorer} window
(Objects tab) and then @Option{Shift+Click} the Calculate push button,
the Quit push button and the Spacer between the push buttons.
Click the @Option{Lay Out Horizontally} toolbar button.

@LLP
@Figure @Location { Raw } 0.5 @Scale @IncludeGraphic { "images/qs-layhoriz.eps.gz"
}

}
@LI{
Click the form to deselect all widgets and layouts and then click
the @Option{Lay Out Vertically} (@Option{Ctrl+L}) toolbar button.
}
@LI{
Finally, click the dialog and then click the @Option{Adjust Size}
(@Option{Ctrl+J}) toolbar button.
}
@EndList

@Figure 0.5 @Scale @IncludeGraphic { "images/qs-layvert.eps.gz"
}
@LP
Click @Option{File"|"Save} to save the dialog.

@PP
See also @TitlePageRef{laying.out.the.widgets}.
@LP
@I { Tab Order{@PageMark{tab.order}} }
@LP
We should make sure that our dialog's tab order is set correctly.

@NumberedList
@LI{
Click the @Option{Tab Order} toolbar button. A number in a blue circle
will appear next to every widget that can accept focus.
}
@LI{
Click every widget in turn in the order you want them to accept
focus.
}
@LI{
Press @Option{Esc} to leave tab order mode.
}
@EndList
@Figure 0.5 @Scale @IncludeGraphic { "images/qs-taborder.eps.gz" }
@NP
@LD @Heading { Previewing the Dialog{@PageMark{previewing.the.dialog}} }

To preview the dialog, press @Option{Ctrl+T}. Try dragging the corner
of the dialog to adjust the size. Note that the the widgets always
stay in proportion no matter what size you make the dialog. Check
the tab order of the widgets by pressing the @Option{Tab} key.

@LD @Heading { Connecting the Widgets{@PageMark{connecting.the.widgets}} }

We need to connect three buttons; the Clear button, the Calculate
button and the Quit button. We also need to connect some of the
other widgets. For convenience, we can do all of our connections
in one go using the @Win{View and Edit Connections} dialog.

@PP
We will now connect our clearButton:

@NumberedList
@LI{
Click @Option{Edit"|"Connections} to invoke the @Win{View and Edit Connections}
dialog.
}
@LI{
Click @Option{New} to enter a new connection.
}
@LI{
For the first connection, select clearPushButton for the Sender,
@Func{clicked()} for the Signal, numberLineEdit for the Receiver, and
@Func{clear()} for the Slot.
}
@LI{
Click @Option{New} again.
}
@LI{
Select clearPushButton for the Sender, @Func{clicked()} for the Signal,
resultLineEdit for the Receiver, and @Func{clear()} for the Slot.
}
@LI{
Click @Option{New} again.
}
@LI{
Select clearPushButton for the Sender, @Func{clicked()} for the Signal,
numberLineEdit for the Receiver, and @Func{setfocus()} for the Slot.
}
@EndList

@Figure 0.5 @Scale @IncludeGraphic { "images/qs-editconn1.eps.gz" }
@LP
We also need to connect the quit button to the form:

@NumberedList
@LI{
Click @Option{New}.
}
@LI{
Select quitPushButton for Sender, @Func{clicked()} for Signal, ConversionForm
for Receiver, and @Func{close()} for Slot.
}
@EndList

We want to connect the calculate button and the other widgets,
but the slot we want to use is not listed in the combobox. We
will need to create a new slot so that we can select it from
the list to complete our connections.

@NumberedList
@LI{
Click @Option{New}.
}
@LI{
Select calculatePushButton for the Sender, @Func{clicked()} for the
Signal, and ConversionForm for the Receiver.
}
@LI{
Click @Option{Edit Slots} to invoke the @Win{Edit Functions} dialog.
Click @Option{New Function}. Type over the Function name with the
name of our new function: @Func{convert()}, then click @Option{OK}.
}
@LI{
Select @Func{convert()} from the Slot combobox to complete our connection.
}
@EndList
@Figure 0.5 @Scale @IncludeGraphic { "images/qs-editfunc.eps.gz" }
@LP
We will now connect the last few widgets:

@NumberedList
@LI{
Click @Option{New}.
}
@LI{
Select decimalsSpinBox as the Sender, @Func{valueChanged(int)} as the
Signal, ConversionForm as the Receiver, and @Func{convert()} as the
Slot.
}
@LI{
Click @Option{New}.
}
@LI{
Select fromComboBox as the Sender, @Func{activated(int)} as the Signal,
ConversionForm as the Receiver, and @Func{convert()} as the Slot.
}
@LI{
Click @Option{New}.
}
@LI{
Select toComboBox as the Sender, @Func{activated(int)} as the Signal,
ConversionForm as the Receiver, and @Func{convert()} as the Slot.
}
@EndList
@Figure 0.5 @Scale @IncludeGraphic { "images/qs-editconn2.eps.gz" }
@LP
Click @Option{OK} to exit the View and Edit Connections dialog.

@PP
Click @Option{Save} to save the project.

@End @Section
@Section
    @Title { Coding the Dialog }
    @Tag { coding.the.dialog }
@Begin
@LP
Click "\""conversionform.ui.h"\"" in the @Win{Project Overview} window
to invoke the code editor. We'll implement the @Func{convert()}
function and also the @Func{init()} function. For faster
implementation, copy the code from this section and then follow
the brief explanations below:
@LD @Code @RawVerbatim @Begin
    void ConversionForm::convert()
    {
        enum MetricUnits {
            Kilometers,
            Meters,
            Centimeters,
            Millimeters
        };
        enum OldUnits {
            Miles,
            Yards,
            Feet,
            Inches
        };
@End @RawVerbatim
@LD @Code @RawVerbatim @Begin
        // Retrieve the input
        double input = numberLineEdit->text().toDouble();
        double scaledInput = input;

        // internally convert the input to millimeters
        switch ( fromComboBox->currentItem() ) {
        case Kilometers:
            scaledInput *= 1000000;
            break;
        case Meters:
            scaledInput *= 1000;
            break;
        case Centimeters:
            scaledInput *= 10;
            break;
        }

        //convert to inches
        double result = scaledInput * 0.0393701;

        switch ( toComboBox->currentItem() ) {
        case Miles:
            result /= 63360;
            break;
        case Yards:
            result /= 36;
            break;
        case Feet:
            result /= 12;
            break;
        }

        // set the result
        int decimals = decimalsSpinBox->value();
        resultLineEdit->setText( QString::number( result, 'f', decimals ) );
        numberLineEdit->setText( QString::number( input, 'f', decimals ) );
    }
@End @RawVerbatim
First, we define some enums for the input and output units. Then
we retrieve the input from the numberLineEdit. We convert the
input to millimeters because this is the most precise metric
unit we support. Then we convert it to inches which is the most
precise output unit we support. We then scale it to the selected
output unit. Finally, we put the result in the resultLineEdit.
qstring @Index{ QString }

@PP
Next, we will implement the @Func{init()} function which
is called when the dialog is created.

@LD @Code @RawVerbatim @Begin
    void ConversionForm::init()
    {
        numberLineEdit->setValidator( new QDoubleValidator( numberLineEdit ) );
        numberLineEdit->setText( "10" );
        convert();
        numberLineEdit->selectAll();
    }
@End @RawVerbatim
For this function, we set a validator on the numberLineEdit so
that the user can only input numbers. To be able to do this,
we also need to add @Code{"#"include <qvalidator.h>} at
the top of the form, right above the @Func{init()}. Lastly,
we set the initial input.
qdoublevalidator @Index{ QDoubleValidator }

@PP
We are almost ready to run the application. Before we compile
the application, we need a @File{main.cpp} file.

@NumberedList
@LI{
Click @Option{File"|"New} and click @File{main.cpp}.
}
@LI{
Accept the default selections for the Configure Main-File dialog.
}
@LI{
Click @Option{Save} to save the project.
}
@EndList

Compiling and Running the Application

@NumberedList
@LI{
Start or switch to a console and navigate to the directory where
you saved your project.
}
@LI{
Run @File{qmake} on the project file (@File{metric.pro})
by typing @Code{qmake -o Makefile metric.pro}.
}
@LI{
Run @File{make} (or @File{nmake} depending on your system).
}
@LI{
After the project has compiled, run the application.
}
@EndList
@End @Section
@Section
    @Title { Wrapping Up }
    @Tag { wrapping.up }
@Begin
@LP
This application has given a very quick introduction to @QDR. It has introduced adding widgets to a form, setting
widget properties, making signals and slots connections, laying
out and adding custom code. Much of the detail and explanations
have been deferred. The next two chapters provide a tutorial
that covers the development of a small but complete application,
and the reference chapters complete the detailed coverage.

@End @Section
@EndSections
@End @Chapter
