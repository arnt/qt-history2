@Chapter
    @Title { Customizing and Integrating Qt Designer }
    @Tag { customizing.and.integrating.qt.designer }
@Begin
@BeginSections
@Section
    @Title { Customizing Qt Designer }
    @Tag { customizing.qt.designer }
@Begin
@LP
@QDR can be customized in two ways: you can add custom widgets, and
you can change aspects of how @QDR works. Custom widgets are covered
in Creating Custom Widgets [p.~@PageOf{creating.custom.widgets}]. This
section will focus on customizing @QDR itself.

@LP
@QDR's toolbars are all dockable so they can be dragged
by their toolbar handles and arranged how you like. The Files,
Object Hierarchy, Property Editor and Output Windows are also
dockable so you can also drag them to the positions that you
prefer. You can also make them into floating windows by dragging
them outside @QDR's dock areas.

@LP
General preferences can be set by clicking @Option{Edit"|"Preferences}
to invoke the @Win{Preferences} dialog. If you check the 'Restore
Last Workspace on Startup' checkbox then @QDR will
remember the sizes and positions of the toolbars and the dockable
windows. You can change @QDR's main window background
either by selecting a color or a pixmap. You can also switch
off the grid (uncheck Show Grid) since using layouts makes the
grid redundant.

@LP
The @Win{Preferences} dialog may have additional tabs, depending
plugins @Index{ Plugins } code.editing @RawIndex{ Code Editing }
code.editing.preferences @SubIndex{ Preferences } preferences
@RawIndex{ Preferences } preferences.code.editing @SubIndex{ Code
Editing } on what plugins you have installed. We'll describe the @Cpp
Editor tab since this is installed by default.

@LP
The @Cpp Editor tab is used to set your preferred fonts for syntax
highlighting in @QDR's code editor. The base font
for all elements is set in the 'Standard' element which is the
last item in the list. If you want one font to be used throughout
then set the 'Standard' font and all the other elements will
inherit its setting.

@BeginSubSections
@SubSection
    @Title { Qt Designer's Code Editor }
    @Tag{qt.designer.s.code.editor}
@Begin
@LP
The code editor is available if an Editor plugin is installed.
The @Cpp Editor plugin is installed by default.

@LP
The code keypresses.qt.designer.s.code.editor @Index{ Keypresses (Qt
Designer's code editor) } editor provides the following keystrokes:

@LP
@Tbl
    aformat { @Cell font { Helvetica Base -1p } A | @Cell B }
{
    @Rowa A { @Sym arrowleft } B { Moves the cursor one character left }
    @Rowa A { @Sym arrowright } B { Moves the cursor one character right }
    @Rowa A { @Sym arrowup } B { Moves the cursor one line up }
    @Rowa A { @Sym arrowdown  } B { Moves the cursor one line down }
    @Rowa A { Page Up  } B { Moves the cursor one page up }
    @Rowa A { Page Down  } B { Moves the cursor one page down }
    @Rowa A { Backspace } B { Deletes the character to the left of the cursor}
    @Rowa A { Home } B { Moves the cursor to the beginning of the line}
    @Rowa A { End } B { Moves the cursor to the end of the line}
    @Rowa A { Delete } B { Deletes the character to the right of the cursor}
    @Rowa A { Ctrl+A } B { Moves the cursor to the beginning of the line}
    @Rowa A { Ctrl+B } B { Moves the cursor one character left}
    @Rowa A { Ctrl+C } B { Copies the selected text to the clipboard (also Ctrl+Insert under Windows)}
    @Rowa A { Ctrl+D } B { Deletes the character to the right of the cursor}
    @Rowa A { Ctrl+E } B { Moves the cursor to the end of the line}
    @Rowa A { Ctrl+F } B { Invokes the @Win{Find Text} dialog}
    @Rowa A { Ctrl+G } B { Invokes the @Win{Goto Line} dialog}
    @Rowa A { Ctrl+H } B { Deletes the character to the left of the cursor}
    @Rowa A { Ctrl+I } B { Indent the line or selected text that contains the cursor}
    @Rowa A { Alt+I } B { Starts incremental search (see below)}
    @Rowa A { Ctrl+K } B { Deletes from the cursor position to the end of the line}
    @Rowa A { Ctrl+N } B { Moves the cursor one line down}
    @Rowa A { Ctrl+P } B { Moves the cursor one line up}
    @Rowa A { Ctrl+R } B { Invokes the @Win{Replace Text} dialog}
    @Rowa A { Ctrl+V } B { Pastes the clipboard text into line edit (also Shift+Insert under Windows)}
    @Rowa A { Ctrl+X } B { Cuts the marked text, copy to clipboard (also Shift+Delete under Windows)}
    @Rowa A { Ctrl+Y } B { Redoes the last operation}
    @Rowa A { Ctrl+Z } B { Undoes the last operation}
    @Rowa A { Ctrl+|0.5s @Sym arrowleft } B { Moves the cursor one word left}
    @Rowa A { Ctrl+|0.5s @Sym arrowright } B { Moves the cursor one word right}
    @Rowa A { Ctrl+|0.25s @Sym arrowup} B { Moves the cursor one word up}
    @Rowa A { Ctrl+|0.25s @Sym arrowdown } B { Moves the cursor one word down}
    @Rowa A { Ctrl+Home } B { Moves the cursor to the beginning of the text}
    @Rowa A { Ctrl+End } B { Moves the cursor to the end of the text}
    @Rowa A { Tab } B { Completion (see below)}
}

@LP
To select (mark) text hold down the Shift key whilst pressing
one of the movement keystrokes, for example, @Option{Shift+Right Arrow}
will select the character to the right, and @Option{Shift+Ctrl+Right
Arrow} will select the word to the right, etc.

@LP
Pressing @Option{Alt+I} starts incremental search. The characters
you type will appear in the Incremental Search line edit in the
Search toolbar and the cursor will be moved to the first matching
text in the editor. As you type the search will continue. Press
@Option{Return} to move to the next match and press @Option{Esc} to cancel
the search at the position you've reached.

@LP
Pressing @Option{Tab} after you've typed one or more characters invokes
completion. Completion works like this: start typing some text
then press @Option{Tab}. If the editor can find another item of text
that begins with the same characters it will complete your text
for you; if it finds more than one possibility it will pop up
a list of choices. You can use the arrow keys to choose a piece
of text then press @Option{Return}, or press @Option{Esc} to continue typing.
You can switch off completion in the @Win{Preferences} dialog.

@LP
When you enter @Code{->} or @Code{.} the editor
will pop up a command completion list; use the arrow keys to
move to the item you want and press @Option{Return}, or press @Option{Esc}
to ignore the list.

@End @SubSection
@EndSubSections
@End @Section
@Section
    @Title { Creating and Using Templates }
    @Tag { creating.and.using.templates }
@Begin
@LP
@QDR supports two approaches to creating template creating.templates
@Index{ Creating Templates } templates @RawIndex{ Templates }
templates.creating.and.using @SubIndex{ Creating and Using } forms.
The simplest approach involves little more than saving a ui @Index{
.ui } @File{".ui"} file into the templates directory. The second
approach involves creating a container widget class to be used as a
base class for forms that use the template. We will explain both
techniques.

@BeginSubSections
@SubSection
    @Title { Simple Templates }
    @Tag{simple.templates}
@Begin
@LP
These templates are most useful when you want to create a whole
set of forms which all have some common widgets. For example,
you might have a project that will require many forms, all of
which need to be branded with a company name and logo.

@LP
First we'll create the simple template.

@NumberedList
@LI{
Click @Option{File"|"New} to invoke the @Win{New File} dialog. Click
the Dialog template then click @OK.
}
@LI{
Click the @Option{Text Label} toolbar button, then click near the
top left of the form. Change the font Point Size property to
16 and change the @Prop{text} property to your or your company's
name. Click the @Option{Line} toolbar button, then click the form
below the label; click Horizontal on the pop-up menu.
}
@LI{
Select the label and the line. (@Option{Ctrl+Click} the form, then
drag the rubber band so that it touches or includes the line
and the label.) Press @Option{Ctrl+L} to lay them out vertically.
}
@LI{
Click the @Option{Save} toolbar button. In the @Win{Save As} dialog,
navigate to @QDR's templates directory, e.g. (@File{"qt/tools/designer/templates"}.
Type in the name 'Simple_Dialog.ui' and click @Option{Save}.
}
@LI{
Right click the form in the Forms list, then click Remove form
from project.
}
@EndList

Now that we have the simple template we are ready to use it.
Click @Option{File"|"New} to invoke the @Win{New File} dialog. One of
the templates that will appear is 'Simple Dialog'. Click the
simple dialog, then click @OK. A new form will appear with
the same widgets and layout as the template. Add any other widgets
and functionality. When you attempt to save the form you will
be prompted for a new form name.

@End @SubSection
@SubSection
    @Title { Base-class Templates }
    @Tag{base.class.templates}
@Begin
@LP
These templates are useful when you want to provide some default
templates @RawIndex{ Templates }
templates.base.class.templates @SubIndex{ Base Class Templates }
functionality that all the forms based on the base class can
inherit. In our example we'll use a class called @Option{SizeAware}
that remembers and restores its size as the basis of a template.
We won't describe the class itself, but will focus instead on
making use of it as a @QDR template. The source for
the class is in @File{"qt/tools/designer/examples/sizeaware"}.

@LP
The template can either be based on a custom widget or on any
existing container widget.

@LP
If you want to base the template on a custom widget you must
first add it to @QDR's custom widgets. Click @B{Tools"|"Custom"|"Edit
Custom Widgets} to invoke the @Win{Edit Custom Widgets} dialog.
(This dialog is explained in more detail in Simple Custom Widgets [p.~@PageOf{simple.custom.widgets}].)
Click @Option{New Widget}. Change the Class from 'MyCustomWidget'
to 'SizeAware'. Click the Headerfile ellipsis button and select
the file @File{"qt/tools/designer/examples/sizeaware/sizeaware.h"}.
Check the Container Widget checkbox. This class provides two
properties. Click the Properties tab. Click @Option{New Property}
and change the property name to 'company'. Click the @Option{New Property}
again and change the property name to 'settingsFile'. Click @Close.

@LP
To create a template, based on an existing widget or on your
own custom widget, click @Option{File"|"Create Template} to invoke
the @Win{Create Template} dialog. Change the Template Name to 'SizeAware'
and click the SizeAware base class, then click @Option{Create}. The
dialog will create the template and close itself immediately.
Close @QDR and restart it.

@LP
A new template, 'SizeAware' is now available from the list of
templates. Click @Option{File"|"New}, click SizeAware and click @OK.
Note that the two properties, company and settingsFile, are available
in the Properties window. Any forms based on this template will
remember their size and resize when reloaded. (In practical applications
having one settingsFile per form is not recommended, so this
template would only really be useful for applications that have
a single main window.)

@End @SubSection
@EndSubSections
@End @Section
@Section
    @Title { Integrating Qt Designer with Visual Studio }
    @Tag { integrating.qt.designer.with.visual.studio }
@Begin
@LP
@QDR can be integrated into Visual Studio 6.0 using the qmsdev.dsp
@Index{ qmsdev.dsp } @File{"qmsdev.dsp"} file that is supplied with
Qt. Visual Studio.Net does not support this integration.

@LP
Start visual.studio @Index{ Visual Studio } up Visual Studio and click
@Option{File"|"Open Workspace}. Open
@File{"%QTDIR%\\tools\\designer\\"}
@File{"integration\\qmsdev\\qmsdev.dsp"}. Click
@Option{Build"|"Set Active Configuration} and in the list click
'QMsDev - Win32 Release', then click @OK. Now click @B{Build"|"Build
qmsdev.dll}. You should now make sure Visual Studio is closed and copy
the file
@File{"%QTDIR%\\tools\\designer\\integration\\"}
@File{"qmsdev\\Release\\qmsdev.dll"}
into @File{"Microsoft Visual Studio\\Common\\MSDev98\\AddIns"}. Now click
@Option{Tools"|"Customize}. Click the Add-in Macro Files tab, then
click the @Option{Browse} button. Change the file type to 'Add-ins
(.dll)' and navigate to
@File{"Microsoft Visual Studio\\Common\\MSDev98\\AddIns"}. Click the
qmsdev.dll @Index{ qmsdev.dll } @File{"qmsdev.dll"} file, click
@Option{Open}, then click @Close.

@LP
A new toolbar will appear in Visual Studio with the following
toolbar buttons:

@BulletList
@LI{
New Qt Project -- A small application wizard
}
@LI{
New Qt Dialog -- Add an empty Qt Dialog to the active project,
or add an existing dialog
}
@LI{
Qt GUI Designer -- Run @QDR
}
@LI{
Open Qt Project -- Runs @File{"qmake"} with a

pro @Index{ .pro } @File{".pro"} file}
@LI{
Write Qt Project -- Saves the current VS project as a

pro @Index{ .pro } @File{".pro"} file}
@LI{
Use Qt -- Add the Qt libraries to the active project
}
@LI{
Add MOC -- Add the @File{"moc"} precompiler to the active
file
}
@EndList
Double clicking a ui @Index{ .ui } @File{".ui"} file in the workspace
overview will now launch @QDR.

@LP
If you create a macros @RawIndex{ Macros } macros.q.object @SubIndex{
Q_OBJECT } q.object @Index{ Q_OBJECT } cpp @Index{ .cpp }
@File{".cpp"} file which contains the @File{"Q_OBJECT"} macro you will
need an additional file which is generated by the @File{"moc"} to be
included in your project. For example, if you have 'file.cpp', then
the last line would be @Code{"#"include "\""file.moc"\""} and the
additional file would be called @File{file.moc}. To ensure that Visual
Studio executes the @File{"moc"} and generates this file you must
create a custom dependency. Double click the cpp @Index{ .cpp }
@File{".cpp"} file (in your project workspace) that contains the
@Code{Q_OBJECT} macro. Click the @Option{Add MOC} toolbar button; this
will create an empty moc @Index{ .moc } @File{".moc"} file in your
project workspace. Right click the newly created moc @Index{ .moc }
@File{".moc"} file, then click @Option{Settings} from the pop-up menu
to invoke the Project Settings dialog. Click the Custom Build tab.
Click the @Option{Dependencies} button to pop up the User Defined
Dependencies dialog. Type in @Code{"$(InputDir)\$(InputPath)"}, then
press @Option{Return}. Click @OK to leave the Dependencies dialog,
then click @OK to leave the Project Settings dialog. @LP If you wish
to delete the add-in remove it from the toolbar then delete the
qmsdev.dll @Index{ qmsdev.dll } @File{"qmsdev.dll"} file from the
add-ins directory.

@BeginSubSections
@SubSection
    @Title { Creating Makefiles without qmake }
    @Tag{creating.makefiles.without.qmake}
@Begin
@LP
The @File{"qmake"} tool provided with Qt can create Makefiles
makefiles @Index{ Makefiles } appropriate to your platform based on
pro @Index{ .pro } @File{".pro"} project files. This section describes
the dependencies involved in building a Qt application and gives a
couple of simple example Makefiles. This section assumes that you have
a good understanding of Makefiles.

@LP
@QDR produces macros @RawIndex{ Macros } macros.q.object @SubIndex{
Q_OBJECT } q.object @Index{ Q_OBJECT } ui @Index{ .ui } @File{".ui"}
files which are used to generate h @Index{ .h } @File{".h"} and cpp
@Index{ .cpp } @File{".cpp"} files for the compiler to compile. The ui
@Index{ .ui } @File{".ui"} files are processed by @File{"uic"}.
Classes which inherit from @Class{QObject}, e.g. those which use slots
and signals, require an additional cpp @Index{ .cpp } @File{".cpp"}
file to be generated. These files are generated by the @File{"moc"}
and are named '@I{moc_}file.cpp' where the original cpp @Index{ .cpp }
@File{".cpp"} file is called 'file.cpp'. If your cpp @Index{ .cpp }
@File{".cpp"} file contains the @Code{Q_OBJECT} macro an additional
file 'file.moc' should be generated which must be @Code{"#"include}d
in the cpp @Index{ .cpp } @File{".cpp"}, normally at the end. This
requires an extra dependency being created.

@LP
Processing ui @Index{ .ui } @File{".ui"} files with @File{"uic"} is
done @I{twice}:
@LD @Code @RawVerbatim @Begin
uic myform.ui -o myform.h
uic myform.ui -i myform.h -o myform.cpp
@End @RawVerbatim

The first execution creates the header file, the second creates the
cpp @Index{ .cpp } @File{".cpp"} file. If you wish to subclass a form
you can use @File{"uic"} to generate subclass skeletons:
@LD @Code @RawVerbatim @Begin
uic formbase.ui -o formbase.h
uic formbase.ui -i formbase.h -o formbase.cpp
uic -subdecl Form formbase.h formbase.ui -o form.h
uic -subimpl Form form.h formbase.ui -o form.cpp
@End @RawVerbatim

First we generate the header and implementation file for our
base class. Then we generate the header and implementation skeletons
for our subclass. Note that the use of @File{"uic"} to generate
skeletons is not something that would be done in a Makefile,
we mention it here because it can be useful for command line
users. Note also that the command line for @Code{-subdecl}
and for @Code{-subimpl} are subtly different.

@LP
For implementation files that contain classes which inherit from
@Class{QObject}qobject @Index{ QObject } we must create moc files:
@LD @Code @RawVerbatim @Begin
moc myform.h -o moc_myform.cpp
@End @RawVerbatim

We'll look at a simple Makefile to see the dependencies in practice.
@LD @Code @RawVerbatim @Begin
myapp: moc_myform.o myform.o main.o
        g++ -lqt -o myapp moc_myform.o myform.o main.o

main.o: main.cpp
        g++ -o main.o main.cpp

moc_myform.o: moc_myform.cpp
        g++ -o moc_myform.o moc_myform.cpp

moc_myform.cpp: myform.h
        moc myform.h -o moc_myform.cpp

myform.o: myform.cpp
        g++ -o myform.o myform.cpp

myform.cpp: myform.h myform.ui
        uic myform.ui -i myform.h -o myform.cpp

myform.h: myform.ui
        uic myform.ui -o myform.h
@End @RawVerbatim

Note that you may need to include the full path to the commands
in your Makefile, and under Windows the filenames are
moc.exe @Index{ moc.exe } @File{"moc.exe"} and
uic.exe @Index{ uic.exe } @File{"uic.exe"}.
@LP
In Unix"/"Linux environments the @File{"make"} command may
be able to do more for us, so we should be able to use a simpler
Makefile like this:
@LD @Code @RawVerbatim @Begin
myapp: moc_myform.o myform.o main.o
        g++ -lq -o $@ $^

%.o: %.cpp
        g++ -o $^ $@

moc_%.cpp: %.h
        moc $^ -o $@

myform.cpp: myform.h myform.ui
        uic myform.ui -i myform.h -o myform.cpp

myform.h: myform.ui
        uic myform.ui -o myform.h
@End @RawVerbatim
To see more sophisticated Makefiles simply generate them using
@File{"qmake"} on any of your Qt projects or any of the
examples supplied with Qt.

@End @SubSection
@EndSubSections
@End @Section
@Section
    @Title { Importing Foreign File Formats }
    @Tag { importing.foreign.file.formats }
@Begin
@LP
To import a file in a supported foreign file format click
@Option{File"|"Open}, foreign.file.formats @Index{ Foreign File
Formats } then click the File Type combobox to choose the file type
you wish to load. Click the required file and @QDR will convert and
load the file.

@LP
The filters that @QDR uses to read foreign file formats
are 'works in progress'. You may have different filters available
in your version of @QDR than those described here.
The easiest way to see which filters are available is to invoke
the file open dialog; all your filters are listed in the File
Type combobox.

@BeginSubSections
@SubSection
    @Title { Importing Qt Architect Files }
    @Tag{importing.qt.architect.files}
@Begin
@LP
Qt Architect is a free GUI builder for Qt written by Jeff Harris
foreign.file.formats @RawIndex{ Foreign File Formats }
foreign.file.formats.qt.architect @SubIndex{ Qt Architect }
qt.architect @Index{ Qt Architect } and Klaus Ebner. The dlg @Index{
.dlg } @File{".dlg"} extension is associated with Qt Architect dialog
files. @LP @QDR can read files generated by Qt Architect version 2.1
and above. When given a dlg @Index{ .dlg } @File{".dlg"} file from a
previous version of Qt Architect, @QDR tells you how to convert it to
the file format of version 2.1. (The conversion procedure varies
depending on the version of the dlg @Index{ .dlg } @File{".dlg"}
file.)

@LP
The import filter does a good job of importing dlg @Index{ .dlg }
@File{".dlg"} files; the result is almost identical to what you get in
Qt Architect. However, the @Cpp code that uses the dialogs will
probably need some adaptation.

@LP
There are a few drawbacks to converting Qt Architect files to @QDR's
format due to differences between the two tools; these are listed
below:

@BulletList
@LI{
Layout spacing and margins
@LP
If the dlg @Index{ .dlg } @File{".dlg"} file layouts use the Qt
Architect defaults for layout spacing and margins, @QDR will override
these with its standard defaults. You can change the
"\""layoutSpacing"\"" and "\""layoutMargin"\"" properties manually
afterwards if necessary.}
@LI{
Layout stretches and spacings
@LP
Qt Architect gives access to more features of Qt's layout system than
@QDR, namely stretches and spacings. Qt Designer will attempt to cope
with dlg @Index{ .dlg } @File{".dlg"} files that use these features,
but sometimes the resizing will not be what you want. The solution
typically involves setting the "\""sizePolicy"\"" properties of some
widgets and inserting or deleting spacers.}
@LI{
Mixing managed and unmanaged widgets
@LP
Qt Architect allows a widget to have some child widgets managed by a
layout and other child widgets with fixed positions. When presented
with a dlg @Index{ .dlg } @File{".dlg"} file that uses this facility,
@QDR will silently put the fixed position widgets into the layout.}
@LI{
Pixmaps
@LP
@QDR ignores pixmaps specified in dlg @Index{ .dlg } @File{".dlg"}
files. These have to be restored manually in @QDR.}
@EndList

@End @SubSection
@SubSection
    @Title { Importing Glade Files }
    @Tag{importing.glade.files}
@Begin
@LP
Glade is a free GUI builder for GTK+ and GNOME written by Damon
foreign.file.formats @RawIndex{ Foreign File Formats }
foreign.file.formats.glade @SubIndex{ Glade } glade @Index{ Glade }
Chaplin. The glade @Index{ .glade } @File{".glade"} extension is
associated with Glade files.

@LP
@QDR has been tested with Glade files up to version
0.6.0 and might work with later versions as well.

@LP
Although Glade does not target Qt, the layout system and the
widget set of GTK+ are similar to those of Qt, so the filter
will retain most of the information in the

glade @Index{ .glade } @File{".glade"} file.
@LP
There are some considerations regarding the conversion of Glade
files, as listed below:

@BulletList
@LI{
Ampersands ("&") in labels
@LP
Qt displays an ampersand when a @Class{QLabel}qlabel @Index{ QLabel }
has no buddy. (A buddy is a widget that accepts focus on behalf of a
@Class{QLabel}qlabel @Index{ QLabel }.) Glade allows GtkLabel widgets
with an (underlined) accelerator key but with no buddy. This is an
error since users expect underlined characters to be accelerators. In
this situation, Qt displays the ampersand itself instead of
underlining the accelerator key. You should go over these
@Class{QLabel}qlabel @Index{ QLabel } widgets and set their
@Prop{buddy} property.
}
@LI{
Layout placeholders
@LP
GTK allows a layout position to be occupied by a placeholder. @QDR
converts those placeholders into @Class{QLabel}qlabel @Index{ QLabel
}s whose text is "\""?"\"" in red, so that you can find them and fix
them manually.
}
@LI{
GTK+ or GNOME widget with no Qt equivalent
@LP
Qt has equivalents for most GTK+ widgets, but Glade also supports
GNOME, whose goal is to provide a complete desktop environment.
Because Qt's scope is narrower, when @QDR encounters a widget it
cannot convert, it replaces it with a label that indicates the
problem. For example, a GnomePaperSelector will be replaced by a
@Class{QLabel}qlabel @Index{ QLabel } whose text is
"\""GnomePaperSelector?"\"" in red. If you are porting to KDE, you
might want to use the corresponding KDE widget.
@LP
Other GTK+"/"GNOME widgets are only supported in certain contexts. For
example, the GnomeDruid can be embedded in another widget, whereas the
corresponding @Class{QWizard}qwizard @Index{ QWizard } class cannot.
}
@LI{
Message boxes and other high-level dialogs
@LP
Glade supports editing of GnomeMessageBox, GtkFileSelection,
GtkFontSelectionDialog and others. This is trivially achieved in Qt by
means of a @Class{QMessageBox}qmessagebox @Index{ QMessageBox }
dialog, a @Class{QFileDialog}qfiledialog @Index{ QFileDialog }, a
@Class{QFontDialog}qfontdialog @Index{ QFontDialog }, etc., in @Cpp
code.
}
@LI{
Stand-alone popup menus
@LP
@QDR only supports popup menus inside a @Class{QMainWindow}qmainwindow
@Index{ QMainWindow }. If you need a stand-alone popup menu
(presumably a context menu), you can easily write code that does this
using @Class{QPopupMenu}qpopupmenu @Index{ QPopupMenu }.
}
@LI{
Size policy parameters
@LP
Glade provides size policies in the "\""Place"\"" tab of the property
editor. @QDR does not attempt to make use of the padding, expand,
shrink and fill information, as the Qt defaults are usually good
enough. In a few cases, you might have to set the @Prop{sizePolicy}
property manually to obtain the effect you want.
}
@LI{
GNOME standard icons
@LP
GNOME provides a large set of standard icons. @QDR will ignore
references to these. If you are porting to KDE, you might want to
manually set the standard KDE icons.
}
@LI{
Packer layout
@LP
GTK+ provides a class called GtkPacker that provides for exotic
layouts; Qt provides no @Class{QPackerLayout}qpackerlayout @Index{
QPackerLayout } and never will. @QDR will treat packer layouts as if
they were vertical layouts and you will probably have to change them
to whatever combination of layouts that produces the right effect.
}
@LI{
Incorrectly-justified text after conversion
@LP
The @Prop{hAlign} property is sometimes set wrongly, in which
case you have to change it manually. It is caused by a quirk
in Glade.
}
@EndList
@End @SubSection
@EndSubSections
@End @Section
@EndSections
@End @Chapter
