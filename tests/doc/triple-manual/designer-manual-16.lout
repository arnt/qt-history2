@Chapter
    @Title { Reference: The .ui File Format }
    @Tag { reference.the.ui.file.format }
@Begin
@LP
@QDR stores forms in @File{".ui"} files. These
files use an XML format to represent form elements and their
characteristics. This document provides an overview of the XML
format used, and should provide enough information for developers
to write their own @File{".ui"} parsers so that they can
read and modify @File{".ui"} files programatically.

@LP
One way to parse a @File{".ui"} file is to use Qt and the
@Class{QDomDocument}qdomdocument @Index{ QDomDocument } class; this is how @QDR does it:
see the @File{"uilib/qwidgetfactory.h"} and @File{"uilib/qwidgetfactory.cpp"}
source files. For information on dynamically loading and running
@File{".ui"} files see @NamePageRef{loading.and.executing.a.dynamic.dialog}.

@LP
The doctype of a @File{".ui"} file is simply "\""UI"\"", so the
doctype tag is:

@LD @Code @RawVerbatim @Begin
<!DOCTYPE UI>
@End @RawVerbatim
@LP
The root element is a "\""UI"\"", which encloses the entire contents:

@LD @Code @RawVerbatim @Begin
<UI version="3.1" stdsetdef="1">
...
</UI>
@End @RawVerbatim
@LP
Within the UI entity, there may one or zero of the following
element types:

@VeryWideTaggedList
@TagItem{ actions }{ actions, for @Class{QMainWindow}qmainwindow @Index{ QMainWindow } forms }
@TagItem{ author }{ the form's author }
@TagItem{ class }{ the form's class name }
@TagItem{ comment }{ comments, e.g. copyright notices }
@TagItem{ connections }{ signal"/"slot connections }
@TagItem{ customwidgets }{ custom widgets (old-style) }
@TagItem{ exportmacro }{ Windows-specific }
@TagItem{ forwards }{ forward declarations }
@TagItem{ functions }{ function declarations }
@TagItem{ images }{ embedded images: only for @File{".ui"} files than include embedded images; images are normally stored in a separate @File{"images"} directory }
@TagItem{ includes }{ include files }
@TagItem{ layoutdefaults }{ default values for layout attributes }
@TagItem{ layoutfunctions }{ dynamic default values for layout attributes }
@TagItem{ menubar }{ menu bar, for @Class{QMainWindow}qmainwindow @Index{ QMainWindow } forms }
@TagItem{ pixmapfunction }{ the name of the function to use for retrieving pixmaps if neither embedded nor external pixmaps are being used }
@TagItem{ pixmapinproject }{ an element whose presence ndicates that the pixmaps are handled by the @File{".pro"} file }
@TagItem{ signals }{ signal declarations }
@TagItem{ slots }{ slot declarations }
@TagItem{ tabstops }{ the form's tab order }
@TagItem{ toolbars }{ toolbars, for @Class{QMainWindow}qmainwindow @Index{ QMainWindow } forms }
@TagItem{ variables }{ class variables }
@TagItem{ widget }{ the form itself; this element may contain other elements, including other @Code{widget} elements }
@TagItem{ forward }{ Qt 3.x beta backwards compatibility }
@TagItem{ include }{ Qt 2.x backwards compatibility }
@TagItem{ variable }{ Qt 3.x beta backwards compatibility }
@EndList
@LP
The ordering of elements is arbitrary, although it is common
for the class element to be first.

@BeginSections
@Section
    @Title { UI Elements }
    @Tag { ui.elements }
@Begin
@BeginSubSections
@SubSection
    @Title {  actions}
    @Tag{actions}
@Begin
@LP
This element is used to store the form's actions. It only occurs
in @Class{QMainWindow}qmainwindow @Index{ QMainWindow } forms.

@LP
The @Code{actions} element contains one or more @Code{action}
elements. Each @Code{action} element contains one or more
properties. Each property has a @Code{name} attribute,
and a single value which is contained within a datatype element.

@LD @Code @RawVerbatim @Begin
<actions>
    <action>
        <property name="name">
            <cstring>fileNewAction</cstring>
        </property>
        <property name="iconSet">
            <iconset>filenew</iconset>
        </property>
        <property name="text">
            <string>New</string>
        </property>
        <property name="menuText">
            <string>&amp;New</string>
        </property>
@End @RawVerbatim
@LD @Code @RawVerbatim @Begin
        <property name="accel">
            <number>4194382</number>
        </property>
    </action>
    ...
</actions>
@End @RawVerbatim
@End @SubSection
@SubSection
    @Title {author  }
    @Tag{author}
@Begin
@LP
This element is used to store the author's name as a simple string.

@LD @Code @RawVerbatim @Begin
<author>Barney Rubble</author>
@End @RawVerbatim
@End @SubSection
@SubSection
    @Title {class  }
    @Tag{class}
@Begin
@LP
This element is used to store the form's class name as a simple
string.

@LD @Code @RawVerbatim @Begin
<class>InsuranceForm</class>
@End @RawVerbatim
@End @SubSection
@SubSection
    @Title {comment  }
    @Tag{comment}
@Begin
@LP
This element is used to store comments, for example, copyright
notices, as a simple string.

@LD @Code @RawVerbatim @Begin
<comment>*********************************************************************
** Copyright (C) 2002 Trolltech AS.  All rights reserved.
**
** This file is part of Qt Designer.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
*********************************************************************</comment>
@End @RawVerbatim
@End @SubSection
@SubSection
    @Title {connections  }
    @Tag{connections}
@Begin
@LP
This element is used to record the signals and slots connections
in the form.

@LP
The @Code{connections} element contains one or more 
@Code{connection} elements and one or more @Code{slot}
elements. Each @Code{connection} element identifies the
signaling object and its signal, and the receiving object and
its slot.

@LD @Code @RawVerbatim @Begin
<connections>
    ...
    <connection language="C++">
        <sender>alignActionGroup</sender>
        <signal>selected(QAction*)</signal>
        <receiver>EditorForm</receiver>
        <slot>changeAlignment(QAction*)</slot>
    </connection>
    ...
</connections>
@End @RawVerbatim
qaction @Index{ QAction }
@End @SubSection
@SubSection
    @Title {customwidgets  }
    @Tag{customwidgets}
@Begin
@LP
@QDR can operate with custom widgets. A custom widget
is represented in a @File{".ui"} file using the @Code{<customwidget>}
element.

@LP
Note that these are the 'old-style' custom widgets that show
up on the form as grey rectangles. Use plugins to seamlessly
integrate your custom widgets into @QDR -- see 
@NamePageRef{creating.custom.widgets.with.plugins}.

@LP
Each custom widget has a class name and a header file. They also
have a size hint and size policy. A pixmap can be specified;
this is displayed on a @QDR toolbar button which the
user can use to create an instance of the custom widget. Custom
widgets usually emit signals, and these are listed. The name
and type of any properties that the widget has are also included.

@LD @Code @RawVerbatim @Begin
<customwidgets>
    <customwidget>
        <class>StyledButton</class>
        <header location="local">styledbutton.h</header>
        <sizehint>
            <width>40</width>
            <height>25</height>
        </sizehint>
        <container>0</container>
        <sizepolicy>
            <hordata>5</hordata>
            <verdata>5</verdata>
        </sizepolicy>
        <pixmap>image0</pixmap>
        <signal>clicked()</signal>
        <signal>changed()</signal>
        <property type="Color">color</property>
@End @RawVerbatim
@LD @Code @RawVerbatim @Begin
        <property type="Pixmap">pixmap</property>
        <property type="Bool">scale</property>
    </customwidget>
</customwidgets>
@End @RawVerbatim
@End @SubSection
@SubSection
    @Title {exportmacro  }
    @Tag{exportmacro}
@Begin
@LP
This tag is only relevant to Windows users.

@LP
If you have a class that requires some Windows-specific export
macro, e.g. for classes in a DLL that need to be declared like
this: @Code{class} @Code{win_specific_declaration_goes_here} @Code{Class},
you can use the @Code{<exportmacro>} tag. (In standard
Qt we use the @Code{Q_EXPORT} macro, e.g. @Code{class Q_EXPORT QWidget}.) If you use this tag you must also:

@BulletList
@LI{
include the file which contains the macro definition;
}
@LI{
add the export macro to the form -- this is achieved by entering
the macro's name in the 'export macro' sub-property of the form's
name property.
}
@EndList
@LP
Following these steps will ensure that uic will create the correct
@Code{class YOUR_MACRO Form} declarations.

@LD @Code @RawVerbatim @Begin
<exportmacro>EDITOR_EXPORT</exportmacro>
@End @RawVerbatim
@End @SubSection
@SubSection
    @Title {forwards  }
    @Tag{forwards}
@Begin
@LP
It is sometimes necessary to forward declare classes, particularly
if code is being written in @File{".ui.h"} files within
@QDR. Each forward declaration is listed as it should
appear in the generated @Cpp code.

@LD @Code @RawVerbatim @Begin
<forwards>
    <forward>class QStringList;</forward>
</forwards>
@End @RawVerbatim
qstringlist @Index{ QStringList }
@End @SubSection
@SubSection
    @Title {functions  }
    @Tag{functions}
@Begin
@LP
The @Code{functions} element contains a list of functions.
Functions are standard @Cpp functions. It is possible to specify
various attributes to create a function's signature, for example:

@BulletList
@LI{
access: @Code{private}, @Code{protected} or 
@Code{public}. Default: @Code{public}
}
@LI{
returnType: the return datatype of the function. Default: 
@Code{void}
}
@LI{
specifier: @Code{non virtual}, @Code{virtual} or
@Code{pure virtual}. Default: @Code{virtual}
}
@LI{
language: specifies the programming language. Default: @Code{@Cpp}
}
@EndList
@LD @Code @RawVerbatim @Begin
<functions>
    <function access="private" specifier="non virtual">isValid()</function>
    <function access="public" returnType="QString">getMessage()</function>
</functions>
@End @RawVerbatim
qstring @Index{ QString }
@End @SubSection
@SubSection
    @Title {images  }
    @Tag{images}
@Begin
@LP
Images are normally stored in their own files and associated
with forms using project files. This has the advantage that images
can be shared across any number of forms in a project, and between
projects.

@LP
In some cases it may be desireable to store image data directly
in a form, and the @Code{<image>} tag allows for this.

@LP
It is possible to store images in both PNG and XPM formats, although
in practice only XPM is recommended because of bugs in some PNG
libraries. See the @Code{saveImageData} function in 
@File{resource.cpp} to see how the image data is encoded.

@LD @Code @RawVerbatim @Begin
<images>
    <image name="image0">
        <data format="XPM.GZ" length="409">789cd3d7528808f...092c14eca</data>
    </image>
</images>
@End @RawVerbatim
@End @SubSection
@SubSection
    @Title {includes  }
    @Tag{includes}
@Begin
@LP
It is sometimes necessary to @Code{"#"include} header
files in a @File{".ui"} file. Header files may be 'local',
i.e. relative to the project's directory, or 'global', i.e. part
of Qt or the compilers standard libraries. Header files are declared
in the implementation wherever possible, although sometimes it
is necessary to declare them in the declaration (header) file.

@LP
@QDR automatically adds @Code{<include>} tags
for a @File{".ui"}'s @File{".ui.h"} file.

@LD @Code @RawVerbatim @Begin
<includes>
    <include location="local"
        impldecl="in implementation">pixmapcollection.h</include>
    <include location="local"
        impldecl="in implementation">pixmapchooser.h</include>
    <include location="local" impldecl="in implementation">project.h</include>
    <include location="global" impldecl="in implementation">qfileinfo.h</include>
    <include location="global" impldecl="in implementation">qimage.h</include>
    <include location="global" impldecl="in declaration">qpixmap.h</include>
    <include location="local"
        impldecl="in implementation">pixmapcollectioneditor.ui.h</include>
</includes>
@End @RawVerbatim
@End @SubSection
@SubSection
    @Title {layoutdefaults  }
    @Tag{layoutdefaults}
@Begin
@LP
Every form has a default spacing and margin size. These can be
overridden on a case-by-case basis.

@LD @Code @RawVerbatim @Begin
<layoutdefaults spacing="6" margin="11"/>
@End @RawVerbatim

@End @SubSection
@SubSection
    @Title {layoutfunctions  }
    @Tag{layoutfunctions}
@Begin
@LP
Sometimes the spacing and margin values should be determined
dynamically, e.g. to provide a common look in a windowmanager.

@LD @Code @RawVerbatim @Begin
<layoutfunctions spacing="LayoutClass::spacing" margin="LayoutClass::margin"/>
@End @RawVerbatim
@LP
The rules for determining @Code{margin} and @Code{spacing}
values are these:

@BulletList
@LI{
If an integer value is specified for @Code{margin} or
@Code{spacing} then the value is used.
}
@LI{
If no integer value is specified and a layout function is specified
then the function is used.
}
@LI{
If no integer value or function is specified then the default
value from @Code{layoutdefaults} is used.
}
@EndList
@End @SubSection
@SubSection
    @Title {menubar  }
    @Tag{menubar}
@Begin
@LP
Applications that use @Class{QMainWindow}qmainwindow @Index{ QMainWindow } often have a menubar. The
menubar has a name property and one or more popup menu items.
Each menu item has one or more actions and optionally separators.

@LD @Code @RawVerbatim @Begin
<menubar>
    <property name="name">
        <cstring>menubar</cstring>
    </property>
    <item text="&amp;File" name="PopupMenu">
        <action name="fileSaveAction"/>
        <separator/>
        <action name="fileExitAction"/>
    </item>
@End @RawVerbatim
@LD @Code @RawVerbatim @Begin
    <item text="&amp;Help" name="PopupMenu_2">
        <action name="helpAboutAction"/>
        <action name="helpAboutQtAction"/>
    </item>
</menubar>
@End @RawVerbatim
@End @SubSection
@SubSection
    @Title {pixmapfunction  }
    @Tag{pixmapfunction}
@Begin
@LP
Images are normally included by listing their filenames in project
files. Images can also be included inline using the images tag.
Another way of dealing with images is to specify a function name.
This function will be called, with the name (or 'key') of the
relevant image, and is responsible for loading the appropriate
image. To specify such a function the 
@Code{<pixmapfunction>} tag is used.
@LD @Code @RawVerbatim @Begin
<pixmapfunction>splashScreen</pixmapfunction>
@End @RawVerbatim
@End @SubSection
@SubSection
    @Title {pixmapinproject  }
    @Tag{pixmapinproject}
@Begin
@LP
Most applications store their images as separate files listed
in the application's project file. This can be signified by including
the @Code{<pixmapinproject>} tag. 
@LD @Code @RawVerbatim @Begin
<pixmapinproject/>
@End @RawVerbatim

@End @SubSection
@SubSection
    @Title {signals  }
    @Tag{signals}
@Begin
@LP
All the signals are listed Within a @Code{<signals>} tag.

@LD @Code @RawVerbatim @Begin
<signals>
    <signal>somethingChanged()</signal>
</signals>
@End @RawVerbatim
@End @SubSection
@SubSection
    @Title {slots  }
    @Tag{slots}
@Begin
@LP
The @Code{slots} element contains a list of slots. Each
@Code{slot} element provides a slot's prototype.

@LD @Code @RawVerbatim @Begin
<slots>
    <slot access="public" specifier="virtual" language="C++" 
        returnType="void">changeAlignment(QAction* align)</slot>
</slots>
@End @RawVerbatim
qaction @Index{ QAction }
@LP
For available attributes see @NamePageRef{functions}.

@End @SubSection
@SubSection
    @Title {tabstops  }
    @Tag{tabstops}
@Begin
@LP
Tabstops indicate the widgets that get the focus as the user
tabs through the form. The @Code{<tabstops>} tag contains
a list of tabstops, in order, each of which holds the name of
a widget.

@LD @Code @RawVerbatim @Begin
<tabstops>
    <tabstop>templateView</tabstop>
    <tabstop>helpButton</tabstop>
    <tabstop>buttonOk</tabstop>
    <tabstop>buttonCancel</tabstop>
</tabstops>
@End @RawVerbatim
@End @SubSection
@SubSection
    @Title {toolbars  }
    @Tag{toolbars}
@Begin
@LP
Forms that have toolbars (dock windows) use the @Code{<toolbars>}
tag to hold the details. These forms are normally @Class{QMainWindow}qmainwindow @Index{ QMainWindow }s
(or subclasses). Each toolbar has a dock attribute which identifies
which dock window the toolbar initially belongs to. They also
have both name and label properties. Each toolbar button is represented
by an action. Toolbars can also hold other widgets, in which
case the @Code{<toolbar>} tag includes appropriate 
@Code{<widget>} tags which give the class, name and any non-default
property values for the relevant widget.

@LD @Code @RawVerbatim @Begin
<toolbars>
    <toolbar dock="2">
        <property name="name">
            <cstring>toolBar</cstring>
        </property>
        <property name="label">
            <string>Tools</string>
        </property>
        <action name="fileNewAction"/>
        <action name="fileOpenAction"/>
        <action name="fileSaveAction"/>
        <separator/>
        <action name="editUndoAction"/>
        <action name="editRedoAction"/>
        <action name="editCutAction"/>
        <action name="editCopyAction"/>
        <action name="editPasteAction"/>
    </toolbar>
@End @RawVerbatim
@LD @Code @RawVerbatim @Begin
    <toolbar dock="2">
        <property name="name">
            <cstring>Toolbar</cstring>
        </property>
        <property name="label">
            <string>Toolbar</string>
        </property>
        <action name="leftAlignAction"/>
        <action name="centerAlignAction"/>
        <action name="rightAlignAction"/>
        <separator/>
        <action name="boldAction"/>
        <action name="italicAction"/>
        <action name="underlineAction"/>
        <separator/>
        <widget class="QComboBox">
            <property name="name">
                <cstring>fontComboBox</cstring>
            </property>
        </widget>
        <widget class="QSpinBox">
            <property name="name">
                <cstring>SpinBox2</cstring>
            </property>
            <property name="minValue">
                <number>6</number>
            </property>
            <property name="value">
                <number>10</number>
            </property>
        </widget>
    </toolbar>
</toolbars>
@End @RawVerbatim
qcombobox @Index{ QComboBox }
qspinbox @Index{ QSpinBox }
@End @SubSection
@SubSection
    @Title {variables  }
    @Tag{variables}
@Begin
@LP
Module variables are held in the @Code{<variables>} tag.
Variable type names often include < and >, which must be stored
as entities. It is also possible to specify the access type -
either @Code{public}, @Code{protected} or @Code{private}.
Default is @Code{protected}.

@LD @Code @RawVerbatim @Begin
<variables>
    <variable access="private">SettingsDialog * settings;</variable>
    <variable>QMap&lt;int, QString&gt; bookmarks;</variable>
    <variable>HelpWindow *browser;</variable>
    <variable>HelpDialog *helpDock;</variable>
    <variable>QGuardedPtr&lt;FindDialog&gt; findDialog;</variable>
    <variable>static QPtrList&lt;MainWindow&gt; *windows;</variable>
</variables>
@End @RawVerbatim
qmap @Index{ QMap }
qstring @Index{ QString }
qguardedptr @Index{ QGuardedPtr }
qptrlist @Index{ QPtrList }
@End @SubSection
@SubSection
    @Title {widget  }
    @Tag{widget}
@Begin
@LP
Widgets are used at multiple levels within a @Code{.ui}
file. The whole form itself is a widget, and it contains other
widgets, usually within the context of layouts such as hboxes,
vboxes and grids.

@LP
Below is an example of a complete @File{.ui} file. The
form itself is a @Class{QWidget}qwidget @Index{ QWidget } with various non-default properties
set. This widget contains a single hbox, which also has some
non-default properties, and which contains a single @Class{QTextBrowser}qtextbrowser @Index{ QTextBrowser }
widget.

@LD @Code @RawVerbatim @Begin
<!DOCTYPE UI><UI version="3.1" stdsetdef="1">
<class>WinIntroPage</class>
<widget class="QWidget">
    <property name="name">
        <cstring>WinIntroPage</cstring>
    </property>
    <property name="geometry">
        <rect>
            <x>0</x>
            <y>0</y>
            <width>387</width>
            <height>228</height>
        </rect>
    </property>
    <property name="caption">
        <string>Form1</string>
    </property>
    <hbox>
        <property name="name">
            <cstring>unnamed</cstring>
        </property>
        <property name="margin">
            <number>11</number>
        </property>
        <property name="spacing">
            <number>6</number>
        </property>
@End @RawVerbatim
@LD @Code @RawVerbatim @Begin
        <widget class="QTextBrowser">
            <property name="name">
                <cstring>TextBrowser1</cstring>
            </property>
            <property name="text">
                <string>This program installs Qt.</string>
            </property>
        </widget>
    </hbox>
</widget>
<layoutdefaults spacing="6" margin="11"/>
</UI>
@End @RawVerbatim
qwidget @Index{ QWidget }
qtextbrowser @Index{ QTextBrowser }
@End @SubSection
@SubSection
    @Title {forward  }
    @Tag{forward}
@Begin
@LP
@I{ This tag is included for Qt 3.x beta backwards compatibility,
and should not be used. Use forwards instead. }

@End @SubSection
@SubSection
    @Title {include  }
    @Tag{include}
@Begin
@LP
@I{ This tag is included for Qt 2.x beta backwards compatibility,
and should not be used. Use includes instead. }

@End @SubSection
@SubSection
    @Title {variable  }
    @Tag{variable}
@Begin
@LP
@I{ This tag is included for Qt 3.x beta backwards compatibility,
and should not be used. Use variables instead. }

@End @SubSection
@EndSubSections
@End @Section
@Section
    @Title { Datatype Elements }
    @Tag { datatype.elements }
@Begin
@BulletList
@LI{
@Code{bool} - a boolean value (0 or 1), e.g. @Code{"<bool>1</bool>"}
}
@LI{
@Code{color} - a color, e.g.
@Code{"<color><red>192</red><green>0</green><blue>255</blue></color>"}
}
@LI{
@Code{cstring} - a C string value (8-bit), e.g.
@Code{"<cstring>Some text</cstring>"}
}
@LI{
@Code{cursor} - an integer which indicates the cursor
type, e.g. @Code{"<cursor>4</cursor>"}. The valid integers
for the cursor type are:

@TaggedList
@TagItem{
0 }{ ArrowCursor
}
@TagItem{
1 }{ UpArrowCursor
}
@TagItem{
2 }{ CrossCursor
}
@TagItem{
3 }{ WaitCursor
}
@TagItem{
4 }{ IbeamCursor
}
@TagItem{
5 }{ SizeVerCursor
}
@TagItem{
6 }{ SizeHorCursor
}
@TagItem{
7 }{ SizeBDiagCursor
}
@TagItem{
8 }{ SizeFDiagCursor
}
@TagItem{
9 }{ SizeAllCursor
}
@TagItem{
10 }{ BlankCursor
}
@TagItem{
11 }{ SplitVCursor
}
@TagItem{
12 }{ SplitHCursor
}
@TagItem{
13 }{ PointingHandCursor
}
@TagItem{
14 }{ ForbiddenCursor
}
@EndList}
@LI{
@Code{enum} - an enum name, e.g. @Code{"<enum>StrongFocus</enum>"}
}
@LI{
@Code{font} - a font description, e.g.

@LD @Code @RawVerbatim @Begin
<font>
    <family>Helvetica</family>
    <pointsize>16</pointsize>
    <weight>50</weight>
    <italic>1</italic>
    <underline>0</underline>
    <strikeout>0</strikeout>
</font>
@End @RawVerbatim}
@LI{
@Code{iconset} - an iconset (see @Code{pixmap}),
e.g. @Code{"<iconset>filenew</iconset>"}
}
@LI{
@Code{number} - an integer with an optional sign, e.g.
@Code{"<number>947</number>"}
}
@LI{
@Code{palette} - a palette
}
@LI{
@Code{pixmap} - a pixmap, normally the name or "\""key"\"" of
the pixmap; the name is used if pixmaps are stored in the project,
the key is used if a user defined function is used to access
the pixmap. It is also possible for pixmaps to be included inline.
Example: 
@LD @Code @RawVerbatim @Begin
<pixmap>chair</pixmap>
@End @RawVerbatim
}
@LI{
@Code{point} - a point, e.g. 
@LD @Code @RawVerbatim @Begin
<point><x>15</x><y>95</y></point>
@End @RawVerbatim
}
@LI{
@Code{rect} - a rectangle, e.g.

@LD @Code @RawVerbatim @Begin
<rect>
    <x>20</x>
    <y>35</y>
    <width>225</width>
    <height>45</height>
</rect>
@End @RawVerbatim}
@LI{
@Code{set} - a list of names separated by "|"'s, e.g.
@Code{"<set>AlignLeft|AlignTop</set>"}
}
@LI{
@Code{size} - a size, e.g.
@Code{"<size><width>150</width><height>105</height></size>"}
}
@LI{
@Code{sizepolicy} - an integer which indicates the size
type, e.g. @Code{"<hsizetype>5</hsizetype>"}
@Code{<"vsizetype>4</vsizetype>"}.
The valid integers for the size type are:

@TaggedList
@TagItem{
0 }{ Fixed
}
@TagItem{
1 }{ Minimum
}
@TagItem{
3 }{ MinimumExpanding
}
@TagItem{
4 }{ Maximum
}
@TagItem{
5 }{ Preferred
}
@TagItem{
7 }{ Expanding
}
@EndList}
@LI{
@Code{string} - a Unicode string value (in UTF8), e.g.
@Code{"<string>Some text</string>"}
}
@EndList
@End @Section
@Section
    @Title { Complex Datatype Elements }
    @Tag{complex.datatype.elements}
@Begin
@BeginSubSections
@SubSection
    @Title { palette }
    @Tag{ palette }
@Begin
@LP
This element holds colors for user interface elements for each
color group. For example:

@LD @Code @RawVerbatim @Begin
<palette>
  <active>
    <color> ... Foreground    ... </color>
    <color> ... Button        ... </color>
    <color> ... Light         ... </color>
    <color> ... Midlight      ... </color>
    <color> ... Dark          ... </color>
    <color> ... Mid           ... </color>
    <color> ... Text          ... </color>
    <color> ... BrightText    ... </color>
    <color> ... ButtonText    ... </color>
    <color> ... Base          ... </color>
    <color> ... Background    ... </color>
    <color> ... Shadow        ... </color>
    <color> ... Highlight     ... </color>
    <color> ... HighlightText ... </color>
  </active>
@End @RawVerbatim
@LD @Code @RawVerbatim @Begin
  <disabled>
    <color><red>128</red><green>128</green><blue>128</blue></color>
    ...
    <color><red>255</red><green>255</green><blue>255</blue></color>
  </disabled>
  <inactive>
    <color><red>0</red><green>0</green><blue>0</blue></color>
    ...
    <color><red>255</red><green>255</green><blue>255</blue></color>
  </inactive>
</palette>
@End @RawVerbatim
@LP
See color for the format of the @Code{<color>} element.

@End @SubSection
@EndSubSections
@End @Section
@EndSections
@End @Chapter
