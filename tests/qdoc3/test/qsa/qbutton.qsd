/*!
    \quickclass QButton

    \bold{This is an abstract base class that you cannot instantiate.}

    To create a button, use one of the concrete subclasses, e.g.
    QPushButton, QCheckBox, QRadioButton or QToolButton.

    The QButton class implements an \e abstract button, and lets
    subclasses specify how to reply to user actions and how to draw
    the button.

    QButton provides both push and toggle buttons. The QRadioButton
    and QCheckBox classes provide only toggle buttons; QPushButton and
    QToolButton provide both toggle and push buttons.

    Any button can have either a text or pixmap label. The text or
    pixmap is manipulated as necessary to create the "disabled"
    appearance when the button is disabled.

    QButton provides most of the states used for buttons:
    \list
    \i \c down indicates whether the button is \e pressed down.
    \i \c on indicates whether the button is \e on.
       Only toggle buttons can be switched on and off  (see below).
    \i \c enabled indicates whether the button can be pressed by the
       user.
    \i \c autoRepeat sets whether the button will auto-repeat
       if the user holds it down.
    \i \c toggleButton sets whether the button is a toggle
       button or not.
    \endlist

    The difference between \c down and \c on is as follows: When the
    user clicks a toggle button to toggle it on, the button is first
    \e pressed and then released into the \e on state. When the user
    clicks it again (to toggle it off), the button moves first to the
    \e pressed state, then to the \e off state (\c on and \c down
    are both false).
\omit
    Default buttons (as used in many dialogs) are provided by
    QPushButton::setDefault() and QPushButton::setAutoDefault().
\endomit
    QButton provides five signals:
    \list 1
    \i pressed() is emitted when the left mouse button is pressed while
       the mouse cursor is inside the button.
    \i released() is emitted when the left mouse button is released.
    \i clicked() is emitted when the button is first pressed and then
       released when the accelerator key is typed, or when
       animateClick() is called.
    \i toggled(bool) is emitted when the state of a toggle button changes.
    \i stateChanged(int) is emitted when the state of a tristate
       toggle button changes.
    \endlist

    If the button is a text button with an ampersand (\&) in its text,
    QButton creates an automatic accelerator key. This code creates a
    push button labelled "Ro\underline{c}k \& Roll" (where the c is
    underlined). The button gets an automatic accelerator key, Alt+C:

    \code
	var button = new QPushButton( "Ro&ck && Roll", this );
    \endcode

    In this example, when the user presses Alt+C the button will call
    animateClick().

    You can also set a custom accelerator using the \c accel
    property. This is useful mostly for pixmap buttons because they
    have no automatic accelerator.

    \code
	button.pixmap = new QPixmap("print.png");
	button.accel = Qt.ALT+Qt.Key_F7;
    \endcode

    All of the buttons provided by Qt (\l QPushButton, \l QToolButton,
    \l QCheckBox and \l QRadioButton) can display both text and
    pixmaps.

    \sa QButtonGroup

*/
