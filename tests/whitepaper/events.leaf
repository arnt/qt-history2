\chapter Events

\quote
Qt's events perform the same role as messages on Windows, providing
low-level communication, but are platform independent. Programmers can
handle events at different levels of granularity to suit the
situation.
\endquote

  \index messages

 + five levels for more flexibility: convenient...powerful
### Jasmin: explain the above please
 + equivalent to messages on Windows

\section1 Event Creation

  \index QEvent
  \index QObject
  \index events

In Qt, an event is an object that inherits \Class QEvent. Events are
delivered to \Class QObject objects so that they can respond to them.

  \index window system
  \index key presses
  \index mouse clicks
  \index resizing widgets

Most events are generated by the window system and inform widgets,
for example, that a key was pressed, that a mouse button was clicked
or that the application window was resized. It is also possible to
send simulated events to objects programmatically. There are over
fifty kinds of event, of which the most interesting are \c
MouseButtonPress, \c MouseButtonRelease, \c MouseButtonDblClick, \c
KeyPress, \c KeyRelease, \c Paint, \c Resize and \c Close. Developers
can add their own event types which behave like the built-in types.

Knowing that a key was pressed or that a mouse button was released is
usually not enough. The receiver also needs to know, for example,
which key was pressed, which button was released or where the mouse
was located. This additional information is stored in \Class QEvent
subclasses such as \Class QMouseEvent, \Class QKeyEvent, \Class
QPaintEvent, \Class QResizeEvent and \Class QCloseEvent.

\section1 Event Delivery

Qt delivers events by calling the virtual function \Func
QObject::event(). For convenience, \Func QWidget::event() forwards
the most common types of event to dedicated handlers, e.g. \Func
QWidget::mouseReleaseEvent(), \Func QWidget::keyPressEvent(), etc.
Developers can easily reimplement these handlers when writing their
own widgets or when specializing existing widgets.

  \index flicker
  \index painting

Some events are sent immediately, while others are queued and are
dispatched when control returns to the Qt kernel. For example, paint
events are queued, and multiple paint events in the queue are
compressed into a single event to minimize flicker and maximize
speed.

  \index filtering events
  \index monitoring events

Often an object needs to look at another object's events, e.g. to
respond to them or to block them. This is achieved by having a
monitoring object call \Func QObject::installEventFilter() on the
object that it will monitor. The monitor's \Func
QObject::eventFilter() virtual function will be called with each
event that is destined for the monitored object before the monitored
object receives the event.

  \index QApplication

It's also possible to filter all the application's events by
installing a filter on \c qApp, the unique \Class QApplication
instance. Such filters are called before any widget-specific filters.
It is even possible to reimplement \Func QApplication::notify(), the
event dispatcher, for complete control.

\ONLINES
\Online eventsandfilters.html
\Online qapplication.html#notify
\ENDONLINES
