\chapter Events

\quote
Application objects receive system messages as Qt events.
Applications can monitor, filter and respond to events at different
levels of granularity.
\endquote

  \index Event
  \index Messaging
  \index QEvent
  \index QObject

In Qt, an event is an object that inherits \Class QEvent. Events are
delivered to \Class QObject objects so that they can respond to them.
Programmers can monitor and filter events at the application level
and at the object level.

\section1 Event Creation

  \index Key press
  \index Mouse click
  \index Resizing
  \index Wheel mouse

Most events are generated by the window system and inform widgets,
for example, that a key was pressed, that a mouse button was clicked
or that the application window was resized. It is also possible to
send simulated events to objects programmatically. There are over
fifty types of event, of which the most commonly used are \c
MouseButtonPress, \c MouseButtonRelease, \c MouseButtonDblClick, \c
Wheel, \c KeyPress, \c KeyRelease, \c Paint, \c Resize and \c Close.
Developers can add their own event types that behave like the
built-in types.

  \index QCloseEvent
  \index QKeyEvent
  \index QMouseEvent
  \index QPaintEvent
  \index QResizeEvent

It is usually insufficient merely to know that a key was pressed or
that a mouse button was released. The receiver also needs to know,
for example, which key was pressed, which button was released and
where the mouse was located. This additional information is available
from \Class QEvent subclasses, such as \Class QMouseEvent, \Class
QKeyEvent, \Class QPaintEvent, \Class QResizeEvent and \Class
QCloseEvent.

\section1 Event Delivery

Qt delivers events by calling the virtual function \Func
QObject::event(). For convenience, \Func QWidget::event() forwards
the most common types of event to dedicated handlers, e.g. \Func
QWidget::mouseReleaseEvent(), \Func QWidget::keyPressEvent(), etc.
Developers can easily reimplement these handlers when writing their
own widgets or when specializing existing widgets.

  \index Flicker
  \index Painting

Some events are sent immediately, while others are queued, ready to
be dispatched when control returns to the Qt kernel. Qt uses queueing
to optimize certain types of events. For example, multiple paint
events are compressed into a single event to minimize flicker and
maximize speed.

Often an object needs to look at another object's events, e.g. to
respond to them or to block them. This is achieved by having a
monitoring object call \Func QObject::installEventFilter() on the
object that it will monitor. The monitor's \Func
QObject::eventFilter() virtual function will be called with each
event that is destined for the monitored object before the monitored
object receives the event.

  \index QApplication

It's also possible to filter all the application's events by
installing a filter on \c qApp, the unique \Class QApplication
instance. Such filters are called before any widget-specific filters.
It is even possible to reimplement \Func QApplication::notify(), the
event dispatcher, for complete control.

\ONLINES
\Online eventsandfilters.html
\Online qapplication.html#notify
\ENDONLINES
