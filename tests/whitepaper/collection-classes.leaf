\chapter Collection Classes

\quote
Collection classes are used to store groups of items in memory. Qt
provides a set of classes that are compatible with the Standard
Template Library (STL), and that work regardless of whether the
compiler supports STL or not.
\endquote

  \index Collection class
  \index Container
  \index STL

Applications often need to manage items in memory, for example,
groups of images, widgets or custom objects. Many C++ compilers
support the STL, which provides ready-made data structures for storing
items. Qt provides lists, stacks, queues and dictionaries with
STL-syntax. Qt's collection classes work with both STL and non-STL
compilers.

  \index Iterator
  \index Template

Qt's rich set of portable collection classes ('containers')
and associated iterators are heavily used internally, and are
provided as part of the Qt API. Qt's containers are optimized for
speed and memory efficiency using two techniques, 'private
classes' and 'implicit sharing'. Programmers can also use STL
containers on the platforms that support them, at the cost of losing
Qt's optimizations.

  \index Bloat problem
  \index Code bloat problem
  \index Private class

Template classes usually increase the size of executables
dramatically, because the compiler generates essentially the same
code for each specialized type. Qt's template collection classes
reduce code bloat because they are a thin layer over non-template
private classes.

\section1 Value-based Collections

  \index Algorithm
  \index List
  \index Map
  \index QMap
  \index qCopy()
  \index qFind()
  \index qHeapSort()
  \index QStringList
  \index QTL
  \index QValueList
  \index QValueStack
  \index QValueVector
  \index Stack
  \index Value-based collection
  \index Vector

Qt provides five value-based collection classes: \Class
QMap\<Key,T\>, \Class QValueList\<T\>, \Class QValueStack\<T\>,
\Class QValueVector\<T\> and \Class QStringList. They have an
interface very similar to the STL containers and are fully compatible
with the STL algorithms. Qt provides some STL-equivalent algorithms:
\Func qCopy(), \Func qFind(), \Func qHeapSort(), etc. On platforms
with STL support, Qt provides automatic conversion operators between
STL and Qt containers.

  \index Copy on write
  \index Implicit sharing
  \index Reference counting
  \index Sharing

Qt's value-based collection classes are implicitly shared, also
called 'copy on write'. Copies of instances of these classes share
the same data in memory. The data sharing is handled automatically;
if the application modifies the contents of one of the copied
objects, a deep copy of the data is made so that the other objects
are left unchanged. When an object is copied, only a pointer is
passed and a reference count incremented, which is much faster than
actually copying the data and also saves memory.

  \index QBitmap
  \index QBrush
  \index QCursor
  \index QFont
  \index QIconSet
  \index QPalette
  \index QPen
  \index QPicture
  \index QPixmap
  \index QRegion
  \index QRegExp
  \index QString
  \index String

Sharing is used wherever it makes sense: in Qt's value-based
collection classes, and in \Class QBitmap, \Class QBrush, \Class
QCursor, \Class QFont, \Class QIconSet, \Class QPalette, \Class QPen,
\Class QPicture, \Class QPixmap, \Class QRegion, \Class QRegExp,
\Class QString, etc. Programmers can safely and efficiently copy
objects of these classes by value, avoiding the risks related to
using pointers and hand optimization. In particular, the implicitly
shared \Class QString class makes string processing easy and fast.

  \index Array
  \index Memory array
  \index Plain old data
  \index QBitArray
  \index QByteArray
  \index QMemArray
  \index QPointArray

Qt also provides the low-level \Class QMemArray\<T\> class with its
subclasses \Class QBitArray, \Class QByteArray and \Class
QPointArray. These classes are very efficient for handling basic
'plain old data' types.

\section1 Pointer-based Collections

  \index Auto-deletion
  \index Cache
  \index Delete
  \index Dictionary
  \index List
  \index Ownership
  \index Pointer-based collection
  \index QCache
  \index QDict
  \index QObject
  \index QPtrList
  \index QPtrQueue
  \index QPtrStack
  \index QPtrVector
  \index QWidget
  \index Queue
  \index Stack
  \index Vector

Qt provides many low-level, generic, pointer-based collection
classes: \Class QDict\<Key,T\>, \Class QPtrList\<T\>, \Class
QPtrQueue\<T\>, \Class QPtrStack\<T\>, \Class QPtrVector\<T\> and
\Class QCache\<T\>. These classes store pointers rather than values.
They are especially useful for storing pointers to \Class {QWidget}s
and \Class {QObject}s. The pointer-based collection classes can
optionally take ownership of the objects they contain and
automatically delete them when the collection is destroyed.

\ONLINES
\Online http://doc.trolltech.com/3.0/qtl.html
\Online http://doc.trolltech.com/3.0/collections.html
\Online http://doc.trolltech.com/3.0/shclass.html
\ENDONLINES
