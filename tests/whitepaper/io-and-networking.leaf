\chapter Input/Output and Networking

\section1 Input/Output

  \index serialization

Qt provides classes to perform advanced I/O on multiple platforms.
The \Class QTextStream class has a similar interface to the standard
\c <iostream> classes, and supports the encodings provided by \Class
QTextCodec (see \l Unicode). The \Class QDataStream class is used to
serialize the basic C++ types and many Qt types in a
platform-independent binary format. For example, the following code
writes a C string, a font and a color to the file \c splash.dat:
\code
    QFile file( "splash.dat" );
    if ( file.open(IO_WriteOnly) ) {
	QDataStream out( &file );
	out << "SplashScreenStyle"
	    << QFont( "Times", 18, QFont::Bold )
	    << QColor( "skyblue" );
    }
\endcode
The data can easily be retrieved and used, for example:
\code
    QCString str;
    QFont font;
    QColor color;

    QFile file( "splash.dat" );
    if ( file.open(IO_ReadOnly) ) {
	QDataStream in( &file );
	in >> str >> font >> color;

	if ( str == "SplashScreenStyle" ) {
	    splash->setFont( font );
	    splash->setColor( color );
	}
    }
\endcode
In practice, the above example would be written more concisely and
easily using \link Settings settings \endlink.

\Class QTextStream and \Class QDataStream operate on any \Class
QIODevice subclass. Qt includes the \Class QFile, \Class QBuffer,
\Class QSocket and \Class QSocketDevice subclasses, and programmers
can implement their own custom devices.

Directories are read and traversed using \Class QDir. \Class QDir can
be used to manipulate path names and access the underlying file
system (e.g. create a directory, delete a file). \Class QFileInfo
provides more detailed information about a file, such as its size,
permissions, creation time, last modification time, etc.

The following example lists the hidden files in the user's home
directory along with their size, in decreasing size order:
\code
    QDir dir = QDir::home();
    dir.setFilter( QDir::Files | QDir::Hidden );
    dir.setSorting( QDir::Size | QDir::Reversed );
    QStringList names = dir.entryList();

    for ( int i = 0; i < names.count(); i++ ) {
	QFileInfo info( dir, names[i] );
	cout << names[i].latin1() << " "
	     << info.size() << endl;
    }
\endcode

Transparent access to remote files is provided by \Class
QUrlOperator. In addition to local file system access, Qt supports
the the FTP and HTTP protocols and can be extended to support other
protocols. For example, files can be downloaded using FTP like this:
\code
    QUrlOperator op;
    op.copy( QString("ftp://ftp.trolltech.com/qt/INSTALL"),
	     QString("file:/tmp"), FALSE );
\endcode
URLs can easily be parsed and recomposed using \Class QUrl.

Image files are usually read in by creating a \Class QImage with the
file name as argument, as described in \l Images.

\section1 XML

Qt's XML module provides a SAX parser and a DOM parser, both of which
read well-formed XML and are non-validating. The SAX (Simple API for
XML) implementation follows the design of the SAX2 Java
implementation, with adapted naming conventions. The DOM (Document
Object Model) Level 2 implementation follows the W3C recommendation
and includes namespace support.

Many Qt applications use an XML format to store their persistent
data. The SAX parser is used for reading data incrementally and is
especially suitable for simple parsing requirements and for very
large files. The DOM parser reads the entire file into a tree
structure in memory that can be traversed at will.

\section1 Inter-Process Communication

The \Class QProcess class is used to start external programs and to
communicate with them from a Qt application in a platform-independent
way. Communication is achieved by writing to the external program's
standard input (\c stdin) and potentially by reading its standard
output and standard error (\c stdout, \c stderr).

\Class QProcess works asynchronously, reporting the availability of
data by emitting signals. Qt applications can connect to the signals
to retrieve and process the data, and optionally respond by sending
data back to the external program.

\section1 Networking

###



Qt provides a cross-platform interface for writing TCP/IP clients and
servers. Clients are usually written using the \Class QSocket class,
a \Class QIODevice subclass that provides a buffered non-blocking TCP
connection.

Qt also provides \Class QServerSocket for implementing servers.

and provides a low-level access to other protocol suites
(e.g. Unix-domain protocols).


 * QServerSocket
 * QSocket
 * QSocketDevice + QSocketNotifier

\ONLINES
\Online xml.html
\Online datastreamformat.html
\ENDONLINES
