@Section
    @Title { Introduction }
    @Tag { introduction }
@Begin
@QuotedDisplay { @I {
Qt is a C++ toolkit for cross-platform GUI and application
development. In addition to the Qt C++ class library, the toolkit
includes tools to make writing applications fast and straightforward.
Qt's cross-platform capabilities and extensive internationalization
support ensure that Qt applications reach the widest possible market.
} }
@PP
The Qt C++ toolkit has been at the heart of commercial applications
since 1995. Qt is used by companies as diverse as "AT&T", IBM, NASA
and Xerox, and by numerous smaller companies and organizations. Qt
3.0 retains the ease-of-use and power of earlier versions while
adding significant functionality and introducing many new classes.
Qt's classes are fully-featured to reduce developer workload, and
provide consistent interfaces to speed learning. Qt is, and always
has been, fully object oriented.
@PP
This whitepaper gives an overview of Qt's tools and functionality.
Each section begins with a non-technical introduction, then presents
the technical details in increasing depth. Code extracts, and small
complete applications, are presented. To evaluate Qt for 30 days, visit
@Href {"http://www.trolltech.com"}.
@BeginSubSections
@SubSection
    @Title { Executive Summary }
    @Tag { executive.summary }
@Begin
@PP
Qt includes a rich set of widgets @Xref widgets (`controls' in Windows
terminology) that provide standard GUI functionality. Qt introduces an
innovative alternative for inter-object communication, called `signals
and slots' @Xref{signals.and.slots}, that replaces the old and unsafe
callback technique. Qt also provides a conventional events
@Xref{events} model for handling mouse clicks, key presses, etc. Qt's
cross-platform GUI applications @Xref{gui.applications} can use all
the user interface functionality required by modern applications, such
as menus, context menus, dockable toolbars, balloon help, drag and
drop, etc.
@PP
Intuitive naming conventions and a consistent programming approach
simpify coding. Qt also includes @QDR @Xref{qt.designer}, a tool
for designing user interfaces graphically. @QDR supports Qt's powerful
layouts @Xref{layouts} in addition to absolute positioning.
@QDR
can be used purely as a design tool, or it can be used to create
entire applications with the built-in C++ code editor. 
@PP
Qt has excellent support for 2D and 3D graphics
@Xref{2d.and.3d.graphics}. Qt is the de-facto standard GUI toolkit for
platform-independent OpenGL programming.
@PP
Qt makes it possible to create platform-independent database
applications using standard databases @Xref{databases}. Qt
includes native drivers for Oracle, Microsoft SQL Server, Sybase
Adaptive Server, PostgreSQL, MySQL and ODBC-compliant databases. Qt's
database functionality is fully integrated with @QDR, which offers live
preview of database data. Qt includes database-specific widgets, and
any built-in or custom widget can be made data aware. 
@PP
Qt programs have native look and feel on all supported platforms using
Qt's styles and themes support @Xref{styles.and.themes}. From a
single source tree, recompilation is all that is required to produce
applications for Windows~"95/98/NT4/ME/2000", Mac OS X, Linux,
Solaris, HP-UX and many other versions of Unix with X11. Qt
applications can also be compiled to run on "Qt/Embedded". Qt's @Cmd
qmake build tool produces Makefiles or @File .dsp files appropriate to
the target platform. Since Qt's architecture @Xref{qts.architecture}
takes advantage of the underlying platform, many customers also use Qt
for single-platform development on both Windows and on Unix because
they prefer the Qt approach. 
  .dsp @Index { .dsp }
  makefile @Index { Makefile }
  qmake @Index { qmake }
@PP
Qt uses Unicode throughout and has considerable support for 
internationalization @Xref{internationalization}. Qt includes
Qt Linguist @Xref{qt.linguist} and other tools to support
translators. Applications can easily use and mix text in Arabic,
English, Hebrew, Japanese, Russian and all the other languages
supported by Unicode.
@PP
Qt includes a variety of domain-specific classes. For example, Qt has
an XML module @Xref{xml} that includes SAX and DOM parsers.
Objects can be stored in memory using Qt's STL-compatible collection
classes @Xref{collection.classes}. Local and remote file
handling using standard protocols are provided by Qt's "input/output"
and networking classes @Xref{input.output.and.networking}.
@PP
Qt applications can have their functionality extended by plugins and
dynamic libraries @Xref{plugins.and.dynamic.libraries}. Plugins
provide additional codecs, database drivers, image formats, styles and
widgets. Libraries can offer an unlimited range of functionality.
Plugins and libraries can be sold as products in their own right.
@PP
Qt is a mature, solid C++ toolkit that is widely used across the
world. In addition to Qt's many commercial uses, the free edition of
Qt is the foundation of KDE, the Linux desktop environment. Qt makes
application development a pleasure, with its cross-platform build
system, visual form design and elegant API.
@DP
@OLREF @LP
@Href{"http://www.trolltech.com/references/customers/"}@LLP
@Href{"http://www.trolltech.com/references/partners/"}@LLP
@End @SubSection
@EndSubSections
@End @Section
