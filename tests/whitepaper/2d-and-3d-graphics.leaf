\chapter 2D and 3D Graphics

\quote
Qt provides excellent support for 2D and 3D graphics. Qt's 2D graphics
classes support painting (bitmapped graphics) and drawing (vector
graphics). Animation and collision detection are also supported. Qt
can load and save a wide and extensible range of image formats. Qt can
draw Unicode rich text, rotated and sheared as required. Qt is the
de-facto standard GUI toolkit for platform-independent OpenGL
programming.
\endquote

\section1 2D Graphics

\section2 Images

  \index BMP
  \index Bitmap
  \index GIF
  \index Graphics
  \index Icon
  \index Image
  \index JPEG
  \index MNG
  \index PNG
  \index PNM
  \index Picture
  \index QImage
  \index Unisys
  \index XBM
  \index XPM

The \Class QImage class supports the input, output and manipulation
of images in several formats, including BMP, GIF*, JPEG, MNG, PNG,
PNM, XBM and XPM.

Many of Qt's built-in widgets can display images, for example
buttons, labels, menu items, etc. Here's how to display an icon on a
push button:

  \quotefile icon/icon.cpp
  \skipuntil quote
  \printto endquote

  \img icon.png
  \caption An icon on a button

  \index Alpha channel
  \index Palette
  \index Transformation
  \index Transparency

\Class QImage supports images with color depths of 1, 8 and 32 bits.
Programmers can manipulate the pixel and palette data, apply
transformations (e.g. rotations, shears, etc.) and reduce the color
depth with dithering if desired. Applications can store an 'alpha
channel' in a \Class QImage along with the color data for their own
purposes (e.g. transparency and alpha-blending).

  \index Animation
  \index Movie
  \index QMovie

The \Class QMovie class can be used to display animated images.

\section2 Painting

  \index Custom widget
  \index Drawing
  \index Painting
  \index QPainter

The \Class QPainter provides a platform-independent API for painting
widgets. It provides primitives as well as advanced functionality
such as transformations and clipping. All Qt's built-in widgets paint
themselves using \Class QPainter. Programmers invariably use \Class
QPainter when implementing their own custom widgets.

  \index Bezier curve

\Class QPainter provides standard functions to draw points, lines,
polygons, ellipses, arcs, Bezier curves, etc. The following command
draws a 120 x 60 rectangle whose top-left point is at (25, 15), with
a 2-pixel wide dashed red outline:
\code
    painter.setPen( QPen(red, 2, DashLine) );
    painter.drawRect( 25, 15, 120, 60 );
\endcode

  \index Clipping
  \index Coordinate
  \index Model
  \index Rotation
  \index Scale
  \index Shear
  \index Transformation
  \index Viewport
  \index Window
  \index World matrix
  \index height()
  \index width()

By default, the top-left corner of a widget is located at coordinates
(0, 0), and the bottom-right corner is located at (\Func width() - 1,
\Func height() - 1). The coordinate system of a \Class QPainter
object can be translated, scaled, rotated and sheared. The objects to
be drawn can be clipped according to a 'window', and positioned on
the widget using a 'viewport'.

  \img xform.png
  \caption Qt's \c xform example showing rotated text

  \index Custom widget
  \index Event

The code below draws a bar-graph custom widget. It uses a \Class
QPainter in the reimplementation of \Func paintEvent(), with the
default coordinate system.

  \quotefile painting/painting.cpp
  \skipuntil quote
  \printto endquote

  \index Clipping
  \index Flicker
  \index height()
  \index rect()
  \index width()

The widget is drawn correctly at different sizes because the code
uses the \Func width(), \Func height() and \Func rect() functions.
The widget produced by this code is shown below.

  \img painting.png
  \caption Custom widget

\Class QPainter supports clipping using a region composed of
rectangles, polygons, ellipses and bitmaps. Complex regions may be
created by uniting, intersecting, subtracting and XOR'ing simple
regions. Clipping can be used to reduce flicker when repainting.

  \index Color
  \index HSV
  \index Palette
  \index QColor
  \index RGB

The \Class QColor class stores a color specified by a RGB or HSV
triple, or by a name (e.g. 'skyblue'). Qt programmers can specify any
24-bit color; Qt automatically allocates the requested color in the
system's palette, or uses a similar color on color-limited displays.
Commonly used colors, e.g. \c red, \c green, \c blue, etc., are
predefined in Qt.

\section2 Paint Devices

\Class QPainter can operate on any 'paint device'. The code
required to paint on any supported device is the same, regardless of
the device. Qt supports the following paint devices:

  \index Bitmap
  \index Double buffering
  \index Flicker
  \index Image
  \index Pixmap
  \index QPixmap

\list
\i A \Class QPixmap is essentially an 'off-screen widget'. Graphics
can be painted on a \Class QPixmap first, and then bit-blitted to a
\Class QWidget to reduce flicker. This technique is called 'double
buffering'.

  \index Meta-file
  \index Picture
  \index QPicture
  \index Rotation
  \index SVG
  \index Scale
  \index Shear
  \index W3C
  \index XML

\i A \Class QPicture is a vector image that can be scaled, rotated
and sheared gracefully. The \Class QPicture class stores an image as
a list of paint commands rather than as pixel data. It supports the
SVG (W3C's Scalable Vector Graphics) XML format for input and output.

  \index Printer
  \index QPrinter

\i A \Class QPrinter represents a physical printer. On Windows, the
paint commands are sent to the Windows print engine, which uses the
installed printer drivers. On Unix, PostScript is output and sent to
the appropriate print daemon.

  \index QWidget
  \index Widget

\i A \Class QWidget is also a paint device, as shown in the earlier
bar-graph example.
\endlist

\section2 Canvas

  \index Animation
  \index Canvas
  \index QCanvas
  \index Sprite

The \Class QCanvas class provides a high-level interface to 2D
graphics. It can handle a very large number of 'canvas items' that
represent lines, rectangles, ellipses, texts, pixmaps, animated
sprites, etc.

  \index Collision testing
  \index Custom canvas item
  \index Inheriting
  \index QCanvasItem
  \index Subclassing

Canvas items are instances of \Class QCanvasItem subclasses. They are
more lightweight than widgets, and they can be quickly moved, hidden,
and shown. \Class QCanvas has efficient support for collision
detection, and can list all the canvas items in a given area. \Class
QCanvasItem can be subclassed to provide custom item types and to
extend the functionality of existing types.

  \index QCanvasView
  \index Rotation
  \index Scale
  \index Shear
  \index Transformation

\Class QCanvas objects are rendered by the \Class QCanvasView class.
Many \Class QCanvasView objects can show the same \Class QCanvas, but
with different translations, scales, rotations and shears.

  \index Data visualisation
  \index Game
  \index Graph
  \index Visualisation

\Class QCanvas is ideal for data visualisation. It has been used by
customers for drawing road maps and for presenting graphs. It is also
suitable for 2D games.

\section1 3D Graphics

  \index GL
  \index Inheriting
  \index OpenGL
  \index QGLWidget
  \index Subclassing

OpenGL is a standard API for rendering 3D graphics. Qt developers can
use OpenGL to draw 3D graphics in their GUI applications. This is
achieved by subclassing \Class QGLWidget, a \Class QWidget subclass,
and drawing with standard OpenGL functions rather than with \Class
QPainter.

  \index Macintosh
  \index Mesa
  \index Microsoft Windows
  \index Windows
  \index X Window System

Qt's OpenGL module is available on Windows, X11 and Macintosh, and
uses the system's OpenGL library (including Mesa).

  \img brain-innovation.png
  \caption Brain Innovation's BrainVoyager Qt application

  \index Alpha channel
  \index Colormap
  \index Double buffering
  \index Overlay

Qt developers can set the display format of an OpenGL rendering
context: single or double buffering, depth buffer, RGBA or color
index mode, alpha channel, overlays, etc. They can also set the
colormap manually in color index mode.

  \index QColor
  \index qglClearColor()
  \index qglColor()

When using Qt, developers write in pure OpenGL. Qt also provides two
convenience functions, \Func qglClearColor() and \Func qglColor(),
that accept a \Class QColor argument and work in any mode.

\section1 A 3D Example

  \img box3d.png
  \caption 3D box

The complete code for an application that draws a 3D box, with
sliders to rotate the box around the X, Y and Z axes, is presented
below.

In \File box3d.h, \Class Box3D is defined like this:

  \quotefile box3d/box3d.h
  \skipuntil #define
  \printto #endif
 
In \File box3d.cpp, the functions declared in \File box3d.h are
implemented:

  \quotefile box3d/box3d.cpp
  \skipto #include
  \printuntil /* ... */
  \skipuntil glEnd()
  \skipto glEnd()
  \printuntil }

In \File main.cpp, a \Class Box3D instance and three sliders are
created:

  \quotefile box3d/main.cpp
  \skipto #include
  \printuntil app.exec()
  \printline }

\ONLINES
\Online coordsys.html
\Online canvas.html
\Online opengl.html
\ENDONLINES

\FOOTNOTE
If you are in a country that recognizes software patents and where
Unisys holds a patent on LZW decompression, Unisys may require you to
license the technology to use GIF.
\ENDFOOTNOTE
