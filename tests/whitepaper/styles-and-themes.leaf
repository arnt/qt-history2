\chapter Styles and Themes

\quote
Qt automatically uses the native style for look and feel. Qt
applications respect user preferences for colors, fonts, sounds, etc.
Qt programmers are free to use any of the supplied styles and can
override any preferences. Programmers can modify existing styles or
implement their own styles using Qt's powerful style engine.
\endquote

  \index Color
  \index Drawing
  \index Emulation
  \index Font
  \index Inheriting
  \index Interface emulation
  \index Look and feel
  \index Preferences
  \index Settings
  \index Sound
  \index Style
  \index Subclassing
  \index System sound
  \index Theme
  \index User settings
  \index Widget style

A style implements the 'look and feel' of the user interface on a
particular platform. A style is a \Class QStyle subclass that
implements basic drawing functions such as 'draw a frame', 'draw a
button', etc. Qt performs all the widget drawing itself for maximum
speed and flexibility.

\section1 Built-in Styles

  \index Aqua
  \index CDE
  \index Macintosh
  \index Microsoft Windows
  \index Motif
  \index MotifPlus
  \index Platinum
  \index SGI
  \index Windows

Qt provides the following built-in styles: Windows, Motif, MotifPlus,
CDE, Platinum, SGI and Aqua (on the Macintosh). By default, Qt uses
the appropriate style for the user's platform and desktop
environment. The style can also be chosen programmatically, or with
the \c -style command-line option on Unix.

  \img combobox.png
  \caption Comboboxes in the different built-in styles

  \index Fade effect
  \index Palette
  \index Scroll effect
  \index Tooltip
  \index Transition effect

A style is complemented by a theme, which encapsulates the user's
preferences for colors, fonts, sounds, etc. Qt automatically adapts
to the computer's active theme. For example, Qt supports scroll and
fade transition effects for menus and tooltips on Windows.

\section1 Style-aware Widgets

  \index Custom widget

Qt's built-in widgets are style aware. Custom widgets and dialogs are
almost always combinations of built-in widgets and layouts, and are
automatically style aware. On the rare occasions when it is necessary
to write a custom widget from scratch, developers can use \Class
QStyle to draw primitive user-interface elements rather than drawing
raw rectangles directly.

\section1 Custom Styles

  \index Custom style
  \index Inheriting
  \index QCommonStyle
  \index Subclassing

Custom styles are used to provide a distinct look to an application
or family of applications. Custom styles can be defined by
subclassing \Class QStyle, \Class QCommonStyle or any other
descendent of \Class QCommonStyle. It is easy to make small
modifications to existing styles by reimplementing one or two virtual
functions from the appropriate base class.

  \index QAquaStyle
  \index QCDEStyle
  \index QCommonStyle
  \index QMotifPlusStyle
  \index QMotifStyle
  \index QPlatinumStyle
  \index QSGIStyle
  \index QStyle
  \index QWindowsStyle

  \img qstyle-diag.png
  \caption The full \Class QStyle class hierarchy

  \index QApplication

An application's style can be set like this:
\code
    QApplication::setStyle( new MyCustomStyle );
\endcode

  \index Designer
  \index Plugin
  \index Qt Designer

A style can also be compiled as a plugin. Plugins make it possible
to preview a form in a custom style in \l {Qt Designer} without
recompiling Qt or \l {Qt Designer}. The style of an existing Qt
application can be changed using a style plugin without recompiling
the application.

\ONLINES
\Online customstyle.html
\ENDONLINES
