\chapter Introduction

\quote
Qt is a C++ toolkit for cross platform GUI and application
development. The toolkit contains the Qt C++ class library, along with
a set of tools to make writing applications as fast and
straightforward as possible. Qt's cross-platform capabilities and
extensive internationalization support ensures that Qt applications
can reach the widest possible market. 
\endquote

Qt provides a rich set of \l{Widgets} ('controls' in Windows
terminology) that provide standard GUI functionality. Qt introduces an
innovative alternative to the old and unsafe callbacks technique for
inter-object communication, called \l{Signals and Slots}. Qt's
cross-platform \l{GUI Applications} can utilize all the user interface
functionality required by modern GUI applications, including menus,
context menus, dockable toolbars, balloon help, drag and drop, etc. 

Qt's classes use intuitive naming conventions and a consistent
programming approach to simplify hand coding. Qt also includes a
visual design tool, \l{Qt Designer}, for graphically designing user
interfaces. \l{Qt Designer} can be used purely as a design tool or,
using the built-in C++ code editor, it can be used to create entire
GUI applications.

Qt has excellent support for both \l{2D and 3D Graphics}. Qt is the
de-facto standard for platform-independent OpenGL programming.

Database applications that utilize SQL databases such as Oracle,
Microsoft SQL Server, Sybase Adaptive Server, PostgreSQL, MySQL and
ODBC-compliant databases, can be created with Qt. Qt's database
functionality is fully integrated with \l{Qt Designer} which offers
live preview of database data. Qt includes database-specific widgets,
and any built-in or custom widget can be made data-aware.

Recompilation is all that is required to produce applications for
Windows 95/98/NT4/ME/2000, Mac OS X, Linux, Solaris, HP-UX and many
other versions of Unix with X11. Qt applications can even be compiled
to run on embedded devices. Qt has excellent support for
\l{Internationalization}. Qt's use of Unicode, along with the \l{Qt
Linguist} application and other tools to support translators, means
that Qt applications can be localized for any country in the world.
Applications can easily use and mix text in Arabic, English, Hebrew,
Japanese, Russian and all the other languages supported by Unicode.


