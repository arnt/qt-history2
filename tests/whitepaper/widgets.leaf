\chapter Widgets

\quote
Qt has a rich set of widgets (buttons, scroll bars, etc.) that cater
for most situations. Qt's widgets are flexible and easy to subclass
for special requirements.
\endquote

Qt provides a full set of widgets. Widgets are visual elements that
are combined to create user interfaces. Buttons, menus, scroll bars,
message boxes, application windows, etc., are all examples of
widgets. Qt's widgets are not arbitrarily divided between 'controls'
and 'containers'; all widgets can be used both as controls and as
containers. Custom widgets can easily be created by subclassing
existing Qt widgets, or created from scratch on the rare occasions
when this is necessary.

  \index controls
  \index widgets

Widgets are instances of \Class QWidget or one of its subclasses, and
custom widgets are created by subclassing.

  \Image qwidget-diag
  \caption An extract from the \Class QWidget class hierarchy

  \index child widgets
  \index parent widgets

A widget may contain any number of child widgets. Child widgets are
shown within the parent widget's area. A widget with no visible
parent is a top-level widget (a 'window'), and usually has its own
entry in the desktop environment's task bar. Qt imposes no arbitrary
limitations on widgets. Any widget can be a top-level widget; any
widget can be a child of any other widget. The position of child
widgets within the parent's area can be set automatically using \link
Layouts layout managers \endlink, or manually if preferred. When a
parent widget is disabled, hidden or deleted, the same action is
applied to all its child widgets recursively.

  \index HTML
  \index rich text

Labels, message boxes, tooltips, etc., are not confined to using a
single color, font and language. Qt's text-rendering widgets can
display multi-language rich text using a subset of HTML. See \l {Text
Rendering}.

\section1 A 'Hello' Example

  \img hello.png Hello Qt!

The complete source code for a program that displays "Hello Qt!"
follows:

  \quotefile hello/hello.cpp
  \skipuntil quote
  \printto endquote

\section1 Built-in Widgets

The screenshots below present the main Qt widgets. They are shown
using the Windows style.

  \index buttons
  \index hbox
  \index horizontal box layout
  \index labels
  \index push buttons

  \img qlabel-etc.png
  \caption A \Class QLabel and a \Class QPushButton laid out with a
	   \Class QHBox

  \index checkboxes
  \index radio buttons

  \img qradiobutton-etc.png
  \caption Two \Class {QRadioButton}s and two \Class {QCheckBox}es
	   laid out with a \Class QButtonGroup

  \index comboboxes
  \index date
  \index line editors
  \index multi-line editors
  \index text editors
  \index time

  \img qdatetimeedit-etc.png
  \caption A \Class QDateTimeEdit, a \Class QLineEdit, a \Class
	   QTextEdit and a \Class QComboBox laid out with a
	   \Class QGroupBox

  \index dials
  \index LCD
  \index progress bar
  \index scroll bar
  \index scroll view
  \index sliders
  \index spin boxes

  \img qdial-etc.png
  \caption A \Class QDial, a \Class QProgressBar, a \Class QSpinBox,
	   a \Class QScrollBar, a \Class QLCDNumber and a \Class
	   QSlider laid out with a \Class QGrid

  \index hierarchical tree view
  \index icon view
  \index input validation
  \index list box
  \index list view
  \index spreadsheet
  \index table
  \index tree view
  \index user-input validation
  \index validation

  \img qiconview-etc.png
  \caption A \Class QIconView, a \Class QListView, a \Class QListBox
	   and a \Class QTable laid out with a \Class QGrid

\Class QComboBox, \Class QLineEdit and \Class QSpinBox's input can be
constrained or validated using a \Class QValidator subclass. Qt
regular expressions can be used for validation.

Widgets that are used to display large amounts of data (e.g. \Class
QTable, \Class QListView and \Class QTextEdit) inherit \Class
QScrollView and can display scroll bars automatically.

\Class QMenuBar, \Class QStatusBar, \Class QToolBar and related
widgets are presented in \l {GUI Applications}. \Class QMessageBox,
\Class QFileDialog, \Class QTabDialog, \Class QWizard and other
dialogs are presented in \l Dialogs. \Class QSplitter is covered in
\l Layouts. \Class QCanvas and \Class QGLWidget are presented in \l
{3D Graphics}.

The screenshot that shows the \Class {QRadioButton}s and \Class
{QCheckBox}es was produced with the following code:

  \quotefile widgetset/widgetset.cpp
  \skipuntil quote
  \printto endquote

\section1 Custom Widgets

Developers can create their own widgets and dialogs by subclassing
\Class QWidget or one of its subclasses. To illustrate subclassing,
the complete code for a digital clock widget is presented.

  \img clock.png

  \index Clock
  \index LCD

The \Class Clock widget is a LCD that displays the current time and
updates itself automatically. A colon separator blinks to indicate
the passing seconds.

In \File clock.h, \Class Clock is defined like this:

  \quotefile clock/clock.h
  \skipto #include
  \printuntil };

  \index name (of widget)
  \index parent widgets
  \index timers

\Class Clock inherits its LCD functionality from the \Class
QLCDNumber widget. It has a constructor typical of widget classes,
with optional \c parent and \c name parameters. (Testing and
debugging are easier if \c name is set.) The \Func timerEvent()
function is inherited from \Class QObject and is called at regular
intervals by the system.

In \File clock.cpp, the functions declared in \File clock.h are
implemented:

  \quotefile clock/clock.cpp
  \skipto #include
  \printuntil display(
  \printuntil }

The constructor calls \Func showTime() to initialize the clock with
the current time, and tells the system to call \Func timerEvent()
every 1000 milliseconds to refresh the LCD display.

In \Func showTime(), \Func QLCDNumber::display() is called with the
current time. The colon is replaced by a space every other time \Func
showTime() is called to make the colon blink.

The \File clock.h and \File clock.cpp files completely define and
implement the \Class Clock custom widget. This widget can be used
straight away in a simple program:

  \quotefile clock/main.cpp
  \skipto #include
  \printuntil }

This example program contains a single widget (the \Class Clock) and
no child widgets. Complex widgets are built by combining widgets in
layouts.

  \index Designer
  \index Qt Designer

Developers can also write custom widgets from scratch. For example,
to create an analog clock, it would be necessary to draw the clock's
face and hands in code rather than relying on the functionality
implemented in a base class. This approach is covered in \l {2D
Graphics}.

\ONLINES
\Online qwidget.html
\ENDONLINES
