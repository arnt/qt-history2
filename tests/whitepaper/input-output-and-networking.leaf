\chapter Input/Output and Networking

\quote
Qt can load and save data in plain text, XML and binary format. Qt
handles local files using its own classes, and remote files using the
FTP and HTTP protocols. Inter-process communication and socket-based
TCP and UDP networking are also fully supported.
\endquote

\section1 Input/Output

  \index Binary serialization
  \index Input/output
  \index QDataStream
  \index QString
  \index QTextCodec
  \index QTextStream
  \index Serialization
  \index Stream
  \index Unicode
  \index iostream

Qt provides classes to perform advanced I/O on multiple platforms.
The \Class QTextStream class has a similar interface to the standard
\c <iostream> classes, and supports the encodings provided by \Class
QTextCodec. The \Class QDataStream class is used to serialize the
basic C++ types and many Qt types in a platform-independent binary
format. For example, the following code writes a Unicode string, a
font and a color to the file \c splash.dat:
\code
    QFile file( "splash.dat" );
    if ( file.open(IO_WriteOnly) ) {
	QDataStream out( &file );
	out << QString( "SplashWidgetStyle" )
	    << QFont( "Times", 18, QFont::Bold )
	    << QColor( "skyblue" );
    }
\endcode
The data can easily be retrieved and used, for example:
\code
    QString str;
    QFont font;
    QColor color;

    QFile file( "splash.dat" );
    if ( file.open(IO_ReadOnly) ) {
	QDataStream in( &file );
	in >> str >> font >> color;

	if ( str == "SplashWidgetStyle" ) {
	    splashWidget->setFont( font );
	    splashWidget->setColor( color );
	}
    }
\endcode
In practice, the above example would be written more concisely and
easily using \link Settings QSettings \endlink.

  \index Custom I/O device
  \index QBuffer
  \index QFile
  \index QIODevice
  \index QSocket
  \index QSocketDevice
  \index Socket

\Class QTextStream and \Class QDataStream operate on any \Class
QIODevice subclass. Qt includes the \Class QFile, \Class QBuffer,
\Class QSocket and \Class QSocketDevice subclasses, and programmers
can implement their own custom devices. \Class QIODevice also
provides low-level functions such as \Func readLine() and \Func
writeBlock() that can be used independently of any stream.

  \index Directory
  \index QDir
  \index QFileInfo

Directories are read and traversed using \Class QDir. \Class QDir can
be used to manipulate path names and access the underlying file
system (e.g. create a directory or delete a file). \Class QFileInfo
provides more detailed information about a file, such as its size,
permissions, creation time, last modification time, etc.

The following example lists the hidden files in the user's home
directory along with their size, in decreasing size order:
\code
    QDir dir = QDir::home();
    dir.setFilter( QDir::Files | QDir::Hidden );
    dir.setSorting( QDir::Size | QDir::Reversed );
    QStringList names = dir.entryList();

    for ( int i = 0; i < names.count(); i++ ) {
	QFileInfo info( dir, names[i] );
	cout << names[i].latin1() << " "
	     << info.size() << endl;
    }
\endcode

  \index FTP
  \index HTTP
  \index Networking
  \index QUrl
  \index QUrlOperator
  \index URL

Transparent access to remote files is provided by \Class
QUrlOperator. In addition to local file system access, Qt supports
the the FTP and HTTP protocols and can be extended to support other
protocols. For example, files can be downloaded using FTP like this:
\code
    QUrlOperator op;
    op.copy( QString("ftp://ftp.trolltech.com/qt/INSTALL"),
	     QString("file:/tmp") );
\endcode
URLs can easily be parsed and recomposed using \Class QUrl.

Image files are usually read by creating a \Class QImage with the
file name as argument. Printing text and images is handled by \Class
QPainter. These classes are described in \l {2D Graphics}.

\section1 XML

  \index DOM
  \index Java
  \index SAX
  \index W3C
  \index XML

Qt's XML module provides a SAX parser and a DOM parser, both of which
read well-formed XML and are non-validating. The SAX (Simple API for
XML) implementation follows the design of the SAX2 Java
implementation, with adapted naming conventions. The DOM (Document
Object Model) Level 2 implementation follows the W3C recommendation
and includes namespace support.

Many Qt applications use XML format to store their persistent data.
The SAX parser is used for reading data incrementally and is
especially suitable for simple parsing requirements and for very
large files. The DOM parser reads the entire file into a tree
structure in memory that can be traversed at will.

\section1 Inter-Process Communication

  \index IPC
  \index Asynchronous I/O
  \index Process
  \index QProcess

The \Class QProcess class is used to start external programs and to
communicate with them from a Qt application in a platform-independent
way. Communication is achieved by writing to the external program's
standard input and potentially by reading its standard output and
standard error.

\Class QProcess works asynchronously, reporting the availability of
data by emitting signals. Qt applications can connect to the signals
to retrieve and process the data, and optionally respond by sending
data back to the external program.

\section1 Networking

  \index Networking
  \index TCP
  \index UDP

Qt provides a cross-platform interface for writing TCP/IP clients and
servers.

  \index Asynchronous I/O
  \index QIODevice
  \index QSocket

The \Class QSocket class provides an asynchronous buffered TCP
connection. \Class QSocket is a \Class QIODevice, making it easy to
use \Class QTextStream and \Class QDataStream on a socket.

\Class QSocket is designed to work well within a GUI application. A
live currency converter application illustrates this:

  \img converter.png
  \caption Live currency converter

The application uses the fictional protocol CCP (Currency Conversion
Protocol) to access the latest exchange rates from a server. Only
lines related to networking are presented.

  \quotefile converter/converter.cpp
  \skipto new QSocket
  \printline new QSocket
  \printline connect( socket
  \printline SLOT(

The socket is created in the \Class Converter constructor. Socket
communication is asynchronous, and the socket emits the \Func
readyRead() signal when there is data available to read.

  \skipto ::convert()
  \printuntil }

  \index QDns

The \Func convert() slot is called when the user clicks the \Button
Convert button. It opens the connection and sends a \c CONV request
(e.g. \c CONV \c 100 \c EUR \c USD) to port 123 on the server \c
ccp.banca-monica.nu. \Class QSocket automatically uses \Class QDns to
resolve \c cpp.banca-monica.nu to its IP address. All these
operations are non-blocking to keep the user interface responsive.

  \skipto ::updateTargetAmount()
  \printuntil }
  \printline }

The \Func updateTargetAmount() function is called when the server
replies to the \c CONV request. It reads the reply, updates the
display and closes the connection.

  \index Asynchronous I/O
  \index Inheriting
  \index QServerSocket
  \index Subclassing

Simple TCP servers can be implemented by subclassing \Class
QServerSocket, which works asynchronously like \Class QSocket. \Class
QServerSocket sets up a listening socket that accepts incoming
connections, and calls a virtual function to serve the client.

  \index QSocketDevice
  \index UDP

The \Class QSocketDevice class provides a platform-independent
wrapper for the native socket APIs. It provides the underlying
functionality for \Class QSocket and \Class QServerSocket, and can be
used for UDP.

\ONLINES
\Online http://doc.trolltech.com/3.0/xml.html
\Online http://doc.trolltech.com/3.0/datastreamformat.html
\ENDONLINES
