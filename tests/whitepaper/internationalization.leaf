\chapter Internationalization

\quote
Qt fully supports Unicode, the international standard character set.
Programmers can freely mix Arabic, English, Hebrew, Japanese,
Russian, and every other language supported by Unicode, in their
applications. Qt also includes tools to support application
translation to help companies reach international markets.
\endquote

  \index Internationalization
  \index Language
  \index Localization

Qt includes tools to facilitate the translation process. Programmers
can easily mark user-visible text that needs translation, and a tool
extracts this text from the source code. \e {Qt Linguist} is an
easy-to-use GUI application that reads the extracted source texts,
and provides the texts with context information ready for
translation. When the translation is complete, \e {Qt Linguist}
outputs a translation file for use by application programs. \e {Qt
Linguist}'s documentation provides the relevant information for
release managers, translators and programmers.

\section1 Unicode

  \index Implicit sharing
  \index QChar
  \index QRegExp
  \index QString
  \index Sharing
  \index String
  \index Unicode
  \index char

Qt uses the \Class QString class to store Unicode strings, and
uses it throughout the API and internally. \Class QString replaces the
crude \c {const char *} and the 16-bit \Class QChar class replaces \c
char. Constructors and operators are provided to automatically convert
to and from 8-bit strings. Programmers can copy \Class {QString}s by
value, since they are \link {Collection Classes} implicitly shared
(copy on write) \endlink, which makes them fast and memory efficient.

  \index Regular expression

\Class QString is more than a 16-bit character string. Functions such
as \Func QChar::lower() and \Func QChar::isPunct() replace \Func
tolower() and \Func ispunct() and work over the whole Unicode range.
Qt's regular expression engine, provided by the \Class QRegExp class,
uses Unicode strings both for the regular expression pattern and the
target string.

\omit
Items in widget classes such as \Class QListBox and \Class QTable can
be sorted in the locale's dictionary order (only on Windows so far).
\endomit

  \index Charset
  \index Codec
  \index Encoding
  \index QTextCodec

Conversion to and from different encodings and charsets is handled by
\Class QTextCodec subclasses. Qt uses \Class QTextCodec for fonts,
input methods and I/O; programmers can use it for their own purposes
as well.

  \index Big5
  \index Charmap
  \index EUC-JP
  \index GBK
  \index ISO 8859
  \index JIS
  \index KOI8-R
  \index Shift-JIS

Qt 3.0 supports 37 different encodings, including Big5 and GBK for
Chinese, EUC-JP, JIS and Shift-JIS for Japanese, KOI8-R for Russian
and the ISO 8859 series; see \l
http://doc.trolltech.com/qtextcodec.html for the complete list.
Programmers can add their own encodings by providing a charmap or by
subclassing \Class QTextCodec.

\section1 Text Rendering

  \index Arabic
  \index Bidirectional writing
  \index Chinese
  \index Cyrillic
  \index Diacritical mark
  \index English
  \index Font
  \index Greek
  \index Hebrew
  \index Japanese
  \index Korean
  \index Latin
  \index Line breaking
  \index Right-to-left languages
  \index Text rendering
  \index Thai
  \index Vietnamese
  \index Writing system

Qt provides a powerful text-rendering engine for all text that is
displayed on screen, from the simplest label to the most
sophisticated rich-text editor. The engine supports advanced features
such as special line breaking behavior, bidirectional writing and
diacritical marks. It renders most of the world's writing systems,
including Arabic, Chinese, Cyrillic, English, Greek, Hebrew,
Japanese, Korean, Latin, Thai and Vietnamese. Qt will automatically
combine the installed fonts to render multi-language text.

\section1 Input Methods

  \index Input method
  \index Keyboard

Far-Eastern writing systems require many more characters than are
available on a keyboard. The conversion from a sequence of key
presses to actual characters is performed at the window-system level
by software called 'input methods'. Qt automatically supports the
installed input methods.

\section1 Dates and Times

  \index Date
  \index Locale
  \index QDateEdit
  \index QDateTimeEdit
  \index QTimeEdit
  \index Time

The editor classes for dates and times (\Class QDateEdit, \Class
QTimeEdit and \Class QDateTimeEdit) respect the user's locale for
separators and ordering.

\section1 Translating Applications

  \index Text translation
  \index Translation

Qt provides tools and functions to help developers provide
applications in their customers' native languages.

  \index tr()

To make a string translatable, simply wrap it in a call to \Func tr()
(read 'translate'):
\code
    saveButton->setText( tr("Save") );
\endcode
\Func tr() attempts to replace a string literal (e.g. \c "Save") with
a translation if one is available; otherwise it uses the original
text. English can be used as the source language and Chinese as the
translated language, or vice versa. The argument to \Func tr() is
converted to Unicode from the application's default encoding.

  \index Comment
  \index Context
  \index QObject
  \index Source text

\Func tr()'s general syntax is
\code
    Context::tr("source text", "comment")
\endcode
The 'context' is the name of a \Class QObject subclass. It is
usually omitted, in which case the class containing the \Func tr()
call is used as the context. The 'source text' is the text to
translate. The 'comment' is optional; along with the context, it
provides additional information to human translators.

  \index .qm
  \index Locale
  \index QTranslator

Translations are stored in \Class QTranslator objects, which use
disk-based \c .qm files (Qt Message files). Each \c .qm file contains
the translations for a particular language. The language can be
chosen at run-time, in accordance with the locale or user
preferences.

  \index Linguist
  \index Qt Linguist
  \index lrelease
  \index lupdate

Qt provides three tools for preparing \c .qm files: \Cmd lupdate, \e
{Qt Linguist} and \Cmd lrelease.

  \index Designer
  \index Qt Designer
  \index .ts
  \index .ui
  \index XML

\list 1

\i \Cmd lupdate extracts all the (context, source text, comment)
   triples from the source code, including \l {Qt Designer} \File .ui
   files, and generates a \c .ts file (Translation Source file). \c
   .ts files are in human-readable XML format.

\i Translators use \e {Qt Linguist} to provide translations for the
   source texts in the \c .ts files.

\i Highly compressed \c .qm files are generated by running \Cmd
   lrelease on the \c .ts files.

\endlist

These steps are repeated as often as necessary during the lifetime of
an application. It is perfectly safe to run \Cmd lupdate frequently,
as it reuses existing translations and marks translations for
obsolete source texts without eliminating them. \Cmd lupdate also
detects slight changes in source texts and automatically suggests
appropriate translations. These translations are marked as unfinished
so that a translator can easily check them.

  \index French
  \index German

Qt itself contains about 400 user-visible strings, for which
Trolltech provides French and German translations.

\section1 Qt Linguist

\e {Qt Linguist} is a Qt application that helps translators translate
Qt applications.

  \img linguist-wp.png
  \caption \e {Qt Linguist}

Translators can edit \File .ts files by hand, or more conveniently
using \e {Qt Linguist}. The \File .ts file's contexts are listed in
the left-hand side of the application's window. The list of source
texts for the current context is displayed in the top-right area,
along with translations. By selecting a source text, the translator
can enter a translation for it, mark it as done or unfinished, and
proceed to the next unfinished translation. Keyboard shortcuts are
provided for all the common navigation options: \Menu {Done & Next},
\Menu {Next Unfinished}, etc. The user interface's dockable windows
can be reorganized to suit the translators' preferences.

  \index Accelerator

Applications often use the same phrases many times in different
source texts. \e {Qt Linguist} automatically displays intelligent
guesses based on previously translated strings and predefined
translations at the bottom of the window. Guesses often serve as a
good starting point that helps translators translate similar texts
consistently. \e {Qt Linguist} can optionally validate translations
to ensure that accelerators and ending punctuation are translated
correctly.

\ONLINES
\Online i18n.html
\Online unicode.html
\Online scripts.html
\Online linguist-manual.html
\ENDONLINES
