\chapter Internationalization

\section1 Summary


\section1 Features of Internationalization

\section2 Unicode

Qt provides the class \Class QString to store Unicode strings, and
uses it thoroughly in the API and internally. \Class QString replaces
the crude \c {const char *} and the 16-bit \Class QChar class
replaces \c char. Thanks to operator overloading, \Class QString has
a familiar syntax. Conventional \c {const char *} strings are
automatically converted into \Class {QString}s, and vice versa. You
might not even notice that you are using Unicode. And you can
confidently copy around \Class {QString}s, as they are \l {implicitly
shared}.

\Class QString is more than a 16-bit character string. Functions such
as \Func QChar::lower() and \Func QChar::isPunct() replace \Func
tolower() and \Func ispunct() and work for the whole Unicode range.
Qt's regular expression engine, provided by class \Class QRegExp,
uses Unicode string both for the regular expression pattern and the
string to match. Items in widget classes such as \Class QListBox and
\Class QTable can be sorted in the local<e> dictionary order (only on
Windows so far).

Conversion from and to different encodings and charsets is handled by
subclasses of \Class QTextCodec. Qt uses \Class QTextCodec internally
for fonts, input methods and I/O. You can use it for your own
purposes as well.

Qt 3.0 supports 37 encodings, including Big5 and GBK for Chinese,
EUC-JP, JIS and Shift-JIS for Japanese, KOI8-R for Russian, and the
ISO 8859 series. You can add their own encodings by providing a
charmap or by subclassing \Class QTextCodec.

\section2 Text Rendering

Qt provides a sophisticated text-rendering engine for all text that
is displayed on screen, from the simplest label to the most
sophisticated rich-text editor. The engine supports advanced features
such as  special line breaking behavior, bidirectional writing and
diacritical marks. It renders most of the world's writing systems,
including Latin, Cyrillic, Greek, Hebrew, Arabic, Chinese, Japanese,
Korean, Thai and Vietnamese. If necessary, Qt will automatically
combine many of the installed fonts to render multi-language text.

\section2 Input Methods

Far-East writing systems require far more characters than are
available on a keyboard. The conversion from a sequence of keyboard
presses to actual characters is performed at the window-system level
by software called \e {input methods}. Qt naturally supports
installed input methods.

\section2 Date and Time

The editor classes for dates and times (\Class QDateEdit, \Class
QTimeEdit, \Class QDateTimeEdit) respect the user's locale for
separators and ordering.

\section1 Internationalizing Your Application

The features covered so far are interesting even for applications
targeted at only one market. Qt provides some more features if many
languages are to be supported.

For application programmers, most of the work is to put all
user-visible strings within a \Func tr() (read "translate") function
call:
\code
    okButton->setText( tr("OK") );
\endcode
\Func tr() attempts to translate a string literal (\c "OK"), and
returns a translation if one is available, the original text
(converted to Unicode) otherwise. You can use English as the source
language and Chinese as the translated language, or vice versa.

\Func tr()'s general syntax is
\code
    Context::tr("source text", "comment")
\endcode

The \e context is the name of a \Class QObject subclass. It is left
out most of the time, and then the class in which the \Func tr() call
occurs is taken as the context. Contexts are not strictly necessary,
but they are very useful to keep strings in different widgets apart.
The \e {source text} is the text to translate. The \e {comment} is
optional; it may provide additional contextual information to the
human translator.

Available translations are stored in a \Class QTranslator object in
memory, and in a \c .qm file (Qt Message File) on disk. By selecting
a given \c .qm file, one chooses the language as well. It is
therefore possible to choose the language at run-time, according to
the locale or to user preferences.

Qt provides three tools for preparing \c .qm files: \Cmd lupdate, \e
{Qt Linguist} and \Cmd lrelease:

\list 1

\i \Cmd lupdate extracts all the \<context, source text, comment\>
   triples from the source code and generates a \c .ts file
   (Translation Source file). \c .ts files are in a human-readable
   XML format, but otherwise are the same as \c .qm files.

\i A translator edits the \c .ts file and adds a translation for
   every \<context, source text, comment\> triple, using \e {Qt
   Linguist} or a text editor.

\i A machine-ready \c .qm file is generated by running \e lrelease.

\endlist

These steps may be repeated many times during the lifetime of an
application. It is perfectly safe to run \e lupdate frequently, as it
reuses existing translations, and marks translations for obsolete
texts as obsolete without eliminating them. \e lupdate also detects
strings that change only slightly and tries to provide translations
automatically. These translations are marked as "unfinished" so that
a human translator can go over them easily.

Qt itself contains a modest 400 strings. Trolltech provides a French
and a German translation of Qt. Other total or partial translations
of Qt from other sources circulate on the Internet.

\section1 Further Reading

http://doc.trolltech.com/i18n.html
http://doc.trolltech.com/unicode.html
http://doc.trolltech.com/scripts.html
http://doc.trolltech.com/liguist-manual.html

http://doc.trolltech.com/qtextcodec.html
	For the complete list of encodings.
