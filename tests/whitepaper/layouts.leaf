\chapter Layouts

 + relieve from calculating and updating the positions yourself
 + modern dialogs are nested layouts

\section1 Built-in Layout Managers

  \index child widget
  \index default widget size
  \index font changes
  \index layouts
  \index parent widget
  \index positioning of widgets
  \index repositioning of widgets
  \index resizing widgets
  \index size of widgets

Qt provides layout managers for organizing child widgets within the
parent widget's area. They feature automatic positioning of child
widgets, automatic resizing, sensible minimum and default sizes for
top-level widgets and automatic repositioning when the contents or
the font changes.

  \index QGridLayout
  \index QHBoxLayout
  \index QPackerLayout
  \index QVBoxLayout

Qt's built-in layout managers are \Class QHBoxLayout, \Class
QVBoxLayout and \Class QGridLayout.

  \img qhbox.png QHBox with five child widgets
  \img qvbox.png QVBox with five child widgets
  \img qgrid.png QGrid with five child widgets

  \index grid layout
  \index hbox
  \index horizontal box layout
  \index vbox
  \index vertical box layout

\Class QHBoxLayout organizes the child widgets in a single horizontal
row from left to right. \Class QVBoxLayout organizes the child
widgets in a single vertical column, from top to bottom. \Class
QGridLayout organizes the child widgets over a grid of cells. Widgets
may span multiple cells.

In most cases, Qt's layout managers pick optimal sizes for child
widgets so that windows resize smoothly. If the defaults are
insufficient, developers can refine the layout using the following
mechanisms:

\list 1

  \index fixed size
  \index maximum size
  \index minimum size

\i \e {Setting a minimum size, a maximum size or a fixed size for
   some child widgets.}

  \index stretches
  \index spacer items

\i \e {Adding stretch items or spacer items.} Stretch or spacer
   items fill empty space in a layout.

  \index size policy

\i \e {Changing the size policies of the child widgets.} By calling
   \Func QWidget::setSizePolicy(), programmers can fine tune the
   resize behavior of a child widget. Child widgets can be set to
   expand, contract, keep the same size, etc.

  \index preferred size

\i \e {Reimplementing QWidget::sizeHint() or
   QWidget::minimumSizeHint().} These functions return a widget's
   preferred size and preferred minimum size based on the contents.
   Built-in widgets provide appropriate reimplementations.

  \index relative growth
  \index stretch factors

\i \e {Setting stretch factors.} Stretch factors allow relative
   growth of child widgets, e.g. two thirds of any extra space made
   available should be allocated to widget A and one third to widget
   B.

\omit
\i \e {Setting alignments.}
\endomit

\endlist

  \index Designer
  \index Qt Designer
  \index margin!in layouts
  \index spacing!in layouts

The \e spacing between child widgets managed by a layout and the \e
margin around the whole layout can also be set by the programmer. By
default, \e {Qt Designer} sets industry-standard values based on the
context.

  \index Arabic
  \index Hebrew
  \index right-to-left languages

Layouts can also run right-to-left and bottom-to-top. Right-to-left
layouts are convenient for internationalized applications supporting
right-to-left languages (e.g. Arabic and Hebrew).

\section1 Nested Layouts

Layouts can be nested to arbitrary levels. Here's an example dialog
box, shown at two different sizes:

  \img countries-small.gif

  \img countries-large.gif

The dialog uses three layouts: a \Class QVBoxLayout that groups the
push buttons, a \Class QHBoxLayout that groups the country listbox
with the push buttons and a \Class QVBoxLayout that groups the
"Select a country" label with the rest of the widget. A stretch item
maintains the gap between the \Button Cancel and \Button Help
buttons.

The dialog's widgets and layouts are created with the following code:

\quotefile countries/countries.cpp
\skipuntil quote begin
\printto quote end

  \index Designer
  \index Qt Designer
  \index fixed positioning

Qt makes layouts so easy that programmers rarely use fixed
positioning.

\l {Qt Designer} makes layouts even easier. With only 17 mouse
clicks, you can create and lay out the widgets for the dialog shown
above.

\section1 Custom Layouts

  \index BorderLayout
  \index CardLayout
  \index QLayout
  \index SimpleFlow
  \index custom layouts
  \index flow layouts

Developers can define custom layout managers by subclassing \Class
QLayout. The \c customlayout example provided with Qt presents three
custom layout managers, \c BorderLayout, \c CardLayout and \c
SimpleFlow, which programmers can use and modify.

  \index QSplitter
  \index splitters

Qt also includes \Class QSplitter, a splitter bar that end users can
manipulate. In some design situations, \Class QSplitter may be
preferable to a layout manager.

  \index manual layouts

For complete control, it is also possible to perform layout manually
in a widget by reimplementing \Func QWidget::resizeEvent() and by
calling \Func QWidget::setGeometry() on each child widget.

\section1 Further Reading

\list
\i \l http://doc.trolltech.com/layout.html
\i \l http://doc.trolltech.com/customlayout.html
\endlist
