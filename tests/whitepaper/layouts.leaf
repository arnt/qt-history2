\chapter Layouts

\quote
Layouts provide a powerful and flexible alternative to using
fixed sizes and positions. Layouts free programmers from having to
perform size and position calculations, and provide automatic scaling
to suit the user's screen, language and fonts.
\endquote

  \index Automatic layout
  \index Child widget
  \index Default widget size
  \index Font
  \index Geometry
  \index Language
  \index Layout
  \index Parent widget
  \index Positioning
  \index Repositioning
  \index Resizing
  \index Size

Qt provides layout managers for organizing child widgets within the
parent widget's area. They feature automatic positioning and resizing
of child widgets, sensible minimum and default sizes for top-level
widgets and automatic repositioning when the contents or the font
changes. \l {Qt Designer} is optimized for laying out widgets using
layout managers.

  \img login.png
  \caption English, French and French with layouts

  \index Internationalization

Layouts are also useful for internationalization. With fixed sizes
and positions, the translation text is often truncated; with layouts,
the child widgets are automatically resized.

\section1 Built-in Layout Managers

  \index QGridLayout
  \index QHBoxLayout
  \index QVBoxLayout

Qt's built-in layout managers are \Class QHBoxLayout, \Class
QVBoxLayout and \Class QGridLayout.

  \img qhbox.png
  \caption \Class QHBoxLayout with five child widgets

  \img qvbox.png
  \caption \Class QVBoxLayout with five child widgets

  \img qgrid.png
  \caption \Class QGridLayout with five child widgets

  \index Box layout
  \index Grid layout

\Class QHBoxLayout organizes the managed widgets in a single
horizontal row from left to right. \Class QVBoxLayout organizes the
managed widgets in a single vertical column, from top to bottom.
\Class QGridLayout organizes the managed widgets in a grid of cells;
widgets may span multiple cells.

In most cases, Qt's layout managers pick optimal sizes for managed
widgets so that windows resize smoothly. If the defaults are
insufficient, developers can refine the layout using the following
mechanisms:

\list 1

  \index Maximum size
  \index Minimum size

\i \e {Setting a minimum size, a maximum size or a fixed size for
   some child widgets.}

  \index Stretch
  \index Spacer item

\i \e {Adding stretch items or spacer items.} Stretch or spacer
   items fill empty space in a layout.

  \index Size policy

\i \e {Changing the size policies of the child widgets.} By calling
   \Func QWidget::setSizePolicy(), programmers can fine tune the
   resize behavior of a child widget. Child widgets can be set to
   expand, contract, keep the same size, etc.

  \index Preferred size

\i \e {Changing the child widgets' size hints.} \Func
   QWidget::sizeHint() and \Func QWidget::minimumSizeHint() return a
   widget's preferred size and preferred minimum size based on the
   contents. Built-in widgets provide appropriate reimplementations.

  \index Relative growth
  \index Stretch factor

\i \e {Setting stretch factors.} Stretch factors allow relative
   growth of child widgets, e.g. two thirds of any extra space made
   available should be allocated to widget A and one third to widget
   B.

\omit
\i \e {Setting alignments.}
\endomit

\endlist

  \index Designer
  \index Margin
  \index Qt Designer
  \index Spacing

The 'spacing' between managed widgets and the 'margin' around the
whole layout can also be set by the programmer. By default, \l {Qt
Designer} sets industry-standard values based on the context.

  \index Arabic
  \index Hebrew
  \index Right-to-left languages

Layouts can also run right-to-left and bottom-to-top. Right-to-left
layouts are convenient for internationalized applications supporting
right-to-left languages (e.g. Arabic and Hebrew).

\section1 Nested Layouts

Layouts can be nested to arbitrary levels. Here's an example of a
dialog box, shown at two different sizes:

  \img countries-small.png
  \caption Small dialog

  \img countries-large.png
  \caption Large dialog

The dialog uses three layouts: a \Class QVBoxLayout that groups the
push buttons, a \Class QHBoxLayout that groups the country listbox
with the push buttons and a \Class QVBoxLayout that groups the
"Select a country" label with the rest of the widget. A stretch item
maintains the gap between the \Button Cancel and \Button Help
buttons.

The dialog's widgets and layouts are created with the following code:

  \quotefile countries/countries.cpp
  \skipuntil quote
  \printto endquote

  \index Designer
  \index Fixed positioning
  \index Qt Designer

Qt makes layouts so easy that programmers rarely use fixed
positioning.

  \img countries-designer.png
  \caption Laying out a form in \l {Qt Designer}

\l {Qt Designer} makes layouts even easier. With only 17 mouse
clicks, you can create and lay out the widgets for the dialog shown
above.

\section1 Custom Layouts

  \index BorderLayout
  \index CardLayout
  \index Custom layout
  \index Flow layout
  \index Inheriting
  \index QLayout
  \index SimpleFlow
  \index Subclassing

Developers can define custom layout managers by subclassing \Class
QLayout. The \c customlayout example provided with Qt presents three
custom layout managers, \c BorderLayout, \c CardLayout and \c
SimpleFlow, which programmers can use and modify.

  \index QSplitter
  \index Splitter

Qt also includes \Class QSplitter, a splitter bar that end users can
manipulate. In some design situations, \Class QSplitter may be
preferable to a layout manager.

  \index Manual layout

For complete control, it is also possible to perform layout manually
in a widget by reimplementing \Func QWidget::resizeEvent() and by
calling \Func QWidget::setGeometry() on each child widget.

\ONLINES
\Online http://doc.trolltech.com/3.0/layout.html
\Online http://doc.trolltech.com/3.0/customlayout.html
\ENDONLINES
