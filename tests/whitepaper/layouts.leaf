\chapter Layouts

 + relieve from calculating and updating the positions yourself

\section1 Built-in Layout Managers

\index child widget
\index default widget size
\index font changes
\index layouts
\index parent widget
\index positioning of widgets
\index repositioning of widgets
\index resizing widgets
\index size of widgets

Qt provides layout managers for organizing child widgets within the
parent's area. They feature automatic positioning of child widgets,
automatic resize handling, sensible minimum and default sizes for
top-level widgets and automatic repositioning when the contents or
the font changes.

\index QGridLayout
\index QHBoxLayout
\index QPackerLayout
\index QVBoxLayout

Qt's built-in layout managers are \Class QHBoxLayout, \Class
QVBoxLayout and \Class QGridLayout.

  \img qhbox.png QHBox with five children
  \img qvbox.png QVBox with five children
  \img qgrid.png QGrid with five children

\index grid layout
\index hbox
\index horizontal box layout
\index vbox
\index vertical box layout

\Class QHBoxLayout organizes the child widgets on a single horizontal
row, from left to right. \Class QVBoxLayout organizes the child
widgets on a single vertical column, from top to bottom. \Class
QGridLayout organizes the child widgets in a grid. A single widget
may span multiple columns and multiple rows.

In most cases, Qt's layout managers picks optimal sizes for the
widgets and the dialogs resize smoothly. When this is not enough,
developers can refine the layout using one of the following
mechanisms:

\list 1

\index fixed size
\index maximum size
\index minimum size

\i \e {Setting a minimum, a maximum size or a fixed size for some
   children.}

\index stretches
\index spacer items

\i \e {Adding stretches or spacer items.} Stretches or spacer items
   fill empty space in a layout.

\index size policy

\i \e {Changing the size policies of the children.} By calling
   \Func QWidget::setSizePolicy(), programmers can control whether
   a child enjoys to grow, accepts to grow or prefers not to grow,
   and whether it accepts to shrink or prefers not to shrink.

\index preferred size

\i \e {Reimplementing QWidget::sizeHint() or
   QWidget::minimumSizeHint().} These functions return the preferred
   size and the preferred minimum size for a widget, based on the
   contents. Built-in widgets provide appropriate reimplementations.

\index relative growth
\index stretch factors

\i \e {Setting stretch factors.} Stretch factors allow relative
   growth of children, e.g. two thirds of any extra space made
   available should be allocated to widget A and one third to widget
   B.

\omit
\i \e {Setting alignments.}
\endomit

\endlist

\index Designer
\index Qt Designer
\index margin!in layouts
\index spacing!in layouts

The \e spacing between child widgets managed by one layout and the \e
margin around the whole layout can also be set by the programmer. By
default, \e {Qt Designer} chooses industry-standard values according
to the context.

\index Arabic
\index Hebrew
\index right-to-left languages

Layouts can also run right-to-left and bottom-to-top. Right-to-left
layouts are convenient for internationalized applications supporting
right-to-left languages (e.g. Arabic and Hebrew).

\section1 Nested Layouts

Layouts can be nested at arbitrary levels. Here's an example dialog
box, shown at two different sizes:

\img countries-small.gif

\img countries-large.gif

The dialog box is made up of three layouts: a \Class QVBoxLayout that
groups the push buttons, a \Class QHBoxLayout that groups the country
listbox and the push buttons and a \Class QVBoxLayout that groups the
"Select a country" label with the rest of the widget. Here's the
code:

\quotefile countries.cpp
\skipuntil setCaption
\printto }

\index Designer
\index Qt Designer
\index fixed coordinates

Qt makes layouts so easy that programmers seldom consider positioning
children at fixed coordinates as an option. And \l {Qt Designer}
makes layouts easier still; see the relevent section for details.

\section1 Custom Layouts

\index BorderLayout
\index CardLayout
\index QLayout
\index SimpleFlow
\index custom layouts

Developers can define custom layout managers by subclassing \Class
QLayout. The \c customlayout example provided with Qt introduces
three custom layout managers that may serve as a starting point (\c
BorderLayout, \c CardLayout and \c SimpleFlow).

\index manual layouts

It is also possible to perform layout manually in a widget by
reimplementing \Func QWidget::resizeEvent() and by calling \Func
QWidget::setGeometry() on each child.

\omit
\section1 Splitters and Dock Windows

\Class QSplitter is not a layout manager, but it competes with \Class
QHBoxLayout and \Class QVBoxLayout in many areas.

Dock Windows...
\endomit

\section1 Further Reading

\list
\i \l http://doc.trolltech.com/layout.html
\i \l http://doc.trolltech.com/customlayout.html
\i \l http://doc.trolltech.com/customlayout-example.html
\endlist
