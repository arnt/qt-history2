\chapter Qt's Architecture

\quote
Qt's functionality is built on the low-level APIs of the platforms it
supports. This makes Qt flexible and efficient.
\endquote

  \index emulating toolkits
  \index look and feel

Qt is an 'emulating' cross-platform toolkit. All widgets are drawn by
Qt, and programmers can extend or customize them by reimplementing
virtual functions. Qt's widgets accurately emulate the look and feel
of the supported platforms, as described in \l {Styles and Themes}.
This technique also enables developers to derive their own custom
styles to provide a distinct look for their applications.

  \Image architecture-diag
  \caption Qt's Architecture

  \index MFC
  \index Motif
  \index layered toolkits

Qt uses the low-level APIs of the different platforms it supports.
This differs from traditional 'layered' cross-platform toolkits that
are thin wrappers over single-platform toolkits (e.g. MFC on Windows
and Motif on X11). Layered toolkits are usually slow, since every
function call to the library results in many additional calls down
through the different API layers. Layered toolkits are limited by the
inflexibilities of the underlying toolkits, and usually behave
slightly differently on the different platforms they support, leading
to obscure bugs in applications.

  \index Embedded Linux
  \index Mac OS X
  \index Windows
  \index X Window System
  \index platforms

Qt is professionally supported, and takes advantage of the available
platforms: Windows, X11, Mac OS X and Embedded Linux. Using a single
source tree, a Qt application can be converted into an executable
simply by recompiling on the target platforms. Although Qt is a
cross-platform toolkit, customers have found it to be easier to learn
and more productive than platform-specific toolkits. Many customers
use Qt for single-platform development, both on Windows and on Unix,
preferring Qt's fully object-oriented approach.

\section1 Windows

  \index GDI
  \index common controls
  \index file dialog
  \index print dialog

Qt/Windows uses the Win32 API and GDI for events and drawing
primitives. Qt does not use MFC or any other toolkit. In particular,
Qt does not use the inflexible 'common controls', but rather provides
its own more powerful, customizable widgets. (For non-specialized
uses, Qt uses the native Windows file and print dialogs.)

  \index transformations

With Qt, the same executable works on Windows 95/98/NT4/ME/2000. Qt
performs a run-time check for the Windows version, and uses the most
advanced capabalities available. For example, only Windows NT4 and
2000 support rotated text natively; Qt renders rotated text on all
Windows versions, and uses the native support where available. As
this example demonstrates, Qt developers are insulated from changes
in the Windows API.

  \index accessibility

Qt supports the Microsoft accessibility interfaces. Unlike Windows's
common controls, Qt widgets can be extended without losing the
accessibility information of the base widget. Custom widgets can also
provide accessibility.

  \index multiple screens

Qt also supports multiple screens on Windows.

\section1 X11

  \index Athena
  \index Xlib
  \index Xt

Qt/X11 uses Xlib to communicate with the X server directly. Qt does
not use Xt (X Toolkit), Motif, Athena or any other toolkit.

  \index look and feel

Qt applications automatically adapt to the user's window manager or
desktop environment, and have a native look and feel under Motif,
SGI, CDE, GNOME and KDE. This contrasts with other Unix toolkits,
which lock users into their own look and feel.

  \index Unicode
  \index codecs
  \index fonts

Qt provides full \l Unicode support. Qt applications automatically
support both Unicode and non-Unicode fonts. Qt combines multiple X
fonts to render multi-lingual text. Qt's font handling is intelligent
enough to search all the installed fonts for characters unavailable
in the current font.

  \index RENDER
  \index X extensions
  \index XIM
  \index Xinerama
  \index alpha-blending
  \index anti-aliased fonts
  \index multiple screens

Qt takes advantage of X extensions where they are available. Qt
supports the RENDER extension for anti-aliased fonts and
alpha-blending. Qt provides on-the-spot editing for X Input Methods. 
Qt supports multiple screens both with traditional multi-head and
with Xinerama.

\section1 Mac OS X

  \index Carbon

New in version 3.0, Qt supports Mac OS X using the Carbon API. Qt/Mac
creates a new market for customers who sell Qt applications.

For Macintosh developers, the availability of Qt/Mac opens up a new
world of possibilities. Macintosh developers can create applications
on their favorite platform, using a fully object-oriented toolkit,
and broaden their market hugely simply by recompiling on, for
example, Windows.

  \index OpenGL

Qt/Mac also brings some technical benefits to Macintosh development,
for example, standard OpenGL, straightforward internationalization
and powerful visual design with \l {Qt Designer}.

\section1 Embedded Linux

  \index frame buffer

Qt/Embedded provides its own windowing environment and writes
directly to the Linux frame buffer. Qt/Embedded eliminates the need
for an X server, and runs faster and with a lower memory footprint
than X11-based embedded Linux devices.

  \index alpha-blending
  \index anti-aliased fonts
  \index fonts
  \index input methods
  \index memory

Qt/Embedded uses alpha-blending for image painting and anti-aliased
scalable TrueType and Type1 fonts. Qt/Embedded has flexible input
handling, including hand-writing recognition, a pickboard and a
virtual keyboard; it is easy to write new input methods. By
selectively choosing features, the memory demands of Qt/Embedded can
be tuned to between 800 KB and 3 MB in ROM.

See the Qt/Embedded whitepaper for a complete technical overview.

\section1 Qt's Development World

  \index RAD
  \index rapid application development

Companies and developers from around the world are joining the Qt
development community every day. They have recognized that Qt's
architecture lends itself to rapid application development. These
developers, whether they are targeting one or many platforms, are
benefiting from Qt's consistent and straightforward API, and from
Qt's powerful supporting tools such as \Cmd qmake and \e {Qt
Designer}.

  \index mailing list

Qt has an active and helpful user community who communicate using the
\c qt-interest mailing list. See \l http://qt-interest.trolltech.com
to subscribe or browse the archive.

  \index documentation
  \index guide
  \index manual
  \index reference documentation

Qt is supplied with extensive documentation, also available on-line
at \l http://doc.trolltech.com.

  \index evaluation
  \index support

Developers can evaluate Qt, with support, for 30 days on their
preferred platform. See \l http://www.trolltech.com for details.

For further information, email \link mailto:info@trolltech.com
info@trolltech.com \endlink.
