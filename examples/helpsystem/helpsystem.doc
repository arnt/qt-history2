/*!   
  \page helpsystem-example.html

  \ingroup examples
  \title Helpsystem

  This example demonstrates the different Qt classes
  that can be used to provide context sensitive help
  in an application.

  It uses QToolTip and QWhatsThis to provide both static and 
  dynamic balloon help for the widgets in the application. 
  QToolTipGroup is used to link tooltips to the statusbar and 
  QAssistantClient is used to display help pages using Qt 
  Assistant. The application has a user interface based on a 
  QMainWindow with a menubar, statusbar and a toolbar, and using 
  a QTable as the central widget.

  Two QToolTip subclasses implement dynamic tooltips for
  QHeader and QTable by reimplementing maybeTip(). The 
  constructors differ from the QToolTip constructor in having a 
  QHeader and a QTable respectively as the first parameter for 
  the constructor instead of a QWidget. This is because 
  we want to ensure that only headers and tables can be 
  passed as arguments. A QToolTipGroup can be provided as the
  second argument to show tooltips in for example a statusbar.
  \quotefile helpsystem/tooltip.h
  \skipto : public QToolTip
  \printuntil };

  The TableToolTip class keeps a reference to the QTable
  as a member for easier access of the QTable object later on.
  \printuntil };

  \quotefile helpsystem/tooltip.cpp
  \skipto HeaderToolTip::HeaderToolTip

  The HeaderToolTip constructor propagates the parameters
  to the QToolTip constructor.
  \printuntil }

  The implementation of maybeTip() uses the QHeader API
  to get the section at the requested position and uses
  QToolTip::tip() to display the section's label in a
  tooltip and to provide the text for the QToolTipGroup.
  \printuntil }

  Since QTable is a QScrollView all user interaction is
  happening on the viewport() of QTable. The TableToolTip 
  constructor passes the viewport() and the tooltip
  group to the QToolTip constructor, and initializes the table
  member with the QTable pointer itself.
  \printuntil }

  The implementation of maybeTip() uses the QTable API
  to get information about the cell at the requested position. 
  The QTable API expects contents coordinates, and since the 
  requested point is relative to the viewport we need to translate
  the coordinate before we can use QTable's functions.

  \printto moveTopLeft

  We translate the cell's geometry back to viewport coordinates
  so that the tooltip disappears when the mouse cursor leaves 
  the cell, and use QToolTip::tip() to display the cell's label 
  in a tooltip and to provide text for the QToolTipGroup like 
  above. 

  \printuntil }
  

  \quotefile helpsystem/whatsthis.h
  \skipto class WhatsThis

  The WhatsThis class is a subclass of both QObject and 
  QWhatsThis and serves as a base class for the HeaderWhatsThis
  and TableWhatsThis classes. \footnote Note that moc requires that QObject
  is the first base class. \endfootnote WhatsThis 
  reimplements clicked() which will be called when the user clicks
  inside the "What's this?" window.It also declares a signal 
  linkClicked() which will be emitted when a hyperlink is clicked.

  \printuntil };

  \quotefile helpsystem/whatsthis.cpp
  \skipto WhatsThis::WhatsThis

  The WhatsThis constructor takes two parameters, the first is the
  widget we want to provide WhatsThis for, and the second is the
  one which receives the events. Normally this is the same widget,
  but some widgets, like QTable, are more complex and have a 
  viewport() widget which receives the events. If such a widget
  is passed to the constructor it will propagate the parameter to 
  the QWhatsThis constructor and store the QWidget pointer itself 
  in it's member variable to allow easier use of the QWidget API 
  later on.
  \printuntil }

  The implementation of clicked() emits the linkClicked() signal 
  if a hyperlink has been clicked.
  \skipto bool WhatsThis::clicked
  \printuntil }
  
  \quotefile helpsystem/whatsthis.h
  \skipto class HeaderWhatsThis

  The HeaderWhatsThis and TableWhatsThis classes reimplement
  text() to make it possible to return texts depending on the 
  position of the mouse click. All the other functionality is 
  already provided by the generic WhatsThis base class. We ensure
  typesafety here in the same manner as in the ToolTip classes.
  \printuntil };

  \printuntil };

  \quotefile helpsystem/whatsthis.cpp
  \skipto HeaderWhatsThis::HeaderWhatsThis

  The HeaderWhatsThis constructor propagates the parameter to the 
  WhatsThis constructor.
  \printuntil }

  The implementation of text() uses the QHeader API to determine
  whether we have a horizontal or a vertical header and returns
  a string which states the orientation of the header. \footnote
  Note that we have to give the scope of the orientation
  (QObject or QWhatsThis) since HeaderWhatsThis uses multiple 
  inheritance \endfootnote 
  \printto TableWhatsThis::TableWhatsThis

  Since QTable is a scrollview and has a viewport() which receives
  the events, we propagate the table itself and the viewport() of
  the table to the WhatsThis constructor 
  \printuntil }
  
  The implementation of text() uses the QTable API to get 
  information about the cell at the requested position. 
  The QTable API expects contents coordinates, so we need to 
  translate the point like explained for the ToolTip classes 
  above. We use the rtti() function to figure out the type of the
  item and return a string according to this type.  
  \printuntil }
  \printuntil }

  \quotefile helpsystem/mainwindow.h
  \skipto class MainWindow

  A QMainWindow is used to create a userinterface that uses the 
  above classes in addition to Qt Assistant to provide context
  sensitive help in the application.

  The MainWindow class declares a slot called assistantSlot() 
  which creates an instance of Qt Assistant when it is called. 
  The class keeps references to the tooltip classes as members
  because they are not QObjects and need to be deleted explicitly.
  The class has a reference to QAssistantClient as a 
  member as well, to allow easier access to Qt Assistant later on.
  \printuntil };

  \quotefile helpsystem/mainwindow.cpp
  \skipto MainWindow::MainWindow

  The MainWindow constructor creates an instance of 
  QAssistantClient, it uses QString::null as the first argument
  so that the system path is used.

  \printuntil QTable* table
   
   A QTable is used as the central widget and the table, the menus 
   and the toolbar are populated.

  \printto QWhatsThis::whatsThisButton
  
  The static function whatsThisButton() creates a QToolButton
  which will enter "What's this?" mode when clicked.

  \printto // create

  A QToolTipGroup is created and will show and remove tooltips
  in the statusbar as the tooltips are displayed on the widgets.

  \printto // setup
   
  The tooltips are set up. The static function add() sets up a 
  tooltip on the Assistant toolbutton. Tooltip objects are created
  using the QToolTip subclasses, the first parameter of the
  the constructor specifies the widget we want to add dynamic 
  tooltips for and the second argument specifies the tool tip 
  group they should belong to.
  
  \printto // setup whats this

  The WhatsThis help are set up. The static function add() adds 
  What's this help for the toolbutton which opens Assistant. 
  Instances of the two WhatsThis subclasses are created for the
  widgets specified by the constructor's argument. What's this 
  help is added for the menu items.

  \printto // connections 

  Signals and slots are connected, so that the relevant pages will
  be displayed in Qt Assistant when clicking on a hyperlink or on
 the assistant button.

 \printto MainWindow::~MainWindow
  

  The destructor deletes the tooltips. We need to delete the 
  tooltips explicitely since QToolTip is, as mentioned above, not 
  a subclass of QObject and the instances of QToolTip not will be
  deleted when the widget is deleted.
  \printuntil }

  The assistantSlot() uses qInstallPathDocs to show the specified
  page in Qt Assistant. 
  \printuntil }

  The main function is a standard implementation opening
  the application main window.
  \quotefile helpsystem/main.cpp
  \skipto #include
  \printuntil }
*/

To build the example go to the helpsystem directory
(QTDIR/examples/helpsystem) run qmake to generate the makefile, 
and use the make tool to build the library. 