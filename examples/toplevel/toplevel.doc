/*!   
  \page toplevel-example.html

  \ingroup examples
  \title Toplevel Widgets

  This example demonstrates the use of the different widget
  flags to provide toplevel widgets with customized window
  decorations.

  It provides a graphic user interface to select different
  options for the widget decoration and behavior, and passes
  the respective widget flags to the QWidget constructor. 
  QWidget::reparent() is used to change the widget flags in
  runtime.

  \warning Note that the interpretation and functionality of
  widget flags depends on the window manager used when running
  the application. Many window managers do not support all of
  the different flag combinations available.

  The user interface providing the different options has been
  generated by Qt Designer. The different options are explained
  in the user interface using tooltips and What's This help. Load
  the \c options.ui file into Qt Designer for more details.

  \quotefile toplevel/main.cpp
  \printuntil }

  The main function creates and displays the dialog for the user 
  interface. Note that this dialog is modal.

  The code relevant for this example is in the \c options.ui.h 
  file.

  \quotefile toplevel/options.ui.h
  \printuntil WFlags

  The \c apply() slot declares the widget flag variable \c f
  and initializes it with the values
  \list
  \i WDestructiveClose - the widget object will automatically be 
  destroyed when it is closed,
  \i WType_TopLevel - the widget will be top level even if it
  has a parent widget, and
  \i WStyle_Customize - the flags override the default values
  \endlist
  Other flags are turned on depending on the options selected
  in the user interface.
  
  \printto bgTitle->isChecked()
  The window gets a normal or dialog border depending on the 
  selected option.

  \printto else
  A titlebar with controls is provided if the respective options
  have been turned on.

  \printto QWidget *parent
  If the window should not have a border it can of course also
  not have a titlebar. Widgets that provide their own (e.g. 
  themed) window decoration should use this flag.

  \printto cbBehaviorStays
  If a toplevel widget has a parent it will not have a taskbar
  entry, and on most window managers it will always stay on
  top of the parent widget. This is the standard behavior for 
  dialog boxes, esp. if they are modeless, and other secondary
  toplevel widgets.

  To provide a taskbar entry the widget has to have no parent, 
  in which case we need to use the \c WGroupLeader flag to 
  prevent blocking through the modal main dialog. Applications 
  that can have multiple toplevel windows open simultaneously 
  should use this combination.

  \printto cbBehaviorPopup
  A toplevel widget can stay on top of the whole desktop if the 
  window manager supports this functionality. 
  \footnote Unfortunately some X11 window managers also require 
  the \c WX11BypassWM flag to be set in addition, which then again 
  might break other window managers. \endfootnote

  Widgets that display important or realtime information (ie. IRC 
  clients) should use that flag , but should not use too much 
  space on the desktop.

  \printto cbBehaviorModal
  A popup widget is a short living but modal widget that closes
  automatically. Popup menus are a typical example for such 
  widgets.

  \printto cbBehaviorTool
  A modal widget blocks input into other toplevel widgets, unless 
  those are in a different modal group (see WGroupLeader).
  Dialogs are often modal, and the QDialog class provides an easy 
  API to create and display them without the need of using this 
  flag explicitly.

  \printto !widget
  A tool window will never have a task bar entry (even if it is
  without a parent widget), and often has a smaller window 
  decoration. Tool windows are frequently used instead of 
  modeless dialogs.

  \printto else
  The widget is created if it has not been created yet, or has 
  been closed already. 
  \footnote The example uses QGuardedPtr to make sure that the 
  pointer is reset to zero when the widget object is destroyed 
  due to the \c WDestructiveClose flag. \endfootnote

  \printto setCaption
  If the widget has already been created the reparent() API is 
  used to modify the widget's flags. The widget's geometry is not
  changed, and the widget is shown again immediately.

  \printuntil }
  Finally the higher level properties for the windows caption and
  icon are set.

  To build the example go to the toplevel directory
  (QTDIR/examples/toplevel) run qmake to generate the makefile, 
  and use the make tool to build the library. 
*/
