CONFIG *= moc thread

CONFIG(release, debug|release):DEFINES += QT_NO_DEBUG
no_keywords:DEFINES += QT_NO_KEYWORDS

# make sure that the Qt includes are before all others... this
# prevents us from picking up "stale" includes
INCLUDEPATH = $$QMAKE_INCDIR_QT $$INCLUDEPATH

!isEmpty(QMAKE_RTLDIR_QT):QMAKE_LIBDIR += $$QMAKE_RTLDIR_QT
QMAKE_LIBDIR += $$QMAKE_LIBDIR_QT
for(QTLIB, $$list($$unique(QT))) {
   qlib =
   isEqual(QTLIB, gui):qlib = QtGui
   else:isEqual(QTLIB, network):qlib = QtNetwork
   else:isEqual(QTLIB, xml):qlib = QtXml
   else:isEqual(QTLIB, opengl):qlib = QtOpenGL
   else:isEqual(QTLIB, sql):qlib = QtSql
   else:isEqual(QTLIB, core):qlib = QtCore
   else:isEqual(QTLIB, canvas):qlib = QtCanvas
   else:isEqual(QTLIB, compat):qlib = Qt3Compat
   else:message("Unknown QT: $$QTLIB"):qlib =
   !isEmpty(qlib) {
      target_qt:isEqual(TARGET, qlib) {
         warning($$TARGET cannot have a QT of $$QTLIB)
      } else {
         DEFINES *= $$upper(QT_$${QTLIB}_LIB)
	 isEqual(QTLIB, compat) {
	    QTDIR_build:warning(***USE of COMPAT inside of QTDIR!**) #just for us
	    INCLUDEPATH *= $$QMAKE_INCDIR_QT/Qt
	    !contains(DEFINES, QT_COMPAT):DEFINES *= QT_COMPAT_WARNINGS
	 }
	 exists($$QMAKE_INCDIR_QT/$$qlib) {
             INCLUDEPATH -= $$QMAKE_INCDIR_QT/$$qlib
             INCLUDEPATH = $$QMAKE_INCDIR_QT/$$qlib $$INCLUDEPATH
         }
	 isEqual(QTLIB, opengl):CONFIG += opengl
	 false:CONFIG(debug, debug|release) {
	    LIBS   += -l$${qlib}_debug
	 } else { 
	    LIBS   += -l$${qlib}
         }
      }
   }
}

plugin:DEFINES += QT_PLUGIN
