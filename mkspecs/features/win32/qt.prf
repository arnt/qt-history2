shared:DEFINES += QT_DLL
CONFIG *= windows moc
plugin {
    CONFIG += dll
    DEFINES += QT_PLUGIN
}
!contains(DEFINES, QT_NODLL) {
  QT_ENV_DLL = $$(QT_DLL)
  QT_ENV_NO_DLL = $$(QT_NODLL)
  !isEmpty(QT_ENV_DLL):isEmpty(QT_ENV_NO_DLL):DEFINES += QT_DLL
  contains(DEFINES, QT_MAKEDLL)|contains(DEFINES, QT_DLL) {
     QMAKE_QT_DLL = 1
     target_qt:!isEmpty(QMAKE_LIB_FLAG):CONFIG += dll;
  }
}
INCLUDEPATH += $$QMAKE_INCDIR_QT
QMAKE_LIBDIR += $$QMAKE_LIBDIR_QT
!debug:DEFINES += QT_NO_DEBUG
target_qt {
    shared {
	CONFIG += dll
    }
    !isEmpty(QMAKE_LIB_FLAG) {
        !isEmpty(QMAKE_QT_DLL) {
            DEFINES += QT_MAKEDLL
            QMAKE_LFLAGS += $$QMAKE_LFLAGS_QT_DLL
        } 
    }
}
for(QCONF, QCONFIG) {
   qlib =
   isEqual(QCONF, gui):qlib = qt400
   else:isEqual(QCONF, network):qlib = qnetwork400
   else:isEqual(QCONF, xml):qlib = qxml400
   else:isEqual(QCONF, opengl):qlib = qopengl400
   else:isEqual(QCONF, sql):qlib = qsql400
   else:isEqual(QCONF, config):qlib = qcore400
   else:message("Unknown QCONFIG: $$qlib):qlib =
   !isEmpty(qlib) {
      target_qt:isEqual(TARGET, qlib) {
         warning($$TARGET cannot have a QCONFIG of $$QCONF)
      } else {
         target_qt:DEFINES *= $$upper(QT_$${QCONF}_WIN_IMPORT)
         DEFINES *= $$upper(QT_$${QCONF}_LIB)
         LIBS   += $${qlib}.lib
      }
   }
}
