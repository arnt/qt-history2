
INCLUDEPATH = $$QMAKE_INCDIR_QT/QtDBus $$INCLUDEPATH

QT_DBUS_LIB_NAME = QtDBus
QT_DBUS_LINKAGE =
mac {
   CONFIG(qt_framework, qt_framework|qt_no_framework) { #forced
      QMAKE_CFLAGS *= -F$${QMAKE_LIBDIR_QT}
      QMAKE_CXXFLAGS *= -F$${QMAKE_LIBDIR_QT}
      QMAKE_LIBDIR_FLAGS *= -F$${QMAKE_LIBDIR_QT}
      FRAMEWORK_INCLUDE = $$QMAKE_LIBDIR_QT/$${QT_DBUS_LIB_NAME}.framework/Headers
      !qt_no_framework_direct_includes:exists($$FRAMEWORK_INCLUDE) {
         INCLUDEPATH -= $$FRAMEWORK_INCLUDE
         INCLUDEPATH = $$FRAMEWORK_INCLUDE $$INCLUDEPATH
       }
       QT_DBUS_LINKAGE = -framework $${QT_DBUS_LIB_NAME}
    } else:!qt_no_framework { #detection
       for(frmwrk_dir, $$list($$QMAKE_LIBDIR_QT $$QMAKE_LIBDIR $$(DYLD_FRAMEWORK_PATH) /Library/Frameworks)) {
	  exists($${frmwrk_dir}/$${QT_DBUS_LIB_NAME}.framework) {
	     QMAKE_CFLAGS *= -F$${frmwrk_dir}
	     QMAKE_CXXFLAGS *= -F$${frmwrk_dir}
	     QMAKE_LIBDIR_FLAGS *= -F$${frmwrk_dir}
	     FRAMEWORK_INCLUDE = $$frmwrk_dir/$${QT_DBUS_LIB_NAME}.framework/Headers
	     !qt_DBus_no_framework_direct_includes:exists($$FRAMEWORK_INCLUDE) {
	        INCLUDEPATH -= $$FRAMEWORK_INCLUDE
	        INCLUDEPATH = $$FRAMEWORK_INCLUDE $$INCLUDEPATH
             }
	     QT_DBUS_LINKAGE = -framework $${QT_DBUS_LIB_NAME}
   	     break()
          }
       }
   }
}
false {
   QT_DBUS_LINKAGE = -l$${QT_DBUS_LIB_NAME}
} else:isEmpty(QT_DBUS_LINKAGE) {
   win32 {
      CONFIG(debug, debug|release):QT_DBUS_LINKAGE = -l$${QT_DBUS_LIB_NAME}d
      else:QT_DBUS_LINKAGE = -l$${QT_DBUS_LIB_NAME}
   } else { 
      CONFIG(debug, debug|release):QT_DBUS_LINKAGE = -l$${QT_DBUS_LIB_NAME}_debug
      else:QT_DBUS_LINKAGE = -l$${QT_DBUS_LIB_NAME}
   }
}
LIBS += $$QT_DBUS_LINKAGE

isEmpty(QMAKE_QDBUSXML2CPP) {
    win32:QMAKE_QDBUSXML2CPP = $$[QT_INSTALL_BINS]\dbusxml2cpp.exe
    else:QMAKE_QDBUSXML2CPP = $$[QT_INSTALL_BINS]/dbusxml2cpp
}

for(DBUS_ADAPTOR, $$list($$unique(DBUS_ADAPTORS))) {

    !contains(DBUS_ADAPTOR, .*\w\.xml$) {
        warning("Invalid D-BUS adaptor: '$${DBUS_ADAPTOR}', please use 'com.mydomain.myinterface.xml' instead.")
        next()
    }

    DBUS_ADAPTOR_LIST += $${DBUS_ADAPTOR}
}

dbus_adaptor_header.commands = $$QMAKE_QDBUSXML2CPP -a ${QMAKE_FILE_OUT}: ${QMAKE_FILE_IN}
dbus_adaptor_header.output_function = dbus_adaptor_header_output
dbus_adaptor_header.name = DBUSXML2CPP ADAPTOR HEADER ${QMAKE_FILE_IN}
dbus_adaptor_header.variable_out = HEADERS
dbus_adaptor_header.input = DBUS_ADAPTOR_LIST

defineReplace(dbus_adaptor_header_output) {
    return("$$lower($$section($$list($$basename(1)),.,-2,-2))_adaptor.h")
}

dbus_adaptor_source.commands = $$QMAKE_QDBUSXML2CPP -i ${QMAKE_FILE_OUT_BASE}.h -a :${QMAKE_FILE_OUT} ${QMAKE_FILE_IN}
dbus_adaptor_source.output_function = dbus_adaptor_source_output
dbus_adaptor_source.name = DBUSXML2CPP ADAPTOR SOURCE ${QMAKE_FILE_IN}
dbus_adaptor_source.variable_out = SOURCES
dbus_adaptor_source.input = DBUS_ADAPTOR_LIST

defineReplace(dbus_adaptor_source_output) {
    return("$$lower($$section($$list($$basename(1)),.,-2,-2))_adaptor.cpp")
}

QMAKE_EXTRA_COMPILERS += dbus_adaptor_header dbus_adaptor_source


for(DBUS_INTERFACE, $$list($$unique(DBUS_INTERFACES))) {

    !contains(DBUS_INTERFACE, .*\w\.xml$) {
        warning("Invalid D-BUS interface : '$${DBUS_INTERFACE}', please use 'com.mydomain.myinterface.xml' instead.")
        next()
    }

    DBUS_INTERFACE_LIST += $${DBUS_INTERFACE}
}

dbus_interface_header.commands = $$QMAKE_QDBUSXML2CPP -p ${QMAKE_FILE_OUT}: ${QMAKE_FILE_IN}
dbus_interface_header.output_function = dbus_interface_header_output
dbus_interface_header.name = DBUSXML2CPP INTERFACE HEADER ${QMAKE_FILE_IN}
dbus_interface_header.variable_out = HEADERS
dbus_interface_header.input = DBUS_INTERFACE_LIST

defineReplace(dbus_interface_header_output) {
    return("$$lower($$section($$list($$basename(1)),.,-2,-2))_interface.h")
}

dbus_interface_source.commands = $$QMAKE_QDBUSXML2CPP -i ${QMAKE_FILE_OUT_BASE}.h -p :${QMAKE_FILE_OUT} ${QMAKE_FILE_IN}
dbus_interface_source.output_function = dbus_interface_source_output
dbus_interface_source.name = DBUSXML2CPP INTERFACE SOURCE ${QMAKE_FILE_IN}
dbus_interface_source.variable_out = SOURCES
dbus_interface_source.input = DBUS_INTERFACE_LIST

defineReplace(dbus_interface_source_output) {
    return("$$lower($$section($$list($$basename(1)),.,-2,-2))_interface.cpp")
}

QMAKE_EXTRA_COMPILERS += dbus_interface_header dbus_interface_source

