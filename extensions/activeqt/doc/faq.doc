/*! \page qaxcontainer-faq.html

    \title QAxContainer FAQ

    \section1 The QAxContainer build system

    To build Qt applications that can host ActiveX controls, simply
    link the application against the qaxcontainer library by adding
    \code
    LIBS += qaxcontainer.lib
    \endcode
    to the application's \c .pro file.

    \section1 Distributing QAxContainer applications

    If the Qt library is build statically the QAxContainer library
    will also be static, and you don't need to redistribute any
    binaries except the application executable.

    To distribute your application when Qt and QAxContainer are
    shared DLLs provide both DLLs either in the system path, or
    in the same directory as the application executable itself.
*/

/*! \page qaxserver-faq.html

    \title QAxServer FAQ

    \section1 The QAxServer build system

    To be able to build ActiveX controls with Qt, the build system
    must be extended to include some additional build steps that are
    used when the \c .pro file includes \c activeqt in the \c CONFIG
    settings. The resulting makefile will:

    \list
    \i Link the executable against \c qaxserver.lib instead of \c qtmain.lib
    \i Call the resulting executable with the \c -dumpidl parameter to
    generate an IDL description of the ActiveX controls provided by
    the server.
    \i Compile the IDL into a type library using the MIDL tool
    \i Attach the resulting type library as a binary resource to the server
       executable
    \endlist

    Attaching resources to an executable is not supported by
    Windows&nbsp;95/98/ME, but a server built on
    Windows&nbsp;NT/2000/XP will work on those versions.

    \section1 Typical build problems
    
    The compiler/linker errors listed are based on those issued by the 
    Microsoft Visual C++ 6.0 compiler.

    \section2 Compiler errors

    \section3 "No overloaded function takes 2 parameters"
    
    When the error occurs in code that uses the \c QAXFACTORY_DEFAULT
    macro, the widget class had no constructor that can be used by the
    default factory. Either add a standard widget constructor or
    implement a custom factory that doesn't require one.

    When the error occurs in code that uses the \c QAXFACTORY_EXPORT
    macro, the QAxFactory subclass had no appropriate constructor.
    Provide a public class constructor like
    \code
    MyFactory( const QUuid &, const QUuid & );
    \endcode
    for your factory class.

    \section3 "syntax error: bad suffix on number"

    The unique identifiers have not been passed as strings into the 
    \c QAXFACTORY_EXPORT or \c QAXFACTORY_DEFAULT macro.

    \section2 Linker errors

    \section3 "unresolved external symbol _ucm_instantiate"

    The server does not export an implementation of a QAxFactory. Use
    the \c QAXFACTORY_EXPORT macro in one of the project's
    implementation files to instantiate and export a factory, or use
    the \c QAXFACTORY_DEFAULT macro to use the default factory.

    \section3 "_ucm_initialize already defined in ..."

    The server exports more than one implementation of a QAxFactory,
    or the same implementation twice. If you use the default factory,
    the \c QAXFACTORY_DEFAULT macro must only be used once in the 
    project.
    Use a custom QAxFactory implementation and the \c QAXFACTORY_EXPORT
    macro if the server provides multiple ActiveX controls.

    \section3 "unresolved external symbol _main"

    The application does not provide an entry point function \c
    main(). Implement a standard Qt main function, and use
    QAxFactory::isServer() to prevent or control stand-alone execution
    of the application.
    \code
    int main( int argc, char **argv )
    {
        QApplication app( argc, argv );

        if ( !QAxFactory::isServer() ) {
            QMessageBox::critical( 0, "Cannot run stand-alone!",
                                      "This executable is a server for ActiveX controls." );
            return -1;
        }

        return app.exec();
    }
    \endcode

    Note that even in-process servers need to implement a main function
    to satisfy the linker, but in that case a dummy implementation is
    sufficient (the function is never called).
    \code
    void main() 
    {}
    \endcode

    \section3 "cannot open file ... "

    The ActiveX server could not shut down properly when the last
    client stopped using it. It usually takes about two seconds for
    the application to terminate, but you might have to use the task
    manager to kill the process (e.g. when a client doesn't release
    the controls properly).

    \section2 Postprocessing and runtime errors

    \section3 "Unable to Locate DLL"

    The build system needs to run the server executable to generate
    the interface definition, and to register the server. If a dynamic
    link library the server links against is not in the path this
    might fail (e.g. Visual Studio calls the server using the
    enivronment settings specified in the "Directories" option). Make
    sure that all DLLs required by your server are located in a
    directory that is listed in the path as printed in the error
    message box.

    \section3 The Server does not respond

    If the system is unable to start the server (check with the task
    manager whether the server runs a process), make sure that no DLL
    the server depends on is missing from the system path (e.g. the Qt 
    DLL!). Use a dependency walker to view all dependencies of the server 
    binary.

    If the server runs (e.g. the task manager lists a process), see
    the following section to debug your server.

    \section3 The Object cannot be created

    If the server could be built and registered correctly during the build
    process, but the object cannot be initiliazed e.g. by the OLE/COM Object 
    Viewer application make sure that no DLL the server depends on is
    missing from the system path (e.g. the Qt DLL!). Use a dependency walker
    to view all dependencies of the server binary.

    If the server runs, see the following section to debug your server.

    \section1 Debugging runtime errors

    To debug an in-process server in Visual Studio, set the server project 
    as the active project, and specify a client "executable for debug
    session" in the project settings (e.g. use the ActiveX Test Container). 
    You can set breakpoints in your code, and also step into ActiveQt and 
    Qt code if you installed the debug version.

    To debug an executable server, run the application in a debugger
    and start with the command line parameter "-activex". Then start
    your client and create an instance of your ActiveX control. COM 
    will use the existing process for the next client trying to create 
    an ActiveX control.

    \section1 Distributing QAxServer binaries

    ActiveX servers written with Qt can use Qt either as a shared library,
    or link Qt statically into the binary. Both ways will produce rather
    large packages (either the server binary itself becomes large, or
    you have to ship the Qt DLL), and in general you would probably not
    use Qt to write small and lightweight ActiveX controls.

    \section2 Installing stand-alone Servers

    When your ActiveX server can also run as a stand-alone application,
    run the server executable with the \c -regserver command line
    parameter after installing the executable on the target system.
    After that the controls provided by the server will be available to
    ActiveX clients.

    \section2 Installing In-process Servers

    When your ActiveX server is part of an installation package, use the
    \c regsvr32 tool provided by Microsoft to register the controls on
    the target system. If this tool is not present, load the DLL into
    your installer process, resolve the \c DllRegisterServer symbol and
    call the function:

    \code
    HMODULE dll = LoadLibrary( "myserver.dll" );
    typedef HRESULT(__stdcall *DllRegisterServerProc)();
    DllRegisterServerProc DllRegisterServer = 
        (DllRegisterServerProc)GetProcAddress( dll, "DllRegisterServer" );

    HRESULT res = E_FAIL;
    if ( DllRegisterServer )
	res = DllRegisterServer();
    if ( res != S_OK )
        // error handling
    \endcode

    \section2 Distributing Servers over the Internet

    If you want to use controls in your server in web-pages you need to
    make the server available to the browser used to view your page, and
    you need to specify the location of the server package in your page.

    To specify the location of a server, use the CODEBASE attribute in
    the OBJECT tag of your web-site. The value can point to the server
    file itself, to an \c INF file listing other files the server requires
    (e.g. the Qt DLL), or a compressed \c CAB archive.
*/
