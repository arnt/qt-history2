/*!   \page qaxcontainer-example-qutlook.html

  \title In Sync with Outlook

  This example is a modified version of the standard 
  \link addressbook-example.html Qt addressbook \endlink example.
  
  It demonstrates the use of QAxObject and querySubObject to instantiate and
  navigate the Outlook Object Model, and the use of the Qt property system to 
  read and write values of items in the Outlook contact folder.

  \quotefile qutlook/centralwidget.h
  The modifications in the class declaration of the central widget are
  a forward declaration of the QAxObject class and the IDispatch interface, 
  and a new QListViewItem subclass \c ABListViewItem that implements a 
  constructor and a destructor and has a member \c contact_item of type 
  \c QAxObject.
  \skipto class QAxObject
  \printto class ABCentralWidget

  The ABCentralWidget gets a destructor, a new protected function \c setupOutlook,
  a new protected slot \c updateOutlook, and also three members of type \c QAxObject.
  \skipto void findEntries
  \printuntil QGridLayout

  \quotefile qutlook/centralwidget.cpp
  The implementation of the ABListViewItem class is trivial:
  \skipto ABListViewItem::ABListViewItem
  \printto ABCentralWidget
  The ABCentralWidget constructor initializes the QAxObject pointers to zero and 
  calls the \c setupOutlook function. The ABCentralWidget destructor calls the
  Logoff method of the outlookSession object.
  \skipto ABCentralWidget::ABCentralWidget
  \printto ABCentralWidget::save
  \skipto setupOutlook
  The \c setupOutlook implementation creates a QAxObject to wrap the
  Outlook.Application COM object.
  \printto Get a session object
  The call to \c querySubObject returns a new QAxObject wrapper around the 
  "Session" object of the Outlook Object hierarchy. If the call fails for 
  some reason setupOutlook returns, otherwise it calls the "Logon" method 
  of the Session object.
  \printto Get the default folder
  The following call to \c querySubObject returns a new QAxObject wrapper
  around the default folder for "contacts".
  \printto Get all items
  \c querySubObject is then used again to get the list of all items in the
  folder. The \c connect statement connects the new ABCentralWidget slot
  to the signals provided by the "Items" COM object. Finally, it calls the
  \c updateOutlook function to populate the listview.
  \printto ABCentralWidget::updateOutlook

  The implementation of the \c updateOutlook slot clears the listview, and uses
  \c querySubObject to iterate through the list of items. For every item provided a new
  ABListViewItem object is created and filled with the properties of the item
  object. The object returned by \c querySubObject is a child of the callee (ie. "contactItems"), 
  but the list view item should take ownership to provide a cleaner relation between 
  entries, so the item has to be removed from its parent object.
  \printto addEntry

  The \c addEntry implementation calls the CreateItem method of the Outlook.Application
  object to create a new contact item, and creates a new ABListViewItem if the call
  succeeds.
  \printto changeEntry

  The \c changeEntry implementation updates the values in the contact item of the current
  listview item as well as the values of the listview item itself.
  \printto selectionChanged

  To build the example you must first build the \link qaxcontainer.html QAxContainer \endlink 
  library. Then run your make tool in \c examples/qutlook and run the resulting \c qutlok.exe.
*/

