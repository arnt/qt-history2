/****************************************************************************
** $Id: main.cpp,v 1.2 1997/02/26 14:50:17 agulbra Exp $
**
** Implementation of something useful.
**
** Created : 979899
**
** Copyright (C) 1992-2000 Troll Tech AS.  All rights reserved.
**
** This file is part of Troll Tech's internal development tree for Qt.
**
** This header text will be replaced by an appropriate text by the
** mkdist script which generates external distributions.
**
** If you are using the Qt Professional Edition or the Qt Free Edition,
** please notify Troll Tech at <info@trolltech.com> if you see this text.
**
** To Troll Tech developers: This header was generated by the script
** fixcopyright-int. It has the same number of text lines as the free
** and professional editions to avoid line number inconsistency.
**
*****************************************************************************/

#include "qhostaddress.h"
#include "qglobal.h"

class QHostAddressPrivate
{
public:
    QHostAddressPrivate( Q_UINT32 a_=0 ) : a(a_), isIp4(TRUE)
    {
    }
    QHostAddressPrivate( Q_UINT8 *a_ ) : a(0), isIp4(FALSE)
    {
	for ( int i=0; i<16; i++ ) {
	    a6[i] = a_[i];
	}
    }
    ~QHostAddressPrivate()
    {
    }

    QHostAddressPrivate & operator=( const QHostAddressPrivate &from )
    {
	a = from.a;
	isIp4 = from.isIp4;
	for ( int i=0; i<16; i++ ) {
	    a6[i] = from.a6[i];
	}
	return *this;
    }

private:
    Q_UINT32 a;     // ip 4 address
    Q_UINT8 a6[16]; // ip 6 address
    bool isIp4;

    friend class QHostAddress;
};

/*!
  \class QHostAddress qhostaddress.h
  \brief QHostAddress provides an IP address.

  \ingroup kernel

  This class contains an IP address in a platform- and
  protocol-independent manner.  That is, it'll store the address in a
  way you can access easily on any platform, and it'll store both IPv4
  and IPv6 addresses.

  QHostAddress is normally used with the classes QSocketDevice and
  QSocket to set up a server or to connect to a host.

  \sa QSocket, QSocketDevice
*/


/*!
  Creates a socket address object with the IP address 0.0.0.0.
*/

QHostAddress::QHostAddress()
    : d( new QHostAddressPrivate )
{
}


/*!
  Creates a socket address object with a specified IPv4
  address.
*/

QHostAddress::QHostAddress( Q_UINT32 ip4Addr )
    : d( new QHostAddressPrivate( ip4Addr ) )
{
}


/*!
  Creates a socket address object with a specified IPv6
  address.

  \a ip6Addr must be a 16 byte array in network byte order (high-order byte
  first)
*/

QHostAddress::QHostAddress( Q_UINT8 *ip6Addr )
    : d( new QHostAddressPrivate( ip6Addr ) )
{
}


/*!
  Creates a copy of \a address.
*/

QHostAddress::QHostAddress( const QHostAddress &address )
    : d( new QHostAddressPrivate )
{
    *d = *(address.d);
}


/*!
  Destructs the socket address object.
*/

QHostAddress::~QHostAddress()
{
    delete d;
}


/*!
  Assigns another socket address object \a address to this object and
  returns a referense to this object.
*/

QHostAddress & QHostAddress::operator=( const QHostAddress & address )
{
    *d = *(address.d);
    return *this;
}


/*!
  Return true if the host address represents a IPv4 address.
*/

bool QHostAddress::isIp4Addr() const
{
    return d->isIp4;
}


/*!
  Returns the IPv4 address as a number.

  For example, if the address is 127.0.0.1, the returned value is
  2130706433 (hex: 7f000001).

  This value is only valid when isIp4Addr() returns TRUE.

  \sa toString()
*/

Q_UINT32 QHostAddress::ip4Addr() const
{
    return d->a;
}


/*!
  Returns the address as a string.

  For example, if the address is the IPv4 address 127.0.0.1, the
  returned string is "127.0.0.1".

  \sa ip4Addr()
*/

QString QHostAddress::toString() const
{
    if ( d->isIp4 ) {
	Q_UINT32 i = ip4Addr();
	QString s;
	s.sprintf( "%d.%d.%d.%d", (i>>24) & 0xff, (i>>16) & 0xff,
		(i >> 8) & 0xff, i & 0xff );
	return s;
    } else {
	Q_UINT16 ugle[8];
	for ( int i=0; i<8; i++ ) {
	    ugle[i] = ( (Q_UINT16)( d->a6[2*i] ) << 8 ) | 
		( (Q_UINT16)( d->a6[2*i+1] ) );
	}
	QString s;
	s.sprintf( "%x:%x:%x:%x:%x:%x:%x:%x",
		ugle[0], ugle[1], ugle[2], ugle[3],
		ugle[4], ugle[5], ugle[6], ugle[7] );
	return s;
    }
}


/*!
  Returns TRUE if this socket address is identical to \a other, or FALSE
  if they are different.
*/

bool QHostAddress::operator==( const QHostAddress & other ) const
{
    return  d->a == other.d->a;
}
