/****************************************************************************
** $Id: $
**
** Index page
**
** Copyright (C) 1995-2002 by Trolltech AS.  All rights reserved.
**
*****************************************************************************/

#if defined(QT_DEBUG)
static char ident[] = "$Id: $";
#endif

/*! \page nsplugin.html

\title Qt-based LiveConnect Plugins

The Qt-based Netscape Plugin software makes it easy to write plugins
that can be used on both Unix/Linux and Windows/95/NT, in Netscape and
Internet Explorer, and any other web browser supporting the same
protocol.

\section1 How-to

\list 1
 \i Download the
    \link http://home.netscape.com/comprod/development_partners/plugin_api/index.html 
    Plugin SDK from Netscape \endlink, and copy the following files from there to
    \c{$QTDIR/extensions/nsplugin/src}
    \list
	\i \c common/npwin.cpp
	\i \c common/npunix.c
	\i \c include/npapi.h
	\i \c include/npupp.h
	\i \c include/jri.h
	\i \c include/jri_md.h
	\i \c include/jritypes.h
    \endlist
 \i Build the Netscape Plugin extension library, found in the
	\c{extensions/nsplugin/src} directory of your Qt distribution.
	This produces a static library to be linked with your plugin code.
 \i Read the \link annotated.html plugin class documentation \endlink, and
	examine the \link nsplugin-examples.html example plugins \endlink.
 \i Do most of your development as a stand-alone Qt application - debugging
	Netscape Plugins is cumbersome.  You may want to use \c{signal(2)}
	in your plugin to enable core-dumps if your browser disables them.
 \i Note the platform-specific build steps below.
 \i Read about the raw plugin interface
	\link http://developer.netscape.com/docs/manuals/communicator/plugin/index.htm 
	in Netscape's handbook. \endlink
 \i If files viewed by a plugin are provided by an HTTP server
	(using a \c{http://...} URL) then
	the server must be configured to send the correct MIME type
	for the file, e.g. by editing Apache's \c{mime.types} file.
	If the files are viewed via a \c{file://...}
	URL, then the browser will use the filename extension to decide
	the file type (and hence the plugin to load) - the user may need
	to set the filename extension in the Helpers or Applications
	section of their browser preferences.
\endlist

\omit
We are working on streamlining the build process for Qt-based Netscape Plugins.	
\endomit

\section2 Building under X11

\list
 \i The Makefiles in the examples are appropriate for UNIX/X11.
 \i The user must install the resulting Shared Object in the Plugins
	directory of the browser.
\endlist

\section2 Building under Windows

\list
 \i Qt needs to be built as a static library when building Netscape
 plugins.
 \omit
 , we are
     looking into the problem of making it work with Qt as a dynamic library.
 \endomit
 \i Plugins must be named \c{np}\e{name}\c{.dll},
     or the browser will ignore them.
 \i The link step must include:
    \list
	\i \c{/def:}\e{name}\c{.def}
	\i \c{/dll}
	\i a compiled resource file defining the
		file/MIME types accepted by the plugin.
    \endlist
 \i The user must install the resulting DLL in the Plugins directory
	of the browser.
\endlist

\section1 Known Bugs

The Qt-based LiveConnect Plugin binding code has a number of
minor bugs, but is sufficiently stable for many production applications.

\list
 \i MSIE 4.0 support is poor.
 \i Crashes on X11 if window is closed via window manager.
 \i Keyboard problems on Windows.
\endlist

*/
