
Changes from version 4.30 to version 4.40 (Qt 2.??)
--------------------------------------------------

Overlay support on Windows implemented.

Fixed a problem in the Windows version where the QGLContext DC could be
used after it was released. Also avoids hitting the 9x resource limit when
having many QGLWidgets at the same time.

Fixed various problems with overlays on X11: mouse tracking, visual
selection on systems with non-transparent overlay visuals available,
enter/leave events.


Changes from version 4.20 to version 4.30 (Qt 2.1)
--------------------------------------------------

Obsoleted QGLWidget::setFormat() and ::setContext(). Most systems
cannot handle format changes on existing windows. To be portable,
applications should simply delete the old GL widget and create a new
one with the new format.


Changes from version 4.10 to version 4.20 (Qt 2.0.2)
----------------------------------------------------

Added support for GL overlays (currently only implemented on X11; the
Windows implementation is experimental). Added the 'overlay' example
program to show the use of the new API fucntions.

The convenience functions qglColor and qglClearColor will no longer
make the widget's GL context current when called; it is the
application's responsibility to do a makeCurrent() /
makeOverlayCurrent() before using them outside of the
initialize/resize/paint[Overlay]GL functions.

Added static QGLContext::currentContext() function.

Improved color handling ( with qglColor/qglClearColor ) in color-index
mode on non-default X11 visuals.

Implementation split out qgl_win.cpp and qgl_x11.cpp, for easier
maintenance (Does not affect API).


Changes from version 4.00 to version 4.10 (Qt 2.0)
--------------------------------------------------

General Qt 2.0 namespace updates.

Improved X11 visual selection for color-index mode: Will try to find
the deepest visual available, but will not fail as long as at least a
1 bit deep visual can be found.

Added 'texture' example program to demonstrate how to import QImages
into GL for use as textures etc.

Added 'overlay_x11" example program to demonstrate how to use X server
overlays with Qt and Qt OpenGL Extension.

Fixed an error in X11 visual selection when rendering to pixmap on a
multi-visual server; will now use the server's default visual (which
the pixmap also uses) if its depth is different from the visual
suggesed by glxchoosevisual, thus avoiding X errors.

Added qglColor and qglClearColor convenience functions in QGLWidget;
they allow using QColor objects for doing glColor3() or glIndex().


Changes from version 3.00 to version 4.00 (Qt 1.42) 
---------------------------------------------------

Added support for rendering to pixmaps. QGLContext now accepts a
QPixmap as the paint device. Added QGLWidget::renderPixmap() method
for easy pixmap rendering. Added example program 'glpixmap'
demonstrating the pixmap rendering feature.

QGLFormat is no longer shared (no memory was saved by sharing). This
should not have any effect on existing code using the QGL classes.

Added a FormatOption enum, and a QGLFormat constructor taking a format
option array. This will allow classes derived from QGLWidget to (try
to) obtain a specific buffer format without doing setFormat (with the
implied window recreation). (This could also be achieved in previous
versions, but would require code to be executed prior to the
construction of the QGLWidget-subclass itself.)

Changed policy when the system cannot provide all features requested
in the QGLFormat: Instead of just going invalid and returning at once,
QGLWidget/Context will now try to reduce the demands until a GL
context can be created. The resulting format can then be examined by
calling QGLWidget/Context::format() after creation. (On X11, the
algorithm for reducing demands can be tuned by reimplementing
chooseVisual() and/or tryVisual()).

Dropped the optional bool doubleBuffer parameter to the default QGLFormat
constructor, to avoid clash with the new constructor in stupid
compilers. Any calls in existing code to QGLFormat( FALSE ) or
QGLFormat( TRUE ) must be changed!

Added QGLWidget::setAutoBufferSwap, to allow users to turn off the
automatic swapBuffers()-after-paintGL() feature.

Added QGLWidget::isSharing(), to allow users to test whether requested
display list sharing could be provided.

Added QGLContext state variables 'initialized' and 'windowCreated',
with access methods, to support more intelligent context switching of
QGLWidgets.

