\chapter qmake Command Reference

\section1 qmake Command Reference

\list
\i \link #About About This Reference \endlink
\i \link #Commands Command Line Options \endlink
\i \link #SystemVariables System Variables \endlink
\i \link #Functions Functions \endlink
\i \link #Environment Environment Variables and Configuration \endlink
\endlist


\target About
\section1 About This Reference

This reference is a detailed index of all command line options,
configurations and internal variables used by the 
cross-platform makefile generation utility \e qmake.

\target Commands
\section1 Command Line Options

\section2 Syntax

\code
qmake [options] files
\endcode

\section2 Options

The following options can be specified on the command line to \e qmake:

\list
\i \c -o file \BR
	\e qmake output will be directed to \e file. If this argument
	is not specified then qmake will try to guess a suitable name, if '-' is
	specified output is directed to stdout. 
\i \c -unix \BR
	\e qmake will run in unix mode.  In this mode, Unix file
	naming and path conventions will be used. This is the default mode on all Unices.
\i \c -win32 \BR
	\e qmake will run in win32 mode.  In this mode, Windows file naming and path
	conventions will be used. This is the default mode on Windows.
\i \c -d \BR
	\e qmake will output useful debugging information.
\i \c -t tmpl \BR
	\e qmake will override any set TEMPLATE variables with tmpl.
\i \c -help \BR
	\e qmake will go over these features and give some useful help.
\endlist


QMake supports two different modes of operation. The first mode (and
default) is makefile generation, in this mode qmake will take a .pro file
and turn it into a makefile. This is the mode documented in
this guide, however there is an additional mode in qmake to generate .pro
files.

To toggle between these modes you must specify in the first argument what
mode you want, if no mode is specified qmake will assume you want makefile
mode, the available mode switches are:

\list
\i \c -makefile \BR
	\e qmake output will be a makefile (\link #MakefileMode Makefile mode \endlink).
\i \c -project \BR
	\e qmake output will be a project file (\link #ProjectfileMode Project file mode \endlink).
\endlist

\target MakefileMode
\section3 Makefile Mode

In Makefile mode QMake will generate a makefile. Additionally you may
supply the following arguments in this mode:

\list
\i \c -nocache \BR
	\e qmake will ignore the .qmake.cache file.
\i \c -nodepend \BR
	\e qmake will not generate any dependency information.
\i \c -cache file \BR
	\e qmake will use \e file as the cache file, ignoring any other .qmake.cache file found
\i \c -spec spec \BR
	\e qmake will use \e spec as a path to platform-compiler information and QMAKESPEC will be ignored.
\endlist

The \c files argument can be a list of one or more project files, separated
by spaces. You may also pass qmake assignments on the commandline here and
they will be processed before all files specified, for example:

qmake -makefile -unix -o Makefile "CONFIG+=test" test.pro 

This will generate a Makefile from test.pro, with Unix pathnames, however
many of these arguments aren't necessary as they are the default.  Therefore
the line can be simplified on Unix to:

qmake "CONFIG+=test" test.pro 


\target ProjectfileMode
\section3 Projectfile Mode

In Projectfile mode QMake will generate a project file. Additionally you may
supply the following arguments in this mode:

\list
\i \c -nopwd \BR
	\e qmake will not look in your current working directory for
	source code and only use the specified \c files
\endlist

The \c files argument can be a list of files or directories, if a directory
is specified then this will be included in the DEPENDPATH variable and relevant 
code from there will be included in the generated project file, if a file is 
given it will go into the correct variable depending on extension (i.e. .ui 
files go into FORMS, .cpp files go into SOURCES, etc).

\target SystemVariables
\section1 System Variables

\list
\i \link #FrequentlyUsedSystemVariables Frequently Used System Variables \endlink
\i \link #RarelyUsedSystemVariables Rarely Used System Variables \endlink
\endlist


\target FrequentlyUsedSystemVariables
\section2 Frequently Used System Variables

The following variables are recognized by \e qmake and are used
most frequently when creating project files.


\target CONFIG
\section3 CONFIG

 The \c CONFIG variable specifies project configuration and
compiler options.  The values will be recognized internally by
\e qmake and have several special meaning.  They are as follows.

These \c CONFIG values control compilation flags: 

\list
\i release - Compile with optimization enabled, ignored if
    "debug" is specified
\i debug - Compile with debug options enabled
\i warn_on - The compiler should emit more warnings than normally, ignored if
     "warn_off" is specified
\i warn_off - The compiler should emit no warnings except severe warnings.
\endlist

These options define the application/library type:

\list
\i qt - The target is a Qt application/library and requires the Qt header
     files/library.  The proper include and library paths for the Qt
     library will automatically be added to the project.
\i opengl - The target requires the OpenGL (or Mesa)
    headers/libraries. The proper include and library paths for
    these libraries will automatically be added to the project.
\i thread - The target is a multi-threaded application or library.  The
    proper defines and compiler flags will automatically be added to
    the project.
\i x11 - The target is a X11 application or library.  The proper
    include paths and libraries will automatically be added to the
    project.
\i windows - The target is a Win32 window application (app only). The
    proper include paths,compiler flags and libraries will
    automatically be added to the project.
\i console - The target is a Win32 console application (app only). The
    proper include paths, compiler flags and libraries will
    automatically be added to the
    project.
\i dll - The target is a shared object/DLL.The proper
    include paths, compiler flags and libraries will automatically be
    added to the project.
\i staticlib - The target is a static library (lib only).  The proper
    compiler flags will automatically be added to the project.
\i plugin - The target is a plugin (lib only). This enables dll as well.
\endlist

The \c CONFIG variable will also be checked when resolving
scopes.  You may assign anything to this variable.  

For example:

\code
CONFIG += qt console newstuff
...
newstuff {
	SOURCES += new.cpp
	HEADERS += new.h
}
\endcode


\target DEFINES
\section3 DEFINES

\e qmake adds the values of this variable as compiler C
preprocessor macros (-D option).  

For example:

\code 
DEFINES += USE_MY_STUFF QT_DLL
\endcode


\target DEF_FILE
\section3 DEF_FILE

\e {This is only used on Windows when using the 'app' template}.

Specifies a .def file to be included in the project.


\target DESTDIR
\section3 DESTDIR

Specifies where to put the \link #TARGET target \endlink file. 

For example:

\code 
  DESTDIR = ../../lib
\endcode

\target DLLDESTDIR
\section3 DLLDESTDIR

Specifies where to copy the \link #TARGET target \endlink dll.

\target HEADERS
\section3 HEADERS

Defines the header files for the project.  

\e qmake will generate dependency information (unless -nodepend
is specified on the \link #Commands command line \endlink) for the
specified headers.  \e qmake will also automatically detect if
\e moc is required by the classes in these headers, and add the
appropriate dependencies and files to the project for generating and
linking the moc files. 

For example:

\code
HEADERS	= myclass.h \
	  login.h \
	  mainwindow.h
\endcode

See also \link #SOURCES SOURCES \endlink.


\target INCLUDEPATH
\section3 INCLUDEPATH

This variable specifies the #include directories which should be
searched when compiling the project. Use ';' or a space as the
directory separator. 

For example:

\code
  INCLUDEPATH = c:\msdev\include d:\stl\include
\endcode


\target FORMS
\section3 FORMS

This variable specifies the .ui files (see \link
designer-manual.book Qt Designer \endlink) to be processed through \e uic
before compiling.  All dependencies, headers and source files required
to build these .ui files will automatically be added to the project.

For example:

\code
FORMS = mydialog.ui \
	mywidget.ui \
        myconfig.ui
\endcode


\target LEXSOURCES
\section3 LEXSOURCES

This variable contains a list of lex source files.  All
dependencies, headers and source files will automatically be added to
the project for building these lex files.  

For example:

\code
LEXSOURCES = lexer.l
\endcode
 

\target LIBS
\section3 LIBS

This variable contains a list of libraries to be linked into the
project.  

For example:

\code
unix:LIBS += -lmath -L/usr/local/lib
win32:LIBS += c:\mylibs\math.lib
\endcode


\target MOC_DIR
\section3 MOC_DIR

This variable specifies the directory where all intermediate moc
files should be placed.  

For example:

\code
unix:MOC_DIR = ../myproject/tmp
win32:MOC_DIR = c:\myproject\tmp
\endcode


\target OBJECTS_DIR
\section3 OBJECTS_DIR

This variable specifies the directory where all intermediate
object should be placed.  

For example:

\code
unix:OBJECTS_DIR = ../myproject/tmp
win32:OBJECTS__DIR = c:\myproject\tmp
\endcode


\target REQUIRES
\section3 REQUIRES

This is a special variable processed by \e qmake.  If the
contents of this variable do not appear in CONFIG by the time this
variable is assigned to then a minimal makefile will be generated that
states what dependencies (the values assigned to REQUIRES) were
missing.

This is mainly used in Qt's build system for building the examples.

\target SOURCES
\section3 SOURCES

This variable contains the name of all source files in the project.  

For example:

\code
SOURCES	= myclass.cpp \
	  login.cpp \
	  mainwindow.cpp

\endcode

See also \link #HEADERS HEADERS \endlink


\section3 SUBDIRS

This variable, when used with the 'subdir'
\link #TEMPLATE TEMPLATE \endlink contains the names of all subdirectories
to look for a project file.

For example:

\code
SUBDIRS = kernel \
	  tools
\endcode


\target TARGET
\section3 TARGET

This specifies the name of the target file.

For example:

\code
TEMPLATE = app
TARGET = myapp
SOURCES = main.cpp
\endcode

The above project file would produce an executable named 'myapp' on
unix and 'myapp.exe' on windows.



\target TEMPLATE
\section3 TEMPLATE

This variable contains the name of the template to use when
generating the project.  The allowed values are:

\list
\i app - Creates a makefile for building applications (the default)
\i lib - Creates a makefile for building libraries
\i subdirs - Creates a makefile for building targets in subdirectories
\i vcapp - \e {win32 only}  Creates an application project file
\i vclib - \e {win32 only}  Creates a library project file

\endlist

For example:

\code
TEMPLATE = lib
SOURCES = main.cpp
TARGET = mylib
\endcode




\section3 VERSION

This variable contains the version number of the library, if the
'lib' \link #TEMPLATE TEMPLATE \endlink is specified.

For example:

\code
VERSION = 1.2.3
\endcode


\section3 YACCSOURCES

This variable contains a list of yacc source files to be included
in the project.  All dependencies, headers and source files will
automatically be included in the project.

For example:

\code
YACCSOURCES = moc.y
\endcode



\target RarelyUsedSystemVariables
\section2 Rarely Used System Variables

The following variables are also recognized by \e qmake but are
either internal or very rarely used.



\target DESTDIR_TARGET
\section3 DESTDIR_TARGET

This variable is set internally by \e qmake which is basically the DESTDIR variable with
the TARGET variable appened at the end.  The value of this variable
is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be
modified.


\target DSP_TEMPLATE
\section3 DSP_TEMPLATE

This variable is set internally by \e qmake which specifies where the dsp template file for
basing generated dsp files is stored.  The value of this variable
is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be
modified.


\target LEXIMPLS
\section3 LEXIMPLS

This variable contains a list of lex implementation files.  The value
of this variable is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely
needs to be modified.



\target LEXOBJECTS
\section3 LEXOBJECTS

This variable contains the names of intermediate lex object
files.The value of this variable is typically handled by
\e qmake and rarely needs to be modified.


\target MAKEFILE
\section3 MAKEFILE

This variable specifies the name of the makefile which
\e qmake should use when outputting the dependency information
for building a project.  The value of this variable is typically
handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.


\target MAKEFILE_GENERATOR
\section3 MAKEFILE_GENERATOR

This variable contains the name of the makefile generator to use
when generating a makefile.  The value of this variable is typically
handled internally by \e qmake and rarely needs to be modified.


\target OBJECTS
\section3 OBJECTS

This variable is generated from the \link #SOURCES SOURCES
\endlink variable.  The extension of each source file will have been 
replaced by .o (Unix) or .obj (Win32).  The value of this variable is 
typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and
rarely needs to be modified.

\target OBJMOC
\section3 OBJMOC

This variable is set by \e qmake if files can be found that
contain the Q_OBJECT macro.  \c OBJMOC contains the
name of all intermediate moc object files. The value of this variable
is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be
modified.

\target PRECOMPH
\section3 PRECOMPH

This variable contains a list of header files that require some
sort of pre-compilation step (such as with moc). The value of this
variable is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be
modified.  


\target QMAKE
\section3 QMAKE

This variable contains the name of the \e qmake program
itself and is placed in generated makefiles.  The value of this
variable is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be
modified.



\target QMAKESPEC_systemvariable
\section3 QMAKESPEC

This variable contains the name of the \e qmake
configuration to use when generating makefiles.  The value of this
variable is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be
modified. Use the \link #QMAKESPEC QMAKESPEC \endlink environment
variable instead.


\target QMAKE_AIX_SHLIB
\section3 QMAKE_AIX_SHLIB

If this variable is not empty, then this variable tells \e qmake 
to generate the
\link #TARGET TARGET \endlink as an AIX shared library.



\target QMAKE_APP_FLAG
\section3 QMAKE_APP_FLAG

This variable is empty unless the 'app'
\link #TEMPLATE TEMPLATE \endlink is specified.  The value of this
variable is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be
modified.  Use the following instead:

\code
app {
	#conditional code for 'app' template here
}
\endcode




\target QMAKE_APP_OR_DLL
\section3 QMAKE_APP_OR_DLL

This variable is empty unless the 'app' or 'dll'
\link #TEMPLATE TEMPLATE \endlink is specified.  The value of this
variable is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be
modified.  



\target QMAKE_AR_CMD
\section3 QMAKE_AR_CMD

\e {This is used on Unix platforms only}

This variable contains the command for invoking the program which
creates, modifies and extracts archives. The value of this variable is
typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink 
and rarely needs to be modified.



\target QMAKE_CFLAGS_DEBUG
\section3 QMAKE_CFLAGS_DEBUG

This variable contains the flags for the C compiler in debug mode.The value of this variable is
typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink 
and rarely needs to be modified.




\target QMAKE_CFLAGS_MT
\section3 QMAKE_CFLAGS_MT

This variable contains the compiler flags for creating a
multi-threaded application.  The value of this variable is typically
handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and
rarely needs to be modified.




\target QMAKE_CFLAGS_MT_DBG
\section3 QMAKE_CFLAGS_MT_DBG

This variable contains the compiler flags for creating a debuggable
multi-threaded application.  The value of this variable is typically
handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and
rarely needs to be modified.




\target QMAKE_CFLAGS_MT_DLL
\section3 QMAKE_CFLAGS_MT_DLL

\e {This is used on Windows only}

This variable contains the compiler flags for creating a 
multi-threaded dll.  The value of this variable is typically
handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and
rarely needs to be modified.




\target QMAKE_CFLAGS_MT_DLLDBG
\section3 QMAKE_CFLAGS_MT_DLLDBG

\e {This is used on Windows only}

This variable contains the compiler flags for creating a debuggable
multi-threaded dll.  The value of this variable is typically
handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and
rarely needs to be modified.




\target QMAKE_CFLAGS_RELEASE
\section3 QMAKE_CFLAGS_RELEASE

This variable contains the compiler flags for creating a non-debuggable
application.  The value of this variable is typically
handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and
rarely needs to be modified.




\target QMAKE_CFLAGS_SHLIB
\section3 QMAKE_CFLAGS_SHLIB

\e {This is used on Unix platforms only}

This variable contains the compiler flags for creating a shared
library. The value of this variable is typically handled by
\e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs
to be modified.




\target QMAKE_CFLAGS_THREAD
\section3 QMAKE_CFLAGS_THREAD

This variable contains the compiler flags for creating a multi-threaded
application. The value of this variable is typically handled by
\e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs
to be modified.




\target QMAKE_CFLAGS_WARN_OFF
\section3 QMAKE_CFLAGS_WARN_OFF

This variable is not empty if the warn_off
\link #TEMPLATE TEMPLATE \endlink option is specified.  The value of this 
variable is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink 
and rarely needs to be modified.



\target QMAKE_CFLAGS_WARN_ON
\section3 QMAKE_CFLAGS_WARN_ON

This variable is not empty if the warn_on
\link #TEMPLATE TEMPLATE \endlink option is specified.
The value of this variable is typically handled by
\e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs
to be modified.




\target QMAKE_CLEAN
\section3 QMAKE_CLEAN

This variable contains any files which are not generated files (such as moc and uic 
generated files) and object files that should be removed when using "make clean".



\target QMAKE_CXXFLAGS_DEBUG
\section3 QMAKE_CXXFLAGS_DEBUG

This variable contains the C++ compiler flags for creating a debuggable
application. The value of this variable is typically handled by
\e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs
to be modified.



\target QMAKE_CXXFLAGS_MT
\section3 QMAKE_CXXFLAGS_MT

This variable contains the C++ compiler flags for creating a multi-threaded
application. The value of this variable is typically handled by
\e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs
to be modified.




\target QMAKE_CXXFLAGS_MT_DBG
\section3 QMAKE_CXXFLAGS_MT_DBG

This variable contains the C++ compiler flags for creating a debuggable multi-threaded
application. The value of this variable is typically handled by
\e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs
to be modified.




\target QMAKE_CXXFLAGS_MT_DLL
\section3 QMAKE_CXXFLAGS_MT_DLL

\c {This is used on Windows only}

This variable contains the C++ compiler flags for creating a multi-threaded
dll. The value of this variable is typically handled by
\e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs
to be modified.




\target QMAKE_CXXFLAGS_MT_DLLDBG
\section3 QMAKE_CXXFLAGS_MT_DLLDBG

\c {This is used on Windows only}

This variable contains the C++ compiler flags for creating a multi-threaded debuggable
dll. The value of this variable is typically handled by
\e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs
to be modified.




\target QMAKE_CXXFLAGS_RELEASE
\section3 QMAKE_CXXFLAGS_RELEASE

This variable contains the C++ compiler flags for creating an 
application. The value of this variable is typically handled by
\e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs
to be modified.




\target QMAKE_CXXFLAGS_SHLIB
\section3 QMAKE_CXXFLAGS_SHLIB

This variable contains the C++ compiler flags for creating a
shared library.  The value of this variable is typically handled by
\e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs
to be modified.




\target QMAKE_CXXFLAGS_THREAD
\section3 QMAKE_CXXFLAGS_THREAD

This variable contains the C++ compiler flags for creating a
multi-threaded application.  The value of this variable is typically handled by
\e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs
to be modified.




\target QMAKE_CXXFLAGS_WARN_OFF
\section3 QMAKE_CXXFLAGS_WARN_OFF

This variable contains the C++ compiler flags for suppressing compiler warnings.
 The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.



\target QMAKE_CXXFLAGS_WARN_ON
\section3 QMAKE_CXXFLAGS_WARN_ON

This variable contains C++ compiler flags for generating compiler warnings.
 The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.




\target QMAKE_EXTENSION_SHLIB
\section3 QMAKE_EXTENSION_SHLIB

This variable contains the extention for shared libraries.  The value of this 
variable is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink 
and rarely needs to be modified.




\target QMAKE_FAILED_REQUIREMENTS
\section3 QMAKE_FAILED_REQUIREMENTS

This variable contains the list of requirements that were failed to be met when
\e qmake was ran, such as, the sql module is needed and wasn't compiled into Qt.  The 
value of this variable is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink 
and rarely needs to be modified.




\target QMAKE_FILETAGS
\section3 QMAKE_FILETAGS

This variable contains the file tags needed to be entered into the makefile, such as SOURCES
and HEADERS.  The value of this variable is typically handled by \e qmake or 
\link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.




\target QMAKE_HPUX_SHLIB
\section3 QMAKE_HPUX_SHLIB

\e {This is used on Unix platforms only}

If this variable is not empty then this variable tells \e qmake to generate the
\link #TARGET TARGET \endlink as an HPUX shared library.  The value of this variable is 
typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely 
needs to be modified.


\section3 QMAKE_HPUX_SHLIBS

\e {This is used on Unix platforms only}

If this variable is not empty then this variable tells \e qmake to generate the
\link #TARGET TARGET \endlink as an HPUX shared library.  The value of this variable is 
typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely 
needs to be modified.


\target QMAKE_INCDIR
\section3 QMAKE_INCDIR

This variable contains the location of all known header files to be added to 
INCLUDEPATH when building an application.  The value of this variable is 
typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely 
needs to be modified.



\target QMAKE_INCDIR_OPENGL
\section3 QMAKE_INCDIR_OPENGL

This variable contains the location of OpenGL header files to be added
to INCLUDEPATH when building an application with OpenGL support. The
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.



\target QMAKE_INCDIR_QT
\section3 QMAKE_INCDIR_QT

This variable contains the location of all known header files
paths to be added to INCLUDEPATH when building a Qt application. The value 
of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.




\target QMAKE_INCDIR_THREAD
\section3 QMAKE_INCDIR_THREAD

This variable contains the location of all known header files
paths to be added to INCLUDEPATH when building a multi-threaded application. 
The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.




\target QMAKE_INCDIR_X11
\section3 QMAKE_INCDIR_X11

\e {This is used on Unix platforms only}

This variable contains the location of X11 header files paths to be
added to INCLUDEPATH when building a X11 application.  The
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.



\target QMAKE_LFLAGS_CONSOLE
\section3 QMAKE_LFLAGS_CONSOLE

\e {This is used on Windows only}

This variable contains link flags when building console
programs.  The value of this variable is typically handled by
\e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.


\section3 QMAKE_LFLAGS_CONSOLE_DLL

\e {This is used on Windows only}

This variable contains link flags when building console
dlls.  The value of this variable is typically handled by
\e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LFLAGS_DEBUG

This variable contains link flags when building debuggable applications.  The
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LFLAGS_PLUGIN

This variable contains link flags when building plugins. The value
of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LFLAGS_QT_DLL

This variable contains link flags when building programs that
use the Qt library built as a dll. The value of this variable is
typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LFLAGS_RELEASE

This variable contains link flags when building applications for 
release. The value of this variable is typically handled by
\e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LFLAGS_SHAPP

This variable contains link flags when building applications which are using
the 'app' template.  The value of this variable is typically handled by
\e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LFLAGS_SHLIB

This variable contains link flags when building shared libraries
The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LFLAGS_SONAME

This variable specifies the name of shared objects, such as .so or .dll.
The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.




\section3 QMAKE_LFLAGS_THREAD

This variable contains link flags when building multi-threaded projects.
The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LFLAGS_WINDOWS

\e {This is used on Windows only}

This variable contains link flags when building windows projects.
The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.


\section3 QMAKE_LFLAGS_WINDOWS_DLL

\e {This is used on Windows only}

This variable contains link flags when building windows dll projects.
The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBDIR

This variable contains the location of all known library
directories.The value of this variable is typically handled by
\e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBDIR_FLAGS

\e {This is used on Unix platforms only}

This variable contains the location of all library
directory with -L prefixed.  The value of this variable is typically handled by
\e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBDIR_OPENGL

This variable contains the location of the OpenGL library
directory.The value of this variable is typically handled by
\e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBDIR_QT

This variable contains the location of the Qt library
directory.The value of this variable is typically handled by
\e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBDIR_X11

\e {This is used on Unix platforms only}

This variable contains the location of the X11 library
directory.The value of this variable is typically handled by
\e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.

\section3 QMAKE_LIBS

This variable contains all project libraries.  The value of this
variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.


\section3 QMAKE_LIBS_CONSOLE

\e {This is used on Windows only}

This variable contains all project libraries that should be linked against
when building a console application.  The value of this
variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.




\section3 QMAKE_LIBS_OPENGL

This variable contains all OpenGL libraries.  The value of this
variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBS_OPENGL_QT

This variable contains all OpenGL Qt libraries.The value of this
variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBS_QT

This variable contains all Qt libraries.The value of this
variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBS_QT_DLL

\e {This is used on Windows only}

This variable contains all Qt libraries when Qt is built as a dll.  The 
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBS_QT_OPENGL

This variable contains all the libraries needed to link against if 
OpenGL support is turned on. The 
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.



\section3 QMAKE_LIBS_QT_THREAD

This variable contains all the libraries needed to link against if 
thread support is turned on.  The 
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBS_RT

\e {This is used with Borland compilers only}

This variable contains the runtime library needed to link against when
building an application.  The 
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBS_RTMT

\e {This is used with Borland compilers only}

This variable contains the runtime library needed to link against when
building a multi-threaded application.  The 
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.



\section3 QMAKE_LIBS_THREAD

\e {This is used on Unix platforms only}

This variable contains all libraries that need to be linked against
when building a multi-threaded application.  The 
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBS_WINDOWS

\e {This is used on Windows only}

This variable contains all windows libraries.The value of this
variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBS_X11

\e {This is used on Unix platforms only}

This variable contains all X11 libraries.The value of this
variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIBS_X11SM

\e {This is used on Unix platforms only}

This variable contains all X11 session management libraries.  The
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LIB_FLAG

This variable is not empty if the 'lib' template is specified.  The
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.



\section3 QMAKE_LINK_SHLIB_CMD

This variable contains the command to execute when creating a
shared library. The
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_LN_SHLIB

This variable contains the command to execute when creating a link
to a shared library. The
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_MAKEFILE

This variable contains the name of the makefile to create. The
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.






\section3 QMAKE_MOC_SRC

This variable contains the names of all moc source files to
generate and include in the project. The value of this variable is
typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.


\section3 QMAKE_QMAKE

This variable contains the location of qmake if it is not in the path.  
The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 QMAKE_QT_DLL

This variable is not empty if Qt was built as a dll.  The
value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.

\section3 QMAKE_RUN_CC

This variable specifies the individual rule needed to build an object.
The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.

\section3 QMAKE_RUN_CC_IMP

This variable specifies the individual rule needed to build an object.
The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.




\section3 QMAKE_RUN_CXX

This variable specifies the individual rule needed to build an object.
The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.




\section3 QMAKE_RUN_CXX_IMP

This variable specifies the individual rule needed to build an object.
The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.



\section3 QMAKE_TARGET

This variable contains the name of the project target.  The value of
this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 RC_FILE

This variable contains the name of the resource file for the application.  
The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.





\section3 RES_FILE

This variable contains the name of the resource file for the application.  
The value of this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.


\section3 SRCMOC

This variable is set by \e qmake if files can be found that
contain the Q_OBJECT macro.  \c SRCMOC contains the
name of all the generated moc files. The value of this variable
is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be
modified.

\section3 TARGET_EXT

This variable specifies the target's extension.  The value of this variable
is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be
modified.



\section3 TARGET_x

This variable specifies the target's extension with a major version number.  The value of this variable
is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be
modified.


\section3 TARGET_x.y.z

This variable specifies the target's extension with version number.  The value of this variable
is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be
modified.


\section3 UICIMPLS

This variable contains a list of the generated implementation files by UIC.  
The value of this variable
is typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and rarely needs to be
modified.





\section3 UICOBJECTS

This variable is generated from the UICIMPLS variable.  The extension of each 
file will have been replaced by .o (Unix) or .obj (Win32).  The value of this variable is 
typically handled by \e qmake or \link #QMAKESPEC qmake.conf \endlink and
rarely needs to be modified.



\section3 VER_MAJ

This variable contains the major version number of the library, if the
'lib' \link #TEMPLATE template \endlink is specified.





\section3 VER_MIN

This variable contains the minor version number of the library, if the
'lib' \link #TEMPLATE template \endlink is specified.





\section3 VER_PAT

This variable contains the patch version number of the library, if the
'lib' \link #TEMPLATE template \endlink is specified.





\section3 YACCIMPLS

This variable contains a list of yacc source files. The value of
this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.




\section3 YACCOBJECTS

This variable contains a list of yacc object files. The value of
this variable is typically handled by \e qmake or
 \link #QMAKESPEC qmake.conf \endlink and rarely needs to be modified.


\target Functions
\section1 Functions

\e qmake recognizes the following functions:



\section2 include( filename )

This function will include the contents of \e filename into the
current project at the point it was included.  The function succeeds
if \e filename was included, otherwise it fails. You can check the
return value of this function using a
scope.

For example:

\code
include( shared.pri )
OPTIONS = standard custom
!include( options.pri ) {
	message( "No custom build options specified" )
	OPTIONS -= custom
}
\endcode

\section2 exists( file )

This function will test if \e file exists, if so it will succeed; otherwise it will
fail. 
You can specify a regular expression in file and it will succeed if any file
matches the regular expression specified.

For example:
\code
exists( $(QTDIR)/lib/qt-mt* ) {
      message( "Configuring for multi-threaded Qt..." )
      CONFIG += thread
}
\endcode

\section2 contains( variablename, value )

This function will succeed if the variable \e variablename
contains the value \e value.  You can check the return value of this
function using a scope.

For example:

\code
contains( drivers, network ) {
	# drivers contains 'network'
	message( "Configuring for network build..." )
	HEADERS += network.h
	SOURCES += network.cpp
}
\endcode

\section2 count( variablename, number )

This function will succeed if the variable \e variablename
contains \e number elements, otherwise it will fail.  You can check
the return value of this function using a
scope.

For example:

\code
MYVAR = one two three
count( MYVAR, 3 ) {
	# always true
}
\endcode



\section2 isEmpty( variablename )

This function will succeed if the variable \e variablename is
empty (same as \c count(variable, 0)).

\section2 system( command )

This function will execute \c command in a secondary shell and will
succeed if the command exits with a exit status of 1.You can check the
return value of this function using a
scope.

For example:

\code
  system(ls /bin):HAS_BIN=FALSE
\endcode

\section2 message( string )

This function will always succeed, and will display the given
\e string to the user.

\section2 error( string )

This function will never return.  It will display the given \e
string to the user, and then exit \e qmake. This function should
only be used for very fatal configurations

For example:

\code
  release:debug:error(You can't have release and debug at the same time!)
\endcode



\target Environment
\section1 Environment Variables and Configuration

\target QMAKESPEC
\section2 QMAKESPEC

\e qmake requires a platform and compiler description file which
contains many default values used to generate appropriate makefiles.
The standard Qt distribution comes with many of these files, located
in the 'mkspecs' subdirectory of the Qt installation.

The QMAKESPEC environment variable can contain any of the following:

\list
\i A complete path to a directory containing a qmake.conf file.  In this case \e qmake will open the qmake.conf file from within that directory.  If the file does not exist, \e qmake will exit with an error.
\i The name of a platform-compiler combination.  In this case, \e qmake will search in the directory specified by the QTDIR environment variable.
\endlist

Note: the QMAKESPEC path will automatically be added to the
\link #INCLUDEPATH INCLUDEPATH \endlink system variable.

\target cache
\section2 Cache File

The cache file (mentioned above in the options) is a special file
\e qmake will read to find settings not specified in the
qmake.conf file, the .pro file, or the command line. If neither -path
or -nocache are specified qmake will try to find a file called
.qmake.cache in parent directories.  If it fails to find this file it
will silently ignore this step of processing.

