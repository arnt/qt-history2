\chapter Using Precompiled Headers

\target About
\section1 About Precompiled Headers
\index About Precompiled Headers
\index Using Precompiled Headers
\index Precompiled Headers
\index PCH

Precompiled headers are a performance feature, supported by some
compilers, to compile a stable body of code, and store the compiled
state of the code in a binary file. During subsequent compilations,
the compiler will load the stored state, and continue compiling the
specified file. Each subsequent compilation is faster because the
stable code does not need to be recompiled.

\e qmake supports the usage of precompiled headers (PCH) on some
platforms and build environments, including:
\list
\i Windows - nmake
\i Windows - Dsp projects (VC 6.0)
\i Windows - Vcproj projects (VC 7.0 \& 7.1)
\i Mac OS X - Makefile
\i Mac OS X - Xcode
\endlist

\target Rules
\section1 Rules for using PCH

Since compilers solve the usage of PCH differently to others, you have 
to take certain measures to be able to use precompiled headers on all
supported platforms.
There are currently two schemes:

\target GCC_scheme
\section2 GCC scheme

\list
\i Load PCH
\i Compile source file from start
\endlist

\target MSVC_scheme
\section2 MSVC scheme

\list
\i Load PCH
\i Skip code in source file until the marker (include file, or pragma)
\i If no markers are found, then fail
\i If any skipped code break \link #MSVC_RULES consistency rules \endlink,
   go back to the start of the file
\i Compile the rest of the source file
\endlist


For your source code to be cross platform, it needs to follow the MSVC
scheme. \Menu {This means that every source file has to contain an
include statement to the header file being precompiled.}
\e qmake will ensure that all generated files from \e uic and \e moc
will also contain include statements to this header file.

\sidebar Precompiled Headers Consistency Rules using Microsoft Visual
C++ 

\target MSVC_RULES
Here is a selection of important rules when using PCH in your project.
\list 1
\i Macros created using the preprocessor (/D) option must be the same
   between the compilation that created the PCH and the current
   compilation. The state of defined constants is not checked, but
   unpredictable results can occur if these change.
\i PCHs do not work when preprocessing a sourcefile.
\i The compiler ignores all preprocessor directives (including
   pragmas) that appear in the source code that will be precompiled.
   The compilation specified by such preprocessor directives must be
   the same as the compilation creating the PCH. 
\i The PCH must be compiled with debug, to get debug information for
   local symbols in object file.
\endlist
A more complete set of rules can be found at 
\link http://msdn.microsoft.com/library/en-us/vccore/html/vclrfprecompiledheaderconsistencyrules.asp \endlink

\e {NOTE: Not all of the rules described in the Microsoft documentation 
are important, since qmake will enforce them automatically.}
\endsidebar

\target ADD_PCH
\section1 Adding PCH to your project


\target PCH_CONTENTS
\section2 Contents of the precompiled header file

The precompiled header is supposed to contain code which is \e stable
and \e static throughout your project. When compiling Qt programs, it
many be wise to add an include to \e qt.h in your precompiled header,
to increase compilation significantly. A typical PCH may look like
this:
\section3 stable.h

\code
	#include <stdlib>
	#include <iostream>
	#include <vector>
	#include <qt.h> // Includes all of Qt
	#include "thirdparty\include\libmain.h"
	#include "my_stable_class.h"
	...
\endcode


\target SORT_INCLUDES
\section2 Sorting include statements

Since some compilers skip code in your source files until they hit the
include statement for the precompiled header file, you have to order
your include statements in a \Menu stable and \Menu unstable fashion,
separated by the include statement for the precompiled header file, like
this:
\section3 mydialog.cpp

\code
	#include <qlabel.h>
	#include <qtextedit.h>
	#include <qpushbutton.h>
	#include "stable.h"   // PCH, compiler stops skipping here
	#include "mydialog.h" // MyDialogs own header file
	#include "code_under_development.h"
	#include "very_unstable_code.h"
	...
\endcode

Note that a class's own header file \Menu must be included after the
PCH include statement. If not, then on some platforms the compiler will 
skip the code, and miss the class definition.


\target PROJECT_OPTIONS
\section2 Project options

To make your project use PCH, the only thing to need to check in your
project settings (.pro), is to include the PRECOMPH option:
\code
	PRECOMPH = stable.h
\endcode
\e qmake will handle the rest, to assure the creation and usage of the
precompiled header file. 


\target ADVANCED_WINDOWS_OPTION
\section3 Advanced Windows option

\e {This is used on Windows only}

On the Windows platform, it is common to generate the precompiled
header file, based on a specified CPP file. This is because, the MSVC
also lets you precompile functions and whole classes, to further
increase the compilation speed.

You may specify your own CPP file like this:
\code
	PRECOMPCPP = stable.cpp
\endcode

Note that with qmake, you don't have to specify this CPP file, as
\e qmake will generate one for you, which will include the header file
specified in PRECOMPH.
It is not advised that you use this feature, if you want your project
to remain cross platform.


\target EXAMPLE_PROJECT
\section1 Example project

Package: \link pch_example.zip pch_example.zip\endlink

\Menu mydialog.ui
\code
	<!DOCTYPE UI><UI version="3.3" stdsetdef="1">
	<class>MyDialog</class>
	<widget class="QDialog">
	    <property name="name">
	        <cstring>MyDialog</cstring>
	    </property>
	    <property name="caption">
	        <string>Mach 2!</string>
	    </property>
	    <vbox>
	        <widget class="QLabel">
	            <property name="name">
	                <cstring>aLabel</cstring>
	            </property>
	            <property name="text">
	                <string>Join the life in the fastlane; - PCH enable your project today! -</string>
	            </property>
	        </widget>
	        <widget class="QPushButton">
	            <property name="name">
	                <cstring>aButton</cstring>
	            </property>
	            <property name="text">
	                <string>&amp;Quit</string>
	            </property>
	            <property name="accel">
	                <string>Alt+Q</string>
	            </property>
	        </widget>
	    </vbox>
	</widget>
	</UI>
\endcode

\Menu stable.h
\code
	#include <iostream>
	#include <qapplication.h>
	#include <qpushbutton.h>
	#include <qlabel.h>
\endcode

\Menu myobject.h
\code
	#include <qobject.h>
	
	class MyObject : public QObject
	{
	public:
	    MyObject();
	    ~MyObject();
	};
\endcode

\Menu myobject.cpp
\code
	#include <iostream>
	#include <qobject.h>
	#include "stable.h"    // Last stable header
	#include "myobject.h"  // Own header
	
	MyObject::MyObject()
	    : QObject()
	{
	    std::cout << "MyObject::MyObject()\n";
	}
	
	MyObject::~MyObject()
	{
	    qDebug("MyObject::~MyObject()");
	}
\endcode

\Menu util.cpp
\code
	#include "stable.h" // Last stable header
	
	void util_function_does_nothing()
	{
	    // Nothing here...
	    int x = 0;
	    ++x;
	}
\endcode

\Menu main.cpp
\code
	#include <qapplication.h>
	#include <qpushbutton.h>
	#include <qlabel.h>
	#include "stable.h"    // Last stable header
	#include "myobject.h"  // Unstable
	#include "mydialog.h"
	
	int main(int argc, char **argv)
	{
	    QApplication app(argc, argv);
	    
	    MyObject obj;
	    MyDialog dia;
	    app.setMainWidget( &dia );
	    dia.connect( dia.aButton, SIGNAL(clicked()), SLOT(close()) );
	    dia.show();
	
	    return app.exec();
	}
\endcode

\Menu pch_example.pro
\code
	#############################################
	#
	# Example for using Precompiled Headers
	#
	#############################################
	TEMPLATE  = app
	LANGUAGE  = C++
	CONFIG	 += console
	
	# Use Precompiled headers (PCH)
	PRECOMPH  = stable.h
	
	HEADERS	 += stable.h \
	            myobject.h
	SOURCES	 += main.cpp \
	            myobject.cpp \
	            util.cpp
	FORMS     = mydialog.ui
\endcode
