#!/bin/sh
#
# Configures to build the Qt library
#
# Copyright 1999-2002 Trolltech AS.  All rights reserved.
#


#-------------------------------------------------------------------------------
# script initialization
#-------------------------------------------------------------------------------

# the name of this script
relconf=`basename $0`
# the directory of this script is the "source tree"
relpath=`dirname $0`
relpath=`(cd $relpath; pwd)`
# the current directory is the "build tree" or "object tree"
outpath=`pwd`

# later cache the command line in config.status
OPT_CMDLINE=`echo $@ | sed "s,-v,,g"`

# initialize global variables
QMAKE_SWITCHES=
QMAKE_VARS=
QMAKE_CONFIG=


#-------------------------------------------------------------------------------
# operating system detection
#-------------------------------------------------------------------------------

# need that throughout the script
UNAME_MACHINE=`(uname -m) 2>/dev/null` || UNAME_MACHINE=unknown
UNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown
UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown
UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown


#-------------------------------------------------------------------------------
# window system detection
#-------------------------------------------------------------------------------

PLATFORM_X11=no
PLATFORM_MAC=no
PLATFORM_QWS=no
PLATFORM_QNX=no

if [ -d /System/Library/Frameworks/Carbon.framework ]
then
    # Qt/Mac
    # ~ the Carbon SDK is present
    PLATFORM_MAC=yes
elif [ -d $relpath/mkspecs/qws ]
then
    # Qt/Embedded
    # ~ mkspecs/qws is present
    # ~ this is the free or commercial edition
    # ~ this is the internal edition and Qt/Embedded is explicitly enabled
    # ~ this is the internal edition and the OS is QNX
    if [ "$UNAME_SYSTEM" = "QNX" ]
    then
	PLATFORM_QNX=maybe
    else
	PLATFORM_QWS=maybe
    fi
fi


#-------------------------------------------------------------------------------
# check commercial license
#-------------------------------------------------------------------------------

# Free edition - may only be used under the terms of the QPL or GPL.
# Qt/X11, Qt/Embedded
if [ -f $relpath/LICENSE.QPL -o -f $relpath/LICENSE.GPL ]
then
    [ "$PLATFORM_QWS" = "maybe" ] && PLATFORM_QWS=yes
    Edition="free"
    Licensee="Non-Commercial"
    Products="qt-free"
# Internal Trolltech edition.
# Qt/X11, Qt/Embedded, Qt/Mac
elif [ -f $relpath/LICENSE.TROLL ]
then
    [ "$PLATFORM_QNX" = "maybe" ] && PLATFORM_QNX=yes
    Edition="troll"
    Licensee="Trolltech"
    Products="qt-internal"
# Commercial edition - needs a license.
# Qt/X11, Qt/Embedded, Qt/Mac
elif [ -f $relpath/.LICENSE ]
then
    [ "$PLATFORM_QWS" = "maybe" ] && PLATFORM_QWS=yes
    echo
    Desc=""
    if [ -f $HOME/.qt-license ]
    then
	. $HOME/.qt-license >/dev/null 2>&1
	if [ -z "$LicenseKey" ]
	then
	    echo
	    echo "You are using an old license file."
	    echo
	    echo "Please install the license file supplied by Trolltech,"
	    echo "or install the Qt Free Edition if you intend to develop"
	    echo "free software."
	    exit 1
	fi
    else
	if [ -z "$LicenseKey" ]
	then
	    echo
	    echo "Please enter your license key:"
	    read LicenseKey
	fi
    fi
    if echo $LicenseKey | grep "....-....-...." >/dev/null 2>&1
    then
	# get the first character of the key
	keyTest=`echo $LicenseKey | cut -b1`
	# this character should fit the platform
	if [ "$PLATFORM_QWS" = "yes" ]
	then
	    case $keyTest in
	    A|B|C|D|E|F|G|H|a|b|c|d|e|f|g|h)
		# Qt/Embedded
		echo
		;;
	    *)
		echo
		echo "You are not licensed for the Qt/Embedded platform."
		echo
		echo "Please contact sales@trolltech.com to upgrade your license"
		echo "to include the Qt/Embedded platform, or install the"
		echo "Qt Free Edition if you intend to develop free software."
		exit 1
		;;
	    esac
	elif [ "$PLATFORM_MAC" = "yes" ]
        then
	    case $keyTest in
	    *) ###
		# Qt/Mac
		echo
		;;
	    *)
		echo
		echo "You are not licensed for the Qt/Mac platform."
		echo
		echo "Please contact sales@trolltech.com to upgrade your license"
		echo "to include the Qt/Mac platform."
		exit 1
		;;
	    esac
	else
	    case $keyTest in
	    6|7|8|9|E|F|G|H|e|f|g|h)
		# Qt/X11
		echo
		;;
	    *)
		echo
		echo "You are not licensed for the Qt/X11 platform."
		echo
		echo "Please contact sales@trolltech.com to upgrade your license to"
		echo "include the Qt/X11 platform, or install the Qt Free Edition"
		echo "if you intend to develop free software."
		exit 1
		;;
	    esac
	fi
	case $keyTest in
	4|5|8|9|C|D|G|H|c|d|g|h)
	    # Enterprise
	    Desc="Enterprise"
	    Edition="ent"
	    ;;
	*)
	    # Professional
	    Products=qt-professional
	    Desc="Professional"
	    Edition="pro"
	    ;;
	esac
	case $keyTest in
	3|5|7|9|B|D|F|H|b|d|f|h)
	    # US
	    cp -f $relpath/.LICENSE-US $relpath/LICENSE
	    ;;
	*)
	    cp -f $relpath/.LICENSE $relpath/LICENSE
	    ;;
	esac
    else
	echo
	echo "Invalid license key. Please check the license key."
	exit 1
    fi
else
    echo "The LICENSE, LICENSE.QPL, or LICENSE.GPL file shipped with"
    echo "this software has disappeared."
    echo
    echo "Sorry, you are not licensed to use this software."
    echo "Try re-installing."
    echo
    exit 1
fi

# licensed modules depend on type of commercial license
MODULES="styles tools kernel widgets dialogs iconview workspace"
[ "$Products" != "qt-professional" ] && MODULES="$MODULES network canvas table xml opengl sql"
AVAIL_MODULES=$MODULES
QMAKE_VARS="$QMAKE_VARS \"QT_PRODUCT=$Products\""
QMAKE_VARS="$QMAKE_VARS \"styles += windows motif aqua mac platinum sgi cde motifplus\""


#-------------------------------------------------------------------------------
# parse command line arguments
#-------------------------------------------------------------------------------

# initalize internal variables
CFG_LAZY_DEPS_ALLOWED=no
CFG_EXCEPTION_SUPPORT=unspecified
CFG_INCREMENTAL=auto
CFG_QCONFIG=full
CFG_EMBEDDED=no
CFG_DEBUG=no
CFG_SHARED=yes
CFG_GIF=no
CFG_THREAD=auto
CFG_SM=auto
CFG_XINERAMA=auto
CFG_BIG_CODECS=yes
CFG_ZLIB=yes
CFG_PNG=yes
CFG_LIBPNG=qt
CFG_JPEG=auto
CFG_LIBJPEG=qt
CFG_MNG=auto
CFG_LIBMNG=qt
CFG_XRENDER=auto
CFG_FREETYPE=auto
CFG_QWS_FREETYPE=yes
CFG_SQL_AVAILABLE=
CFG_SQL_AUTODETECTED=
CFG_GFX_AVAILABLE=
CFG_TABLET=auto
CFG_XKB=auto
CFG_NIS=no
CFG_STL=auto
CFG_NAS=no
CFG_REMOTE=no
CFG_QWS_DEPTHS=prompted
D_FLAGS=
I_FLAGS=
L_FLAGS=
R_FLAGS=
l_FLAGS=
QCONFIG_FLAGS=
XPLATFORM=
PLATFORM=$QMAKESPEC
QMAKE_PROJECTS=
QMAKE_IGNORE_PROJECTS="tests/*"
OPT_CONCURRENT=0
CONFIG_FAST=no
OPT_VERBOSE=no
OPT_HELP=

# initalize variables used for installation
QT_INSTALL_PREFIX=/usr/local/qt
QT_INSTALL_DOCS=
QT_INSTALL_HEADERS=
QT_INSTALL_LIBS=
QT_INSTALL_BINS=
### what about QT_INSTALL_SHARED or QT_INSTALL_TEMPLATES for Qt Designer?

# parse the arguments, setting things to "yes" or "no"
while [ -n "$1" ]
do
    case $1 in
    -no-lazydeps)
	CFG_LAZY_DEPS_ALLOWED=no
	;;
    -prefix)
	shift
	QT_INSTALL_PREFIX=$1
	;;
    -docdir)
	shift
	QT_INSTALL_DOCS=$1
	;;
    -headerdir)
	shift
	QT_INSTALL_HEADERS=$1
	;;
    -libdir)
	shift
	QT_INSTALL_LIBS=$1
	;;
    -bindir)
	shift
	QT_INSTALL_BINS=$1
	;;
    -embedded)
	# this option may or may not be followed by an argument
	if echo $1 | grep '^-' >/dev/null 2>&1
	then
	    CFG_EMBEDDED=auto
	else
	    shift;
	    CFG_EMBEDDED=$1
	fi
	if [ "$PLATFORM_QNX" != "no" -a "$PLATFORM_QWS" != "no" ]
	then
	    if [ "$PLATFORM_QNX" = "maybe" ]
	    then
		PLATFORM_QNX=yes
	    elif [ "$PLATFORM_QWS" = "maybe" ]
	    then
		PLATFORM_QWS=yes
	    fi
	else
	    echo "No license exists to enable Qt/Embedded. Disabling."
	    CFG_EMBEDDED=no
	fi
	;;
    -depths)
	shift;
	CFG_QWS_DEPTHS=$1;
	;;
    -no-incremental)
	CFG_INCREMENTAL=no
	;;
    -incremental)
	CFG_INCREMENTAL=yes
	;;
    -qconfig)
	shift
	CFG_QCONFIG=$1
	;;
    -nomake|-no-make)
	shift
	QMAKE_IGNORE_PROJECTS="$QMAKE_IGNORE_PROJECTS $1"
	;;
    -make)
	shift
	if [ -f $relpath/$1 ]
	then
	    QMAKE_PROJECTS="$QMAKE_PROJECTS $relpath/$1"
	else
	    if [ -d $relpath/$1 ]
	    then
		QMAKE_PROJECTS="$QMAKE_PROJECTS `find $relpath/$1 -name '*.pro' -print`"
	    else
		QMAKE_PROJECTS="$QMAKE_PROJECTS `find $relpath/. -name '*.pro' -print`"
	    fi
	fi
	;;
    -profile)
	QMAKE_VARS="$QMAKE_VARS QMAKE_CFLAGS+=-pg QMAKE_CXXFLAGS+=-pg"
	QMAKE_VARS="$QMAKE_VARS QMAKE_LFLAGS+=-pg"
	;;
    -no-g++-exceptions|-no-exceptions)
	CFG_EXCEPTION_SUPPORT=no
	QMAKE_VARS="$QMAKE_VARS \"QMAKE_CFLAGS+=-fno-exceptions\""
	QMAKE_VARS="$QMAKE_VARS \"QMAKE_CXXFLAGS+=-fno-exceptions\""
	QMAKE_VARS="$QMAKE_VARS \"QMAKE_LFLAGS+=-fno-exceptions\""
	;;
    -platform)
	shift
	PLATFORM=$1
	;;
    -xplatform)
	shift
	XPLATFORM=$1
	;;
    -release)
	CFG_DEBUG=no
	;;
    -debug)
	CFG_DEBUG=yes
	;;
    -shared)
	CFG_SHARED=yes
	;;
    -static)
	CFG_SHARED=no
	;;
    -no-gif)
	CFG_GIF=no
	;;
    -qt-gif)
	CFG_GIF=yes
	;;
    -no-sm)
	CFG_SM=no
	;;
    -sm)
	CFG_SM=yes
	;;
    -no-thread)
	CFG_THREAD=no
	;;
    -thread)
	CFG_THREAD=yes
	;;
    -no-xinerama)
	CFG_XINERAMA=no
	;;
    -xinerama)
	CFG_XINERAMA=yes
	;;
    -no-tablet)
	CFG_TABLET=no
	;;
    -tablet)
	CFG_TABLET=yes
	;;
    -stl)
	CFG_STL=yes
	;;
    -no-stl)
	CFG_STL=no
	;;
    -freetype)
	CFG_QWS_FREETYPE=yes
	;;
    -no-freetype)
	CFG_QWS_FREETYPE=no
	;;
    -no-zlib)
	CFG_ZLIB=no
	CFG_LIBPNG=no
	;;
    -qt-zlib)
	CFG_ZLIB=yes
	;;
    -system-zlib)
	CFG_ZLIB=system
	;;
    -no-libpng) # left for commandline compatibility, not documented
	echo "-no-png is left for compatibility, in the future please use -no-imgfmt-png"
	CFG_PNG=no
	;;
    -qt-libpng)
	CFG_LIBPNG=qt
	;;
    -system-libpng)
	CFG_LIBPNG=system
	;;
    -no-mng) # left for commandline compatibility, not documented
	echo "-no-mng is left for compatibility, in the future please use -no-imgfmt-mng"
        CFG_MNG=no
	;;
    -qt-libmng)
        CFG_LIBMNG=qt
	;;
    -system-libmng)
	CFG_LIBMNG=system
	;;
    -no-jpeg) # left for commandline compatibility, not documented
	echo "-no-jpeg is left for compatibility, in the future please use -no-imgfmt-jpeg"
        CFG_JPEG=no
	;;
    -qt-jpeg|-qt-libjpeg)
	if [ "$1" = "-qt-jpeg" ]
	then
	    echo "-qt-jpeg is left for compatibility, in the future please use -qt-libjpeg"
	fi
	CFG_LIBJPEG=qt
	;;
    -system-jpeg|-system-libjpeg)
	if [ "$1" = "-system-jpeg" ]
	then
	    echo "-system-jpeg is left for compatibility, in the future please use -system-libjpeg"
	fi
	CFG_LIBJPEG=system
	;;
    -no-nas-sound)
	CFG_NAS=no
	;;
    -system-nas-sound)
	CFG_NAS=yes
	;;
    -no-big-codecs)
	CFG_BIG_CODECS=no
	;;
    -big-codecs)
	CFG_BIG_CODECS=yes
	;;
    -no-xrender)
	CFG_XRENDER=no
	;;
    -xrender)
	CFG_XRENDER=yes
	;;
    -no-xft)
	CFG_FREETYPE=no
	;;
    -xft)
	CFG_FREETYPE=yes
	;;
    -no-xkb)
	CFG_XKB=no
	;;
    -xkb)
	CFG_XKB=yes
	;;
    -no-nis)
	CFG_NIS=no
	;;
    -nis)
	CFG_NIS=yes
	;;
    -remote)
        CFG_REMOTE=yes
	;;
    -no-remote)
	CFG_REMOTE=no
	;;
    -enable-*)
	MODULE=`echo $1 | sed "s/-enable-//"`
	if [ -n $MODULE -a -d "$relpath/src/$MODULE" ]
	then
	    if echo "${MODULES}" | grep $MODULE >/dev/null 2>&1
	    then
		MODULES="$MODULES $MODULE"
	    fi
	fi
	;;
    -disable-*)
	MODULE=`echo $1 | sed -e "s/-disable-//"`
	if [ -d "$relpath/src/$MODULE" ]
	then
	    MODULES=`echo $MODULES | sed -e "s/$MODULE//"`
	else
	    echo "Unknown module disabled: $MODULE"
	fi
	;;
    -h | -help | --help)
	OPT_HELP=yes
	;;
    -no-*-*|-plugin-*-*|-qt-*-*)
	OPT=`echo $1 | sed "s,^-\([^-]*\).*,\1,"`
	VAR=`echo $1 | sed "s,^-[^-]*-\([^-]*\).*,\1,"`
	VAL=`echo $1 | sed "s,^-[^-]*-[^-]*-\([^-]*\).*,\1,"`
	if [ "$VAR" = "imgfmt" ]
	then
	    [ "$OPT" = "qt" ] && OPT=yes
	    if [ "$OPT" = "no" ] || [ "$OPT" = "yes" ] || [ "$OPT" = "plugin" ]
	    then
	        case "$VAL" in
	        jpeg) CFG_JPEG=$OPT ;;
	        mng) CFG_MNG=$OPT ;;
	        png) CFG_PNG=$OPT ;;
	        *) ERROR=yes ;;
	        esac
            else
	        ERROR=yes
	    fi
	elif [ "$OPT" = "plugin" ] || [ "$OPT" = "qt" ]
	then
	   if [ "$OPT" = "plugin" ]
	   then
	      [ "$VAR" = "style" ] && QMAKE_VARS="$QMAKE_VARS \"${VAR}s -= $VAL\""
	      VAR="${VAR}-${OPT}"
	   elif [ "$VAR" = "sql" ] || [ "$VAR" = "gfx" ]
	   then
	      VAR="${VAR}-driver"
	   fi
	   QMAKE_VARS="$QMAKE_VARS \"${VAR}s += $VAL\""
	elif [ "$OPT" = "no" ]
	then
	   PLUG_VAR="${VAR}-plugin"
	   IN_VAR="${VAR}"
	   if [ "$IN_VAR" = "sql" ] || [ "$IN_VAR" = "gfx" ]
	   then
	      IN_VAR="${IN_VAR}-driver"
	   fi
	   QMAKE_VARS="$QMAKE_VARS \"${IN_VAR}s -= $VAL\" \"${PLUG_VAR}s -= $VAL\""
        fi
        if [ "$ERROR" = "yes" ]
	then
	   echo "$1: unknown argument"
	   OPT_HELP=yes;
	fi
	;;
    -qvfb) # left for commandline compatibility, not documented
	 QMAKE_VARS="$QMAKE_VARS \"gfx-drivers += qvfb\""
	;;
    -no-qvfb) # left for commandline compatibility, not documented
	;;
    -fast)
	CONFIG_FAST=yes
	;;
    -no-fast)
	CONFIG_FAST=no
	;;
    -v)
	# takes two verboses to turn on qmake debugs
	[ "$OPT_VERBOSE" = "yes" ] && QMAKE_SWITCHES="$QMAKE_SWITCHES -d"
	OPT_VERBOSE=yes
	;;
    -j?*)
	OPT_CONCURRENT="`echo $1 | sed 's,-j,,'`"
	;;
    -D?*)
	D_FLAGS="$D_FLAGS `echo $1 | sed 's,-D,,'`"
	;;
    -I?*)
	I_FLAGS="$I_FLAGS $1"
	;;
    -L?*)
	L_FLAGS="$L_FLAGS $1"
	;;
    -R?*)
	R_FLAGS="$R_FLAGS \$\${QMAKE_RPATH}`echo $1 | sed 's,-R,,'`"
	;;
    -l?*)
	l_FLAGS="$l_FLAGS $1"
	;;
    -I)
	shift
	I_FLAGS="$I_FLAGS -I$1"
	;;
    -L)
	shift
	L_FLAGS="$L_FLAGS -L$1"
	;;
    -R)
	shift
	R_FLAGS="$R_FLAGS \$\${QMAKE_RPATH}`echo $1 | sed 's,-R,,'`"
	;;
    *)
	echo "$1: unknown argument"
	OPT_HELP=yes;
	ERROR=yes
	;;
    esac
    shift
done


#-------------------------------------------------------------------------------
# build tree initialization
#-------------------------------------------------------------------------------

### skip this if the user just needs help...
if [ "$OPT_HELP" != "yes" ]
then

# create the include directory (will hold qconfig.h and qmodules.h)
mkdir -p $outpath/include

# create temporary qconfig.h for compiling qmake
# the original file will be restored after qmake is built
if [ -f $outpath/include/qconfig.h ]
then
    mv -f $outpath/include/qconfig.h qconfig.h-hold
fi
echo "// All features enabled while building qmake" >$outpath/include/qconfig.h

# create temporary qmodules.h for compiling qmake
# the original file will be restored after qmake is built
if [ -f $outpath/include/qmodules.h ]
then
    mv -f $outpath/include/qmodules.h qmodules.h-hold
fi
echo "// All modules enabled while building qmake" >$outpath/include/qmodules.h

### make sure qconfig.h and qmodules.h are restored if Ctrl+C
### a better solution would be to copy to a qmake specific
### directory that would be included by qmake only and then
### erased
if [ "$PLATFORM_MAC" = "no" ]
then
trap "\
[ -r qconfig.h-hold ] && mv -f $outpath/qconfig.h-hold $outpath/include/qconfig.h ;\
[ -r qmodules.h-hold ] && mv -f $outpath/qmodules.h-hold $outpath/include/qmodules.h ;\
exit 130" HUP INT TERM
fi

### please add a comment here: what is qdir? why do we set it here?
qdir="\$(QTDIR)"
[ "$relpath" != "$outpath" ] && qdir="$outpath"

# if the source tree is different from the build tree,
# symlink or copy part of the sources
if [ "$relpath" != "$outpath" ]
then
    echo "Preparing build tree..."
    mkdir -p $outpath/bin

    # need a top level makefile, prefer gnu internally
    if [ -f $relpath/GNUmakefile ]
    then
	rm -f $outpath/Makefile
	ln -s $relpath/GNUmakefile $outpath/Makefile
    elif [ -f $relpath/Makefile ]
    then
	rm -f $outpath/Makefile
	ln -s $relpath/Makefile $outpath/Makefile
    else
	echo "No top level Makefile." >&2
	exit 1
    fi

    # symlink the qmake directory
    for a in `find $relpath/qmake`
    do
	my_a=`echo $a | sed "s,^${relpath}/,${outpath}/,"`
	if [ '!' -f $my_a ]
	then
	    if [ -d $a ]
	    then
		# directories are created...
		mkdir -p $my_a
	    else
		a_dir=`dirname $my_a`
		[ -d $a_dir ] || mkdir -p $a_dir
		# ... and files are symlinked
		case `basename $a` in
		*.o|*.d|GNUmakefile*|qmake)
		    ;;
		*)
		    rm -f $my_a
		    ln -s $a $my_a
		    ;;
		esac
	    fi
	fi
    done

    # symlink the mkspecs directory
    rm -f $outpath/mkspecs
    ln -s $relpath/mkspecs $outpath/mkspecs

    # symlink the linguist/doc directory (to make the assistant happy)
    mkdir -p $outpath/tools/linguist
    rm -f $outpath/tools/linguist/doc
    ln -s $relpath/tools/linguist/doc $outpath/tools/linguist/doc

    # symlink the designer/templates directory (to make the designer find
    # the templates)
    mkdir -p $outpath/tools/designer
    rm -f $outpath/tools/designer/templates
    ln -s $relpath/tools/designer/templates $outpath/tools/designer/templates

    # symlink the doc directory
    rm -f $outpath/doc
    ln -s $relpath/doc $outpath/doc

    # binaries from qt
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_MOC=$outpath/bin/moc\""
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_UIC=$outpath/bin/uic\""
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_QMAKE=$outpath/bin/qmake\""
    # hacky src line
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_MOC_SRC=$relpath/src/moc\""
else
    # override the Windows Makefile
    if [ -f "$relpath/GNUmakefile" ]
    then
	rm -f $outpath/Makefile
	cp $relpath/GNUmakefile $outpath/Makefile
    fi

    # we may write in the source tree, let's take advantage of this
    # to test that QTDIR is correctly set to be the source tree
    touch .test.qt.
    if [ '!' -f ${QTDIR}/.test.qt. ]
    then
	rm -f .test.qt.
	echo
	echo
	echo '   The environment variable $QTDIR is not set correctly. It is currently'
	echo '   set to "'$QTDIR'", but it should be set to this directory,'
	echo '   which is "'`pwd`'".'
	echo
	echo '   Please read the INSTALL file for instructions on how to set $QTDIR'
	echo '   correctly. If you have set $QTDIR in your .profile or .login, you '
	echo '   will need to log out and log in again to make the setting effective.'
	echo
	echo
	exit 1
    fi
    rm -f .test.qt.
fi

# find out which awk we want to use, prefer gawk, then nawk, then regular awk
AWK=
for e in gawk nawk awk
do
    if which $e >/dev/null 2>&1 && ( $e -f /dev/null /dev/null ) >/dev/null 2>&1
    then
	AWK=$e
    	break
    fi
done

# find a make command
if ( gmake /dev/null ) >/dev/null 2>&1
then
    MAKE=gmake
else
    if ( make /dev/null ) >/dev/null 2>&1
    then
	MAKE=make
    else
	echo "You don't seem to have 'make' or 'gmake' in your PATH."
	echo "Cannot proceed."
	exit 1
    fi
fi

# remove existing configuration cache
[ -f $outpath/.qmake.cache ] && rm -f $outpath/.qmake.cache

fi ### help


#-------------------------------------------------------------------------------
# auto-detect all that hasn't been specified in the arguments
#-------------------------------------------------------------------------------

if [ "$CFG_EMBEDDED" != "no" ]
then
    case "$UNAME_SYSTEM:$UNAME_RELEASE" in
    QNX:*)
	[ -z "$PLATFORM" ] && PLATFORM=qws/qnx6-generic-g++
	if [ -z "$XPLATFORM" ]
	then
	    [ "$CFG_EMBEDDED" = "auto" ] && CFG_EMBEDDED=generic
	    XPLATFORM="qws/qnx6-$CFG_EMBEDDED-g++"
	fi
	CFG_STL=no ### why?
	;;
    FreeBSD:*)
	[ -z "$PLATFORM" ] && PLATFORM=qws/freebsd-generic-g++
	if [ -z "$XPLATFORM" ]
	then
	    [ "$CFG_EMBEDDED" = "auto" ] && CFG_EMBEDDED=generic
	    XPLATFORM="qws/freebsd-$CFG_EMBEDDED-g++"
	fi
	;;
    SunOS:5*)
	[ -z "$PLATFORM" ] && PLATFORM=qws/solaris-generic-g++
	if [ -z "$XPLATFORM" ]
	then
	    [ "$CFG_EMBEDDED" = "auto" ] && CFG_EMBEDDED=generic
	    XPLATFORM="qws/solaris-$CFG_EMBEDDED-g++"
	fi
	;;
    Linux:*)
	[ -z "$PLATFORM" ] && PLATFORM=qws/linux-generic-g++
	if [ -z "$XPLATFORM" ]
	then
	    if [ "$CFG_EMBEDDED" = "auto" ]
	    then
		case "$UNAME_MACHINE" in
		*86)
		    CFG_EMBEDDED=x86
		    ;;
		*)
		    CFG_EMBEDDED=generic
		    ;;
		esac
	    fi
	    XPLATFORM="qws/linux-$CFG_EMBEDDED-g++"
	fi
	;;
    *)
	echo "Qt/Embedded is not supported on this platform. Disabling."
	CFG_EMBEDDED=no
	PLATFORM_QWS=no
	PLATFORM_QNX=no
	;;
    esac
fi
if [ "$CFG_EMBEDDED" != "yes" -a -z "$PLATFORM" ]
then
    PLATFORM_NOTES=
    case "$UNAME_SYSTEM:$UNAME_RELEASE" in
     Darwin:*)
	PLATFORM=macx-g++
	# PLATFORM=macx-pbuilder
	PLATFORM_NOTES="
	    - Also available for Mac OS X: macx-pbuilder
	"
	;;
     AIX*)
	#PLATFORM=aix-g++
	PLATFORM=aix-xlc
	#PLATFORM=aix-64
	PLATFORM_NOTES="
	    - Also available for AIX: aix-g++
	"
	;;
     QNX:*)
	PLATFORM=qnx-g++
	;;
     GNU:*)
	PLATFORM=hurd-g++
	;;
     BSD/386:*)
	PLATFORM=bsdi-g++
	;;
     dgux:*)
	PLATFORM=dgux-g++
	;;
     ULTRIX:*)
	PLATFORM=ultrix-g++
	;;
     FreeBSD:*)
	PLATFORM=freebsd-g++
	;;
     OpenBSD:*)
	PLATFORM=openbsd-g++
	;;
     NetBSD:*)
	PLATFORM=netbsd-g++
	;;
     IRIX*)
	#PLATFORM=irix-g++
	PLATFORM=irix-n32
	#PLATFORM=irix-64
	#PLATFORM=irix-o32
	PLATFORM_NOTES="
	    - Also available for IRIX: irix-g++ irix-64 irix-o32
	"
	;;
     HP-UX:*)
	#PLATFORM=hpux-g++
	PLATFORM=hpux-acc
	#PLATFORM=hpux-n64
	#PLATFORM=hpux-cc
	#PLATFORM=hpux-o64
	PLATFORM_NOTES="
	    - Also available for HP-UX: hpux-g++ hpux-n64 hpux-cc hpux-o64
	"
	;;
     OSF1:*)
	#PLATFORM=tru64-g++
	PLATFORM=tru64-cxx
	PLATFORM_NOTES="
	    - Also available for Tru64: tru64-g++
	"
	;;
     Linux:*)
	PLATFORM=linux-g++
	PLATFORM_NOTES="
	    - Also available for Linux: linux-kcc linux-icc linux-cxx
	"
	;;
     SunOS:5*)
	#PLATFORM=solaris-g++
	PLATFORM=solaris-cc
	PLATFORM_NOTES="
	    - Also available for Solaris: solaris-g++ solaris-64
	"
	;;
     SunOS:4*)
	PLATFORM=sunos-g++
	;;
     OpenUNIX:*)
	#PLATFORM=openunix-g++
        PLATFORM=openunix-cc
	PLATFORM_NOTES="
	    - Also available for OpenUNIX: openunix-g++
	"
        ;;
     UnixWare:*)
	#PLATFORM=unixware7-g++
	PLATFORM=unixware7-cc
	PLATFORM_NOTES="
	    - Also available for UnixWare 7: unixware7-g++
	"
	;;
     SCO_SV:*)
	#PLATFORM=sco-g++
	PLATFORM=sco-cc
	PLATFORM_NOTES="
	    - Also available for SCO OpenServer: sco-g++
	"
	;;
     UNIX_SV:*)
	PLATFORM=unixware-g++
	;;
     *)
	if [ "$OPT_HELP" != "yes" ]
	then
	    echo
	    for p in $PLATFORMS
	    do
		echo "    $relconf $* -platform $p"
	    done
	    echo
	    echo "The build script does not currently recognize all platforms"
	    echo "supported by Qt."
	    echo "Rerun this script with a -platform option listed to"
	    echo "set the operating system / compiler combination you use."
	    echo
	    exit 2
	fi
    esac
fi

if [ "$CFG_EMBEDDED" = "yes" ]
then
    CFG_SM=no
    MODULES=`echo $MODULES | sed -e 's/opengl//'`
    PLATFORMS=`find $relpath/mkspecs/qws | sed "s,$relpath/mkspecs/qws/,,"`
    [ "$CFG_JPEG" = "auto" ] && CFG_JPEG=no
    [ "$CFG_MNG" = "auto" ] && CFG_MNG=no
else
    PLATFORMS=`find $relpath/mkspecs/ -type f | grep -v qws | sed "s,$relpath/mkspecs/qws/,,"`
fi

if [ "$CFG_LAZY_DEPS_ALLOWED" = "yes" ]
then
    ${MAKE} --version | grep GNU >/dev/null 2>&1 && QMAKE_CONFIG="$QMAKE_CONFIG GNUmake"
fi

if [ "x$OPT_CONCURRENT" = "x0" ] && echo $MAKEFLAGS | grep '.* *-j[0-9]* *.*' >/dev/null 2>&1
then
    OPT_CONCURRENT=`echo $MAKEFLAGS | sed "s,.* *-j\([0-9]*\) *.*,\1,"`
fi

[ -z "$XPLATFORM" ] && XPLATFORM="$PLATFORM"
if [ -d "$PLATFORM" ]
then
  QMAKESPEC="$PLATFORM"
else
  QMAKESPEC="$relpath/mkspecs/${PLATFORM}"
fi
if [ -d "$XPLATFORM" ]
then
  XQMAKESPEC="$XPLATFORM"
else
  XQMAKESPEC="$relpath/mkspecs/${XPLATFORM}"
fi
if [ "$QMAKESPEC" = "$XQMAKESPEC" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG nocrosscompiler"
fi

# check specified platforms are supported
if [ '!' -d "$QMAKESPEC" ]
then
    echo
    echo
    echo "   The specified system/compiler is not supported: $QMAKESPEC"
    echo "   Please see the PLATFORMS file for a complete list."
    echo
    echo
    exit 2
fi
if [ '!' -d "$XQMAKESPEC" ]
then
    echo
    echo
    echo "   The specified system/compiler is not supported: $XQMAKESPEC"
    echo "   Please see the PLATFORMS file for a complete list."
    echo
    echo
    exit 2
fi
if [ '!' -f "${XQMAKESPEC}/qplatformdefs.h" ]
then
    echo
    echo
    echo "   The specified system/compiler port is not complete:"
    echo
    echo "       $XQMAKESPEC/qplatformdefs.h"
    echo
    echo "   Please contact qt-bugs@trolltech.com."
    echo
    echo
    exit 2
fi

# now look at the configs and figure out what platform we are config'd for
[ ! -z "`grep QMAKE_LIBS_X11 $XQMAKESPEC/qmake.conf | awk '{print $3;}'`" ] && PLATFORM_X11=yes
### echo "$XQMAKESPEC" | grep mkspecs/qws >/dev/null 2>&1 && PLATFORM_QWS=yes

# find default thread option for target
if grep >/dev/null '^QMAKE_LIBS_THREAD' $XQMAKESPEC/qmake.conf
then
    AUTOTHREAD=yes
    AUTOTHREAD=no  ### leave off for now
else
    AUTOTHREAD=never
fi
# common qmake.conf file but dependency on OS version
if [ "$UNAME_SYSTEM" = "HP-UX" ]
then
    if echo $UNAME_RELEASE | grep -E "^B\.(09|10)" >/dev/null 2>&1
    then
	AUTOTHREAD=never
    fi
fi
if [ $AUTOTHREAD = never ]
then
    if [ "$CFG_THREAD" = "yes" ]
    then
	echo
	echo "ERROR: Qt is not configured to support threading on this platform"
	echo "       See the THREAD settings in $XQMAKESPEC/qmake.conf"
	echo
	exit 2
    fi
    AUTOTHREAD=no
fi
[ "$CFG_THREAD" = "auto" ] && CFG_THREAD=$AUTOTHREAD


#-------------------------------------------------------------------------------
# tests that don't need qmake (must be run before displaying help)
#-------------------------------------------------------------------------------

# unix
unixtests=$relpath/config.tests/unix

# auto-detect SQL-modules support
if echo $MODULES | grep sql >/dev/null
then
    CFG_SQL_AVAILABLE=`find $relpath/plugins/src/sqldrivers/* -prune -type d -print | awk -F/ '{print $NF}'`
    ### is the following line really needed???
#    CFG_SQL_AVAILABLE=`echo $CFG_SQL_AVAILABLE`
    MYSQL_REQ="-lmysqlclient mysql.h"
    OCI_REQ="-lclntsh -lwtc8 oci.h"
    PSQL_REQ="-lpq postgres.h libpq/libpq-fs.h catalog/pg_type.h libpq-fe.h"
    ODBC_REQ="-lodbc sql.h sqlext.h"
    TDS_REQ="-lsybdb sybfront.h sybdb.h"
    for _SQLDR in $CFG_SQL_AVAILABLE
    do
	case $_SQLDR in
	mysql)
	    $unixtests/checkavail "MySQL" $OPT_VERBOSE $MYSQL_REQ $L_FLAGS $I_FLAGS && CFG_SQL_AUTODETECTED="$CFG_SQL_AUTODETECTED mysql"
	;;
	psql)
	    $unixtests/checkavail "PostgreSQL" $OPT_VERBOSE $PSQL_REQ $L_FLAGS $I_FLAGS && CFG_SQL_AUTODETECTED="$CFG_SQL_AUTODETECTED psql"
	    ;;
	odbc)
	    $unixtests/checkavail "ODBC" $OPT_VERBOSE $ODBC_REQ $L_FLAGS $I_FLAGS && CFG_SQL_AUTODETECTED="$CFG_SQL_AUTODETECTED odbc"
	    ;;
	oci)
	    $unixtests/checkavail "OCI" $OPT_VERBOSE $OCI_REQ $L_FLAGS $I_FLAGS && CFG_SQL_AUTODETECTED="$CFG_SQL_AUTODETECTED oci"
	    ;;
	tds)
	    $unixtests/checkavail "TDS" $OPT_VERBOSE $TDS_REQ $L_FLAGS $I_FLAGS && CFG_SQL_AUTODETECTED="$CFG_SQL_AUTODETECTED tds"
	    ;;
	*)
	    if [ "$OPT_VERBOSE" = "yes" ]
	    then
		echo "unknown SQL driver: $_SQLDR"
	    fi
	    ;;
	esac
    done
fi

# auto-detect NIS support
    if [ "$CFG_NIS" != "no" ]
    then
	CFG_NIS=yes
	$unixtests/nis.test $XQMAKESPEC $OPT_VERBOSE $L_FLAGS $I_FLAGS && CFG_NIS=no
    fi

# x11
if [ "$PLATFORM_X11" = "yes" ]
then
    x11tests=$relpath/config.tests/x11

    # auto-detect OpenGL support
    if echo $MODULES | grep opengl >/dev/null
    then
	$x11tests/opengl.test $XQMAKESPEC $CFG_THREAD $OPT_VERBOSE $L_FLAGS $I_FLAGS && MODULES=`echo $MODULES | sed -e 's/opengl//'`
    fi
    # auto-detect XRender support
    if [ "$CFG_XRENDER" != "no" ]
    then
	CFG_XRENDER=yes
	$x11tests/xrender.test $XQMAKESPEC $OPT_VERBOSE $L_FLAGS $I_FLAGS && CFG_XRENDER=no && CFG_FREETYPE=no
    else
	CFG_FREETYPE=no
    fi
    # auto-detect XftFreeType support
    if [ "$CFG_XRENDER" = "yes" ] && [ "$CFG_FREETYPE" != "no" ]
    then
	CFG_FREETYPE=yes
	$x11tests/xfreetype.test $XQMAKESPEC $OPT_VERBOSE $x11tests $L_FLAGS $I_FLAGS && CFG_FREETYPE=no
    fi
    # add freetype2 include path
    if [ "$CFG_FREETYPE" = "yes" ] && [ -f $x11tests/xfreetype.inc ]
    then
	QMAKE_VARS="$QMAKE_VARS \"INCLUDEPATH+=`cat $x11tests/xfreetype.inc`\""
    fi
    rm -f $x11tests/xfreetype.inc
    # add XftFreetype specific config options
    if [ "$CFG_FREETYPE" = "yes" ] && [ -f $x11tests/xfreetype.cfg ]
    then
	QMAKE_CONFIG="$QMAKE_CONFIG `cat $x11tests/xfreetype.cfg`"
    fi
    rm -f $x11tests/xfreetype.cfg
    # auto-detect Session Management support
    if [ "$CFG_SM" = "auto" ]
    then
	CFG_SM=yes
	$x11tests/sm.test $XQMAKESPEC $OPT_VERBOSE $L_FLAGS $I_FLAGS && SM=no
    fi
    # auto-detect Xinerama support
    if [ "$CFG_XINERAMA" != "no" ]
    then
	CFG_XINERAMA=yes
	$x11tests/xinerama.test $XQMAKESPEC $OPT_VERBOSE $L_FLAGS $I_FLAGS && CFG_XINERAMA=no
    fi
    # auto-detect tablet support (currenlty only in IRIX)
    if [ "$CFG_TABLET" = "auto" ]
    then
	case $PLATFORM in
	irix-*)
	    CFG_TABLET=yes
	    $x11tests/xinput.test $XQMAKESPEC $OPT_VERBOSE $L_FLAGS $I_FLAGS && CFG_TABLET=no
	    ;;
	*)
	    CFG_TABLET=no
	    ### add error message for the "yes" case on non-IRIX systems
	    ;;
	esac
    fi
    # auto-detect XKB support
    if [ "$CFG_XKB" != "no" ]
    then
	CFG_XKB=yes
	$x11tests/xkb.test $XQMAKESPEC $OPT_VERBOSE $L_FLAGS $I_FLAGS && CFG_XKB=no
    fi
fi

# embedded graphics
if [ "$CFG_EMBEDDED" = "yes" ]
then
    CFG_GFX_AVAILABLE=`find $relpath/plugins/src/gfxdrivers/* -prune -type d -print | awk -F/ '{print $NF}'`
    CFG_GFX_AVAILABLE=`echo $CFG_GFX_AVAILABLE`
fi


#-------------------------------------------------------------------------------
# help - interactive parts of the script _after_ this section please
#-------------------------------------------------------------------------------

# next, emit a usage message if something failed.
if [ "$OPT_HELP" = "yes" ]
then
    [ "x$ERROR" = "xyes" ] && echo
    if [ "$CFG_THREAD" = "yes" ]
    then
	THY="*"
	THN=" "
    else
	THY=" "
	THN="*"
    fi
    if [ "$CFG_NIS" = "no" ]
    then
	NSY=" "
	NSN="*"
    else
	NSY="*"
	NSN=" "
    fi
    if [ "$CFG_STL" = "auto" ]
    then
	SHY="+"
	SHN=" "
    else
	SHY=" "
	SHN="*"
    fi

    cat <<EOF
Usage:  $relconf [-prefix dir] \\
	[-docdir dir] [-headerdir dir] [-libdir dir] [-bindir dir] \\
	[-debug] [-release] [-qt-gif] [-no-gif] [-sm] [-no-sm] [-stl] [-no-st] \\
	[-qt-zlib] [-system-zlib] [-qt-libpng] [-system-libpng] \\
	[-no-jpeg] [-system-jpeg] [-no-thread] [-thread] \\
	[-Istring] [-lstring] [-Lstring] [-Rstring] [-enable-<module>] \\
	[-disable-<module>] [-with-<module setting>] [-without-<module setting>] \\
	[-fast] [-nofast]

Installation options:

 These are optional, but you may specify install directories.

    -prefix dir ........ This will install everything relative dir
			  (default $QT_INSTALL_PREFIX)

 You may use these to separate different parts of the install:

    -bindir dir ........ Executables will be installed to dir
			  (default PREFIX/bin)
    -libdir dir ........ Libraries will be installed to dir
			  (default PREFIX/lib)
    -docdir dir ........ Documentation will be installed to dir
			  (default PREFIX/doc)
    -headerdir dir ..... Headers will be installed to dir
			  (default PREFIX/include)

Configure options:

 The defaults (*) are usually acceptable.  If marked with a plus (+) a test
 for that feature has not been done yet, but will be evaluated later, the
 plus simply denotes the default value. Here is a short explanation of each
 option:

 *  -release ........... Compile and link Qt with debugging turned off.
    -debug ............. Compile and link Qt with debugging turned on.

 *  -shared ............ Create and use a shared Qt library (libqt.so).
    -static ............ Create and use a static Qt library (libqt.a).

 *  -no-gif ............ Do not compile in GIF reading support.
    -qt-gif ............ Compile in GIF reading support.
			 See src/kernel/qgif.h

 *  -qt-zlib ........... Use the zlib bundled with Qt.
    -system-zlib ....... Use zlib from the operating system
			 See http://www.info-zip.org/pub/infozip/zlib

    -fast .............. Configure Qt quickly by generating Makefiles only for
			 library and subdirectory targets.  All other Makefiles
			 are created as wrappers, which will in turn run qmake.
 *  -no-fast ........... Configure Qt normally by generating Makefiles for all
			 project files.

    -profile ........... Enable profiling with gprof (adds -pg options)

    -no-g++-exceptions . Disable exceptions on platforms using the GNU C++
			 compiler by using the -fno-exceptions flag.

    -platform target ... The operating system and compiler you are building
			 on ($PLATFORM).
    -xplatform target .. The target platform when cross-compiling.

			 See the PLATFORMS file for a list of supported
			 operating systems and compilers.


    -Dstring ........... Add an explicit define to the preprocessor.
    -Istring ........... Add an explicit include path.
    -Lstring ........... Add an explicit library path.
    -Rstring ........... Add an explicit dynamic library runtime search path.
    -lstring ........... Add an explicit library.


    -enable-<module> .......... Enables a module where module is one of:
				$AVAIL_MODULES
    -disable-<module> ......... Disables a module where module is one of:
				$AVAIL_MODULES

    -qt-sql-<driver> .......... Enable a SQL <driver> in the Qt Library, by
                                default none are turned on.
    -plugin-sql-<driver> ...... Enable SQL <driver> as a plugin to be linked
                                to at run time.
    -no-sql-<driver> .......... Disable SQL <driver> entirely.

                                Possible values for <driver>: [ $CFG_SQL_AVAILABLE ]
                                Auto-Detected on this system: [$CFG_SQL_AUTODETECTED ]

    -qt-style-<style> ......... Enable a GUI <style> in the Qt Library, by
                                default all available are on.
    -plugin-style-<style> ..... Enable GUI <style> as a plugin to be linked
                                to at run time.
    -no-style-<style> ......... Disable GUI <style> entirely.

 $THN  -no-thread ......... Do not compile threading support.
 $THY  -thread ............ Compile threading support.

 $SHN  -no-stl ............ Do not compile STL support.
 $SHY  -stl ............... Compile STL support.

    -remote ............ Enable remote control support.
 *  -no-remote ......... Disable remote control support.

Image Formats:

    -plugin-imgfmt-<format> Enable format (png, jpeg, or mng) to
                            be linked to at runtime. Uses specified
			    lib<format>.
    -qt-imgfmt-<format> ... Enable format (png, jpeg, or mng) to
                            be linked into Qt. Uses specified
			    lib<format>.
    -no-imgfmt-<format> ... Fully disable format (png, jpeg, or mng)
                            from Qt.

Third Party Image Loading Libraries:

 *  -qt-libpng ......... Use the libpng bundled with Qt.
    -system-libpng ..... Use libpng from the operating system.
			 See http://www.libpng.org/pub/png

 *  -qt-libjpeg ........ Use the libjpeg bundled with Qt.
    -system-libjpeg .... Use jpeglib from the operating system.
			 See http://www.ijg.org

 *  -qt-libmng ......... Use the libmng bundled with Qt.
    -system-libmng ..... Use libmng from the operating system.
			 See http://www.libmng.com
EOF

if [ "$PLATFORM_X11" = "yes" ]
then
    if [ "$CFG_SM" = "no" ]
    then
	SMY=" "
	SMN="*"
    else
	SMY="*"
	SMN=" "
    fi
    if [ "$CFG_XINERAMA" = "no" ]
    then
	XRY=" "
	XRN="*"
    else
	XRY="*"
	XRN=" "
    fi
    if [ "$CFG_FREETYPE" = "no" ]
    then
	XFTY=" "
	XFTN="*"
    else
	XFTY="*"
	XFTN=" "
    fi
    if [ "$CFG_XRENDER" = "no" ]
    then
	XRY=" "
	XRN="*"
    else
	XRY="*"
	XRN=" "
    fi
    if [ "$CFG_TABLET" = "no" ]
    then
	XIY=" "
	XIN="*"
    else
	XIY="*"
	XIN=" "
    fi
    if [ "$CFG_XKB" = "no" ]
    then
        XKY=" "
        XKN="*"
    else
        XKY="*"
        XKN=" "
    fi
    cat << EOF

Qt/X11 only:

 *  -no-nas-sound ...... Do not compile in NAS sound support.
    -system-nas-sound .. Use NAS libaudio from the operating system.
			 See http://radscan.com/nas.html

 $SMN  -no-sm ............. Do not support X Session Management.
 $SMY  -sm ................ Support X Session Management, links in -lSM -lICE.

 $XRN  -no-xinerama ....... Do not compile Xinerama (multihead) support.
 $XRY  -xinerama .......... Compile Xinerama support.
			 Requires X11/extensions/Xinerama.h and libXinerama.

 $XRN  -no-xrender ........ Do not compile XRender support.
 $XRY  -xrender ........... Compile XRender support.
			 Requires X11/extensions/Xrender.h and libXrender.

 $XFTN  -no-xft ............ Do not compile XftFreeType (anti-aliased font) support.
 $XFTY  -xft ............... Compile XftFreeType support.
			 Requires X11/Xft/XftFreetype.h and libXft.

 $XIN  -no-tablet ......... Do not compile Tablet support.
 $XIY  -tablet ............ Compile Tablet support.
			 Requires IRIX with wacom.h and libXi or
			 XFree86 with X11/extensions/XInput.h and libXi.

 $XKN  -no-xkb ............ Do not compile XKB (X KeyBoard extension) support.
 $XKY  -xkb ............... Compile XKB support.

EOF
fi

if [ "$PLATFORM_QWS" = "yes" -o "$PLATFORM_QNX" = "yes" ]
then
    cat << EOF

Qt/Embedded only:

    -embedded arch...... This will enable the embedded build, you must have a
			 proper license for this switch to work.

    -no-freetype ....... Qt/Embedded only: do not compile in FreeType2 support.
 *  -freetype .......... Qt/Embedded only: add FreeType2 font support.

    -no-zlib ........... No compression library -- implies -no-libpng

    -qconfig local ..... Use src/tools/qconfig-local.h rather than the
			 default ($CFG_QCONFIG).

    -depths list ....... Comma-separated list of supported bit-per-pixel
			 depths, from:  4, 8, 16, 24, and 32.
			 (8bpp is required by the VGA16 driver)

    -qt-gfx-<driver> ... Enable a graphics <driver> in the Qt Library.
    -plugin-gfx-<driver> Enable graphics <driver> as a plugin to be
                         linked to at run time.
    -no-gfx-<driver> ... Disable graphics <driver> entirely.

                         Possible values for <driver>: [ $CFG_GFX_AVAILABLE ]

EOF
fi

   [ "x$ERROR" = "xyes" ] && exit 1
   exit 0
fi


# -----------------------------------------------------------------------------
# LICENSING, INTERACTIVE PART
# -----------------------------------------------------------------------------

# check for license confirmation
if [ "$Edition" = "free" ]
then
    while :
    do
	if [ "$PLATFORM_QWS" = "yes" ]
	then
	    echo
	    echo "This is the Qt/Embedded Free Edition."
	    echo
	    echo "You are licensed to use this software under the terms of"
	    echo "the GNU General Public License (GPL)."
	    echo
	    affix="the"
	elif [ "$PLATFORM_X11" = "yes" ]
	then
	    echo
	    echo "This is the Qt/X11 Free Edition."
	    echo
	    echo "You are licensed to use this software under the terms of either"
	    echo "the Q Public License (QPL) or the GNU General Public License (GPL)."
	    echo
	    echo "Type 'Q' to view the Q Public License."
	    affix="either"
	else
	    echo
	    echo "Internal error."
	    echo
	    exit 2
	fi
	echo "Type 'G' to view the GNU General Public License."
	echo "Type 'yes' to accept this license offer."
	echo "Type 'no' to decline this license offer."
	echo
	echo "Do you accept the terms of $affix license?"
	read acceptance
	if [ "$acceptance" = "yes" ]
	then
	    break
	elif [ "$acceptance" = "no" ]
	then
	    echo
	    echo "You are not licensed to use this software."
	    echo
	    exit 0
	elif [ "$acceptance" = "G" -o "$acceptance" = "g" ]
	then
	    more $relpath/LICENSE.GPL
	elif [ "$acceptance" = "Q" -o "$acceptance" = "q" ]
	then
	    if [ "$PLATFORM_QWS" != "yes" ]
	    then
		more $relpath/LICENSE.QPL
	    fi
	fi
    done
elif [ "$Edition" = "troll" ]
then
    if [ "$PLATFORM_QNX" = "yes" ]
    then
	Platform="Qt/QNX"
    elif [ "$PLATFORM_QWS" = "yes" ]
    then
	Platform="Qt/Embedded"
    elif [ "$PLATFORM_X11" = "yes" ]
    then
	Platform="Qt/X11"
    elif [ "$PLATFORM_MAC" = "yes" ]
    then
	Platform="Qt/Mac"
    else
	echo
	echo "Internal error."
	echo
	exit 2
    fi
    echo
    echo "This is the Trolltech in-house version of $Platform."
    echo
else
    if [ -f $HOME/.qt-license ]
    then
	ExpiryDate=`echo $ExpiryDate | sed -e "s,-,,g" | tr -d "\n\r"`
	[ -z "$ExpiryDate" ] && ExpiryDate="0"
	Today=`date +%Y%m%d`
	if [ "$Today" -gt "$ExpiryDate" ]
	then
	    echo
	    echo "WARNING  WARNING  WARNING  WARNING"
	    echo
	    echo "  Your support and upgrade period has expired."
	    echo
	    echo "  You may continue to use your last licensed release"
	    echo "  of Qt under the terms of your existing license"
	    echo "  agreement. But you are not entitled to technical"
	    echo "  support, nor are you entitled to use any more recent"
	    echo "  Qt releases."
	    echo
	    echo "  Please contact sales@trolltech.com to renew your"
	    echo "  support and upgrades for this license."
	    echo
	    echo "WARNING  WARNING  WARNING  WARNING"
	    echo
	    sleep 3
	fi
    fi
    if [ "$PLATFORM_QWS" = "yes" ]
    then
	Platform="Qt/Embedded"
    elif [ "$PLATFORM_X11" = "yes" ]
    then
	Platform="Qt/X11"
    elif [ "$PLATFORM_MAC" = "yes" ]
    then
	Platform="Qt/Mac"
    else
	echo >&2
	echo "Internal error." >&2
	echo >&2
	exit 2
    fi
    echo
    echo "This is the $Platform $Desc Edition."
    echo
    while :
    do
	echo
	echo "Type '?' to view the $Platform License."
	echo "Type 'yes' to accept this license offer."
	echo "Type 'no' to decline this license offer."
	echo
	echo "Do you accept the terms of the $Platform License?"
	read acceptance
	if [ "$acceptance" = "yes" ]
	then
	    break
	elif [ "$acceptance" = "no" ]
	then
	    echo
	    echo "You are not licensed to use this software."
	    echo
	    exit 0
	else [ "$acceptance" = "?" ]
	    more $relpath/LICENSE
	fi
    done
fi


# -----------------------------------------------------------------------------
# build qmake
# -----------------------------------------------------------------------------

# symlink includes
if [ -x "$relpath/bin/syncqt" ]
then
    QTDIR=$relpath $relpath/bin/syncqt -inc $relpath/include
    # when doing shadow builds, make sure we symlink includes there too
    if [ "$relpath" != "$outpath" ]
    then
	QTDIR=$relpath $relpath/bin/syncqt -inc $outpath/include
    fi
fi

# build qmake
if true ###[ '!' -f "$outpath/bin/qmake" ]
then
    echo "Creating qmake. Please wait..."
    rm -f mkspecs/default
    ln -s `basename $QMAKESPEC` mkspecs/default
    # fix makefiles
    for mkfile in GNUmakefile Makefile
    do
	EXTRA_LFLAGS=
	EXTRA_CFLAGS=
	in_mkfile="${mkfile}.in"
	if [ "$mkfile" = "Makefile" ]
	then
#	    if which qmake >/dev/null 2>&1 && [ -f qmake/qmake.pro ]; then
#		(cd qmake && qmake) >/dev/null 2>&1 && continue
#	    fi
	    in_mkfile="${mkfile}.unix"
	fi
	in_mkfile="$relpath/qmake/$in_mkfile"
	mkfile="$outpath/qmake/$mkfile"

	rm -f $mkfile
	echo "########################################################################" >$mkfile
	echo "## This file was autogenerated by configure, all changes will be lost ##" >>$mkfile
	echo "########################################################################" >>$mkfile
	grep "QMAKE_CC[^_A-Z0-9]" $QMAKESPEC/qmake.conf | sed "s,QMAKE_CC,CC," >>$mkfile
	grep "QMAKE_CXX[^_A-Z0-9]" $QMAKESPEC/qmake.conf | sed "s,QMAKE_CXX,CXX," >>$mkfile
	if [ "$CFG_DEBUG" = "yes" ]
	then
            grep "QMAKE_CFLAGS_DEBUG[^_A-Z0-9]" $QMAKESPEC/qmake.conf >> $mkfile
	    EXTRA_CFLAGS="$EXTRA_CFLAGS \$(QMAKE_CFLAGS_DEBUG)"
        fi
	if [ "$PLATFORM_MAC" = "yes" ]
	then
	    echo "CARBON_CFLAGS+=-I/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/" >>$mkfile
	    echo "CARBON_LFLAGS +=-framework Carbon" >> $mkfile
	    EXTRA_LFLAGS="$EXTRA_LFLAGS \$(CARBON_LFLAGS)"
	    EXTRA_CFLAGS="$EXTRA_CFLAGS \$(CARBON_CFLAGS)"
        fi
	if [ -z "$QT_INSTALL_BINS" ]
	then
	    BIN_DIR="${QT_INSTALL_PREFIX}/bin"
	else
	    BIN_DIR="$QT_INSTALL_BINS"
        fi
        echo >>$mkfile
	sed -e "s,@REL_QTDIR@,$relpath,g" -e "s,@OUT_QTDIR@,$outpath,g" \
	    -e "s,@QMAKE_CFLAGS@,$EXTRA_CFLAGS," -e "s,@QMAKE_LFLAGS@,$EXTRA_LFLAGS," \
	    -e "s,@QT_INSTALL_BINS@,$BIN_DIR,g" -e "s,@QT_INSTALL_PREFIX@,$QT_INSTALL_PREFIX,g" \
	    -e "s,@QMAKESPEC@,$QMAKESPEC,g" $in_mkfile >>$mkfile
    done

    (cd $outpath/qmake; $MAKE || (echo "QMake failed to build. Aborting." && exit 2)) || exit 2
fi


#-------------------------------------------------------------------------------
# tests that need qmake
#-------------------------------------------------------------------------------

# work around broken X11 headers when using GCC 2.95 or later
if [ "$PLATFORM_X11" = "yes" ]
then
    NOTYPE=no
    $x11tests/notype.test $XQMAKESPEC $OPT_VERBOSE $relpath $outpath && NOTYPE=yes
    [ $NOTYPE = "yes" ] && QMAKE_VARS="$QMAKE_VARS  \"QMAKE_CXXFLAGS+=-fpermissive\""
fi

# find if the compiler supports enough of STL for our purposes
if [ $PLATFORM = "hpux-acc" -a "$CFG_STL" != "no" ]
then
   echo
   echo "As of aCC A.3.0.30 you may enable STL support in Qt by adding -AA"
   echo "to the QMAKE_CXXFLAGS and QMAKE_LFLAGS variables in"
   echo "$XQMAKESPEC/qmake.conf"
   echo "and re-running configure. Make sure to use the -AA compiler switch"
   echo "in all your software projects using Qt as it turns on the new C++"
   echo "Standard Library which is not binary compatible with the old one."
   echo
fi

if [ "$CFG_STL" = "auto" ]
then
    CFG_STL=yes
    $unixtests/stl.test $XQMAKESPEC $OPT_VERBOSE $relpath $outpath && CFG_STL=no
fi


#-------------------------------------------------------------------------------
# ask for all that hasn't been auto-detected or specified in the arguments
#-------------------------------------------------------------------------------

### fix this: user input should be validated in a loop
if [ "$CFG_QWS_DEPTHS" = "prompted" -a "$CFG_EMBEDDED" = "yes" ]
then
    echo
    echo "Choose pixel-depths to support:"
    echo
    echo "   4. 4bpp grayscale - also enables 8bpp"
    echo "   8. 8bpp"
    echo "  16. 16bpp"
    echo "  24. 24bpp - also enables 32bpp"
    echo "  32. 32bpp"
    echo
    echo "Each depth adds around 100Kb on 80386."
    echo
    echo "Your choices (default 8,16,32):"
    read CFG_QWS_DEPTHS
    if [ -z "$CFG_QWS_DEPTHS" ]
    then
	CFG_QWS_DEPTHS=8,16,32
    fi
fi
if [ -n "$CFG_QWS_DEPTHS" -a "$CFG_EMBEDDED" = "yes" ]
then
    D4=;D8=;D16=;D24=;D32=
    for D in `echo "$CFG_QWS_DEPTHS" | sed -e 's/,/ /g'`
    do
	case "$D" in
	    4) D4=y; D8=y
	;;  8) D8=y
	;; 16) D16=y
	;; 24) D24=y; D32=y
	;; 32) D32=y
	esac
    done
    if [ -z "$D4" ]
    then
	QCONFIG_FLAGS="$QCONFIG_FLAGS QT_NO_QWS_DEPTH_4"
    fi
    if [ -z "$D8" ]
    then
	QCONFIG_FLAGS="$QCONFIG_FLAGS QT_NO_QWS_DEPTH_8"
    fi
    if [ -z "$D16" ]
    then
	QCONFIG_FLAGS="$QCONFIG_FLAGS QT_NO_QWS_DEPTH_16"
    fi
    if [ -z "$D24" ]
    then
	QCONFIG_FLAGS="$QCONFIG_FLAGS QT_NO_QWS_DEPTH_24"
    fi
    if [ -z "$D32" ]
    then
	QCONFIG_FLAGS="$QCONFIG_FLAGS QT_NO_QWS_DEPTH_32"
    fi
fi


#-------------------------------------------------------------------------------
# part of configuration information goes into qconfig.h
#-------------------------------------------------------------------------------

[ -r qconfig.h-hold ] && mv -f qconfig.h-hold $outpath/include/qconfig.h

case "$CFG_QCONFIG" in
minimal|small|medium|large|full)
    # these are a sequence of increasing functionality
    for c in minimal small medium large full
    do
	QMAKE_CONFIG="$QMAKE_CONFIG $c-config"
	if [ "$CFG_QCONFIG" = $c ]
	then
	    break;
	fi
    done
    ;;
*)
    # not known to be sufficient for anything
    if [ ! -f $relpath/src/tools/qconfig-$CFG_QCONFIG.h ]
    then
	echo >&2 "No such configuration: $CFG_QCONFIG"
	OPT_HELP=yes
    fi
esac
case "$CFG_QCONFIG" in
full)
    echo "// Everything" >$outpath/include/qconfig.h.new
    ;;
*)
    QCONFIGFILE=qconfig-$CFG_QCONFIG.h
    echo "// Copied from $QCONFIGFILE" >$outpath/include/qconfig.h.new
    cat $relpath/src/tools/$QCONFIGFILE >>$outpath/include/qconfig.h.new
    ;;
esac
cat >> $outpath/include/qconfig.h.new <<EOF

// From configure
#define QT_INSTALL_PREFIX "$QT_INSTALL_PREFIX"
#define QT_PRODUCT_LICENSEE "$Licensee"
#define QT_PRODUCT_LICENSE "$Products"

// Compile time features
EOF
if [ "$CFG_STL" = "no" ]
then
    QCONFIG_FLAGS="$QCONFIG_FLAGS QT_NO_STL"
else
    QMAKE_CONFIG="$QMAKE_CONFIG stl"
fi

if [ -n "$QCONFIG_FLAGS" ]
then
    for cfg in $QCONFIG_FLAGS
    do

cat >>$outpath/include/qconfig.h.new << EOF
#ifndef $cfg
# define $cfg
#endif

EOF
    done
fi

# avoid unecessary rebuilds by copying only if qconfig.h has changed
if cmp -s $outpath/include/qconfig.h $outpath/include/qconfig.h.new
then
    rm -f $outpath/include/qconfig.h.new
else
    [ -f $outpath/include/qconfig.h ] && chmod +w $outpath/include/qconfig.h
    mv $outpath/include/qconfig.h.new $outpath/include/qconfig.h
    chmod -w $outpath/include/qconfig.h
fi


#-------------------------------------------------------------------------------
# ??? ### please add a title to this section
#-------------------------------------------------------------------------------

# build up the variables for output
QMAKE_OUTDIR=""
case $Products in
qt-enterprise)
    QMAKE_CONFIG="$QMAKE_CONFIG enterprise"
    ;;
qt-internal)
    # QMAKE_CONFIG="$QMAKE_CONFIG internal"
    ;;
*)
    ;;
esac

if [ "$CFG_DEBUG" = "yes" ]
then
    QMAKE_OUTDIR="${QMAKE_OUTDIR}debug"
    QMAKE_CONFIG="$QMAKE_CONFIG debug"
elif [ "$CFG_DEBUG" = "no" ]
then
    QMAKE_OUTDIR="${QMAKE_OUTDIR}release"
    QMAKE_CONFIG="$QMAKE_CONFIG release"
fi
if [ "$CFG_THREAD" = "yes" ]
then
    QMAKE_OUTDIR="${QMAKE_OUTDIR}-mt"
    QMAKE_CONFIG="$QMAKE_CONFIG thread"
fi
if [ "x$CFG_EMBEDDED" = "xyes" ]
then
    QMAKE_OUTDIR="${QMAKE_OUTDIR}-emb-$CFG_EMBEDDED"
    QMAKE_CONFIG="$QMAKE_CONFIG embedded"
    rm -f src/.moc/$QMAKE_OUTDIR/allmoc.cpp # needs remaking if config changes
fi
QMAKE_VARS="$QMAKE_VARS \"QMAKE_LIBDIR_QT=$qdir/lib\""
QMAKE_VARS="$QMAKE_VARS \"OBJECTS_DIR=.obj/$QMAKE_OUTDIR\" \"MOC_DIR=.moc/$QMAKE_OUTDIR\""

if [ "$CFG_SHARED" = "no" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG staticlib"
elif [ "$CFG_SHARED" = "yes" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG dll"
fi
[ "$CFG_LIBJPEG" = "system" ] && QMAKE_CONFIG="$QMAKE_CONFIG system-jpeg"
if [ "$CFG_JPEG" = "no" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG no-jpeg"
elif [ "$CFG_JPEG" = "yes" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG jpeg"
fi
[ "$CFG_LIBMNG" = "system" ] && QMAKE_CONFIG="$QMAKE_CONFIG system-mng"
if [ "$CFG_MNG" = "no" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG no-mng"
elif [ "$CFG_MNG" = "yes" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG mng"
fi
[ "$CFG_LIBPNG" = "system" ] && QMAKE_CONFIG="$QMAKE_CONFIG system-png"
if [ "$CFG_PNG" = "no" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG no-png"
elif [ "$CFG_PNG" = "yes" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG png"
fi
if [ "$CFG_GIF" = "no" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG no-gif"
elif [ "$CFG_GIF" = "yes" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG gif"
fi
if [ "x$PLATFORM_MAC" = "xyes" ]
then
    [ "$CFG_ZLIB" = "yes" ] && CFG_ZLIB="system"
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_LIBS_QT+=-lz\""
fi
if [ "$CFG_ZLIB" = "no" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG no-zlib"
elif [ "$CFG_ZLIB" = "yes" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG zlib"
elif [ "$CFG_ZLIB" = "system" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG system-zlib"
fi
[ "$CFG_NIS" = "yes" ] && QMAKE_CONFIG="$QMAKE_CONFIG nis"
[ "$CFG_NAS" = "yes" ] && QMAKE_CONFIG="$QMAKE_CONFIG nas"
[ "$CFG_BIG_CODECS" = "yes" ] && QMAKE_CONFIG="$QMAKE_CONFIG bigcodecs"

if [ "$CFG_REMOTE" = "yes" ]
then
    QMAKE_CONFIG="$QMAKE_CONFIG remote"
fi

[ "$CFG_QWS_FREETYPE" = "yes" -a "x$CFG_EMBEDDED" != "xno" ] && QMAKE_CONFIG="$QMAKE_CONFIG ft"
if [ "$PLATFORM_X11" = "yes" ]
then
    [ "$CFG_SM" = "yes" ] && QMAKE_CONFIG="$QMAKE_CONFIG x11sm"

    # for some reason, the following libraries are not always build shared,
    # so *every* program/lib (including Qt) has to link against them
    if [ "$CFG_XINERAMA" = "yes" ]
    then
	QMAKE_CONFIG="$QMAKE_CONFIG xinerama"
	QMAKE_VARS="$QMAKE_VARS \"QMAKE_LIBS_X11+=-lXinerama\""
    fi
    if [ "$CFG_XRENDER" = "yes" ]
    then
	QMAKE_CONFIG="$QMAKE_CONFIG xrender"
	QMAKE_VARS="$QMAKE_VARS \"QMAKE_LIBS_X11+=-lXrender\""
    fi
    if [ "$CFG_FREETYPE" = "yes" ]
    then
	QMAKE_CONFIG="$QMAKE_CONFIG xftfreetype"
	# libXft uses libfreetype to do all the work, BUT libfreetype isn't picked
	# up as a dependency if libXft isn't a shared library, so we have to add
	# libfreetype as well as libXt to the program/lib link command
	QMAKE_VARS="$QMAKE_VARS \"QMAKE_LIBS_X11+=-lXft -lfreetype\""
    fi
    if [ "$CFG_TABLET" = "yes" ]
    then
	QMAKE_CONFIG="$QMAKE_CONFIG tablet"
	QMAKE_VARS="$QMAKE_VARS \"QMAKE_LIBS_X11+=-lXi\""
    fi
    if [ "$CFG_XKB" = "yes" ]
    then
        QMAKE_CONFIG="$QMAKE_CONFIG xkb"
    fi
fi

[ '!' -z "$D_FLAGS" ] && QMAKE_VARS="$QMAKE_VARS \"DEFINES+=$D_FLAGS\""
[ '!' -z "$L_FLAGS" ] && QMAKE_VARS="$QMAKE_VARS \"QMAKE_LIBDIR_FLAGS+=$L_FLAGS\""
[ '!' -z "$l_FLAGS" ] && QMAKE_VARS="$QMAKE_VARS \"LIBS+=$l_FLAGS\""

if [ '!' -z "$R_FLAGS" ]
then
    if grep QMAKE_RPATH $XQMAKESPEC/qmake.conf >/dev/null
    then
	echo # Using -R/-rpath, so no need to warn
    else
	echo
	echo "ERROR: -R cannot be used on this platform as \$QMAKE_RPATH is"
	echo "       undefined."
	echo
	exit 1
    fi
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_LFLAGS+=$R_FLAGS\""
fi

if [ '!' -z "$I_FLAGS" ]
then
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_CFLAGS+=$I_FLAGS\""
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_CXXFLAGS+=$I_FLAGS\""
fi

# install things
QMAKE_VARS="$QMAKE_VARS \"QT_PREFIX=${QT_INSTALL_PREFIX}\""
[ '!' -z "$QT_INSTALL_DOCS" ] && QMAKE_VARS="$QMAKE_VARS \"docs.path=${QT_INSTALL_DOCS}\""
[ '!' -z "$QT_INSTALL_HEADERS" ] && QMAKE_VARS="$QMAKE_VARS \"headers.path=${QT_INSTALL_HEADERS}\""
[ '!' -z "$QT_INSTALL_LIBS" ] && QMAKE_VARS="$QMAKE_VARS \"QT_INSTALL_LIBPATH=${QT_INSTALL_LIBS}\""
if [ '!' -z "$QT_INSTALL_BINS" ]
then
    QMAKE_VARS="$QMAKE_VARS \"QT_INSTALL_BINPATH=${QT_INSTALL_BINS}\""
else
    QT_INSTALL_BINS=${QT_INSTALL_PREFIX}/bin
fi

sed "s,\(INSTALL_BIN_DIR=\).*$,\1${QT_INSTALL_BINS}," Makefile >Makefile.tmp
mv -f Makefile.tmp Makefile


#-------------------------------------------------------------------------------
# part of configuration information goes into qmodules.h
#-------------------------------------------------------------------------------

[ -r qmodules.h-hold ] && mv -f qmodules.h-hold $outpath/include/qmodules.h
rm -f $outpath/include/qmodules.h.new
cat >$outpath/include/qmodules.h.new << EOF
// These modules are present in this configuration of Qt
EOF
for MODULE in $MODULES
do
    if [ -d "$relpath/src/$MODULE" ]
    then
	M=`echo $MODULE | tr '[a-z]' '[A-Z]'`
	echo "#define QT_MODULE_$M" >>$outpath/include/qmodules.h.new
	QMAKE_CONFIG="$QMAKE_CONFIG $MODULE"
    fi
done

# avoid unecessary rebuilds by copying only if qmodules.h has changed
if cmp -s $outpath/include/qmodules.h $outpath/include/qmodules.h.new
then
    rm -f $outpath/include/qmodules.h.new
else
    [ -f $outpath/include/qmodules.h ] && chmod +w $outpath/include/qmodules.h
    mv -f $outpath/include/qmodules.h.new $outpath/include/qmodules.h
    chmod -w $outpath/include/qmodules.h
fi


#-------------------------------------------------------------------------------
# save configuration into .qmake.cache
#-------------------------------------------------------------------------------

CACHEFILE=$outpath/.qmake.cache
[ -f $CACHEFILE.tmp ] && rm -f $CACHEFILE.tmp
cat >>$CACHEFILE.tmp <<EOF
CONFIG += $QMAKE_CONFIG dylib create_prl link_prl
QMAKESPEC = $XPLATFORM
QT_SOURCE_TREE = $relpath
QT_BUILD_TREE = $outpath
QMAKE_ABSOLUTE_SOURCE_ROOT = \$\$QT_SOURCE_TREE
EOF
# cmdline args
quoted=no
tmp=""
for i in $QMAKE_VARS
do
    if [ "$quoted" = "no" ]
    then
	case "$i" in
	\"*\") echo $i | sed 's,^",,' | sed 's,"$,,' >>$CACHEFILE.tmp ;;
	\"*) quoted=yes ; tmp=$i ;;
	*) echo $i >>$CACHEFILE.tmp ;;
	esac
    else
	case "$i" in
	*\") quoted=no
	   echo $tmp $i | sed 's,^",,' | sed 's,"$,,' >>$CACHEFILE.tmp
	   tmp="" ;;
	*) tmp="$tmp $i" >>$CACHEFILE.tmp ;;
    esac
    fi
done
# incrementals
INCREMENTAL=""
[ "$CFG_INCREMENTAL" = "auto" ] && which p4 >/dev/null 2>&1 && [ "$Edition" = "troll" ] && CFG_INCREMENTAL="yes"
if [ "$CFG_INCREMENTAL" = "yes" ]
then
    openfiles=`find $relpath -perm u+w -mtime -3 | grep 'cpp$'`
    for f in $openfiles
    do
	# don't need to worry about generated files
	[ -r `echo $f | sed "s,cpp$,ui,"` ] && continue
	basename $f | grep '^moc_' >/dev/null 2>&1 && continue
	# done
	INCREMENTAL="$INCREMENTAL `basename $f | sed 's,.cpp,.o,'`"
    done
    [ '!' -z "$INCREMENTAL" ] && echo "QMAKE_INCREMENTAL += $INCREMENTAL" >>$CACHEFILE.tmp
    [ -r "$outpath/.qmake.incremental" ] && echo "include($outpath/.qmake.incremental)" >>$CACHEFILE.tmp
fi

# replace .qmake.cache if it differs from the newly created temp file
if cmp -s $CACHEFILE.tmp $CACHEFILE
then
    rm -f $CACHEFILE.tmp
else
    mv -f $CACHEFILE.tmp $CACHEFILE
fi


#-------------------------------------------------------------------------------
# give feedback on configuration
#-------------------------------------------------------------------------------

# check if we are using gcc/g++
COMPILER=`echo $PLATFORM | cut -f 2- -d-`
if [ "$COMPILER" = "g++" ]
then
    if [ "$CFG_EXCEPTION_SUPPORT" != "no" ]
    then
	cat <<EOF

	This target is using the GNU C++ compiler ($PLATFORM).

	Recent versions of this compiler automatically include code for
	exceptions, which increase both the size of the Qt library and the
	amount of memory taken by your applications.

	You may elect to re-run `basename $0` with the -no-g++-exceptions
	option to compile Qt without exceptions.  This is completely binary
	compatible, and existing applications should continue to work.

EOF
    fi
fi

echo
if [ "$XPLATFORM" = "$PLATFORM" ]
then
    echo "Build type:    $PLATFORM"
else
    echo "Building on:   $PLATFORM"
    echo "Building for:  $XPLATFORM"
fi

if [ -n "$PLATFORM_NOTES" ]
then
    echo "Platform notes:"
    echo "$PLATFORM_NOTES"
else
    echo
fi

if [ "$OPT_VERBOSE" = "yes" ]
then
    echo "QMake vars ...... $QMAKE_VARS"
    echo "QMake switches .. $QMAKE_SWITCHES"
fi

[ "x$OPT_CONCURRENT" != "x0" ] && echo "Concurrent .......... $OPT_CONCURRENT"
[ "$CFG_INCREMENTAL" = "yes" ] && [ ! -z "$INCREMENTAL" ] && echo "Incremental ......... $INCREMENTAL"
echo "Configuration ....... $QMAKE_CONFIG"
echo "Remote support ...... $CFG_REMOTE"
echo "STL support ......... $CFG_STL"
echo "Thread support ...... $CFG_THREAD"
echo "GIF support ......... $CFG_GIF"
if [ "$CFG_MNG" = "no" ]
then
    echo "MNG support ......... $CFG_MNG"
else
    echo "MNG support ......... $CFG_MNG ($CFG_LIBMNG)"
fi
if [ "$CFG_JPEG" = "no" ]
then
    echo "JPEG support ........ $CFG_JPEG"
else
    echo "JPEG support ........ $CFG_JPEG ($CFG_LIBJPEG)"
fi
if [ "$CFG_PNG" = "no" ]
then
    echo "PNG support ......... $CFG_PNG"
else
    echo "PNG support ......... $CFG_PNG ($CFG_LIBPNG)"
fi
if [ "$PLATFORM_QWS" != "yes" ]
then
    if echo $MODULES | grep opengl >/dev/null
    then
	opengl=yes
    else
	opengl=no
    fi
    echo "OpenGL support ...... $opengl"
fi
if [ "$PLATFORM_QWS" = "yes" ]
then
    echo "Embedded support .... $CFG_EMBEDDED"
fi
if [ "$PLATFORM_X11" = "yes" ]
then
    echo "NAS sound support ... $CFG_NAS"
    echo "Session management .. $CFG_SM"
    echo "Xinerama support .... $CFG_XINERAMA"
    echo "Tablet support ...... $CFG_TABLET"
    echo "XRender support ..... $CFG_XRENDER"
    echo "XftFreeType support . $CFG_FREETYPE"
    echo "XKB Support ......... $CFG_XKB"
fi

# complain about not being able to use plugins if we are using a static build
if [ "$CFG_SHARED" = "no" ]
then
    echo
    echo "WARNING: Using static linking will disable the use of plugins."
    echo "Make sure you compile ALL needed modules into the library."
    echo
fi
echo

sepath=`echo $relpath | sed -e 's/\\./\\\\./g'`
PROCS=1
PIPE=""
EXEC=""


#-------------------------------------------------------------------------------
# build makefiles based on the configuration
#-------------------------------------------------------------------------------

echo "Finding project files. Please wait..."
[ -z "$QMAKE_PROJECTS" ] && QMAKE_PROJECTS=`find $relpath/. -name '*.pro' -print | sed 's-/\./-/-'`

# .projects      -> projects to process
# .projects.1    -> qt and moc
# .projects.2    -> subdirs and libs
# .projects.3    -> the rest
rm -f .projects .projects.1 .projects.2 .projects.3

if [ -z "$AWK" ]; then
    for p in `echo $QMAKE_PROJECTS`
    do
	echo $p >> .projects
    done
else
    cat >projects.awk <<EOF
BEGIN {
    files = 0
    target_file = ""
    input_file = ""

    first = "./.projects.1.tmp"
    second = "./.projects.2.tmp"
    third = "./.projects.3.tmp"
}

FNR == 1 {
    if ( input_file ) {
  if ( ! target_file )
      target_file = third
  print input_file >target_file
    }

    matched_target = 0
    template_lib = 0
    input_file = FILENAME
    target_file = ""
}

/^(TARGET.*=)/ {
    if ( \$3 == "qt" || \$3 == "moc" ) {
  target_file = first
	matched_target = 1
    }
}

matched_target == 0 && /^(TEMPLATE.*=)/ {
    if ( \$3 == "subdirs" )
  target_file = second
    else if ( \$3 == "lib" )
  template_lib = 1
    else
  target_file = third
}

matched_target == 0 && template_lib == 1 && /^(CONFIG.*=)/ {
    if ( \$0 ~ /plugin/ )
	target_file = third
    else
  target_file = second
}

END {
    if ( input_file ) {
  if ( ! target_file )
      target_file = third
  print input_file >>target_file
    }
}

EOF

    rm -f .projects.all
    for p in `echo $QMAKE_PROJECTS`
    do
  echo $p >> .projects.all
    done

    # if you get errors about the length of the command line to awk, change the -l arg
    # to split below
    split -l 600 .projects.all .projects.all.
    for p in .projects.all.*
    do
  $AWK -f projects.awk `cat $p`
  [ -f .projects.1.tmp ] && cat .projects.1.tmp >> .projects.1
  [ -f .projects.2.tmp ] && cat .projects.2.tmp >> .projects.2
  [ -f .projects.3.tmp ] && cat .projects.3.tmp >> .projects.3
  rm -f .projects.1.tmp .projects.2.tmp .projects.3.tmp
  rm -f $p
    done
    rm -f .projects.all* projects.awk

    [ -f .projects.1 ] && cat .projects.1 >>.projects
    [ -f .projects.2 ] && cat .projects.2 >>.projects
    rm -f .projects.1 .projects.2
    if [ -f .projects.3 ] && [ "CONFIG_FAST" = "no" ]; then
  cat .projects.3 >>.projects
  rm -f .projects.3
    fi
fi

for p in `echo $QMAKE_IGNORE_PROJECTS`
do
    if [ -f .projects ]
    then
	grep -v $p .projects > .tmp
	mv -f .tmp .projects
    fi
    if [ -f .projects.3 ]
    then
	grep -v $p .projects.3 > .tmp
	mv -f .tmp .projects.3
    fi
done

NORM_PROJECTS=0
FAST_PROJECTS=0
[ -f .projects ] && NORM_PROJECTS=`cat .projects | wc -l | sed -e "s, ,,g"`
[ -f .projects.3 ] && FAST_PROJECTS=`cat .projects.3 | wc -l | sed -e "s, ,,g"`
echo "  `expr $NORM_PROJECTS + $FAST_PROJECTS` projects found."
echo

echo "Creating makefiles. Please wait..."
for file in .projects .projects.3
do
    [ '!' -f "$file" ] && continue
    for a in `cat $file`
    do
	case $a in
	*-kde.pro|*qtmain.pro) continue ;;
	*/qmake/qmake.pro) continue ;;
	*-pro.pro)
	    [ "x$Edition" != "xpro" ] && continue
	;;
	*moc*) SPEC=$QMAKESPEC ;;
	*) SPEC=$XQMAKESPEC ;;
	esac
	dir=`dirname $a | sed -e "s;$sepath;.;g"`
	test -d $dir || mkdir -p $dir
	N=$outpath/$dir/Makefile
	if [ -f "$N" ]
	then
	    # fast configure - the makefile exists, skip it
	    # since the makefile exists, it was generated by qmake, which means we
	    # can skip it, since qmake has a rule to regenerate the makefile if the .pro
	    # file changes...
	    [ "x$VERBOSE" = "xyes" ] && echo "  skipping $a"
	    continue;
	fi
	if [ "$SPEC" != "$XQMAKESPEC" ] || [ -z "`ls -l mkspecs/default | grep $BASE_SPEC`" ]
	then
	    echo "USING $SPEC FOR QMAKE"
	    QMAKE_EXTRA_ARGS="-spec $SPEC $QMAKE_EXTRA_ARGS"
	fi

	if echo '\c' | grep '\c' >/dev/null
	then
	    echo -n "  for $a"
	else
	    echo "  for $a\c"
	fi

	if [ "$file" = ".projects.3" ]; then
	    if echo '\c' | grep '\c' >/dev/null
	    then
		echo -n " (fast)"
	    else
		echo " (fast)\c"
	    fi
	    echo
	    cat >$N <<EOF
# $N: generated by configure
#
# WARNING: This makefile will be replaced with a real makefile.
# All changes made to this file will be lost.

all clean install qmake Makefile: FORCE
	$outpath/bin/qmake $QMAKE_SWITCHES $QMAKE_EXTRA_ARGS -o $N $a
	\$(MAKE) -f $N \$@

FORCE:

EOF
	else
	    PIPE="$outpath/bin/qmake $QMAKE_SWITCHES $QMAKE_EXTRA_ARGS -o $N $a"
	    if [ "x$VERBOSE" = "xyes" ]
	    then
		echo " (`basename $SPEC`)"
		if echo '\c' | grep '\c' >/dev/null
		then
		    echo -n "$PIPE"
		else
		    echo "$PIPE\c"
		fi
	    fi
	    echo
	
	    if [ "x$CONCURRENT" = "x0" ] || [ "x$CONCURRENT" = "x1" ]
	    then
		EXEC=$PIPE
	    else
		EXEC="$EXEC ($PIPE & ) ;"
		if [ "x$PROCS" != "x$CONCURRENT" ]
		then
		    PROCS=`expr $PROCS + 1`
		else
		    PROCS=1
		    EXEC="$EXEC wait"
		fi
	    fi
	    [ -f "$N" ] && chmod +w $N
	    if [ "x$PROCS" = "x1" ]
	    then
		/bin/sh -c "$EXEC"
		EXEC=""
	    fi
       fi
    done
done
# this is just in case the concurrent task is not a multiple of the number of tasks
[ '!' -z "$EXEC" ] && /bin/sh -c "$EXEC wait"

if echo "$LD_LIBRARY_PATH" | grep >/dev/null $outpath/lib
then
    echo
else
    if grep QMAKE_RPATH $XQMAKESPEC/qmake.conf >/dev/null
    then
	echo # Using -R/-rpath, so no need to warn
    else
	echo
	echo "WARNING: \$LD_LIBRARY_PATH does not contain $outpath/lib"
	echo "         You will need to add it to correctly compile Qt."
	echo
    fi
fi
rm -f .projects .projects.3


#-------------------------------------------------------------------------------
# finally save the executed command to another script
#-------------------------------------------------------------------------------

[ -f $outpath/config.status ] && rm -f $outpath/config.status
cat >$outpath/config.status << EOF
#!/bin/sh

echo yes | $relpath/$relconf $OPT_CMDLINE \$@
EOF
chmod +x $outpath/config.status

echo
echo Qt is now configured for building. Just run $MAKE.
echo To reconfigure, run $MAKE clean and configure.
echo
