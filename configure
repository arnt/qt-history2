#!/bin/sh
#
# Configures to build the Qt library
#
# Copyright 1999-2001 Trolltech AS.  All rights reserved.
#

# To remove the need for the first test, do this:
# QTDIR=`pwd` export QTDIR

relconf=`basename $0`
relpath=`dirname $0`
relpath=`(cd $relpath; pwd)`
outpath=$relpath

#internal variables
PROFILECFLAGS=
CONFIG_CMDLINE="$@" #cache the commandline for config.status
QMAKE_SWITCHES=""
QMAKE_VARS=""
QMAKE_CONFIG=""
QWS_QVFB=prompted
QWS_DEPTHS=prompted
HELP=

if [ "$relpath" != `pwd` ]; then
    #setup the magic variable
    outpath=`pwd`

    echo "Preparing build tree.."
    mkdir -p $outpath/bin #make build dir

    #need a top level makefile, prefer gnu internally
    if [ -f $relpath/GNUmakefile ]
    then
	rm -f $outpath/Makefile
	ln -s $relpath/GNUmakefile $outpath/Makefile
    elif [ -f $relpath/Makefile ]
    then
	rm -f $outpath/Makefile
	ln -s $relpath/Makefile $outpath/Makefile
    else
	echo "No top level Makefile."
	exit 1
    fi

    #qmake must be symlinked
    for a in `find $relpath/qmake`; do
       my_a=`echo $a | sed "s,^${relpath}/,${outpath}/,"`
       [ -f $my_a ] && continue
       if [ -d $a ]; then
	    mkdir -p $my_a
       else
	   a_dir=`dirname $my_a`
	   [ -d $a_dir ] || mkdir -p $a_dir
	   case `basename $a` in
	   *.o|*.d|GNUmakefile*|qmake) ;;
	   *) rm -f $my_a; ln -s $a $my_a ;;
	   esac
       fi
    done

    # symlink the include directory
    rm -f $outpath/include
    ln -s $relpath/include $outpath/include
    # symlink the doc directory
    rm -f $outpath/doc
    ln -s $relpath/doc $outpath/doc

    #let qmake see qconfig/qmodules.h
    #binaries from qt
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_MOC=$outpath/bin/moc\""
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_UIC=$outpath/bin/uic\""
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_QMAKE=$outpath/bin/qmake\""
    #hacky src line
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_MOC_SRC=$relpath/src/moc\""
else
    # Override the Windows Makefile
    rm -f $outpath/Makefile
    cp $relpath/GNUmakefile $outpath/Makefile

    touch .test.qt.
    if [ '!' -f ${QTDIR}/.test.qt. ];
    then
	rm .test.qt.
	echo
	echo
	echo '   The environment variable $QTDIR is not set correctly. It is currently'
	echo '   set to "'$QTDIR'", but it should be set to this directory,'
	echo '   which is "'`pwd`'".'
	echo
	echo '   Please read the INSTALL file for instructions on how to set $QTDIR'
	echo '   correctly. If you have set $QTDIR in your .profile or .login, you '
	echo '   will need to log out and log in again to make the setting effective.'
	echo
	echo
	exit 1
    fi
    rm .test.qt.
fi

if [ "$1" = -h -o "$1" = -help -o "$1" = --help ]
then
    HELP=yes
else

# Find a make command
if ( gmake /dev/null ) >/dev/null 2>/dev/null
then
    MAKE=gmake
else
    if ( make /dev/null ) >/dev/null 2>/dev/null
    then
	MAKE=make
    else
	echo "You don't seem to have 'make' or 'gmake' in your PATH."
	echo "Cannot proceed."
	exit 1
    fi
fi

# Check licensed modules
MODULES="tools kernel widgets dialogs iconview workspace network canvas table xml opengl sql styles"

# Free edition - may only be used under the terms of the QPL or GPL.
if [ -f $relpath/LICENSE.QPL -a -f $relpath/LICENSE.GPL ]
then
    Edition=free
    Licensee=you
    while true
    do
	echo
	echo "This is the Qt Free Edition."
	echo
	echo "You are licensed to use this software under the terms of either"
	echo "the Q Public License (QPL) or the GNU General Public License (GPL)."
	echo
	echo "Type 'Q' to view the Q Public License."
	echo "Type 'G' to view the GNU General Public License."
	echo "Type 'yes' to accept this license offer."
	echo "Type 'no' to decline this license offer."
	echo
	echo "Do you accept the terms of either license?"
	read acceptance
	if [ "$acceptance" = yes ]
	then
	    break
	else
	    if [ "$acceptance" = no ]
	    then
		echo
		echo "You are not licensed to use this software."
		echo
		exit 0
	    elif [ "$acceptance" = G -o "$acceptance" = g ]
	    then
		more $relpath/LICENSE.GPL
	    elif [ "$acceptance" = Q -o "$acceptance" = q ]
	    then
		more $relpath/LICENSE.QPL
	    fi
	fi
    done
    Licensee="Non-Commercial"
    Products="qt-free"
# Internal Trolltech edition.
elif [ -f $relpath/LICENSE.TROLL ]
then
    Edition=troll
    echo
    echo "This is the Trolltech in-house version of Qt."
    echo
    Licensee="Trolltech"
    Products="qt-internal"
    EMB="/Embedded" #fixme
else
    if [ -f $relpath/LICENSE ]
    then
	echo
	if [ -d $relpath/mkspecs/qws/ ] #fixme
	then
	    EMB="/Embedded"
	else
	    EMB=""
	fi
	Desc=""
	if [ -f $HOME/.qt-license ]
	then
	    . $HOME/.qt-license
	    if echo $Products | grep >/dev/null 'qt-enterprise'
	    then
		Desc=Enterprise
		Edition=ent
	    else
		MODULE="$Products tools kernel widgets dialogs iconview workspace"
		Desc=Professional
		Edition=pro
	    fi
	    NOW=`date +%Y%m%d`
	    if [ "$NOW" -gt "0$ExpiryDate" ]
	    then
		echo
		echo "WARNING  WARNING  WARNING  WARNING"
		echo
		echo "  Your support and upgrade period has expired."
		echo
		echo "  You may continue to use your last licensed release"
		echo "  of Qt under the terms of your existing license"
		echo "  agreement, but you are not entitled to technical"
		echo "  support, nor are you entitled to use any more recent"
		echo "  Qt releases."
		echo
		echo "  Please contact sales@trolltech.com to renew your"
		echo "  support and upgrades for this license."
		echo
		echo "WARNING  WARNING  WARNING  WARNING"
		echo
		sleep 3
	    fi
	else
	    echo
	    echo "\"$HOME/.qt-license\" not found"
	    echo
	    echo "You have not installed a valid license file."
	    echo
	    echo "Please install the license file supplied by Trolltech,"
	    echo "or install the Qt Free Edition if you intend to develop"
	    echo "free software."
	    exit 1
	fi
	E="Qt$EMB $Desc Edition"
	echo
	echo "This is the $E."
	echo
	while true
	do
	    echo
	    echo "Type '?' to view the $E License."
	    echo "Type 'yes' to accept this license offer."
	    echo "Type 'no' to decline this license offer."
	    echo
	    echo "Do you accept the terms of the $E License?"
	    read acceptance
	    if [ "$acceptance" = yes ]
	    then
		break
	    else
		if [ "$acceptance" = no ]
		then
		    echo
		    echo "You are not licensed to use this software."
		    echo
		    exit 0
		fi
		more $relpath/LICENSE
	    fi
	done
    else
	echo "The LICENSE, LICENSE.QPL, or LICENSE.GPL file shipped with"
	echo "this software has disappeared."
	echo
	echo "Sorry, you are not licensed to use this software."
	echo "Try re-installing."
	echo
	exit 0
    fi
fi

# Remove the build options file
[ -f $outpath/.qmake.cache ] && rm $outpath/.qmake.cache

fi # help

# Defaults
QCONFIG=full
EMBEDDED=no
KDE=no
VERBOSE=
DEBUG=no
SHARED=yes
GIF=no
THREAD=auto
SM=auto
XINERAMA=auto
BIG_CODECS=yes
ZLIB=yes
LIBPNG=yes
JPEG=no
MNG=no
XRENDER=auto
XFTFREETYPE=auto
FT=yes
NAS_SOUND=no
D_FLAGS=
I_FLAGS=
L_FLAGS=
R_FLAGS=
l_FLAGS=
XPLATFORM=
FROMMAKE=
QMAKE_PROJECTS=""
CONCURRENT=0
LIBDL=auto

#qt installs
QT_INSTALL_PREFIX=/usr/local/qt
QT_INSTALL_DOCS=
QT_INSTALL_HEADERS=
QT_INSTALL_LIBS=
QT_INSTALL_BINS=

# Parse the arguments, setting things to "yes" or "no".
while [ -n "$1" ]; do
   case $1 in
   -prefix)
	shift
	QT_INSTALL_PREFIX=$1
	;;
   -docdir)
	shift
	QT_INSTALL_DOCS=$1
	;;
   -headerdir)
	shift
	QT_INSTALL_HEADERS=$1
	;;
   -libdir)
	shift
	QT_INSTALL_LIBS=$1
	;;
   -bindir)
	shift
	QT_INSTALL_BINS=$1
	;;
   -frommake)
	FROMMAKE=yes
	;;
   -embedded)
	shift;
	if [ -z $EMB ]
	then
	    echo "No license exists to enable Embedded. Disabling."
	else
	    EMBEDDED=$1
	    PLATFORM=qws/linux-generic-g++
	    XPLATFORM=qws/linux-${EMBEDDED}-g++
	fi
	;;
   -depths)
	shift; QWS_DEPTHS=$1;
	;;
   -accel-voodoo3)
	QWS_ACCEL_VOODOO3=y
	;;
   -accel-mach64)
	QWS_ACCEL_MACH64=y
	;;
   -accel-matrox)
	QWS_ACCEL_MATROX=y
	;;
   -qvfb)
	QWS_QVFB=y
	;;
   -no-qvfb)
	QWS_QVFB=n
	;;
   -vnc)
	QWS_VNC=y
	;;
   -qconfig)
	shift
	QCONFIG=$1
	;;
   -make)
	shift
	if [ -f $relpath/$1 ]
	then
	    QMAKE_PROJECTS="$QMAKE_PROJECTS $relpath/$1"
	else
	    if [ -d $relpath/$1 ]
	    then
		QMAKE_PROJECTS="$QMAKE_PROJECTS `find $relpath/$1 -name '*.pro' -print`"
	    else
		QMAKE_PROJECTS="$QMAKE_PROJECTS `find $relpath/. -name '*.pro' -print`"
	    fi
	fi
	;;
   -profile)
	QMAKE_VARS="$QMAKE_VARS QMAKE_CFLAGS+=-pg QMAKE_CXXFLAGS+=-pg"
	QMAKE_VARS="$QMAKE_VARS QMAKE_LFLAGS+=-pg"
	;;
   -platform)
	shift; PLATFORM=$1
	;;
   -xplatform)
	shift; XPLATFORM=$1
	;;
   -release)
	DEBUG=no
	;;
   -debug)
	DEBUG=yes
	;;
   -shared)
	SHARED=yes
	;;
   -static)
	SHARED=no
	;;
   -no-gif)
	GIF=no
	;;
   -qt-gif)
	GIF=yes
	;;
   -no-sm)
	SM=no
	;;
   -sm)
	SM=yes
	;;
   -no-thread)
	THREAD=no
	;;
   -thread)
	THREAD=yes
	;;
   -no-xinerama)
	XINERAMA=no
	;;
   -xinerama)
	XINERAMA=yes
	;;
   -freetype)
	FT=yes
	;;
   -no-freetype)
	FT=no
	;;
   -qt-zlib)
	ZLIB=yes
	;;
   -system-zlib)
	ZLIB=no
	;;
   -qt-libpng)
	LIBPNG=yes
	;;
   -system-libpng)
	LIBPNG=no
	;;
   -no-mng)
	MNG=no
	;;
   -system-libmng)
	MNG=yes
	;;
   -no-jpeg)
	JPEG=no
	;;
   -qt-jpeg)
	JPEG=yes
	;;
   -system-jpeg)
	JPEG=system
	;;
   -no-nas-sound)
	NAS_SOUND=no
	;;
   -system-nas-sound)
	NAS_SOUND=yes
	;;
   -no-big-codecs)
	BIG_CODECS=no
	;;
   -big-codecs)
	BIG_CODECS=yes
	;;
   -no-xrender)
	XRENDER=no
	;;
   -xrender)
	XRENDER=yes
	;;
   -no-xft)
	XFTFREETYPE=no
	;;
   -xft)
	XFTFREETYPE=yes
	;;
   -enable-kde2)
	if [ '!' -f $KDEDIR/bin/dcopserver ]
	then
	    echo ""
	    echo "You wanted to compile the Qt Designer with"
	    echo "KDE2 support, but \$KDEDIR does not point"
	    echo "to a valid KDE2 installation. KDE support"
	    echo "has been turned off."
	    echo ""
	else
	    KDE=yes
	fi
	;;
   -enable-*)
	MODULE=`echo $1 | sed "s/-enable-//"`
	if [ -n $MODULE -a -d "$relpath/src/$MODULE" ]
	then
	    
	    if echo "${MODULES}" | grep $MODULE >/dev/null 2>&1
	    then
		MODULES="$MODULES $MODULE"
	    fi
	fi
	;;
   -disable-*)
    	MODULE=`echo $1 | sed -e "s/-disable-//"`
	if [ -d "$relpath/src/$MODULE" ]
	then
	    MODULES=`echo $MODULES | sed -e "s/$MODULE//"`
	else
	    echo "Unknown module disabled: $MODULE"
	fi
	;;
    -with-*-*-*)
	CONFIG=`echo $1 | sed -e "s/-with-//"`
	VAR=`echo $CONFIG | sed -e "s/-[^-]*$//"`
	VAL=`echo $CONFIG | sed -e "s/[^-]*-[^-]*-//"`
	QMAKE_VARS="$QMAKE_VARS \"$VAR+=$VAL\""
	;;
    -without-*-*-*)
	CONFIG=`echo $1 | sed -e "s/-without-//"`
	VAR=`echo $CONFIG | sed -e "s/-[^-]*$//"`
	VAL=`echo $CONFIG | sed -e "s/[^-]*-[^-]*-//"`
	QMAKE_VARS="$QMAKE_VARS \"$VAR-=$VAL\""
	;;
    -internal)
	QMAKE_CONFIG="$QMAKE_CONFIG internal"
	;;
   -h | -help | --help)
	HELP=yes
	;;
   -v)
        #takes two verboses to turn on qmake debugs
	[ "x$VERBOSE" = "xyes" ] && QMAKE_SWITCHES="$QMAKE_SWITCHES -d"
	VERBOSE=yes
	;;
   -j?*)
	CONCURRENT="`echo $1 | sed 's,-j,,'`"
	;;
   -D?*)
	D_FLAGS="$D_FLAGS `echo $1 | sed 's,-D,,'`"
	;;
   -I?*)
	I_FLAGS="$I_FLAGS $1"
	;;
   -L?*)
	L_FLAGS="$L_FLAGS $1"
	;;
   -R?*)
	R_FLAGS="$R_FLAGS $1"
	;;
   -l?*)
	l_FLAGS="$l_FLAGS $1"
	;;
   -I)
	shift
	I_FLAGS="$I_FLAGS -I$1"
	;;
   -L)
	shift
	L_FLAGS="$L_FLAGS -L$1"
	;;
   -R)
	shift
	R_FLAGS="$R_FLAGS -R$1"
	;;
   *)
	echo $1: unknown argument
	HELP=yes;
	ERROR=yes
	;;
    esac
    shift
done

if [ -z "$PLATFORM" ]
then
    UNAME_MACHINE=`(uname -m) 2>/dev/null` || UNAME_MACHINE=unknown
    UNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown
    UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown
    UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown

    ARCH=""
    if echo $QMAKE_CONFIG | grep embedded >/dev/null 2>&1
    then
	# This is a Qt/Embedded distribution
	SM=no
	MODULES=`echo $MODULES | sed -e 's/opengl//'`
	PLATFORMS=`find $relpath/mkspecs/qws | sed "s,$relpath/mkspecs/qws/,,"`
	case "$UNAME_MACHINE" in
	*86) ARCH=x86- ;;
	*) ARCH=generic- ;;
	esac
    else
	PLATFORMS=`find $relpath/mkspecs/ -type f | xargs grep -v qws | sed "s,$relpath/mkspecs/qws/,,"`
    fi

    PLATFORM_NOTES=""

    case "$UNAME_SYSTEM:$UNAME_RELEASE" in
     Darwin:*)
	LIBDL=no
	PLATFORM=macx-g++
	;;
     AIX*)
	#PLATFORM=aix-g++
	PLATFORM=aix-xlc
	PLATFORM_NOTES="
	    - Also available: aix-g++
	"
	;;
     QNX:*)
	PLATFORM=qnx-g++
	;;
     GNU:*)
	PLATFORM=hurd-g++
	;;
     BSD/386:*)
	PLATFORM=bsdi-g++
	;;
     dgux:*)
	PLATFORM=dgux-g++
	;;
     ULTRIX:*)
	PLATFORM=ultrix-g++
	;;
     FreeBSD:*)
        LIBDL=no
	PLATFORM=freebsd-g++
	;;
     OpenBSD:*)
	LIBDL=no
	PLATFORM=openbsd-g++
	;;
     NetBSD:*)
	LIBDL=no
	PLATFORM=netbsd-g++
	;;
     IRIX64:*)
	PLATFORM=irix-64
	;;
     IRIX:*)
	#PLATFORM=irix-dcc
	#PLATFORM=irix-g++
	PLATFORM=irix-n32
	#PLATFORM=irix-o32
	PLATFORM_NOTES="
	    - Also available for IRIX: irix-dcc irix-g++ irix-o32
	"
	;;
     HP-UX:*)
	#PLATFORM=hpux-acc
	#PLATFORM=hpux-cc
	#PLATFORM=hpux-n64
	#PLATFORM=hpux-o64
	PLATFORM=hpux-g++
	PLATFORM_NOTES="
	    - Also available for HP-UX: hpux-acc hpux-cc hpux-n64 hpux-o64
	"
	;;
     OSF1:*)
	LIBDL=no
	PLATFORM=osf1-cxx
	#PLATFORM=osf1-g++
	PLATFORM_NOTES="
	    - Also available for OSF1: osf1-g++
	"
	;;
     Linux:*)
	PLATFORM=linux-${ARCH}g++
	;;
     SunOS:5*)
	#PLATFORM=solaris-g++
	PLATFORM=solaris-cc
	PLATFORM_NOTES="
	    - Also available for SunOS:5: solaris-64 solaris-g++
	    - To mix GNU C and SunPRO C++, add -platform solaris-cc-gcc
	"
	;;
     SunOS:4*)
	PLATFORM=sunos-g++
	PLATFORM_NOTES="
	    - Mixing GNU C and SunPRO C++ is not supported
	"
	;;
     UNIX_SV:4.2*)
	PLATFORM=unixware-g++
	;;
     UnixWare:5*)
	PLATFORM=unixware7-cc
	#PLATFORM=unixware7-g++
	PLATFORM_NOTES="
	    - Also available for UnixWare:5: unixware7-g++
	"
	;;
     *:3.2)
	PLATFORM=sco-g++
	;;
     *)
	if [ "$HELP" != "yes" ]; then
	    echo
	    for p in $PLATFORMS
	    do
		echo "    $relconf $* -platform $p"
	    done
	    echo
	    echo "The build script does not currently recognize all platforms"
	    echo "supported by Qt."
	    echo "Rerun this script with a -platform option listed to"
	    echo "set the operating system / compiler combination you use."
	    echo
	    exit 2
	fi
    esac
fi

if [ "x$CONCURRENT" = "x0" ] && echo $MAKEFLAGS | grep '.* *-j[0-9]* *.*' >/dev/null 2>&1; then
    CONCURRENT=`echo $MAKEFLAGS | sed "s,.* *-j\([0-9]*\) *.*,\1,"`
fi

if [ -z "$XPLATFORM" ]
then
    XPLATFORM="$PLATFORM"
fi
QMAKEPATH="$relpath/mkspecs/${PLATFORM}"
XQMAKEPATH="$relpath/mkspecs/${XPLATFORM}"
if [ '!' -d "$QMAKEPATH" ]
then
    echo
    echo
    echo '   The specified platform/compiler not supported: ' $PLATFORM
    echo '   Please see the PLATFORMS file for a complete list.'
    echo
    echo
    exit 2
fi
if [ '!' -d "$XQMAKEPATH" ]
then
    echo
    echo
    echo '   The specified platform/compiler not supported: ' $XPLATFORM
    echo '   Please see the PLATFORMS file for a complete list.'
    echo
    echo
    exit 2
fi

# Setup qplatformdefs.h
if [ '!' -f "${XQMAKEPATH}/qplatformdefs.h" ]
then
    echo
    echo
    echo '   The specified platform/compiler port is not complete: ' $XQMAKEPATH/qplatformdefs.h
    echo '   Please contact qt-bugs@trolltech.com.'
    echo
    echo
    exit 2
fi

# Auto-detect opengl support
if echo $MODULES | grep opengl >/dev/null 
then
    LIBS=`sed -n -e '/^QMAKE_LIBS_OPENGL[	]*=/ { s/[^=]*=[	 ]*//; s/-l/ /g; p; }' $XQMAKEPATH/qmake.conf`
    for L in $LIBS
    do
	F=
	### fix (search for OpenGL libraries in X11 directory as well)
	for LIB in `sed -n -e '/^QMAKE_LFLAGS_OPENGL[	]*=/ { s/[^=]*=[	 ]*//; s/-L/ /g; p; }' $XQMAKEPATH/qmake.conf` /usr/lib /lib /usr/X11R6/lib
	do
	    if [ "`echo $LIB/lib$L.*`" != "$LIB"/lib$L.\* ]
	    then
		F=yes
		break
	    fi
	done
	if [ -z "$F" ]
	then
	    MODULES=`echo $MODULES | sed -e 's/opengl//'`
	    break
	fi
    done
fi

# Auto-detect XRender support
if [ $XRENDER = auto ]
then
    XRENDER=yes
    XDIRS=`sed -n -e '/^QMAKE_LIBDIR_X11[	]*=/ { s/[^=]*=[	 ]*//; s/-L/ /g; p; }' $XQMAKEPATH/qmake.conf`
    LIBDIRS="$XDIRS /usr/lib /lib"

    FOUND_LIB=
    F=
    for LIBDIR in $LIBDIRS
    do
	FOUND_LIB=`ls $LIBDIR/libXrender.* 2>/dev/null`
	if [ ! -z "$FOUND_LIB" ]
	then
	    F=yes
	    break
	fi
    done

    if [ -z "$F" ]
    then
	XRENDER=no
    fi
    
    if [ "$XRENDER" = "yes" ]
    then
	INCS="X11/extensions/Xrender.h"
	XDIRS=`sed -n -e '/^QMAKE_INCDIR_X11[	]*=/ { s/[^=]*=[	 ]*//; s/-I/ /g; p; }' $XQMAKEPATH/qmake.conf`
	INCDIRS="$XDIRS /usr/include /include"

	for I in $INCS
	do
	    F=
	    for INCDIR in $INCDIRS
	    do
		if [ -f $INCDIR/$I ]
		then
		    F=yes
		    break
		fi
	    done

	    if [ -z "$F" ]
	    then
		XRENDER=no
		break
	    fi
	done
    fi
fi


# Turn off XftFreeType support if we don't have XRender support
if [ "x$XRENDER" = "xno" ]
then
    XFTFREETYPE=no
fi


# Auto-detect XftFreeType support
if [ $XFTFREETYPE = auto ]
then
    XFTFREETYPE=yes
    XDIRS=`sed -n -e '/^QMAKE_LIBDIR_X11[	]*=/ { s/[^=]*=[	 ]*//; s/-L/ /g; p; }' $XQMAKEPATH/qmake.conf`
    LIBDIRS="$XDIRS /usr/lib /lib"

    FOUND_LIB=
    F=
    for LIBDIR in $LIBDIRS
    do
	FOUND_LIB=`ls $LIBDIR/libXft.* 2>/dev/null`
	if [ ! -z "$FOUND_LIB" ]
	then
	    F=yes
	    break
	fi
    done

    if [ -z "$F" ]
    then
	XFTFREETYPE=no
    fi
    
    if [ "$XFTFREETYPE" = "yes" ]
    then
	INCS="X11/Xft/XftFreetype.h"
	XDIRS=`sed -n -e '/^QMAKE_INCDIR_X11[	]*=/ { s/[^=]*=[	 ]*//; s/-I/ /g; p; }' $XQMAKEPATH/qmake.conf`
	INCDIRS="$XDIRS /usr/include /include"

	for I in $INCS
	do
	    F=
	    for INCDIR in $INCDIRS
	    do
		if [ -f $INCDIR/$I ]
		then
		    F=yes
		    break
		fi
	    done

	    if [ -z "$F" ]
	    then
		XFTFREETYPE=no
		break
	    fi
	done
    fi
fi

# Find default thread option for target
if grep >/dev/null '^QMAKE_LIBS_THREAD' $XQMAKEPATH/qmake.conf
then
    AUTOTHREAD=yes
    AUTOTHREAD=no  ####### leave off for now
else
    AUTOTHREAD=never
fi
if [ $AUTOTHREAD = never ]
then
    if [ $THREAD = yes ]
    then
	echo
	echo "ERROR: Qt is not configured to support threading on this platform"
	echo "       See the THREAD settings in $XQMAKEPATH/qmake.conf"
	echo
	exit 2
    fi
    AUTOTHREAD=no
fi
if [ $THREAD = auto ]
then
    THREAD=$AUTOTHREAD
fi

# Auto-detect session management support
if [ $SM = auto ]
then
    SM=no
    for INC in `sed -n -e '/^QMAKE_INCDIR_X11[	]*=/ { s/[^=]*=[	 ]*//; s/-I/ /g; p; }' $XQMAKEPATH/qmake.conf`
    do
	if [ -f $INC/X11/SM/SM.h ]
	then
	    SM=yes
	    break
	fi
    done
fi

# Auto-detect Xinerama support
if [ $XINERAMA = auto ]
then
    XINERAMA=yes

    XDIRS=`sed -n -e '/^QMAKE_LIBDIR_X11[	]*=/ { s/[^=]*=[	 ]*//; s/-L/ /g; p; }' $XQMAKEPATH/qmake.conf`
    LIBDIRS="$XDIRS /usr/lib /lib"

    FOUND_LIB=
    F=
    for LIBDIR in $LIBDIRS
    do
	FOUND_LIB=`ls $LIBDIR/libXinerama.* 2>/dev/null`
	if [ ! -z "$FOUND_LIB" ]
	then
	    F=yes
	    break
	fi
    done

    if [ -z "$F" ]
    then
	XINERAMA=no
    fi
    
    if [ "$XINERAMA" = "yes" ]
    then
	INCS="X11/extensions/Xinerama.h"
	XDIRS=`sed -n -e '/^QMAKE_INCDIR_X11[	]*=/ { s/[^=]*=[	 ]*//; s/-I/ /g; p; }' $XQMAKEPATH/qmake.conf`
	INCDIRS="$XDIRS /usr/include /include"

	for I in $INCS
	do
	    F=
	    for INCDIR in $INCDIRS
	    do
		if [ -f $INCDIR/$I ]
		then
		    F=yes
		    break
		fi
	    done

	    if [ -z "$F" ]
	    then
		XINERAMA=no
		break
	    fi
	done
    fi
fi


# Next, emit a usage message if something failed.
if [ "$HELP" = "yes" ]; then
   [ "x$ERROR" = "xyes" ] && echo
    if [ "x$THREAD" = "xyes" ]
    then
	THY="*"
	THN=" "
    else
	THY=" "
	THN="*"
    fi
    if [ "x$SM" = "xno" ]
    then
	SMY=" "
	SMN="*"
    else
	SMY="*"
	SMN=" "
    fi
    if [ "x$XINERAMA" = "xno" ]
    then
	XRY=" "
	XRN="*"
    else
	XRY="*"
	XRN=" "
    fi

    if [ "x$XFTFREETYPE" = "xno" ]
    then
	XFTY=" "
	XFTN="*"
    else
	XFTY="*"
	XFTN=" "
    fi

    if [ "x$XRENDER" = "xno" ]
    then
	XRY=" "
	XRN="*"
    else
	XRY="*"
	XRN=" "
    fi

    MODULES_HELP="iconview workspace network canvas table xml opengl"
    if [ -f $HOME/.qt-license ]
    then
    . $HOME/.qt-license
	    if echo $Products | grep >/dev/null 'qt-enterprise'
	    then
		MODULES_HELP="opengl table network canvas sql"
	    else
		MODULES_HELP=""
	    fi
    else
	MODULES_HELP="opengl table network canvas sql"
    fi

    cat <<EOF
Usage:  $relconf [-prefix dir] [-docdir dir] [-headerdir dir] [-libdir dir] [-bindir dir] \\
	[-debug] [-release] [-qt-gif] [-no-gif] [-sm] [-no-sm] \\
	[-qt-zlib] [-system-zlib] [-qt-libpng] [-system-libpng] \\
	[-no-jpeg] [-system-jpeg] [-no-thread] [-thread] [-enable-kde2] \\
	[-Istring] [-lstring] [-Lstring] [-Rstring] [-enable-<module>] \\
	[-disable-<module>] [-with-<module setting>] [-without-<module setting>]

Installation options:

 These are optional, but you may specify install directories.

    -prefix dir ........ This will install everything relative dir
			  (default $QT_INSTALL_PREFIX)

 You may use these to separate different parts of the install:

    -bindir dir ........ Executables will be installed to dir
			  (default PREFIX/bin)
    -libdir dir ........ Libraries will be installed to dir
			  (default PREFIX/lib)
    -docdir dir ........ Documentation will be installed to dir
			  (default PREFIX/doc)
    -headerdir dir ..... Headers will be installed to dir
			  (default PREFIX/headers)

 The defaults (*) are usually acceptable.  Here is a short explanation of
 each option:

 *  -release ........... Compile and link Qt with debugging turned off.
    -debug ............. Compile and link Qt with debugging turned on.

 *  -shared ............ Create and use a shared Qt library (libqt.so).
    -static ............ Create and use a static Qt library (libqt.a).

 *  -no-gif ............ Do not compile in GIF reading support.
    -qt-gif ............ Compile in GIF reading support.
                         See src/kernel/qgif.h

 $SMN  -no-sm ............. Do not support X Session Management.
 $SMY  -sm ................ Support X Session Management, links in -lSM -lICE.

 $THN  -no-thread ......... Do not compile with threading support.
 $THY  -thread ............ Compile with threading support.

 $XRN  -no-xinerama ....... Do not compile Xinerama (multihead) support.
 $XRY  -xinerama .......... Compile Xinerama support.
			 Requires X11/extensions/Xinerama.h and libXinerama.

 $XRN  -no-xrender ........ Do not compile XRender support.
 $XRY  -xrender ........... Compile XRender support.
                         Requires X11/extensions/Xrender.h and libXrender.

 $XFTN  -no-xft ............ Do not compile XftFreeType (anti-aliased font) support.
 $XFTY  -xft ............... Compile XftFreeType support.
                         Requires X11/Xft/XftFreetype.h and libXft.

 *  -qt-zlib ........... Use the zlib bundled with Qt.
    -system-zlib ....... Use a zlib from the operating system
			 See http://www.info-zip.org/pub/infozip/zlib

 *  -qt-libpng ......... Use the libpng bundled with Qt.
    -system-libpng ..... Use a libpng from the operating system.
			 See http://www.libpng.org/pub/png

 *  -no-mng ............ Do not compile in MNG I/O support.
    -system-libmng ..... Use libmng from the operating system.
			 See http://www.libmng.com

 *  -no-jpeg ........... Do not compile in JPEG I/O support.
    -qt-jpeg ........... Use the libjpeg bundled with Qt.
    -system-jpeg ....... Use jpeglib from the operating system.
			 See http://www.ijg.org

 *  -no-nas-sound ...... Do not compile in NAS sound support.
    -system-nas-sound .. Use NAS libaudio from the operating system.
			 See http://radscan.com/nas.html

    -enable-kde2 ....... Builds the Qt Designer with KDE2 support, so that
			 KDE2 widgets can be used directly in the Qt Designer.
			 \$KDEDIR must be set to point to a KDE2 installation.
			 See http://www.kde.org

    -make directory .... This will generate makefiles for all project files
			 in directory. You can specify this option multiple
			 times so as to only make specific directories.

    -profile ........... Enable profiling with gprof (adds -pg options)

    -platform target ... The platform you are building on ($PLATFORM).
    -xplatform target .. The target platform when cross-compiling.

			 See the PLATFORMS file for a list of supported
			 operating systems and compilers.


    -Dstring ........... Add an explicit define to the preprocessor.
    -Istring ........... Add an explicit include path.
    -Lstring ........... Add an explicit library path.
    -Rstring ........... Add an explicit dynamic library runtime search path.
    -lstring ........... Add an explicit library.


    -enable-<module> .......... Enables a module where module is one of:
                                $MODULES_HELP
    -disable-<module> ......... Disables a module where module is one of:
                                $MODULES_HELP

    -with-<module setting> .... This will activate a setting as described below.
    -without-<module setting> . This will deactivate a setting for any enabled
                                module, consult each Qt module for their
				specific settings.

EOF

cat << EOF
Qt/Embedded only:

    -embedded arch...... This will enable the embedded build, you must have a
			 proper license for this switch to work.

    -no-freetype ....... Qt/Embedded only: do not compile in FreeType2 support.
 *  -freetype .......... Qt/Embedded only: add FreeType2 font support.

    -qconfig local ..... Use src/tools/qconfig-local.h rather than the
			 default ($QCONFIG).

    -depths list ....... Comma-separated list of supported bit-per-pixel
			 depths, from:  v, 4, 8, 16, 24, and 32.  'v' is VGA16.

    -accel-voodoo3 ..... Enable Voodoo3 acceleration.
    -accel-mach64 ...... Enable Mach64 acceleration.
    -accel-matrox ...... Enable Matrox MGA acceleration.
    -qvfb .............. Enable X11-based Qt Virtual Frame Buffer.
    -vnc ............... Enable VNC server (requires network module).

EOF


   [ "x$ERROR" = "xyes" ] && exit 1
   exit 0;
fi


if [ "$QWS_DEPTHS" = prompted -a "$EMBEDDED" != no ]
then
    echo
    echo "Choose pixel-depths to support:"
    echo
    echo "   v. VGA-16 - also enables 8bpp"
    echo "   4. 4bpp grayscale - also enables 8bpp"
    echo "   8. 8bpp"
    echo "  16. 16bpp"
    echo "  24. 24bpp - also enables 32bpp"
    echo "  32. 32bpp"
    echo
    echo "Each depth adds around 100Kb on 80386."
    echo
    echo "Your choices (default 8,16):"
    read QWS_DEPTHS
    if [ -z "$QWS_DEPTHS" ]
    then
	QWS_DEPTHS=8,16
    fi
fi

if [ -n "$QWS_DEPTHS" -a "$EMBEDDED" != "no" ]
then
    DV=;D4=;D8=;D16=;D24=;D32=
    for D in `echo "$QWS_DEPTHS" | sed -e 's/,/ /g'`
    do
	case "$D" in
	    v) DV=y; D8=y
	;;  4) D4=y; D8=y
	;;  8) D8=y
	;; 16) D16=y
	;; 24) D24=y; D32=y
	;; 32) D32=y
	esac
    done
    if [ -z "$DV" ]
    then
	D_FLAGS="$D_FLAGS QT_NO_QWS_VGA_16"
    fi
    if [ -z "$D4" ]
    then
	D_FLAGS="$D_FLAGS QT_NO_QWS_DEPTH_4"
    fi
    if [ -z "$D8" ]
    then
	D_FLAGS="$D_FLAGS QT_NO_QWS_DEPTH_8"
    fi
    if [ -z "$D16" ]
    then
	D_FLAGS="$D_FLAGS QT_NO_QWS_DEPTH_16"
    fi
    if [ -z "$D24" ]
    then
	D_FLAGS="$D_FLAGS QT_NO_QWS_DEPTH_24"
    fi
    if [ -z "$D32" ]
    then
	D_FLAGS="$D_FLAGS QT_NO_QWS_DEPTH_32"
    fi
fi

if [ "$QWS_QVFB" = prompted -a "$EMBEDDED" != no ]
then
    echo
    echo "Enable Qt Virtual Framebuffer support for development on X11 (default yes)"
    read QWS_QVFB
    if [ "$QWS_QVFB" != n -a "$QWS_QVFB" != no ]
    then
	QWS_QVFB=y
    else
	QWS_QVFB=n
    fi
fi


if [ -z "$QWS_ACCEL_VOODOO3" -a "$EMBEDDED" != no ]
then
    D_FLAGS="$D_FLAGS QT_NO_QWS_VOODOO3"
fi
if [ -z "$QWS_ACCEL_MACH64" -a "$EMBEDDED" != no ]
then
    D_FLAGS="$D_FLAGS QT_NO_QWS_MACH64"
fi
if [ -z "$QWS_ACCEL_MATROX" -a "$EMBEDDED" != no ]
then
    D_FLAGS="$D_FLAGS QT_NO_QWS_MATROX"
fi
if [ "$QWS_QVFB" = "n" -a "$EMBEDDED" != no ]
then
    D_FLAGS="$D_FLAGS QT_NO_QWS_VFB"
fi
if [ -z "$QWS_VNC" -a "$EMBEDDED" != no ]
then
    D_FLAGS="$D_FLAGS QT_NO_QWS_VNC"
fi


case "$QCONFIG" in
  local|qpe|qpe-single)
    # Not known to be sufficient for anything.
    continue
    ;;
  minimal|small|medium|large|full)
    # These are a sequence of increasing functionality.
    for c in minimal small medium large full
    do
	QMAKE_CONFIG="$QMAKE_CONFIG $c-config"
	if [ "$QCONFIG" = $c ]; then
	    break;
	fi
    done
    ;;
  *)
    echo >&2 "No such configuration: $QCONFIG"
    HELP=yes
esac
rm -f $relpath/src/tools/qconfig.h.new   # KLUDGE - shouldn't be in p4 depot
case "$QCONFIG" in
  full)
    echo "// Everything" >$relpath/src/tools/qconfig.h.new
    ;;
  *)
    QCONFIGFILE=qconfig-$QCONFIG.h
    echo "// Copied from $QCONFIGFILE" >$relpath/src/tools/qconfig.h.new
    cat $relpath/src/tools/$QCONFIGFILE >>$relpath/src/tools/qconfig.h.new
    ;;
esac
cat >> $relpath/src/tools/qconfig.h.new <<EOF
// from configure
#define QT_INSTALL_PREFIX "$QT_INSTALL_PREFIX"
#define QT_PRODUCT_LICENSEE "$Licensee"
#define QT_PRODUCT_LICENSE "$Products"
EOF
QCONF_CHANGES=`diff $relpath/src/tools/qconfig.h $relpath/src/tools/qconfig.h.new 2>&1 | wc -l | sed "s, ,,g"`
if [ -f $relpath/src/tools/qconfig.h ] && [ "x$QCONF_CHANGES" = "x0" ]
then
    rm -f $relpath/src/tools/qconfig.h.new
else
    [ -f $relpath/src/tools/qconfig.h ] && chmod +w $relpath/src/tools/qconfig.h
    mv $relpath/src/tools/qconfig.h.new $relpath/src/tools/qconfig.h
    chmod -w $relpath/src/tools/qconfig.h
fi



# Build up the variables for output
QMAKE_OUTDIR=""
case $Products in
   qt-enterprise)
       QMAKE_CONFIG="$QMAKE_CONFIG enterprise"
	;;
   qt-internal)
#	QMAKE_CONFIG="$QMAKE_CONFIG internal"
	;;
   *) ;;
esac

if [ "x$DEBUG" = "xyes" ]
then
    QMAKE_OUTDIR="${QMAKE_OUTDIR}debug"
    QMAKE_CONFIG="$QMAKE_CONFIG debug"
fi
if [ "x$DEBUG" = "xno" ]
then
    QMAKE_OUTDIR="${QMAKE_OUTDIR}release"
    QMAKE_CONFIG="$QMAKE_CONFIG release"
fi
if [ "x$THREAD" = "xyes" ]
then
    QMAKE_OUTDIR="${QMAKE_OUTDIR}-mt"
    QMAKE_CONFIG="$QMAKE_CONFIG thread"
fi

if [ "x$EMBEDDED" != "xno" ]
then
    QMAKE_OUTDIR="${QMAKE_OUTDIR}-emb-$EMBEDDED"
    QMAKE_CONFIG="$QMAKE_CONFIG embedded"
    rm -f src/.moc/$QMAKE_OUTDIR/allmoc.cpp # needs remaking if config changes
else
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_LIBDIR_QT=$outpath/lib\""
fi
QMAKE_VARS="$QMAKE_VARS \"OBJECTS_DIR=.obj/$QMAKE_OUTDIR\" \"MOC_DIR=.moc/$QMAKE_OUTDIR\""

[ "x$SHARED" = "xyes" ] && QMAKE_CONFIG="$QMAKE_CONFIG dll"
[ "x$SHARED" = "xno" ] && QMAKE_CONFIG="$QMAKE_CONFIG staticlib"
[ "x$NAS_SOUND" = "xyes" ] && QMAKE_CONFIG="$QMAKE_CONFIG nas"
[ "x$JPEG" = "xyes" ] && QMAKE_CONFIG="$QMAKE_CONFIG jpeg"
[ "x$JPEG" = "xsystem" ] && QMAKE_CONFIG="$QMAKE_CONFIG system-jpeg"
[ "x$MNG" = "xyes" ] && QMAKE_CONFIG="$QMAKE_CONFIG mng"
[ "x$FT" = "xyes" -a "x$EMBEDDED" != "xno" ] && QMAKE_CONFIG="$QMAKE_CONFIG ft"
[ "x$SM" = "xyes" ] && QMAKE_CONFIG="$QMAKE_CONFIG sm"
[ "x$XINERAMA" = "xyes" ] && QMAKE_CONFIG="$QMAKE_CONFIG xinerama"
[ "x$XRENDER" = "xyes" ] && QMAKE_CONFIG="$QMAKE_CONFIG xrender"
[ "x$XFTFREETYPE" = "xyes" ] && QMAKE_CONFIG="$QMAKE_CONFIG xftfreetype"
[ "x$GIF" = "xyes" ] && QMAKE_CONFIG="$QMAKE_CONFIG gif"
[ "x$ZLIB" = "xyes" ] && QMAKE_CONFIG="$QMAKE_CONFIG zlib"
[ "x$LIBPNG" = "xyes" ] && QMAKE_CONFIG="$QMAKE_CONFIG png"
[ "x$KDE" = "xyes" ] && QMAKE_CONFIG="$QMAKE_CONFIG kde"
[ "x$BIG_CODECS" = "xyes" ] && QMAKE_CONFIG="$QMAKE_CONFIG bigcodecs"
[ -z "$QMAKE_PROJECTS" ] && QMAKE_PROJECTS=`find $relpath/. -name '*.pro' -print | sed 's-/\./-/-'`
[ '!' -z "$D_FLAGS" ] && QMAKE_VARS="$QMAKE_VARS \"DEFINES+=$D_FLAGS\""
if [ '!' -z "$l_FLAGS" ] || [ '!' -z "$L_FLAGS" ]
then
    QMAKE_VARS="$QMAKE_VARS \"LIBS+=$L_FLAGS $l_FLAGS\""
fi
[ '!' -z "$R_FLAGS" ] && QMAKE_VARS="$QMAKE_VARS \"QMAKE_LFLAGS+=$R_FLAGS\""
if [ '!' -z "$I_FLAGS" ]
then
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_CFLAGS+=$I_FLAGS\""
    QMAKE_VARS="$QMAKE_VARS \"QMAKE_CXXFLAGS+=$I_FLAGS\""
fi

#install things
QMAKE_VARS="$QMAKE_VARS \"QT_PREFIX=${QT_INSTALL_PREFIX}\""
[ '!' -z "$QT_INSTALL_DOCS" ] && QMAKE_VARS="$QMAKE_VARS \"docs.path=${QT_INSTALL_DOCS}\""
[ '!' -z "$QT_INSTALL_HEADERS" ] && QMAKE_VARS="$QMAKE_VARS \"headers.path=${QT_INSTALL_HEADERS}\""
[ '!' -z "$QT_INSTALL_LIBS" ] && QMAKE_VARS="$QMAKE_VARS \"QT_INSTALL_LIBPATH=${QT_INSTALL_LIBS}\""
[ '!' -z "$QT_INSTALL_BINS" ] && QMAKE_VARS="$QMAKE_VARS \"QT_INSTALL_BINPATH=${QT_INSTALL_BINS}\""

#do modules.h
rm -f $relpath/src/tools/qmodules.h.new
cat >$relpath/src/tools/qmodules.h.new << EOF
// These modules are present in this configuration of Qt
EOF
for MODULE in $MODULES
do
    if [ -d "$relpath/src/$MODULE" ]
    then
	M=`echo $MODULE | tr '[a-z]' '[A-Z]'`
	echo "#define QT_MODULE_$M" >>$relpath/src/tools/qmodules.h.new
	QMAKE_CONFIG="$QMAKE_CONFIG $MODULE"
    fi
done
#because things depend on qmodules.h, I conditionally copy
#so I don't rebuild them when I configure but change nothing..
QMOD_CHANGES=`diff $relpath/src/tools/qmodules.h $relpath/src/tools/qmodules.h.new 2>&1 | wc -l | sed "s, ,,g"`
if [ -f $relpath/src/tools/qmodules.h ] && [ "x$QMOD_CHANGES" = "x0" ]
then
    rm -f $relpath/src/tools/qmodules.h.new
else
    [ -f $relpath/src/tools/qmodules.h ] && chmod +w $relpath/src/tools/qmodules.h
    mv $relpath/src/tools/qmodules.h.new $relpath/src/tools/qmodules.h
    chmod -w $relpath/src/tools/qmodules.h
fi

# Create the .qmake.cache file
[ -f $outpath/.qmake.cache ] && rm -f $outpath/.qmake.cache
cat >>$outpath/.qmake.cache <<EOF
CONFIG += $QMAKE_CONFIG
QMAKEPATH = $XPLATFORM
EOF
quoted=no
tmp=""
for i in $QMAKE_VARS; do
  if [ "$quoted" = "no" ]
  then
    case "$i" in
      \"*\")   echo $i | sed 's,^",,' | sed 's,"$,,' >>$outpath/.qmake.cache;   ;;
      \"*)   quoted=yes ; tmp=$i;   ;;
      *)   echo $i >>.qmake.cache ;;
    esac
  else
    case "$i" in
      *\") quoted=no
	   echo $tmp $i | sed 's,^",,' | sed 's,"$,,' >>$outpath/.qmake.cache
	   tmp="" ;;
      *) tmp="$tmp $i" >>$outpath/.qmake.cache ;;
    esac
  fi
#    echo $a
done

# Give feedback...
echo
if [ "$XPLATFORM" = "$PLATFORM" ]
then
    echo "Build type:    $PLATFORM"
else
    echo "Building on:   $PLATFORM"
    echo "Building for:  $XPLATFORM"
fi

if [ -n "$PLATFORM_NOTES" ]
then
    echo "Platform notes:"
    echo "$PLATFORM_NOTES"
else
    echo
fi

if [ -n "$VERBOSE" ]
then
    echo "QMake vars....... $QMAKE_VARS"
    echo "QMake swtiches... $QMAKE_SWITCHES"
fi

if [ "x$CONCURRENT" != "x0" ]
then
    echo "Concurrent........... $CONCURRENT"
fi
echo "Configuration........ $QMAKE_CONFIG"
echo "Embedded support..... $EMBEDDED"
echo "Thread support....... $THREAD"
echo "GIF support.......... $GIF"
echo "MNG support.......... $MNG"
echo "JPEG support......... $JPEG"
echo "NAS sound support.... $NAS_SOUND"
echo "Session management... $SM"
echo "Xinerama support..... $XINERAMA"
echo "XRender support ..... $XRENDER"
echo "XftFreeType support . $XFTFREETYPE"
echo

#do the qmake..
[ -x "$relpath/bin/syncqt" ] && $relpath/bin/syncqt
if true #[ '!' -f "$outpath/bin/qmake" ]
then
    echo Creating qmake...
    rm -f $outpath/qmake/GNUmakefile
    rm -f $outpath/qmake/Makefile
    case "$LIBDL" in
    auto) DYLIB_LINK="-ldl" ;;
    no)   DYLIB_LINK="" ;;
    *)    DYLIB_LINK="$LIBDL" ;;	
    esac

    grep "QMAKE_CC" $QMAKEPATH/qmake.conf | \
	sed -e "s,QMAKE_.*FLAGS.*,,g" -e "s,QMAKE_CC,CC," > $outpath/qmake/GNUmakefile
    grep "QMAKE_CC" $QMAKEPATH/qmake.conf | \
	sed -e "s,QMAKE_.*FLAGS.*,,g" -e "s,QMAKE_CC,CC," > $outpath/qmake/Makefile
    grep "QMAKE_CXX" $QMAKEPATH/qmake.conf | \
	sed -e "s,QMAKE_.*FLAGS.*,,g" -e "s,QMAKE_CXX,CXX", >> $outpath/qmake/GNUmakefile
    grep "QMAKE_CXX" $QMAKEPATH/qmake.conf | \
	sed -e "s,QMAKE_.*FLAGS.*,,g" -e "s,QMAKE_CXX,CXX," >> $outpath/qmake/Makefile

    sed -e "s,@REL_QTDIR@,$relpath,g" -e "s,@OUT_QTDIR@,$outpath,g" \
        -e "s,@QMAKE_LIBRARIES@,$DYLIB_LINK,g" -e "s,@QMAKEPATH@,$QMAKEPATH,g" \
	$relpath/qmake/GNUmakefile.in >>$outpath/qmake/GNUmakefile
    sed -e "s,@REL_QTDIR@,$relpath,g" -e "s,@OUT_QTDIR@,$outpath,g" \
	-e "s,@QMAKE_LIBRARIES@,$DYLIB_LINK,g" -e "s,@QMAKEPATH@,$QMAKEPATH,g" \
	$relpath/qmake/Makefile.unix >>$outpath/qmake/Makefile

    (cd $outpath/qmake; /bin/sh -c $MAKE || \
	(echo "QMake failed to build. Aborting." && exit 2)) || exit 2
fi

QMAKE_ALL_ARGS="\"CONFIG+=$QMAKE_CONFIG\" $QMAKE_VARS $QMAKE_SWITCHES"
echo Creating makefiles...
sepath=`echo $relpath | sed -e 's/\\./\\\\./g'`
PROCS=1
PIPE=""
EXEC=""

# Work around a segfaulting uniq(1)
rm -f .sorted.projects
for p in `echo $QMAKE_PROJECTS`
do
    echo $p >> .sorted.projects
done

sort .sorted.projects  > .sorted.projects.new
mv -f .sorted.projects.new .sorted.projects
uniq .sorted.projects > .sorted.projects.new
mv -f .sorted.projects.new .sorted.projects
for a in `cat .sorted.projects`; do
    case $a in
    *-kde.pro|*qtmain.pro) continue ;;
    *-pro.pro)
	if [ "x$Edition" != "xpro" ]
	then
	    continue
	fi
	;;
    *moc*) CONF=$QMAKEPATH ;;
    *) CONF=$XQMAKEPATH ;;
    esac
    file=`basename $a`
    dir=`dirname $a | sed -e "s;$sepath;.;g"`
    test -d $dir || mkdir -p $dir
    N=$outpath/$dir/Makefile
    QMAKE_EXTRA_ARGS="\"QMAKE_ABSOLUTE_SOURCE_PATH=$relpath/$dir\""
    PIPE="$outpath/bin/qmake $QMAKE_ALL_ARGS $QMAKE_EXTRA_ARGS -o $N -path $CONF $a"
    if [ "x$CONCURRENT" = "x0" ] || [ "x$CONCURRENT" = "x1" ]
    then
	EXEC=$PIPE
    else
	EXEC="$EXEC ($PIPE & ) ;"
	if [ "x$PROCS" != "x$CONCURRENT" ]
	then
	    PROCS=`expr $PROCS + 1`
	else
	    PROCS=1
	    EXEC="$EXEC wait"
	fi
    fi

    echo -n "  for $a"
    if [ "$VERBOSE" = "yes" ]; then
	echo " (`basename $CONF`)"
	echo -n $EXEC
    fi
    echo

    [ -f "$N" ] && chmod +w $N
    if [ "x$PROCS" = "x1" ]
    then
	/bin/sh -c "$EXEC"
	EXEC=""
    fi
done
#this is just incase the concurrant task is not a multiple of the number of tasks
[ '!' -z "$EXEC" ] && /bin/sh -c "$EXEC wait"

if echo "$LD_LIBRARY_PATH" | grep >/dev/null $outpath/lib
then
    if grep >/dev/null QMAKE_RPATH $XQMAKEPATH/qmake.conf
    then
	echo # Using -R/-rpath, so no need to warn
    else
	if [ -n "$FROMMAKE" ]
	then
	    echo
	    echo "WARNING: \$LD_LIBRARY_PATH does not contain \$outpath/lib"
	    echo "         many platforms require this."
	    echo
	fi
    fi
fi
rm -f .sorted.projects

#finally put the executed command to another script..
[ -f $outpath/config.status ] && rm -f $outpath/config.status
cat >$outpath/config.status << EOF
#!/bin/sh

echo yes | $relpath/$relconf $CONFIG_CMDLINE \$@
EOF
chmod +x $outpath/config.status

echo
echo Qt is now configured for building. Just run $MAKE.
echo To reconfigure, run $MAKE clean and configure.
echo
