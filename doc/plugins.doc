/*!
    \page plugins.html

\title Qt Plugins

Qt provides a simple plugin interface which makes it easy to create
custom styles, codes and image formats that can be dynamically loaded
into applications. The plugin interface is also used to extend \link
designer-manual.book Qt Designer\endlink with custom widgets.

Writing a new plugin is achieved by subclassing the appropriate plugin
baseclase, implementing a few functions, and adding a macro. 

There are five plugin base classes:
\list 1
\i QCodecPlugin
\i QImagePlugin
\i QSqlDriverPlugin
\i QStylePlugin
\i QWidgetPlugin
\endlist

Suppose that you have a new style class called 'MyStyle' that you want
to make available as a plugin. The required code is straightforward:
\code
    class MyStylePlugin : public QStylePlugin
    {
    public:
	MyStylePlugin() {}
	~MyStylePlugin();

	QStringList keys() { 
	    return QStringList() << "MyStyle"; 
	}

	QStyle* create( const QString& key ) { 
	    if ( key == "MyStyle" ) 
		return new MyStyle;
	    return 0;
	}
    };

    Q_EXPORT_PLUGIN( MyStylePlugin )
\endcode

Qt applications automatically know which plugins are available,
because plugins are stored in particular directories in relation to
\c QTDIR. Because of this applications don't require any code to deal
with plugins, since Qt handles them automatically.

Styles are an exception, since you might want to apply a style
explicitly in code. To apply a style, use code like this:
\code
    QApplication::setStyle( QStyleFactory::create( "MyStyle" ) );
\endcode
Note that you don't have to "load" the style; Qt knows about the
plugins and takes care of that automatically.

*/
