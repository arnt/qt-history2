/****************************************************************************
**
** Documentation for sql driver programming
**
** Copyright (C) 1992-2001 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page sql-driver.html
 
\title Qt SQL Module - Drivers

The <a href="sql.html">Qt SQL Module</a> uses driver <a
href="component.html">plugins</a> in order to communicate with
different database APIs.  Since the Qt SQL Module API is
database-independent, all database-specific code is contained within
these drivers.  Several drivers are supplied with Qt and other drivers
can be added.

QSqlDatabase is responsible for loading and managing database driver
plugins.  When a database is added (see QSqlDatabase::addDatabase()),
the appropriate driver plugin is loaded (using QLibrary).
QSqlDatabase relies on the driver plugin to provide <q
href="qinterfacemanager.html">interfaces</a> for QSqlDriver and
QSqlResult.

QSqlDriver is an abstract base class which defines the functionality
of a SQL database driver.  This includes functions such as
QSqlDriver::open() and QSqlDriver::close().  QSqlDriver is responsible
for connecting to a database, establish the proper environment, etc.
In addition, QSqlDriver can create QSqlQuery objects appropriate for
the particular database API.  QSqlDatabase forwards many of its
function calls directly to QSqlDriver which provides the concrete
implementation.

QSqlResult is an abstract base class which defines the functionality
of a SQL database query.  This includes statements such as SELECT,
UPDATE, or ALTER TABLE.  QSqlResult contains functions such as
QSqlResult::next() and QSqlResult::value().  QSqlResult is responsible
for sending queries to the database, returning result data, etc.
QSqlQuery forwards many of its function calls directly to QSqlResult
which provides the concrete implementation.

QSqlDriver and QSqlResult are closely connected.  When implementing a
Qt SQL driver, both of these classes must to be subclassed and the
abstract virtual methods in each class must be implemented.  

To implement a Qt SQL driver as a plugin (so that it is recognized and
loaded by the Qt library at runtime), the driver must export a
QSqlDriverFactoryInterface, which is an interface that is capable of
producing QSqlDriver objects (see QSqlDriverFactory::create()).  There
are several macros available to assist in creating such a plugin.  See
the source from the examples provided with Qt in 
\c{QTDIR/plugins/src/sqldrivers} and \c{QTDIR/src/sql/drivers}
 for more information.

*/
