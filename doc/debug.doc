/****************************************************************************
** $Id: debug.doc,v 2.13 1999/05/24 23:42:32 agulbra Exp $
**
** Qt Debugging Techniques
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*!
\page debug.html

\title Debugging Techniques

Here we present some useful hints to debugging your Qt-based software.

<h2>Command Line Options</h2>

When you run a Qt program you can specify several command line options
that can help with debugging.
<p>
<ul>
<li>-nograb The application should never grab \link QWidget::grabMouse the
mouse\endlink or \link QWidget::grabKeyboard() the keyboard \endlink.
This option is set by default when the program is running in the \c
gdb debugger under Linux.
<li>-dograb Ignore any implicit or explicit -nograb.  -dograb wins
over -nograb even when -nograb is last on the command line.
<li>-sync Runs the application in X synchronous mode.  Synchronous
mode forces the X server perform each X client request immediately and
not use a buffer optimization. It makes the program easier to debug and
often much slower.  The -sync option is only valid for the X11
version of Qt.
</ul>
<p>

<hr>
<h2>Warning and Debugging Messages</h2>

Qt includes three global functions for writing out warning and debug
text.
<ul>
<li>\link ::qDebug() qDebug()\endlink for writing debug output for testing etc.
<li>\link ::qWarning() qWarning()\endlink for writing warning output when program
errors occur.
<li>\link ::qFatal() qFatal()\endlink for writing fatal error messages and exit.
</ul>

The Qt implementation of these functions prints the text to the \c stderr
output under Unix/X11 and to the debugger under Windows.  You can
take over these functions by installing a message handler;
\link ::qInstallMsgHandler() qInstallMsgHandler()\endlink.

The debugging functions \l QObject::dumpObjectTree() and \l
QObject::dumpObjectInfo() are often useful when an application looks
or acts strangely.  More useful if you use object names than not, but
often useful even without names.

<hr>
<h2>Debugging Macros</h2>

The header file qglobal.h contains many debugging macros and #defines.

Two important macros are:
<ul>
<li>\link ::ASSERT ASSERT(b)\endlink where b is a boolean expression, writes
the warning: "ASSERT: 'b' in file file.cpp (234)" if b is FALSE.
<li>\link ::CHECK_PTR() CHECK_PTR(p)\endlink where p is a pointer.
Writes the warning "In file file.cpp, line 234: Out of memory" if p is null.
</ul>

These macros are useful for detecting program errors, e.g. like this:
\code
  char *alloc( int size )
  {
      ASSERT( size > 0 );
      char *p = new char[size];
      CHECK_PTR( p );
      return p;
  }
\endcode

If you define the flag QT_FATAL_ASSERT, ASSERT will call fatal()
instead of warning(), so a failed assertion will cause the program to
exit after printing the error message.

Note that the ASSERT macro is a null expression if \c QT_CHECK_STATE (see
below) is not defined. Any code in it will simply not be
executed. Similarly CHECK_PTR is a null expression if \c QT_CHECK_NULL is
not defined. Here is an example of how you should NOT use ASSERT and
CHECK_PTR:

\code
  char *alloc( int size )
  {
      char *p;
      CHECK_PTR( p = new char[size] );	// never do this!
      return p;
  }
\endcode

The problem is tricky: \e p is set to a sane value only as long as the
correct checking flags are defined. If this code is compiled without
the QT_CHECK_NULL flag defined, the code in the CHECK_PTR expression is
not executed (correctly, since it's only a debugging aid) and \e alloc
returns a wild pointer.

The Qt library contains hundreds of internal checks that will print
warning messages when some error is detected.

The tests for sanity and the resulting warning messages inside Qt are
conditional, based on the state of various debugging flags:
<ul>
<li> \c QT_CHECK_STATE: Check for consistent/expected object state
<li> \c QT_CHECK_RANGE: Check for variables range errors
<li> \c QT_CHECK_NULL: Check for dangerous null pointer
<li> \c QT_CHECK_MATH: Check for dangerous math, e.g. division by 0
<li> \c QT_NO_CHECK: Turn off all QT_CHECK_... flags
<li> \c QT_DEBUG: Enable debugging code
<li> \c QT_NO_DEBUG: Turn off QT_DEBUG flag
</ul>

By default, both QT_DEBUG and all the QT_CHECK flags are on. To turn off
QT_DEBUG, define QT_NO_DEBUG. To turn off the QT_CHECK flags, define QT_NO_CHECK.

Example:
\code
  void f( char *p, int i )
  {
  #if defined(QT_CHECK_NULL)
      if ( p == 0 )
	  qWarning( "f: Null pointer not allowed" );
  #endif

  #if defined(QT_CHECK_RANGE)
      if ( i < 0 )
	  qWarning( "f: The index cannot be negative" );
  #endif
  }
\endcode

<h2>Common bugs</h2>

There is one bug that is so common that it deserves mention here: If
you include the Q_OBJECT macro in a class declaration and run the moc,
but forget to link the moc-generated object code into your executable,
you will get very confusing error message.

Any link error complaining about a lack of <code>vtbl</code>,
<code>_vtbl</code>, <code>__vtbl</code> or similar is likely to be
this problem.

*/
