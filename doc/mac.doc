/****************************************************************************
** $Id: $
**
** Qt/Embedded (Qt on QWS) documentation
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/
/*! \page mac-differences.html

\title Qt/Mac differences

This file will outline known issues and possible workarounds for
limitations on Mac OS X with Qt. This list will not always be complete, so
please contact Trolltech support with issues you find to be missing:

\section1 \link qcursor.html QCursor \endlink

Due to Mac OS X having only 16x16 custom cursors QCursor is limited by this
as well. For now the only workaround to this problem is to use a small
cursor (16x16).

\section1 Anti-aliased text

Qt/Mac (starting with 3.0.5) has introduced some support for smooth text as
suggested by Apple's Aqua Style Guildelines. This support is limited to Mac
OS X >10.1.4, when this version is not detected it will fallback to the old
text rendering library.


\title Library Support

\section1 Bundle-based Libraries

If you want to incorporate dynamic libraries as part of your MacOSX application bundle (the application directory), then you place these into a directory called Frameworks, a subdirectory of the application bundle.

The application finds these dynamic libraries if the libraries have an install name of "@executable_path/../Frameworks/libname.dylib.

If you use qmake and Makefiles, use the QMAKE_LFFLAGS_SONAME setting:

\code
QMAKE_LFLAGS_SONAME  = -Wl,-install_name,@executable_path/../Frameworks/
\endcode

In case of Project Builder, you set the Library targets to have their install path (in the Build Settings of the target) set to "@executable_path/.../Frameworks". You also need to add a custom build setting called "SKIP_INSTALL" and set this to YES. In the Application target you need to add a Copy Files build phase that will copy the library product into the applications wrapper's Framework sub-folder.

Note that DYLD_LIBRARY_PATH environment variables will override these settings, same with any other default paths such as a lookup of dynamic libraries inside /usr/lib and similar default locations.

We still strongly recommend to build static applications where the library code
is incorporated into the MacOSX binary. However, in case you ship applications
that require plugin support,then you need to use dynamic libraries as part of your application.


\section1 Combining Libraries
If you want to build a new dynamic library combining the Qt 3.1 dynamic
libraries, you need to introduce the ld -r flag so that relocation information
is stored in the the output file, so that this file could be the subject of 
another ld run. This is done by setting the -r flag in the .pro file, and the
LFLAGS settings.



\title Compiler Settings

\section1 Compile-time Flags

If you want to wrap any specific MacOSX code in a define, use the Q_OS_MACX
flag, as in:

\code
#if defined(Q_OS_MACX)
// the code used
#endif
\endcode

Note that when you build under MacOSX 10.2, then the MACOSX_102 flag is automatically included in the make builds.


\Building and Configuring Qt/Mac

\section1 Problems building a static configuration

If a static build fails with the following error messages during the designer make phase:

\code
QWidget::sizeHint() const referenced from libqui expected to be defined in @executable_path/../Frameworks/libqt-mt.3.dylib
non-virtual thunk [nv:-40] to QWidget::metric(int) const referenced from libqui
 expected to be defined in @executable_path/../Frameworks/libqt-mt.3.dylib
\endcode

then ensure that your library path does not have libqui libraries or symbolic links. If you remove these, then the build will continue.


\title Macintosh Native API Access

\section1 Accessing the Bundle Path

The Macintosh application is actually a directory (ending with .app). This directory has various other sub-directories and sources. In case you want to place for example the plugin directory inside this bundle, then you need to find out where the bundle resides on the disk. The following code will do this:

\code
	CFURLRef pluginRef = CFBundleCopyBundleURL(CFBundleGetMainBundle());
	CFStringRef macPath = CFURLCopyFileSystemPath(pluginRef, 
                                               kCFURLPOSIXPathStyle);
	const char *pathPtr = CFStringGetCStringPtr(macPath, 
                                               CFStringGetSystemEncoding());
	qDebug("Path = %s", pathPtr);
\endcode

Do not forget to enclosure this in an #if defined(Q_OS_MACX) macro statement.


\title User Interface


\section1 Right-Mouse Clicks
<p>If you want to provide right-mouse click support for MacOSX, use the QContextMenuEvent class. This will map to a context menu event, in other words a menu that will display a popup selection. This is the most common use of right-mouse clicks, and maps to a control-click with the MacOSX one-button mouse support.





*/



