/****************************************************************************
** $Id: qinterfacemanager.doc,v 2.32 1999/10/25 14:49:09 vohi Exp $
**
** QInterfaceManager class documentation
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/



/*****************************************************************************
  QList documentation
 *****************************************************************************/

/*!
  \class QInterfaceManager qinterfacemanager.h
  \brief The QInterfaceManager template provides basic functions to access features provided in libraries.

  \ingroup components
*/

/*!
  \fn QInterfaceManager::QInterfaceManager( const QString& path = QString::null, const QString& filter = "*.dll; *.so", QApplicationInterface* appIface = 0, QPlugIn::LibraryPolicy pol = QPlugIn::Default )

  Creates an QInterfaceManager that will try to load all library files in \a path that match \a filter.
  For each successfully loaded library file a QPlugIn object will be created to which the \a appIface and \a pol
  parameters are propagated.
*/

/*!
  \fn void QInterfaceManager::addLibraryPath( const QString& path, const QString& filter = "*.dll; *.so" )

  Tries to load all library files in \a path that match \a filter, and adds all successfully loaded libraries
  to the managed list. The current library policy will be propagated to all new QPlugIn objects created.

  \sa addLibrary, setDefaultPolicy
*/

/*!
  \fn QPlugIn* QInterfaceManager::addLibrary( const QString& file )

  Tries to load the library file \a file, adds the library to the managed list and
  returns the created QPlugIn object if successful, otherwise returns 0.

  \sa removeLibrary, addLibraryPath
*/

/*!
  \fn bool QInterfaceManager::removeLibrary( const QString& file )

  Removes the library \a file from the managed list and returns TRUE if the library could
  be unloaded, otherwise returns FALSE.

  \sa addLibrary
*/

/*!
  \fn void QInterfaceManager::setDefaultPolicy( QPlugIn::LibraryPolicy pol )

  Sets the default policy for this library manager to \a pol. The default policy is
  propagated to all newly created QPlugIn objects.

  \sa defaultPolicy
*/

/*!
  \fn QPlugIn::LibraryPolicy QInterfaceManager::defaultPolicy() const

  Returns the current default policy.

  \sa setDefaultPolicy
*/

/*!
  \fn Type* QInterfaceManager::queryInterface(const QString& feature) const
*/

/*!
  \fn QPlugIn* QInterfaceManager::plugIn( const QString& feature ) const

  Returns a pointer to the QPlugIn for the library providing \a feature.

  \sa featureList, libraryList
*/

/*!
  \fn QStringList QInterfaceManager::featureList() const

  Returns a list of all features provided by the interfaces managed through this 
  interface manager.

  \sa plugIn, selectFeature, unloadFeature, queryInterface
*/

/*!
  \fn QPlugIn* QInterfaceManager::plugInFromFile( const QString& fileName ) const

  Returns a pointer to the QPlugIn object for the library \a fileName.

  \a 
*/

/*!
  \fn QStringList QInterfaceManager::libraryList() const

  Returns a list of all libraries managed through this interface manager.

  \sa plugInFromFile
*/

/*!
  \fn bool QInterfaceManager::selectFeature( const QString& feature )

  Load the library providing \a feature, and unloads all other libraries.
  Returns TRUE if the library could be loaded, otherwise returns FALSE.

  \sa unloadFeature
*/

/*!
  \fn bool QInterfaceManager::unloadFeature( const QString& feature )

  Unloads the library providing \a feature and returns TRUE if successful.

  \sa selectFeature
*/
