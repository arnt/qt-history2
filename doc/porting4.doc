/****************************************************************************
**
** Copyright (C) 1992-2003 Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
\page porting.html

\title Porting to Qt 4.x

This document describes porting applications from Qt 3.x to Qt 4.x. 

If you haven't yet made the decision about porting, or are unsure
about whether it is worth it, take a look at the \link
keyfeatures40.html key features\endlink offered by Qt 4.x.

The Qt 4.x series is not binary compatible with the 3.x series. This
means programs compiled for Qt 3.x must be recompiled to work with Qt
4.x.  Qt 4.x is also not completely \e source compatible with 3.x,
however all points of incompatibility cause compiler errors or
run-time messages (rather than mysterious results).  Qt 4.x includes
many additional features and discards obsolete functionality. Porting
from Qt 3.x to Qt 4.x is straightforward, and once completed makes 
the considerable additional power and flexibility of Qt 4.x available
for use in your applications.

To port code from Qt 3.x to Qt 4.x:

\list 1

\i Briefly read the porting notes below to get an idea of what to expect.
\i Be sure your code compiles and runs well on all your target platforms
   with Qt 3.x.
\i Recompile with Qt 4.x.  For each error, search below for related
   identifiers (e.g. function names, class names). This document 
   mentions all relevant identifiers to help you get the information
   you need at the cost of being a little verbose.
\i If you get stuck, ask on the \link http://qt-interest.trolltech.com/
   qt-interest \endlink mailing list, or Trolltech Technical Support if
   you're a registered licensee.

\endlist

Table of contents:

\tableofcontents

\section1 QString

If you specify a negative value for \e len to left() or right() then an empty string is
returned.

\section1 QObject

children() and QueryList now return a QObjectList instead of a pointer
to a QObjectList. See also the comments on QObjectList.

killTimers() has been removed.

\section1 QObjectList

QObjectList is a typdef to a QList of QObject pointers and not a QPtrList now.

\section 1 QPointArray

QPointArray is now implicitly shared and based on QVector.
The return type for the setPoints() and putPoints() functions is now void instead of bool.
isNull() is obsolete, use isEmpty() instead.
copy() is obsolete, use standard assignment instead.

\section1 QWidgetIntDict

Has been removed.

<<<<
*/
