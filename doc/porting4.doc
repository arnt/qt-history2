/****************************************************************************
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
\page porting.html

\title Porting to Qt 4.x

This document describes porting applications from Qt 3.x to Qt 4.x. 

If you haven't yet made the decision about porting, or are unsure
about whether it is worth it, take a look at the \link
keyfeatures40.html key features\endlink offered by Qt 4.x.

The Qt 4.x series is not binary compatible with the 3.x series. This
means programs compiled for Qt 3.x must be recompiled to work with Qt
4.x. Qt 4.x is also not completely \e source compatible with 3.x,
however all points of incompatibility cause compiler errors or
run-time messages (rather than mysterious results). Qt 4.x includes
many additional features and discards obsolete functionality. Porting
from Qt 3.x to Qt 4.x is straightforward, and once completed makes 
the considerable additional power and flexibility of Qt 4.x available
for use in your applications.

To port code from Qt 3.x to Qt 4.x:

\list 1

\i Briefly read the porting notes below to get an idea of what to expect.
\i Be sure that your code compiles and runs well on all your target
   platforms with Qt 3.x.
\i Recompile with Qt 4.x. For each error, search below for related
   identifiers (e.g. function names, class names). This document 
   mentions all relevant identifiers to help you get the information
   you need at the cost of being a little verbose.
\i If you get stuck, ask on the \link http://qt-interest.trolltech.com/
   qt-interest \endlink mailing list, or Trolltech Technical Support if
   you're a registered licensee.

\endlist

Table of contents:

\tableofcontents


\section1 QWidget

The following functions are obsolete. Most will continue to work in
COMPAT mode, but we recommend not using them in new code.

\list
\i QWidget::hasMouse() - use QWidget::underMouse() instead.
\i QWidget::ownPalette() - use QWidget::testAttribute(QWidget::WA_SetPalette) instead.
\i QWidget::unsetPalette() - use QWidget::setPalette(QPalette()) instead.
\i QWidget::ownFont() - use QWidget::testAttribute(QWidget::WA_SetFont) instead.
\i QWidget::unsetFont() - use QWidget::setFont(QFont()) instead.
\i QWidget::colorGroup() - use QWidget::palette() instead.
\i QWidget::childAt(int x, int y, bool includeThis) - the \c includeThis boolean parameter is gone.
\i QWidget::colorGroup() const
\i QWidget::parentWidget(bool sameWindow) - \c sameWindow boolean parameter is gone.
\i QWidget::drawText() - use QPainter::drawText() instead.
\i QWidget::close(bool alsoDelete) - the \c alsoDelete boolean parameter is gone. 
   Use QWidget::deleteLater().
\i QWidget::isVisibleToTLW() const - use QWidget::isVisible()
\i QWidget::visibleRect() const - use QWidget::clipRegion().boundingRect()
\i QWidget::iconify() - use QWidget::showMinimized() instead.
\i QWidget::constPolish() - use QWidget::ensurePolished() instead.
\i QWidget::reparent() - use QWidget::setParent() instead.
\i QWidget::recreate() - use QWidget::setParent() instead.
\i QWidget::setCaption() - use QWidget::setWindowTitle() instead.
\i QWidget::caption() - use QWidget::windowTitle() instead.
\i QWidget::setIcon() - use QWidget::setWindowIcon() instead.
\i QWidget::icon() - use QWidget::windowIcon() instead.
\i QWidget::setIconText() - use QWidget::setWindowIconText() instead.
\i QWidget::iconText() - use QWidget::windowIconText() instead.
\endlist

Widget background painting has been greatly improved, supporting
flickerfree updates and making it possible to have half transparent
widgets. This renders the following background handling functions
obsolete:

\list
\i QWidget::repaint(bool noErase) - the \c noErase boolean parameter is gone
\i QWidget::setBackgroundMode(BackgroundMode m)
\i QWidget::backgroundBrush() const
\i QWidget::setBackgroundPixmap(const QPixmap &pm)
\i QWidget::backgroundPixmap() const
\i QWidget::setBackgroundColor(const QColor &c)
\i QWidget::backgroundColor() const
\i QWidget::foregroundColor() const
\i QWidget::eraseColor() const
\i QWidget::setEraseColor(const QColor &c) 
\i QWidget::erasePixmap() const
\i QWidget::setErasePixmap(const QPixmap &p)
\i QWidget::paletteForegroundColor()
\i QWidget::setPaletteForegroundColor(const QColor &c)
\i QWidget::paletteBackgroundColor()
\i QWidget::setPaletteBackgroundColor(const QColor &c)
\i QWidget::paletteBackgroundPixmap() const
\i QWidget::setPaletteBackgroundPixmap(const QPixmap &p)
\i QWidget::erase()
\i QWidget::erase(const QRect &r)
\i QWidget::setBackgroundOrigin( BackgroundOrigin )
\i QWidget::BackgroundOrigin backgroundOrigin() const
\i QWidget::backgroundOffset()
\endlist

A widget now receives change events in its QWidget::changeEvent()
handler. This makes the following virtual change handlers obsolete:

\list
\i QWidget::styleChange - use QEvent::StyleChange
\i QWidget::enabledChange - use QEvent::EnabledChange
\i QWidget::paletteChange - use QEvent::PaletteChange
\i QWidget::fontChange - use QEvent::FontChange
\i QWidget::windowActivationChange - use QEvent::ActivationChange
\i QWidget::languageChange - use QEvent::LanguageChange
\endlist

The following functions were slots, but are no more:
\list
\i QWidget::clearFocus()
\i QWidget::setMouseTracking()
\i QWidget::stackUnder( QWidget* );
\i QWidget::move( int x, int y );
\i QWidget::move( const QPoint & );
\i QWidget::resize( int w, int h );
\i QWidget::resize( const QSize & );
\i QWidget::setGeometry( int x, int y, int w, int h );
\i QWidget::setGeometry( const QRect & );
\i QWidget::adjustSize();
\i QWidget::update( int x, int y, int w, int h );
\i QWidget::update(const QRect&);
\i QWidget::repaint(bool erase);
\i QWidget::repaint(int x, int y, int w, int h, bool erase);
\i QWidget::repaint(const QRect &, bool erase);
\i QWidget::repaint(const QRegion &, bool erase);
\i QWidget::setCaption(const QString &);
\i QWidget::setIcon(const QPixmap &);
\i QWidget::setIconText(const QString &);
\endlist

The following functions were incorrectly marked as virtual:

\list
\i QWidget::close( bool alsoDelete );
\i QWidget::create( WId, bool, bool);
\i QWidget::destroy( bool );
\i QWidget::move( int x, int y );
\i QWidget::reparent( QWidget *parent, WFlags, const QPoint &, bool);
\i QWidget::resize( int w, int h );
\i QWidget::setAcceptDrops( bool on );
\i QWidget::setActiveWindow();
\i QWidget::setAutoMask(bool);
\i QWidget::setBackgroundColor( const QColor & );
\i QWidget::setBackgroundMode( BackgroundMode );
\i QWidget::setBackgroundOrigin( BackgroundOrigin );
\i QWidget::setBackgroundPixmap( const QPixmap & );
\i QWidget::setCaption( const QString &);
\i QWidget::setCursor( const QCursor & );
\i QWidget::setEnabled( bool );
\i QWidget::setEraseColor( const QColor & );
\i QWidget::setErasePixmap( const QPixmap & );
\i QWidget::setFocus();
\i QWidget::setFocusPolicy( FocusPolicy );
\i QWidget::setFocusProxy( QWidget * );
\i QWidget::setFont( const QFont & );
\i QWidget::setGeometry( const QRect & );
\i QWidget::setGeometry( int x, int y, int w, int h );
\i QWidget::setIcon( const QPixmap & );
\i QWidget::setIconText( const QString &);
\i QWidget::setKeyCompression(bool);
\i QWidget::setMask( const QBitmap & );
\i QWidget::setMask( const QRegion & );
\i QWidget::setMaximumSize( int maxw, int maxh );
\i QWidget::setMicroFocusHint(int x, int y, int w, int h, bool, QFont *f);
\i QWidget::setMinimumSize( int minw, int minh );
\i QWidget::setMouseTracking( bool enable );
\i QWidget::setPalette( const QPalette & );
\i QWidget::setPaletteBackgroundColor( const QColor & );
\i QWidget::setPaletteBackgroundPixmap( const QPixmap & );
\i QWidget::setSizeIncrement( int w, int h );
\i QWidget::setSizePolicy( QSizePolicy );
\i QWidget::setUpdatesEnabled( bool enable );
\i QWidget::setWFlags( WFlags );
\i QWidget::setWState( uint );
\i QWidget::showFullScreen();
\i QWidget::showMaximized();
\i QWidget::showMinimized();
\i QWidget::showNormal();
\i QWidget::unsetCursor();
\endlist



\section1 QApplication

The following functions are obsolete. Most will continue to work in
COMPAT mode, but we recommend not using them in new code.

\list
\i QApplication::hasGlobalMouseTracking() - use true instead.
\i QApplication::setGlobalMouseTracking() - no effect.
\i QApplication::setFont() - the \c informAllWidgets boolean parameter is gone.
\i QApplication::setPalette() - the \c informAllWidgets boolean parameter is gone.
\i QApplication::widgetAt() - the \c child boolean parameter 
   is gone. The function always returns the exact widget at a certain position. 
   Use QWidget::topLevelWidget() to obtain this widgets's top level widget (the window).
\endlist


\section1 QString

If you specify a negative value for \e len to left() or right() then
an empty string is returned.

The QString constructor that takes a QByteArray no longer considers a 0 as
the end of the string, but rather includes all 0 into the string. The
resulting string has always the length of the byte array.

\list
\i local8Bit() now returns a \c const \c{char *}. If you want a
QByteArray/QCString use toLocal8Bit()
\i utf8() now returns a \c const \c{char *}. If you want a
QByteArray/QCString use toUtf8()
\endlist

\section1 QIODevice

Virtuals readBlock and writeBlock now accept a Q_LONG length argument
(rather than a Q_ULONG). All subclass will need to change as this is a
pure virtual function build errors will occur.

\section1 QByteArray

QByteArray is now implicitly shared. It provides most of the
functionality QCString used to provide and is favored over the
deprecated QCString.

\list
\i at() now returns a copy and not a reference. If you use at() as an
lvalue use the [] operator instead

\i sort() and bsearch() have been removed

\i contains() returns a bool and not an integer. If you want to count
  the number of occurences of a substring use count() instead.

\i copy() is obsolete, use regular assignment instead.
\endlist

* case sensitive find() has been removed. Use QString instead
(with QString::indexOf()).

\section1 QCString

QCString is deprecated. QByteArray should do everything you need from
an 8-bit string class. For text handling use QString instead.

The class is now implicitly shared.

Removed methods:

\list
\i All methods involving QRegExp as argument have been removed. Use
QString instead if you need to use regular expressions on a string.
\endlist

Changed methods:

\list
\i at() now returns a copy and not a reference. If you use at() as an
lvalue use the [] operator instead
\endlist

\section1 QStringList

QStringList now inherits from QList<QString> and can no longer be
converted to a QValueList<QString>. Since QValueList inherits QList a
cast will work as expected.

This change implies some API incompatibilities for QStringList:

\list
\i at() returns the string, not an iterator
\endlist

\section1 QValueList

QValueList now inherits from QList, but is kept source compatible to
the Qt3 class.

QList<Type>::Iterators become invalid on modifying the list (functions
like append(), prepend()), use index based access instead when
modifying the list.

\section1 QObject

children() and QueryList now return a QObjectList instead of a pointer
to a QObjectList. See also the comments on QObjectList.

killTimers() has been removed.

\section1 QObjectList

QObjectList is a typdef to a QList of QObject pointers (it was a
QPtrList in Qt3).

\section 1 QPointArray

QPointArray is now implicitly shared and is based on QVector. The
return type for the setPoints() and putPoints() functions is now void
instead of bool. isNull() is obsolete; use isEmpty() instead. copy()
is obsolete, use standard assignment instead.

\section1 QWidgetIntDict

Has been removed.

\section1 QWidgetList

QWidgetList is a typdef to a QList of QWidget pointers (it was a
QPtrList in Qt3).

\section1 QApplication

Both allWidgets() and topLevelWidgets() return a QWidgetList (it was a
pointer to a QWidgetList in Qt3). This resolves some memory management
issues using these methods.

\section1 QColorGroup

QColorGroup has been removed, its API has been merged into
QPalette. You should now use a QPalette to implement all things that
were used by QColorGroup.  A default QPalette is no longer all-black,
but uses the application palette.

\section1 QRegion

Null QRegions have been removed, use isEmpty() in most places where
you would have used a null Qregion. rects() now returns a
QVector<QRect> instead of QMemArray<QRect>.

\section1 QIconFactory

QIconFactory has been removed in favor of using function
pointers. Generally this involves taking the
QIconFactory::createPixmap() function and making it a regular
functions. Use QIconSet::setPixmapGeneratorFn() in place of
QIconSet::installFactory() and QIconSet::setDefaultPixmapGeneratorFn()
and QIconSet::defaultPixmapGeneratorFn() in place of
QIconFactory::installDefaultFactory() and
QIconFactory::defaultFactory() respectively.

\section1 QPtrDict<T>, QIntDict<T>, QDict<T>
These classes have been removed use QHash<type *, T*> QHash<int, T*>,
and QHash<QString, T*> respecitively. Please note that while the
dictionary classes allowed for multiple entries with the same key, the
current QHash implementation only allows this if insertMulti() is used
to insert elements.

Note about QDict->QHash conversion: QDict has one []-operator which is
const, but QHash has two. The non-const [] operator for QHash creates
a default value if there is no pair that matches the passed key. So a
= b[c]; will create an element if called in a non-const
environment. Rather than [], use value(), which returns a default
constructed value (or 0 for pointers) but does not insert it into the
container.

Note that there are two types of iterators for QHash, both STL-style
and Qt-style. STL-style iterators are recommended for internal use, as
these are more efficient.

\section1 QPtrDict

QPtrDict has been removed, please use QHash<type *, T *> instead. If
you previously assigned a value with find use value() in this case
instead, it will keep the same semantics (that it returns 0 if it
can't find the pointer).

\section1 QVariant

The following functions are obsolete. Most will continue to work in
COMPAT mode, but we recommend not using them in new code.

\list
\i QVariant::toColorGroup() - use QVariant::toPalette() instead.
\endlist

\section1 QDir

QDir::encodedEntryList has been removed.

fileInfoList() and drives() now return a QList<QFileInfo> and not a
QPtrList<QFileInfo> *. Code using these methods will have to be
adapted.  

\section1 QFtp and QHttp

Both classes no longer subclass from QNetworkProtocol. They only provide
the direct interface to FTP and HTTP.

\section1 QSlider

The functions sliderStart() and sliderRect() have been removed. You can retrieve this functionality with QAbstractSlider::sliderPosition() and QStyle::querySubControlMetrics() respectively.

\section1 QPicture

Probably something needs to be said about new stuff from painting? Don't know, I didn't do that part.

QPicture::copy() is deprecated and QPicture::detach() is now a public internal
function. In general, one should have never needed to call these functions.
*/

\section1 QSqlRecord

QSqlRecord behaves like a vector now, QSqlRecord::insert() will actually insert a new field instead
of replacing the existing one.

\section1 QSqlDatabase

QSqlDatabase is now a smart pointer that is passed around by value. Simply replace all QSqlDatabase
pointer by QSqlDatabase objects.

\section1 QSqlQuery

QSqlQuery::prev() was renamed to QSqlQuery::previous(). There is a function call for compatibility, but if you subclassed QSqlQuery, you have to reimplement previous() instead of prev().

\section1 QSplitter

The function setResizeMode() has been moved into compat. Set the stretch factor
in the widget's size policy to get equivalent functionality.

The obsolete function drawSplitter() has been removed. Use
QStyle::drawPrimitive() to acheive similar functionality.

\section1 QDial

The trusty QDial uses the QAbstractSlider API. Use signals sliderPressed(),
sliderMoved(), and sliderReleased() instead of dialPressed(), dialMoved(), and
dialReleased() which have been removed.

