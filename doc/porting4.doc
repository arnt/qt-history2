/****************************************************************************
**
** Copyright (C) 1992-2003 Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
\page porting.html

\title Porting to Qt 4.x

This document describes porting applications from Qt 3.x to Qt 4.x. 

If you haven't yet made the decision about porting, or are unsure
about whether it is worth it, take a look at the \link
keyfeatures40.html key features\endlink offered by Qt 4.x.

The Qt 4.x series is not binary compatible with the 3.x series. This
means programs compiled for Qt 3.x must be recompiled to work with Qt
4.x. Qt 4.x is also not completely \e source compatible with 3.x,
however all points of incompatibility cause compiler errors or
run-time messages (rather than mysterious results). Qt 4.x includes
many additional features and discards obsolete functionality. Porting
from Qt 3.x to Qt 4.x is straightforward, and once completed makes 
the considerable additional power and flexibility of Qt 4.x available
for use in your applications.

To port code from Qt 3.x to Qt 4.x:

\list 1

\i Briefly read the porting notes below to get an idea of what to expect.
\i Be sure that your code compiles and runs well on all your target
   platforms with Qt 3.x.
\i Recompile with Qt 4.x. For each error, search below for related
   identifiers (e.g. function names, class names). This document 
   mentions all relevant identifiers to help you get the information
   you need at the cost of being a little verbose.
\i If you get stuck, ask on the \link http://qt-interest.trolltech.com/
   qt-interest \endlink mailing list, or Trolltech Technical Support if
   you're a registered licensee.

\endlist

Table of contents:

\tableofcontents


\section1 Virtual Functions

The following functions were incorrectly marked as virtual:

\list
\i QWidget::close( bool alsoDelete );
\i QWidget::create( WId, bool, bool);
\i QWidget::destroy( bool );
\i QWidget::move( int x, int y );
\i QWidget::reparent( QWidget *parent, WFlags, const QPoint &, bool);
\i QWidget::resize( int w, int h );
\i QWidget::setAcceptDrops( bool on );
\i QWidget::setActiveWindow();
\i QWidget::setAutoMask(bool);
\i QWidget::setBackgroundColor( const QColor & );
\i QWidget::setBackgroundMode( BackgroundMode );
\i QWidget::setBackgroundOrigin( BackgroundOrigin );
\i QWidget::setBackgroundPixmap( const QPixmap & );
\i QWidget::setCaption( const QString &);
\i QWidget::setCursor( const QCursor & );
\i QWidget::setEnabled( bool );
\i QWidget::setEraseColor( const QColor & );
\i QWidget::setErasePixmap( const QPixmap & );
\i QWidget::setFocus();
\i QWidget::setFocusPolicy( FocusPolicy );
\i QWidget::setFocusProxy( QWidget * );
\i QWidget::setFont( const QFont & );
\i QWidget::setGeometry( const QRect & );
\i QWidget::setGeometry( int x, int y, int w, int h );
\i QWidget::setIcon( const QPixmap & );
\i QWidget::setIconText( const QString &);
\i QWidget::setKeyCompression(bool);
\i QWidget::setMask( const QBitmap & );
\i QWidget::setMask( const QRegion & );
\i QWidget::setMaximumSize( int maxw, int maxh );
\i QWidget::setMicroFocusHint(int x, int y, int w, int h, bool, QFont *f);
\i QWidget::setMinimumSize( int minw, int minh );
\i QWidget::setMouseTracking( bool enable );
\i QWidget::setPalette( const QPalette & );
\i QWidget::setPaletteBackgroundColor( const QColor & );
\i QWidget::setPaletteBackgroundPixmap( const QPixmap & );
\i QWidget::setSizeIncrement( int w, int h );
\i QWidget::setSizePolicy( QSizePolicy );
\i QWidget::setUpdatesEnabled( bool enable );
\i QWidget::setWFlags( WFlags );
\i QWidget::setWState( uint );
\i QWidget::showFullScreen();
\i QWidget::showMaximized();
\i QWidget::showMinimized();
\i QWidget::showNormal();
\i QWidget::unsetCursor();
\endlist


\section1 QWidget

The following functions are obsolete. Most will continue to work in
COMPAT mode, but we recommend not using them in new code.

\list
\i QWidget::hasMouse() - use QWidget::underMouse() instead.
\endlist


\section1 QString

If you specify a negative value for \e len to left() or right() then
an empty string is returned.

The QString constructor that takes a QByteArray no longer considers a 0 as
the end of the string, but rather includes all 0 into the string. The
resulting string has always the length of the byte array.

\list
\i local8Bit() now returns a \c const \c{char *}. If you want a
QByteArray/QCString use toLocal8Bit()
\i utf8() now returns a \c const \c{char *}. If you want a
QByteArray/QCString use toUtf8()
\endlist

\section1 QByteArray

QByteArray is now implicitly shared. It provides most of the
functionality QCString used to provide and is favored over the
deprecated QCString.

\list
\i at() now returns a copy and not a reference. If you use at() as an
lvalue use the [] operator instead

\i sort() and bsearch() have been removed

\i contains() returns a bool and not an integer. If you want to count
  the number of occurences of a substring use count() instead.

\i copy() is obsolete, use regular assignment instead.
\endlist

\section1 QCString

QCString is deprecated. QByteArray should do everything you need from
an 8-bit string class. For text handling use QString instead.

The class is now implicitly shared.

Removed methods:

\list
\i All methods involving QRegExp as argument have been removed. Use
QString instead if you need to use regular expressions on a string.
\endlist

Changed methods:

\list
\i at() now returns a copy and not a reference. If you use at() as an
lvalue use the [] operator instead
\endlist

\section1 QStringList

QStringList now inherits from QList<QString> and can no longer be
converted to a QValueList<QString>. Since QValueList inherits QList a
cast will work as expected.

This change implies some API incompatibilities for QStringList:

\list
\i at() returns the string, not an iterator
\endlist

\section1 QValueList

QValueList now inherits from QList, but is kept source compatible to
the Qt3 class.

\section1 QObject

children() and QueryList now return a QObjectList instead of a pointer
to a QObjectList. See also the comments on QObjectList.

killTimers() has been removed.

\section1 QObjectList

QObjectList is a typdef to a QList of QObject pointers (it was a
QPtrList in Qt3).

\section 1 QPointArray

QPointArray is now implicitly shared and is based on QVector. The
return type for the setPoints() and putPoints() functions is now void
instead of bool. isNull() is obsolete; use isEmpty() instead. copy()
is obsolete, use standard assignment instead.

\section1 QWidgetIntDict

Has been removed.

\section1 QWidgetList

QWidgetList is a typdef to a QList of QWidget pointers (it was a
QPtrList in Qt3).

\section1 QApplication

Both allWidgets() and topLevelWidgets() return a QWidgetList (it was a
pointer to a QWidgetList in Qt3). This resolves some memory management
issues using these methods.

\section1 QRegion

Null QRegions have been removed, use isEmpty() in most places where you would
have used a null Qregion. rects() now returns a QVector<QRect> instead of
QMemArray<QRect>.

*/
