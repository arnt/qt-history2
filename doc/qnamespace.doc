/****************************************************************************
**
** Qt's global enums etc.
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the kernel module of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \enum Qt::AlignmentFlag

    This enum type is used to describe alignment. It contains
    horizontal and vertical flags.

    The horizontal flags are:

    \value AlignAuto Aligns according to the language. Left for most,
	right for Arabic and Hebrew.
    \value AlignLeft Aligns with the left edge.
    \value AlignRight Aligns with the right edge.
    \value AlignHCenter Centers horizontally in the available space.
    \value AlignJustify Justifies the text in the available space.
	Does not work for everything and may be interpreted as
	AlignAuto in some cases.

    The vertical flags are:

    \value AlignTop Aligns with the top.
    \value AlignBottom Aligns with the bottom.
    \value AlignVCenter Centers vertically in the available space.

    You can use only one of the horizontal flags at a time. There is
    one two-dimensional flag:

    \value AlignCenter Centers in both dimensions.

    You can use at most one horizontal and one vertical flag at a time. \c
    AlignCenter counts as both horizontal and vertical.

    Masks:

    \value AlignHorizontal_Mask
    \value AlignVertical_Mask

    Conflicting combinations of flags have undefined meanings.
*/

/*!
    \enum Qt::GlobalColor

    Qt's 19 predefined QColor objects

    \value white
    \value black
    \value red
    \value darkRed
    \value green
    \value darkGreen
    \value blue
    \value darkBlue
    \value cyan
    \value darkCyan
    \value magenta
    \value darkMagenta
    \value yellow
    \value darkYellow
    \value gray
    \value darkGray
    \value lightGray
    \value color0 0 pixel value (for bitmaps)
    \value color1 1 pixel value (for bitmaps)

    \img qt-colors.png Qt Colors

    \sa QColor

*/

/*!
    \enum Qt::PenStyle

    This enum type defines the pen styles that can be drawn using
    QPainter. The styles are

    \value NoPen  no line at all. For example, QPainter::drawRect()
    fills but does not draw any boundary line.

    \value SolidLine  a plain line.

    \value DashLine  dashes separated by a few pixels.

    \value DotLine  dots separated by a few pixels.

    \value DashDotLine  alternate dots and dashes.

    \value DashDotDotLine  one dash, two dots, one dash, two dots.

    \omitvalue MPenStyle

    \img pen-styles.png Pen Styles

    \sa QPen
*/

/*!
    \enum Qt::PenCapStyle

    This enum type defines the pen cap styles supported by Qt, i.e.
    the line end caps that can be drawn using QPainter.

    \value FlatCap  a square line end that does not cover the end
	point of the line.
    \value SquareCap  a square line end that covers the end point and
	extends beyond it by half the line width.
    \value RoundCap  a rounded line end.
    \omitvalue MPenCapStyle

    \img pen-cap-styles.png Pen Cap Styles

    \sa QPen
*/

/*!
    \enum Qt::PenJoinStyle

    This enum type defines the pen join styles supported by Qt, i.e.
    which joins between two connected lines can be drawn using
    QPainter.

    \value MiterJoin  The outer edges of the lines are extended to
	meet at an angle, and this area is filled.
    \value BevelJoin  The triangular notch between the two lines is filled.
    \value RoundJoin  A circular arc between the two lines is filled.
    \omitvalue MPenJoinStyle

    \img pen-join-styles.png Pen Join Styles

    \sa QPen
*/

/*!
    \enum Qt::BrushStyle

    \value NoBrush
    \value SolidPattern
    \value Dense1Pattern
    \value Dense2Pattern
    \value Dense3Pattern
    \value Dense4Pattern
    \value Dense5Pattern
    \value Dense6Pattern
    \value Dense7Pattern
    \value HorPattern
    \value VerPattern
    \value CrossPattern
    \value BDiagPattern
    \value FDiagPattern
    \value DiagCrossPattern
    \value LinearGradientPattern
    \value CustomPattern

    \img brush-styles.png Brush Styles

    \sa QBrush
*/

/*!
    \enum Qt::StringComparisonFlags

    Many Qt string functions accept a StringComparisonFlags argument
    which can be the OR of these values. (A flag value of 0 signifies
    a case-insensitive match anywhere in the string.)

    \value IgnoreCase The strings are compared case-insensitively.
    \value ExactMatch The strings must be the same apart from case, or
    exactly the same if CaseSensitive is also used.
    \value BeginsWith The target string starts with the given string.
    \value EndsWith The target string ends with the given string.

*/

/*!
    \enum Qt::TextFlags

    This enum type is used to define some modifier flags. Some of
    these flags only make sense in the context of printing:

    \value TextSingleLine Treats all whitespace as spaces and prints just
	one line.
    \value TextDontClip If it's impossible to stay within the given bounds,
	it prints outside.
    \value TextExpandTabs Makes the U+0009 (ASCII tab) character move to
	the next tab stop.
    \value TextShowMnemonic Displays the string "\&P" as \underline{P}
	(see QButton for an example). For an ampersand, use "\&\&".
    \value TextWordBreak Breaks lines at appropriate points, e.g. at word
	boundaries.
    \value TextBreakAnywhere Breaks lines anywhere, even within words.
    \value TextHideMnemonic Same as \c TextShowMnemonic but doesn't draw the underlines.

    You can use as many modifier flags as you want, except that \c
    TextSingleLine and \c TextWordBreak cannot be combined.

    Flags that are inappropriate for a given use are generally
    ignored.  
*/

/*!
    \enum Qt::BGMode

    Background mode

    \value TransparentMode
    \value OpaqueMode
*/

/*!
    \enum Qt::ConnectionType

    \internal

    \value AutoConnection
    \value DirectConnection
    \value QueuedConnection
*/

/*!
    \enum Qt::DateFormat

    \value TextDate The default Qt format.
    \value ISODate ISO 8601 extended format (YYYY-MM-DD, or with time,
    YYYY-MM-DDTHH:MM:SS).
    \value LocalDate The locale-dependent format.
*/


/*!
    \enum Qt::TimeSpec

    \value LocalTime Locale dependent time (Timezones and Daylight Savings Time).
    \value UTC Coordinated Universal Time, replaces Greenwich Mean Time.
*/

/*!
    \enum Qt::DayOfWeek

    \internal

    \value Monday
    \value Tuesday
    \value Wednesday
    \value Thursday
    \value Friday
    \value Saturday
    \value Sunday
*/

/*! \enum Qt::ScaleMode

    This enum type defines the different ways of scaling a size.

    \img scaling.png

    \value ScaleFree  The size is scaled freely. The ratio is not preserved.
    \value ScaleMin  The size is scaled to a rectangle as large as possible
                     inside a given rectangle, preserving the aspect ratio.
    \value ScaleMax  The size is scaled to a rectangle as small as possible
                     outside a given rectangle, preserving the aspect ratio.

    \sa QSize::scale(), QImage::scale(), QImage::smoothScale()
*/

/*!
    \enum Qt::RectangleEdge

    \value LeftEdge
    \value TopEdge
    \value RightEdge
    \value BottomEdge
*/

/*!
    \enum Qt::CaseSensitivity

    \value CaseInsensitive
    \value CaseSensitive
*/

/*!
    \enum Qt::ToolBarArea

    \value ToolBarAreaLeft
    \value ToolBarAreaRight
    \value ToolBarAreaTop
    \value ToolBarAreaBottom
    \value AllToolBarAreas

    \omitvalue ToolBarAreaMask
    \omitvalue NToolBarAreas
*/

/*!
    \enum Qt::DockWindowArea

    \value DockWindowAreaLeft
    \value DockWindowAreaRight
    \value DockWindowAreaTop
    \value DockWindowAreaBottom
    \value AllDockWindowAreas

    \omitvalue DockWindowAreaMask
    \omitvalue NDockWindowAreas
*/
