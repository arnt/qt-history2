/****************************************************************************
** $Id: $
**
** QValueList and QValueListIterator class documentation
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/


/*****************************************************************************
  QValueList documentation
 *****************************************************************************/

/*!
  \class QValueList qvaluelist.h
  \brief The QValueList class is a value-based template class that provides doubly linked lists.

  \ingroup qtl
  \ingroup tools
  \ingroup shared
  \mainclass
  
  QValueList is a Qt implementation of an STL-like list container.  It
  can be used in your application if the standard list<> is not
  available.  QValueList is part of the \link qtl.html  Qt Template
  Library\endlink.

  QValueList<T> defines a template instance to create
  a list of values that all have the class T. Note that
  QValueList does not store pointers to the
  members of the list; it holds a copy of every member. This is why these
  kinds of classes are called "value based"; QPtrList and QDict are
  "pointer based".

  QValueList contains and manages a collection of objects of type T
  and provides iterators that allow the contained objects to be
  addressed.  QValueList owns the contained elements.  For more
  relaxed ownership semantics, see QPtrCollection and friends which are
  pointer-based containers.

  Some classes cannot be used within a QValueList - for example, all classes
  derived from QObject and thus all classes that implement widgets.
  Only values can be used in a QValueList. To qualify as a value the class
  must provide:

  \list
  \i A copy constructor
  \i An assignment operator
  \i A default constructor, i.e. a constructor that does not take any arguments.
  \endlist

  Note that C++ defaults to field-by-field assignment operators and
  copy constructors if no explicit version is supplied. In many cases
  this is sufficient.

  QValueList uses an STL-like syntax to manipulate and address the
  objects it contains.  For historical reasons, QValueList contains
  additional functions which essentially perform the same task.  It is
  recommended that the STL-like functions be used in application code.
  See \link qtl.html this document\endlink for more information.

  Example:
  \code
class Employee
{
public:
    Employee(): sn(0) {}
    Employee( const QString& forename, const QString& surname, int salary )
	: fn(forename), sn(surname), sal(salary)
    {}

    QString forename() const { return fn; }
    QString surname() const { return sn; }
    int salary() const { return sal; }
    void setSalary( int salary ) { sal = salary; }
private:
    QString fn;
    QString sn;
    int sal;
};

    typedef QValueList<Employee> EmployeeList;
    EmployeeList list;

    list.push_back( Employee("John", "Doe", 50000) );
    list.push_back( Employee("Jane", "Williams", 80000) );
    list.push_back( Employee("Tom", "Jones", 60000) );

    Employee mary( "Mary", "Hawthorne", 90000 );
    list.push_back( mary );
    mary.setSalary( 100000 );

    EmployeeList::iterator it;
    for ( it = list.begin(); it != list.end(); ++it )
	cout << (*it).surname().latin1() << ", " <<
		(*it).forename().latin1() << " earns " <<
		(*it).salary() << endl;

    // Output:
    // Doe, John earns 50000
    // Williams, Jane earns 80000
    // Hawthorne, Mary earns 90000
    // Jones, Tom earns 60000
  \endcode


  Notice that the latest changes to Mary's salary did not affect the
  value in the list because the list created a copy of Mary's entry.

  There are several ways to find items in the list.  The begin() and
  end() functions return iterators to the beginning and end of the
  list.  The advantage of getting an iterator is that you can move
  forward or backward from this position by incrementing/decrementing
  the iterator.  The iterator returned by end() points to the element
  which is one past the last element in the container. The
  past-the-end iterator is still associated with the list it belongs
  to, however it is \e not dereferenceable; operator*() will not
  return a well-defined value. If the list is empty(), the iterator
  returned by begin() will equal the iterator returned by end().
  Since end() returns a past-the-end iterator, the size() of the list
  is equal to end() - begin().

  Another way to find an element in the list is by using the 
  \link qtl.html#qFind qFind()\endlink algorithm.  For example:

\code
    QValueList<int> list;
    ...
    QValueList<int>::iterator it = qFind( list.begin(), list.end(), 3 );
    if ( it != list.end() )
	// it points to the found element
\endcode

  It is safe to have multiple iterators on the list at the same time.
  If some member of the list is removed, only iterators pointing to
  the removed member become invalid. Inserting into the list does not
  invalidate any iterator. For convenience, the function back() returns
  a reference to the last element in the list, and front() returns a
  reference to the the first element.  If the list is empty(), both
  back() and front() have undefined behavior (your application will
  crash or do unpredictable things).  Use back() and front() with
  caution, for example:

\code
    QValueList<int> list;
    list.push_back( 1 );
    list.push_back( 2 );
    list.push_back( 3 );
    ...
    if ( !list.empty() ) {
	// OK, modify the first element
	int& i = list.front();
	i = 18;
    }
    ...
    QValueList<double> dlist;
    double d = dlist.back(); // undefined (probably a crash)
\endcode

  Because QValueList is value-based there is no need to be careful about
  deleting elements in the list. The list holds its own copies and
  will free them if the corresponding member or the list itself is
  deleted. You can force the list to free all of its items with
  clear().

  QValueList is shared implicitly, which means it can be copied in
  constant time. If multiple QValueList instances share the same data
  and one needs to modify its contents, this modifying instance makes
  a copy and modifies its private copy; therefore it not affect the
  other instances.  This is often called "copy on write".  If a
  QValueList is being used in a multi-threaded program, you must
  protect all access to the list.  See QMutex.

  There are several ways to insert elements into the list.  The
  push_front() and push_back() functions insert elements at the
  beginning and the end of the list respectively.  The insert()
  function comes in several flavors and can be used to add one or more
  elements at specific positions within the list.

  Items can be also be removed from the list in several ways. There
  are several variants of the erase() function which removes a
  specific element from the list.  The remove() function will find and
  remove elements according to a specific element value.

  Lists can be also sorted with the sort() function, or can be
  sorted using the \link qtl.html Qt Template Library\endlink.  For
  example with qHeapSort():

  Example:
  \code
    QValueList<int> l;
    l.push_back( 5 );
    l.push_back( 8 );
    l.push_back( 3 );
    l.push_back( 4 );
    qHeapSort( l );
  \endcode

  \sa QValueListIterator
*/

/*! \enum QValueList::iterator 
	The list's iterator type, QValueListIterator. */
/*! \enum QValueList::const_iterator 
	The list's const iterator type, QValueListConstIterator. */
/*! \enum QValueList::value_type 
	The type of the object stored in the list, T. */
/*! \enum QValueList::pointer 
	The pointer to T type. */
/*! \enum QValueList::const_pointer 
	The const pointer to T type. */
/*! \enum QValueList::reference 
	The reference to T type. */
/*! \enum QValueList::const_reference 
	The const reference to T type. */
/*! \enum QValueList::size_type 
	An unsigned integral type, used to represent various sizes. */
/*! \enum QValueList::difference_type
    \internal
*/
/*! \enum QValueList::ValueType
    \internal
*/
/*!
  \fn QValueList::QValueList()
  Constructs an empty list.
*/

/*!
  \fn QValueList::QValueList( const QValueList<T>& l )

  Constructs a copy of \a l.

  This operation takes O(1) time because QValueList is shared
  implicitly.

  The first modification to a list will take O(n) time.
*/

/*! \fn QValueList::QValueList( const std::list<T>& l )
  Contructs a copy of \a l.
*/

/*!
  \fn QValueList::~QValueList()

  Destroys the list. References to the values in the list and all
  iterators of this list become invalidated. Note that it is
  impossible for an iterator to check whether or not it is valid -
  QValueList is highly tuned for performance, not for error checking.
*/

/*! \enum  QValueListIterator::NodePtr
	\internal */
/*! \enum  QValueListIterator::iterator_category
	\internal */
/*! \enum  QValueListIterator::size_type
	\internal */
/*! \enum  QValueListIterator::difference_type
	\internal */
/*!
    \fn QValueListIterator::QValueListIterator( NodePtr p )
    \internal
*/

/*!
  \fn bool QValueList::operator== ( const QValueList<T>& l ) const

  Compares both lists.

  Returns TRUE if this list and \a l are equal; otherwise returns FALSE.
*/

/*! \overload bool QValueList::operator== ( const std::list<T>& l ) const

  Returns TRUE if this list and \a l are equal; otherwise returns FALSE.
*/

/*!
  \fn QValueList<T>& QValueList::operator= ( const QValueList<T>& l )

  Assigns \a l to this list and returns a reference to this list.

  All iterators of the current list become invalidated by this operation.
  The cost of such an assignment is O(1) since QValueList is implicitly
  shared.
*/

/*! \overload QValueList<T>& QValueList::operator= ( const std::list<T>& l )

  Assigns the contents of \a l to the list.

  All iterators of the current list become invalidated by this operation.
*/

/*!
  \fn bool QValueList::operator!= ( const QValueList<T>& l ) const

  Compares both lists.

  Returns TRUE if this list and \a l are unequal; otherwise returns FALSE.
*/

/*!
  \fn iterator QValueList::insert( iterator it, const T& x )

  Inserts the value \a x in front of the iterator \a it.

  Returns an iterator pointing at the inserted item.

  \sa append(), prepend()
*/

/*!
  \fn uint QValueList::remove( const T& x )

  Removes all items that have value \a x and returns the number of removed
  items.

  \sa clear()
*/

/*!
  \fn void QValueList::clear()

  Removes all items from the list.

  \sa remove()
*/

/*!
  \overload iterator QValueList::begin()

  Returns an iterator pointing to the first element in the list. This
  iterator equals end() if the list is empty.
  \sa first(), end()
*/

/*!
  \fn const_iterator QValueList::begin() const

  Returns an iterator pointing to the first element in the list. This
  iterator equals end() if the list is empty.
  \sa first(), end()
*/

/*!
  \fn iterator QValueList::end()

  Returns an iterator pointing behind the last element in the list. This
  iterator equals begin() if the list is empty.

  \sa last(), begin()
*/

/*!
    \overload const_iterator QValueList::end() const

  Returns an iterator pointing behind the last element in the list. This
  iterator equals begin() if the list is empty.

  \sa last(), begin()
*/

/*!
  \fn QDataStream& operator>>( QDataStream& s, QValueList<T>& l )

  \relates QValueList
  Reads a list, \a l, from the stream \a s. The type T stored in the
  list must implement the streaming operator, too.
*/

/*!
  \overload QDataStream& operator<<( QDataStream& s, const QValueList<T>& l )

  \relates QValueList
  Writes a list, \a l, to the stream \a s. The type T stored in the
  list must implement the streaming operator, too.
*/

/*! \fn size_type QValueList::size() const

  Returns the number of elements in the list.
*/

/*! \fn bool QValueList::empty() const

  Returns TRUE if the list's size is zero; otherwise returns FALSE.
*/

/*! \fn void QValueList::push_front( const T& x )

  Inserts \a x at the beginning of the list.
*/
 
/*! \fn void QValueList::push_back( const T& x )

  Inserts \a x at the end of the list.
*/

/*! \fn iterator QValueList::erase( iterator pos )

  Deletes the element pointed to by \a pos from the list.  No
  iterators other than \a pos or other iterators pointing at the same
  element as \a pos are invalidated.  Returns an iterator to the next
  element after \a pos, or end() if there is no such element.
*/

/*! \overload iterator QValueList::erase( iterator first, iterator last ) 

  Deletes all elements from \a first to \a last (not including \a
  last).  No iterators are invalidated, except those pointing to the
  removed elements themselves.  Returns \a last.
*/

/*! \fn reference QValueList::front()

  Returns a reference to the first element.  If the list contains no
  first element (i.e. empty() returns TRUE), the return value is
  undefined.
*/

/*! \overload const_reference QValueList::front() const

  Returns a reference to the first element.  If the list contains no
  first element (i.e. empty() returns TRUE), the return value is
  undefined.
*/

/*! \fn reference QValueList::back()

  Returns a reference to the last element.  If the list contains no
  last element (i.e. empty() returns TRUE), the return value is
  undefined.
*/

/*! \overload const_reference QValueList::back() const

  Returns a reference to the last element.  If the list contains no
  last element (i.e. empty() returns TRUE), the return value is
  undefined.
*/

/*! \fn void QValueList::pop_front()

  Removes the first element.  If there is no first element, this
  operation is undefined.
*/

/*! \fn void QValueList::pop_back() 

  Removes the last element.  If there is no last element, this
  operation is undefined.
*/

/*! \overload void QValueList::insert( iterator pos, size_type n, const T& x )

  Inserts \a n copies of \a x before position \a pos.
*/

/*!
  \fn void QValueList::detach()

  If the list does not share its data with another QValueList instance, nothing
  happens. Otherwise the function creates a new copy of this data and detaches
  from the shared one. This function is called whenever the list is modified.
  The implicit sharing mechanism is implemented this way.
*/

/*!
  \fn QValueList<T>& QValueList::operator<< ( const T& x )

  Adds the value \a x to the end of the list.

  Returns a reference to the list.
*/

/*!
  \fn const T& QValueList::operator[] ( size_type i ) const

  \warning This function uses a linear search and can be
  extremely slow for large lists.  QValueList is not optimized for
  random element access. If you need random access use a different
  container, such as QValueVector.

  Returns a const reference to the item with index \a i in the list.
  It is up to you to check whether this item really exists. You can do
  that easily with the count() function. However this operator does
  not check whether \a i is in range and will deliver undefined
  results if it does not exist.
*/

/*!
  \overload T& QValueList::operator[] ( size_type i )

  \warning This function uses a linear search and can be
  extremely slow for large lists.  QValueList is not optimized for
  random element access. If you need random access use a different
  container, such as QValueVector.

  Returns a reference to the item with index \a i in the list. It is
  up to you to check whether this item really exists. You can do that
  easily with the count() function. However this operator does not
  check whether \a i is in range and will deliver undefined results if
  it does not exist. In contrast to the const operator[], you may
  manipulate the value returned by this operator.
*/

/*!
  \overload iterator QValueList::at( size_type i )

  Returns an iterator pointing to the item at position \a i in the list, or
  end() if the index is out of range.
*/

/*!
  \fn const_iterator QValueList::at( size_type i ) const

  \warning This function uses a linear search and can be
  extremely slow for large lists.  QValueList is not optimized for
  random element access. If you need random access use a different
  container, such as QValueVector.

  Returns an iterator pointing to the item at position \a i in the list, or
  end() if the index is out of range.
*/

/*!
  \overload iterator QValueList::fromLast()
    
  Returns an iterator to the last element in the list, or end() if
  there is no last element.

  Use the end() function instead.  For example:

\code
    QValueList<int> l;
    ...
    QValueList<int>::iterator it = l.end();
    --it;
    if ( it != end() )
	// ...
\endcode

*/

/*!
  \fn const_iterator QValueList::fromLast() const

  Returns an iterator to the last element in the list, or end() if
  there is no last element.

  Use the end() function instead.  For example:

\code
    QValueList<int> l;
    ...
    QValueList<int>::iterator it = l.end();
    --it;
    if ( it != end() )
        // ...
\endcode

*/

// *****************************************************
// Note : The following documentation is provided for historical
// reasons. These functions should be avoided in new code.
// *****************************************************

/*!
  \obsolete
  \fn QValueList<T> QValueList::operator+ ( const QValueList<T>& l ) const

  The \c std::copy() or qCopy() algorithms should be used instead.

  Creates a new list and fills it with the elements of this list. Then the
  elements of \a l are appended.

  Returns the new list.
*/

/*! \obsolete
  \fn QValueList<T>& QValueList::operator+= ( const QValueList<T>& l )
  
  The \c std::copy() or qCopy algorithms should be used instead.  For
  example:

  \code
    QValueList<int> l1;
    QValueList<int> l2;
    ...
    std::copy( l2.begin(), l2.end(), std::back_inserter( l1 ) );
  \endcode

  Adds \a l to this list.

  Returns a reference to this list.
*/

/*!
  \obsolete
    \overload QValueList<T>& QValueList::operator+= ( const T& x )

  The push_back() function should be used instead.  For example:

  \code
    QValueList<int> list;
    list.push_back( 1 );
  \endcode

  Adds the value \a x to the end of the list.

  Returns a reference to the list.
*/

/*!
  \obsolete
  \fn uint QValueList::count() const

  Use the size() function instead.

*/

/*!
  \obsolete
  \fn bool QValueList::isEmpty() const

  Use the empty() function instead.

  \sa size()
*/

/*!
  \obsolete
  \fn iterator QValueList::append( const T& x )

  The push_back() function should be used instead.  For example:

  \code
    QValueList<int> list;
    list.push_back( 1 );
  \endcode

*/

/*!
  \obsolete
  \fn iterator QValueList::prepend( const T& x )

  The push_front() function should be used instead.  For example:

  \code
    QValueList<int> list;
    list.push_front( 2 );
    list.push_front( 1 );
  \endcode

*/

/*!
  \obsolete
  \fn iterator QValueList::remove( iterator it )

  Use the erase() function instead.

  \sa clear()
*/


/*!
  \obsolete
  \fn iterator QValueList::find( const T& x )

  Use the std::find() or qFind() algorithms instead.

*/

/*!
  \obsolete 
  \overload const_iterator QValueList::find( const T& x ) const

  Use the std::find() or qFind() algorithms instead.

*/

/*!
  \obsolete
    \overload iterator QValueList::find( iterator it, const T& x )

  Use the std::find() or qFind() algorithms instead.

*/

/*!
  \obsolete
  \overload const_iterator QValueList::find( const_iterator it, const T& x ) const

  Use the std::find() or qFind() algorithms instead.

*/

/*!
  \obsolete
  \fn uint QValueList::contains( const T& x ) const

  Use the std::count() or qCount() algorithms instead.

*/

/*!
  \obsolete
  \fn int QValueList::findIndex( const T& x ) const
 
  Use the std::find() or qFind() algorithms instead.

*/

/*!
  \obsolete
  \fn T& QValueList::first()

  Use the front() function instead.

*/

/*!
  \obsolete
    \overload const T& QValueList::first() const

  Use the front() function instead.

*/

/*!
  \obsolete
  \fn T& QValueList::last()

  Use the back() function instead.

*/

/*!
  \obsolete
    \overload const T& QValueList::last() const

  Use the back() function instead.

*/

/*****************************************************************************
  QValueListIterator documentation
 *****************************************************************************/
/*!
  \class QValueListIterator qvaluelist.h
  \brief The QValueListIterator class provides an iterator for QValueList.

  \ingroup qtl
  \ingroup tools

  An iterator is a class for accessing the elements of a container
  classes - a generalization of the index in an array. A pointer into
  a "const char *" and an index into an "int[]"
  are both iterators, and the general idea is to provide that
  functionality for any data structure.

  The QValueListIterator class is an iterator for QValueList
  instantiations.  You can create the appropriate iterator type by
  using the \c iterator typedef provided by QValueList.  

  The only way to access the elements in a QValueList is to use an
  iterator.

    Example (see QValueList for the complete code):
    \code
    EmployeeList::iterator it;
    for ( it = list.begin(); it != list.end(); ++it )
	cout << (*it).surname().latin1() << ", " <<
		(*it).forename().latin1() << " earns " <<
		(*it).salary() << endl;

    // Output:
    // Doe, John earns 50000
    // Williams, Jane earns 80000
    // Hawthorne, Mary earns 90000
    // Jones, Tom earns 60000
    \endcode

  QValueList is highly optimized for performance and memory usage.
  This means that you must be careful: QValueList does not know about
  all its iterators and the iterators don't know to which list they
  belong. This makes things very fast, but if you're not careful, you
  can get spectacular bugs.  Always make sure iterators are valid
  before dereferencing them or using them as parameters to generic
  algorithms in the STL or the \link qtl.html QTL\endlink.

  Using an invalid iterator is undefined (your application will
  probably crash).

  For every Iterator there is a ConstIterator. When accessing a
  QValueList in a const environment or if the reference or pointer to
  the list is itself const, then you must use the
  ConstIterator. Its semantics are the same as the Iterator, but it
  returns only const references.

  \sa QValueList, QValueListConstIterator
*/

/*! \enum  QValueListIterator::value_type
	The type of value, T. */
/*! \enum  QValueListIterator::pointer
	Pointer to value_type. */
/*! \enum  QValueListIterator::reference
	Reference to value_type. */

/*!
  \fn QValueListIterator::QValueListIterator()
  Creates un uninitialized iterator.
*/

/*
    \internal
  \overload QValueListIterator::QValueListIterator( NodePtr p )

  Internal function.
*/

/*!
  \overload QValueListIterator::QValueListIterator( const QValueListIterator<T>& it )

  Constructs a copy of the iterator \a it.
*/

/* Unfortunately not with MSVC
  \fn T *QValueListIterator::operator->()
  Pointer operator. Returns a pointer to the current iterator item.
  The great advantage of this operator is that you can treat the
  iterator like a pointer.

  Example:
  \code
    QValueList<int>::Iterator it = list.begin();
    for( ; it != end(); ++it )
	it->show();
  \endcode
*/

/*!
  \fn T& QValueListIterator::operator*()

  Asterisk operator. Returns a reference to the current iterator item.
*/

/*!
  \overload const T& QValueListIterator::operator*() const

  Asterisk operator. Returns a reference to the current iterator item.
*/

/*!
  \fn QValueListIterator<T>& QValueListIterator::operator++()

  Prefix ++ makes the succeeding item current and returns
  an iterator pointing to the new current item.
  The iterator cannot check whether it reached the end of the list. Incrementing
  the iterator as returned by end() causes undefined results.
*/

/*!
  \overload QValueListIterator<T> QValueListIterator::operator++(int)

  Postfix ++ makes the succeeding item current and returns
  an iterator pointing to the new current item.
  The iterator cannot check whether it reached the end of the list. Incrementing
  the iterator as returned by end() causes undefined results.
*/

/*!
  \fn QValueListIterator<T>& QValueListIterator::operator--()

  Prefix -- makes the previous item current and returns
  an iterator pointing to the new current item.
  The iterator cannot check whether it reached the beginning of the list. Decrementing
  the iterator as returned by begin() causes undefined results.
*/

/*!
  \overload QValueListIterator<T> QValueListIterator::operator--(int)

  Postfix -- makes the previous item current and returns
  an iterator pointing to the new current item.
  The iterator cannot check whether it reached the beginning of the list. Decrementing
  the iterator as returned by begin() causes undefined results.
*/

/*!
  \fn bool QValueListIterator::operator==( const QValueListIterator<T>& it ) const

  Compares this iterator and \a it and returns TRUE if they point to
  the same item; otherwise returns FALSE.
*/

/*!
  \fn bool QValueListIterator::operator!=( const QValueListIterator<T>& it ) const

  Compares this iterator and \a it and returns TRUE if they point to
  different items; otherwise returns FALSE.
*/

/*****************************************************************************
  QValueListConstIterator documentation
 *****************************************************************************/

/*!
  \class QValueListConstIterator qvaluelist.h
  \brief The QValueListConstIterator class provides a const iterator
  for QValueList.

  \ingroup qtl
  \ingroup tools

  In contrast to QValueListIterator, this class is used to iterate over a const
  list. It does not allow modification of the values of the list since
  that would break const semantics.

  You can create the appropriate const iterator type by using the \c
  const_iterator typedef provided by QValueList. 

  For more information on QValueList iterators, see QValueListIterator.

  \sa QValueListIterator, QValueList
*/

/*! \enum  QValueListConstIterator::value_type
	The type of value. */
/*! \enum  QValueListConstIterator::pointer
	Pointer to value_type. */
/*! \enum  QValueListConstIterator::reference
	Reference to value_type. */
/*! \enum  QValueListConstIterator::NodePtr
	\internal */
/*! \enum  QValueListConstIterator::iterator_category
	\internal */
/*! \enum  QValueListConstIterator::size_type
	\internal */
/*! \enum  QValueListConstIterator::difference_type
	\internal */

/*!
  \fn QValueListConstIterator::QValueListConstIterator()

  Creates un uninitialized iterator.
*/

/*!
  \overload QValueListConstIterator::QValueListConstIterator( NodePtr p )

    \internal
  Internal function.
*/

/*!
  \overload QValueListConstIterator::QValueListConstIterator( const QValueListConstIterator<T>& it )

  Constructs a copy of the iterator \a it.
*/

/*!
  \fn QValueListConstIterator::QValueListConstIterator( const QValueListIterator<T>& it )

  Constructs a copy of the iterator \a it.
*/

/* Unfortunately not with MSVC
  \fn const T *QValueListConstIterator::operator->()
  Pointer operator. Returns a pointer to the current iterator item.
  The great advantage of this operator is that you can treat the
  iterator like a pointer.

  Example:
  \code
    QValueList<int>::Iterator it = list.begin();
    for( ; it != end(); ++it )
	it->show();
  \endcode
*/

/*!
  \fn const T& QValueListConstIterator::operator*() const

  Asterisk operator. Returns a reference to the current iterator item.
*/

/*!
  \fn QValueListConstIterator<T>& QValueListConstIterator::operator++()

  Prefix ++ makes the succeeding item current and returns
  an iterator pointing to the new current item.
  The iterator cannot check whether it reached the end of the list. Incrementing
  the iterator as returned by end() causes undefined results.
*/

/*!
  \overload QValueListConstIterator<T> QValueListConstIterator::operator++(int)

  Postfix ++ makes the succeeding item current and returns an iterator
  pointing to the new current item. The iterator cannot check whether
  it reached the end of the list. Incrementing the iterator as
  returned by end() causes undefined results.
*/

/*!
  \fn QValueListConstIterator<T>& QValueListConstIterator::operator--() 
  
  Prefix -- makes the previous
  item current and returns an iterator pointing to the new current
  item. The iterator cannot check whether it reached the beginning of
  the list. Decrementing the iterator as returned by begin() causes
  undefined results.
*/

/*!
  \overload QValueListConstIterator<T> QValueListConstIterator::operator--(int) 
  
  Postfix -- makes the
  previous item current and returns an iterator pointing to the new
  current item. The iterator cannot check whether it reached the
  beginning of the list. Decrementing the iterator as returned by
  begin() causes undefined results.
*/

/*!
  \fn bool QValueListConstIterator::operator==( const QValueListConstIterator<T>& it ) const 

  Compares this iterator with \a it and returns TRUE if they point to
  the same item; otherwise returns FALSE.
*/

/*!
  \fn bool QValueListConstIterator::operator!=( const QValueListConstIterator<T>& it ) const 

  Compares this iterator with \a it and returns TRUE if they point to
  different items; otherwise returns FALSE.
*/


/*! \enum QValueList::Iterator

  This iterator is an instantiation of QValueListIterator for the same
  type as this QValueList.  In other words, if you instantiate
  QValueList<int>, Iterator is a QValueListIterator<int>.  Several
  member function use it, such as QValueList::begin(), which returns
  an iterator pointing to the first item in the list.

  Functionally, this is almost the same as ConstIterator. The only
  difference is you cannot use ConstIterator for non-const operations,
  and that the compiler often can generate better code if you use
  ConstIterator.

  \sa QValueListIterator ConstIterator
*/

/*! \enum QValueList::ConstIterator

  This iterator is an instantiation of QValueListConstIterator for the
  same type as this QValueList.  In other words, if you instantiate
  QValueList<int>, ConstIterator is a QValueListConstIterator<int>.
  Several member function use it, such as QValueList::begin(), which
  returns an iterator pointing to the first item in the list.

  Functionally, this is almost the same as Iterator. The only
  difference is you cannot use ConstIterator for non-const operations,
  and that the compiler often can generate better code if you use
  ConstIterator.

  \sa QValueListIterator Iterator
*/
