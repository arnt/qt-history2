/****************************************************************************
**
** Documentation on deploying Qt.
**
** Copyright (C) 1992-2003 Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
\page distributingqt.html

\title Deploying Qt Applications

This document lists the platform-specific files needed to distribute
Qt applications. We do not include any compiler-specific files that
may also be required. (See also, \link winsystem.html Window
System-specific Notes\endlink.)

\section1 Static Qt Applications

To distribute static Qt applications, you need the following file for
all platforms:

\list
\i your application's executable
\endlist

\section1 Dynamic Qt Applications

To distribute dynamic Qt applications, you will need the following
files for all platforms:

\list
\i application executable
\i the Qt library 
\endlist

The Qt library must either be in the same directory as the application
executable or in a directory which is included in the system library
path.

The library is provided by the following platform specific files:

\table
\header \i Platform \i File
\row \i Windows \i \c qt.dll
\row \i Unix/Linux \i \c libqt.so
\row \i Mac \i \c libqt.so##
\endtable

You must include any plugin files used by the application.

Plugins must be put into a subdirectory under a directory known to
Qt as a plugin directory. The subdirectory must have the name of the
plugin category (e.g. \c styles, \c sqldrivers, \c designer, etc.). 


\section1 Dynamic Dialogs 

For dynamic dialogs if you use QWidgetFactory, you need the following
files for all platforms:

\list
\i The same files as used for dynamic Qt applications
\i The QUI Library
\endlist

The QUI library is provided by the following platform specific files:
\table
\header \i Platform \i File
\row \i Windows  \i\c qui.lib
\row \i Unix/Linux  \i\c libqui.so
\row \i Mac \i \c libqui.so###
\endtable

The QUI library must either be in the same directory as the
application executable or in a directory which is included in the
system library path.

\section1 Qt Applications that use QSA

For Qt applications that use QSA, you need the following files for all
platforms:

\list 
\i The same files as used for dynamic dialogs
\i The QSA library 
\endlist

The QSA library is provided by the following platform specific files:
\table
\header \i Platform \i File
\row \i Windows \i \c qsa.dll
\row \i Unix/Linux \i \c libqsa.so
\row \i Mac \i \c libqsa.so##
\endtable

The QSA library must either be in the same directory as the
application executable or in a directory which is included in the
system library path.

In addition, the Qt Scripter and QSA custom widgets plugins are
required. These are provided by the following platform specific files
are as follows:

\list
\i Qt Scripter plugin
\endlist
\table
\header \i Platform \i File
\row \i Windows \i \c quickide.dll
\row \i Unix/Linux \i \c quickide.so
\row \i Mac \i \c quickide.so##
\endtable

\list
\i QSA Custom Widgets plugin
\endlist
\table
\header \i Platform \i File
\row \i Windows \i \c quickcustom.dll
\row \i Unix/Linux \i \c quickcustom.so
\row \i Mac \i \c quickcustom.so##
\endtable

The plugins must be put into a subdirectory called \c qsa under a directory
known to Qt as a plugin directory. Qt plugin directories can be set using
QApplication::addLibraryPath().

*/
