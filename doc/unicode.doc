/****************************************************************************
** $Id: $
**
** Documentation of Unicode support in Qt.
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page unicode.html
  
\title About Unicode

Unicode is a 16-bit character set, portable across all major computing
platforms and with decent coverage over most of the world.  It is
also single-locale; it includes no code pages or other complexities
that make software harder to write and test. There is
no competing character set that's reasonably multiplatform.  For
these reasons, Trolltech has chosen to make Unicode the native
character set of Qt starting with version 2.0.


\section1 Information about Unicode on the web.  

The \link http://www.unicode.org Unicode Consortium\endlink
has a number of documents available, including

\list

\i \link http://www.unicode.org/unicode/standard/principles.html
A technical introduction to Unicode\endlink
\i \link http://www.unicode.org/unicode/standard/standard.html
The home page for the standard\endlink

\endlist




\section1 The Standard

The current version of the standard is 3.0.1. 

\list

\i \link http://www.amazon.com/exec/obidos/ASIN/0201616335/trolltech/t
The Unicode Standard, version 3.0.\endlink  See also
\link http://www.unicode.org/unicode/standard/versions/Unicode3.0.1.html
its home page.\endlink
\i \link http://www.amazon.com/exec/obidos/ASIN/0201473459/trolltech/t
The Unicode Standard, version 2.0.\endlink  See also the
\link http://www.unicode.org/unicode/reports/tr8.html 2.1
update\endlink and
\link http://www.unicode.org/unicode/standard/versions/enumeratedversions.html#Unicode 2.1.9 the 2.1.9 data files\endlink at www.unicode.org.

\endlist

\section1 Unicode in Qt

In Qt, and in most applications that use Qt, most or all user-visible
strings are stored in Unicode. Qt provides:

\list

\i Translation to/from legacy encodings for file I/O - see \l
QTextCodec and \l QTextStream.
\i Translation from Input Methods and 8-bit keyboard input.
\i Translation to legacy character sets for on-screen display.
\i A string class, \l QString, that stores Unicode characters, with
support for migrating from C strings including fast (cached)
translation to and from US-ASCII, and all the usual string
operations.
\i Unicode-aware widgets where appropriate.
\i Unicode support detection on Windows 95/98/NT/2000, so that Qt
provides Unicode even on Windows platforms that do not support it.

\endlist

To obtain the benefits of Unicode, we recommend using QString for
storing all user-visible strings and performing all text file I/O using
QTextStream.  Use \l QKeyEvent::text() for keyboard input in any
custom widgets you write; it does not make much difference for slow
typists in West Europe or North America, but for fast typists or
people using special input methods using text() is beneficial.

All the function arguments in Qt that may be user-visible strings, \l
QLabel::setText() and a many others, take \c{const QString &}
as type.  \l QString provides implicit casting from \c{const char *}
such that things like

\code
	myLabel->setText( "Hello, Dolly!" );
\endcode

will work.  There is also a function, \l QObject::tr(), that provides
translation support, like this:

\code
	myLabel->setText( tr("Hello, Dolly!") );
\endcode

tr() (simplifying somewhat) maps from \c{const char *} to a
Unicode string, and uses installable \l QTranslator objects to do the
mapping.

Programs that need to talk to other programs or read/write files in
legacy file formats, Qt provides a number of built-in \l QTextCodec
classes, that is, classes that know how to translate between Unicode
and legacy encodings.

By default, conversion to/from \c{const char *} uses a
locale-dependent codec.  However, the program can easily find codecs
for other locales, and set any open file or network connection to use
a special codec.  It is also possible to install new codecs, for
encodings that the built-in ones do not support.  (At the time of
writing, Vietnamese/VISCII is one such example.)

Since US-ASCII and ISO-8859-1 are so common, there are also especially
fast functions for mapping to and from them.  For example, to open an
application's icon one might do this:

\code
	QFile f( QString::fromLatin1("appicon.png") );
\endcode

Regarding output, Qt will do a best-effort conversion from
\link http://my.ispchannel.com/~markdavis/unicode/Unicode_transcription_images/U_Combined.gif Unicode\endlink
to whatever encoding the system and fonts provide.  Depending on
operating system, locale, font availability and Qt's support for the
characters used, this conversion may be good or bad.  We will extend
this in upcoming versions, with emphasis on the most common locales
first.

*/
