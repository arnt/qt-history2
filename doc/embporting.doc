/****************************************************************************
**
** Copyright (C) 1992-2003 Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
\page embedporting.html

\title Issues to be aware of when porting Qt/Embedded

Qt/Embedded is designed to be reasonably platform-independent. The
only publically available version is a Linux implementation. The
following dependencies will need to be addressed if you intend to port
to another operating system (files that you need to modify are listed
at the end of each section):


\list 

\i <b>System V IPC</b> (shared memory and semaphores) is used to share
window regions between client and server. You will need to provide
something similar unless you want a single-application setup (i.e.
running only one program, which is the server). System V semaphores
are also used for synchronising access to the framebuffer.

Modify \c qwindowsystem_qws.cpp, \c qwsregionmanager_qws.cpp, \c
qapplication_qws.cpp, and \c qlock_qws.cpp.

\i <b>Unix-domain sockets</b> are used to communicate things like
keyboard events, requests to raise windows and QCOP messages between
applications. Again, you will need to provide something similar unless
you want a single-application setup. It should be possible to
implement something like this using message queues or similar
mechanisms; with the exception of QCOP messages (which are generated
by client applications and not Qt/Embedded) individual messages should
be no more than a few bytes in length. 

Modify \c qwssocket_qws.cpp.

\i <b>The Linux framebuffer device</b> is used to map in the drawing
area. You will need to replace it (by creating a new class of QScreen)
with something else giving a byte pointer to a memory-mapped
framebuffer, plus information about width, height and bit depth (which
most likely you can simply hard-code). If your framebuffer is not
memory-mapped or is in an unsupported format or depth you will need to
modify QGfxRaster as well. 

Modify \c qgfxlinuxfb_qws.cpp.

\i <b>The accelerated drivers</b> currently use the Linux QScreen and use
\c /proc/bus/pci to map in PCI config space. However, these are only
example drivers; you will probably need to write your own driver in
any case, and you will need to provide your own way to map in control
registers. 

Modify \c qgfxmach64_qws.cpp, \c qgfxvoodoo_qws.cpp and \c
qgfxmatrox_qws.cpp.

\i <b>Sound</b> uses a Linux \c /dev/dsp style device. If you want to use
the Qt/Embedded sound server you'll need to reimplement it.

Modify \c qsoundqss_qws.cpp.

\i <b>select()</b> is used to implement QSocketDevices and listen for
events to/from the Qt/Embedded server application.

Modify \c qapplication_qws.cpp.

\endlist

Qt/Embedded makes use of the standard C library and some Posix functions.
Mostly the latter are concentrated in platform dependent code anyway
(e.g. mmap() to map in the Linux framebuffer).

*/
