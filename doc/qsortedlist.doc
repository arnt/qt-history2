/****************************************************************************
** $Id: qsortedlist.doc,v 1.4 1999/10/25 14:49:10 arnt Exp $
**
** QSortedList documentation
**
** Copyright (C) 1992-2000 Troll Tech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Troll Tech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** Licensees holding valid Qt Professional Edition licenses may use this
** file in accordance with the Qt Professional Edition License Agreement
** provided with the Qt Professional Edition.
**
** See http://www.troll.no/pricing.html or email sales@troll.no for
** information about the Professional Edition licensing, or see
** http://www.troll.no/qpl/ for QPL licensing information.
**
*****************************************************************************/


/*****************************************************************************
  QSortedList documentation
 *****************************************************************************/

/*!
  \class QSortedList qsortedlist.h
  \brief The QSortedList class provides a list sorted by operator< and operator==

  \ingroup collection
  \ingroup tools

  If you want to sort a QList you have to reimplement the
  QGList::compareItems() method.  If the elements of your list support
  operator<() and operator==() then you can use QSortedList instead.
  Its compareItems() calls operator<() and operator==() and returns an
  appropriate result.

  Otherwise, this is as QList.

  \sa QList, \link collection.html Collection Classes\endlink
*/


/*!
  \fn QSortedList::QSortedList()
  Constructs an empty list.
*/

/*!
  \fn QSortedList::QSortedList( const QSortedList<type> &list )
  Constructs a copy of \e list.

  Each item in \e list is copied to this new list.
*/

/*!
  \fn QSortedList::~QSortedList()
  Removes all items from the list and destroys the list.

  All list iterators that access this list will be reset.
*/

/*!
  \fn QSortedList<type>& QSortedList::operator=(const QSortedList<type>& list)
  Assigns \e list to this list and returns a reference to this list.

  This list is first cleared, then each item in \e list is
  appended to this list.  Only the pointers are copied
  (shallow copy), unless newItem() has been reimplemented().
*/

/*!
   \fn int QSortedList::compareItems( Item s1, Item s2 )

   \reimp

   This reimplementation uses operator< and operator== to compare.
*/
