/****************************************************************************
**
** QSortedList documentation.
**
** Copyright (C) 1992-2003 Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
  \class QSortedList qsortedlist.h
  \brief The QSortedList class provides a list sorted by operator< and operator==.

  \obsolete

  If you want to sort a QPtrList you have to reimplement the
  QGList::compareItems() method.  If the elements of your list support
  operator<() and operator==(), you can use QSortedList instead.
  Its compareItems() calls operator<() and operator==() and returns an
  appropriate result.

  Otherwise, this is as QPtrList.

  \sa QPtrList
*/


/*!
  \fn QSortedList::QSortedList()
  Constructs an empty list.
*/

/*!
  \fn QSortedList::QSortedList( const QSortedList<type> &list )
  Constructs a copy of \a list.

  Each item in \a list is copied to this new list.
*/

/*!
  \fn QSortedList::~QSortedList()
  Removes all items from the list and destroys the list.

  All list iterators that access this list will be reset.
*/

/*!
  \fn QSortedList<type>& QSortedList::operator=(const QSortedList<type>& list)
  Assigns \a list to this list and returns a reference to this list.

  This list is first cleared; each item in \a list is then
  appended to this list.  Only the pointers are copied
  (shallow copy) unless newItem() has been reimplemented().
*/

/*!
   \fn int QSortedList::compareItems( QPtrCollection::Item s1, QPtrCollection::Item s2 )

   \reimp

   This reimplementation uses operator< and operator== to compare.
*/
