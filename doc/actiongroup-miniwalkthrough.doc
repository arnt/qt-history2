/*
$Id$
*/

/*! \page actiongroup.html

\ingroup walkthroughs

\title Walkthrough: A Tiny Editor Illustrating QActionGroup

In the following we will step through a very rudimental 
\link tinyeditor-example.html editor program \endlink
that shows one of the most common uses of the \l QActionGroup class:
how to combine several toggle actions in a way that allows one-of-many choices.

If you're not yet familiar with the concept of \e actions,
please refer to the 
<A HREF="simple-application-action.html">Simple Application
Walkthrough featuring QAction</A>.

<h2>A tiny main program</h2>

\walkthrough action/actiongroup/tiny_editor.cpp
\skipto include
\printline include
\printuntil }

As its name, \e tiny_editor, suggests this is a very small program. It might
be unusual for an editor but it does not even provide the possibility  
to open a file given as a commandline argument. The reason for this
is simple: It has nothing to to with QActionGroups. 

The crucial point in the above \e main() is that we make \e editor, an object
constructed from a self-written class \e Editor, the main widget in our
application. This class is defined in \e editor.h.

When you read through the code and happen to be unsure about something: The
<A HREF="simple-application.html#simplemain">Simple Application Walkthrough</A>
explains the elements of a typical Qt main program in detail.


<h2>The interface of the Editor class</h2>

Before implementing the \e Editor class we should think about what it
is supposed to do. Fortunately Qt provides a full-featured rich text editor
class, \l QTextEdit. The only thing left for us is to give it a user interface.

\walkthrough action/actiongroup/editor.h
\skipto include
\printline include
\printuntil };

As we look for a means to implement one-of-many choices, a nice example would
involve two buttons that make the user change the font color: If he or she
invokes the \e setRedFont action the font color changes from default black
to red.  

To do this color change we need a slot, \e setFontColor() that takes care 
about the signal the action emits.

The \e Editor class itself is derived from \l QMainWindow. Only the constructor
might be called from outside the class. 


<h2>Action!</h2>

\walkthrough action/actiongroup/editor.cpp

\skipto include
\printuntil qaction.h

It's not that much that we need for our tiny editor: QTextEdit, QMenuBar,
QToolBar, QPopupMenu and last but not least QAction and QActionGroup from 
\e qaction.h. 

\printuntil colors

If one of the buttons is on, the other one must be off. The easiest way to
to this is to create an action group, \e colors, that controls this 
exclusive behaviour.
This is done by setting the third argument of the QActionGroup constructor to
\e TRUE (we could omit it because it's the default). 
As simple as this we get an \e exclusive action group that will look after
its member actions and switch off all other toggle actions except the one 
that is on. 

\printuntil blackfontcolor

Then we create our first action, the one that sets the font color back
to default black. It is called \e setBlackFont and is equipped with a descriptive 
QAction::text() reading \e black, a QAction::menuText() reading 
<em>Font color: black</em>, a QAction::iconSet()
derived from the file \e black.xpm and \e ALT+B as keyboard accelerator.
(Note that with this QPixmap constructor \e black.xpm must be found in the 
working directory when the \e tiny_editor binary is called. If you wish to compile the pixmap
into the binary the 
<A HREF="simple-application.html#ApplicationWindow">Simple Application Walkthrough</A>
shows how to do this.)

The last argument of the action constructor, \e TRUE, is responsible 
for making \e setBlackFont  a toggle action
that can be switched on or off. Most importantly \e setBlackFont becomes a member
of the \e colors action group at creation time: \e colors is defined to
be its parent.

\printuntil redfontcolor

The same way we create the other toggle action, \e setRedFont, as a child of 
\e colors.

Whenever one of the two members of the \e colors group emits the \l QAction::toggled() signal
the QActionGroup is notified internally and emits the \l QActionGroup::selected() signal
in turn. \l QActionGroup::selected() carries the action that caused the signal as its argument.

All we have to do now is to connect this signal to a slot that changes
the font color to red or black depending on the toggled action:

\printuntil setFontColor( QAction * )

This is the entire trick.
Thus let's recall what we have done so far: We created two toggle actions,
\e setRedFont and \e setBlackFont. Because they are children of an
\e exclusive QActionGroup named \e colors it is impossible for the user
to type red and black at the same time: Whenever he or she invokes
one of the actions the other one changes state to off, \e colors
emits a \l QActionGroup::selected() signal and the \e setFontColor() slot takes care
of it.

All we have to do now is to add our two actions to the \e Editor window.

\printline toolbar

First we create a tool bar.

\printuntil colors->addTo

But instead of adding each action manually we simply add their
parent action group to \e toolbar and are done. \e colors makes sure
that \e setBlackFont and \e setRedFont find themselves presented
in the tool bar: \e setBlackFont as a tool button decorated with the 
\e black_xpm pixmap on the left, \e setRedFont (because it was
added to \e colors later) to its right.

\printuntil "&Font"

Next we create a popup menu and insert it into the menu bar
under the \e Font entry.

In a menu with this name a user would certainly expect to find more
than just two entries to change the font color. You might want to
add other font related actions in the future, and therefore it 
would be nice to group \e setBlackFont and \e setRedFont in 
a submenu entirely dedicated to the purpose of changing font
colors.

With an action group this is easy. We simply tell \e colors
to group together all of its members in a single submenu:

\printline colors->setUsesDropDown

This however causes a problem: a submenu entry must have a
menu text, and up to now we don't have any.

When we recall that action groups intrinsically are QActions
themselves the solution becomes obvious:

\printline "Font Color"

We simply assign the menu text \e Font \e Color to \e colors.

The rest is business as usual:

\printline addTo( font )

We add the new and improved QActionGroup as a submenu to
the \e font popup menu.

\printline editor

Last but not least we create the heart of \e Editor,
the rich text editor ...

\printline setCentralWidget

... and make it the central widget in our window.

\printline }


The only thing left to implement is the \e setFontColor slot
that is responsible for changing the font color to red
or black depending on which action was toggled on.

<A NAME="setFontColor()"></A>
\printline coloraction
\printline {

As the \l QActionGroup::selected() signal carries the
relevant action as its argument, the first thing we have to do
is to preserve it in the \e coloraction variable for later use.

\printuntil setColor( red )

If \e coloraction is the same as \e setRedFont we change the \e editor's 
font color to \e red.

\printuntil setColor( black

Otherwise it is set to \e black.

\printline }
*/
