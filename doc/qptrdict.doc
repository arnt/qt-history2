/****************************************************************************
** $Id: $
**
** QPtrDict and QPtrDictIterator class documentation
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/


/*****************************************************************************
  QPtrDict documentation
 *****************************************************************************/

/*!
  \class QPtrDict qptrdict.h
  \brief The QPtrDict class is a template class that provides a dictionary based on void* keys.

  \ingroup collection
  \ingroup tools

  \important autoDelete setAutoDelete

  QPtrDict is implemented as a template class. Define a
  template instance QPtrDict\<X\> to create a dictionary that operates on
  pointers to X (X*).

  A dictionary is a collection of key-value pairs. The key is a void*
  used for insertion, removal and lookup. The value is a pointer.
  Dictionaries provide very fast insertion and lookup.

  Example:
    \code
    QPtrDict<char> extra;

    QLineEdit *le1 = new QLineEdit( this );
    le1->setText( "Simpson" );
    QLineEdit *le2 = new QLineEdit( this );
    le2->setText( "Homer" );
    QLineEdit *le3 = new QLineEdit( this );
    le3->setText( "45" );

    extra.insert( le1, "Surname" );
    extra.insert( le2, "Forename" );
    extra.insert( le3, "Age" );

    QPtrDictIterator<char> it( extra ); // See QPtrDictIterator
    for( ; it.current(); ++it )
	cout << it.current() << endl;
    cout << endl;

    if ( extra[le1] ) // Prints "Surname: Simpson"
	cout << extra[le1] << ": " << le1->text() << endl; 
    if ( extra[le2] ) // Prints "Forename: Homer"
	cout << extra[le2] << ": " << le2->text() << endl; 

    extra.remove( le1 ); // Removes le1 from the dictionary
    cout << le1->text() << endl; // Prints "Simpson"
    \endcode
    In this example we use a dictionary to add an extra property (a
    char*) to the line edits we're using. 

    See QDict for full details, including the choice of dictionary
    size, and how deletions are handled. 

  \sa QPtrDictIterator, QDict, QAsciiDict, QIntDict,
      \link collection.html Collection Classes\endlink
*/


/*!
  \fn QPtrDict::QPtrDict( int size )
  Constructs a dictionary using an internal hash array with the size
  \a size.

  Setting \a size to a suitably large prime number
  (equal to or greater than the expected number of entries) makes the hash
  distribution better and hence the lookup faster.
*/

/*!
  \fn QPtrDict::QPtrDict( const QPtrDict<type> &dict )
  Constructs a copy of \a dict.

  Each item in \a dict is inserted into this dictionary.
  Only the pointers are copied (shallow copy).
*/

/*!
  \fn QPtrDict::~QPtrDict()
  Removes all items from the dictionary and destroys it.

  All iterators that access this dictionary will be reset.

  \sa setAutoDelete()
*/

/*!
  \fn QPtrDict<type> &QPtrDict::operator=(const QPtrDict<type> &dict)
  Assigns \a dict to this dictionary and returns a reference to this
  dictionary.

  This dictionary is first cleared and then each item in \a dict is
  inserted into the dictionary. Only the pointers are copied (shallow
  copy), unless newItem() has been reimplemented.
*/

/*!
  \fn uint QPtrDict::count() const
  Returns the number of items in the dictionary.
  \sa isEmpty()
*/

/*!
  \fn uint QPtrDict::size() const
  Returns the size of the internal hash table (as specified in the
  constructor).
  \sa count()
*/

/*!
  \fn void QPtrDict::resize( uint newsize )
  Changes the size of the hash table to \a newsize.
  The contents of the dictionary are preserved,
  but all iterators on the dictionary become invalid.
*/

/*!
  \fn bool QPtrDict::isEmpty() const
  Returns TRUE if the dictionary is empty; otherwise returns FALSE.
  \sa count()
*/

/*!
  \fn void QPtrDict::insert( void *key, const type *item )
  Inserts the \a key with the \a item into the dictionary.

  The key does not have to be a unique dictionary key.  If multiple items
  are inserted with the same key, only the last item will be visible.

  Null items are not allowed.

  \sa replace()
*/

/*!
  \fn void QPtrDict::replace( void *key, const type *item )

  If the dictionary has key \a key, this key's item is replaced with
  \a item. If the dictionary doesn't contain key \a key, \a item is
  inserted into the dictionary using key \a key. 

  Null items are not allowed.

  Equivalent to
  \code
    QPtrDict<char> dict;
	...
    if ( dict.find( key ) )
	dict.remove( key );
    dict.insert( key, item );
  \endcode

  If there are two or more items with equal keys, then the last inserted
  of these will be replaced.

  \sa insert()
*/

/*!
  \fn bool QPtrDict::remove( void *key ) 
  
  Removes the item associated with \a key from the dictionary. Returns
  TRUE if successful, or FALSE if the key does not exist in the
  dictionary.

  If there are two or more items with equal keys, then the last item
  that was inserted of will be removed.

  The removed item is deleted if \link QPtrCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  All dictionary iterators that refer to the removed item will be set to
  point to the next item in the dictionary traversal order.

  \sa take(), clear(), setAutoDelete()
*/

/*!
  \fn type *QPtrDict::take( void *key )
  Takes the item associated with \a key out of the dictionary without
  deleting it (even if \link QPtrCollection::setAutoDelete()
  auto-deletion\endlink is enabled).

  If there are two or more items with equal keys, then the last item
  that was inserted of will be removed.

  Returns a pointer to the item taken out, or null if the key does not
  exist in the dictionary.

  All dictionary iterators that refer to the taken item will be set to
  point to the next item in the dictionary traversal order.

  \sa remove(), clear(), setAutoDelete()
*/

/*!
  \fn void QPtrDict::clear()
  Removes all items from the dictionary.

  The removed items are deleted if \link QPtrCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  All dictionary iterators that access this dictionary will be reset.

  \sa remove(), take(), setAutoDelete()
*/

/*!
  \fn type *QPtrDict::find( void *key ) const
  Returns the item associated with \a key, or null if the key does not
  exist in the dictionary.

  This function uses an internal hashing algorithm to optimize lookup.

  If there are two or more items with equal keys, then the last item
  that was inserted will be found.

  Equivalent to the [] operator.

  \sa operator[]()
*/

/*!
  \fn type *QPtrDict::operator[]( void *key ) const
  Returns the item associated with \a key, or null if the key does not
  exist in the dictionary.

  This function uses an internal hashing algorithm to optimize lookup.

  If there are two or more items with equal keys, then the last item
  that was inserted will be found.

  Equivalent to the find() function.

  \sa find()
*/

/*!
  \fn void QPtrDict::statistics() const
  Debugging-only function that prints out the dictionary distribution
  using qDebug().
*/

/*!
  \fn QDataStream& QPtrDict::read( QDataStream &s, QPtrCollection::Item &item )
  Reads a dictionary item from the stream \a s and returns a
  reference to the stream.

  The default implementation sets \a item to 0.

  \sa write()
*/

/*!
  \fn QDataStream& QPtrDict::write( QDataStream &s, QPtrCollection::Item ) const
  Writes a dictionary item to the stream \a s and returns a
  reference to the stream.

  \sa read()
*/

/*****************************************************************************
  QPtrDictIterator documentation
 *****************************************************************************/

/*!
  \class QPtrDictIterator qptrdict.h
  \brief The QPtrDictIterator class provides an iterator for QPtrDict collections.

  \ingroup collection
  \ingroup tools

  QPtrDictIterator is implemented as a template class.
  Define a template instance QPtrDictIterator\<X\> to create a
  dictionary iterator that operates on QPtrDict\<X\> (dictionary of X*).

  Example:
  \code
    QPtrDict<char> extra;

    QLineEdit *le1 = new QLineEdit( this );
    le1->setText( "Simpson" );
    QLineEdit *le2 = new QLineEdit( this );
    le2->setText( "Homer" );
    QLineEdit *le3 = new QLineEdit( this );
    le3->setText( "45" );

    extra.insert( le1, "Surname" );
    extra.insert( le2, "Forename" );
    extra.insert( le3, "Age" );

    QPtrDictIterator<char> it( extra );
    for( ; it.current(); ++it ) {
	QLineEdit *le = (QLineEdit)it.currentKey();
	cout << it.current() << ": " << le->text() << endl;
    }
    cout << endl;

    // Output (random order):
    //	Forename: Homer
    //	Age: 45
    //	Surname: Simpson
  \endcode
  In the example we insert some line edits into a dictionary, then
  iterate over the dictionary printing the strings associated with
  those line edits.

  Multiple iterators may independently traverse the same dictionary.
  A QPtrDict knows about all iterators that are operating on the dictionary.
  When an item is removed from the dictionary, QPtrDict updates all
  iterators that refer the removed item to point to the next item
  in the traversing order.

  \sa QPtrDict
*/

/*!
  \fn QPtrDictIterator::QPtrDictIterator( const QPtrDict<type> &dict )
  Constructs an iterator for \a dict.  The current iterator item is
  set to point on the first item in the \a dict.
*/

/*!
  \fn QPtrDictIterator::~QPtrDictIterator()
  Destroys the iterator.
*/

/*!
  \fn uint QPtrDictIterator::count() const
  Returns the number of items in the dictionary this iterator operates on.
  \sa isEmpty()
*/

/*!
  \fn bool QPtrDictIterator::isEmpty() const
  Returns TRUE if the dictionary is empty; otherwise returns FALSE.
  \sa count()
*/

/*!
  \fn type *QPtrDictIterator::toFirst()
  Sets the current iterator item to point to the first item in the
  dictionary and returns a pointer to the item.
  If the dictionary is empty, it sets the current item to null and 
  returns null.
*/

/*!
  \fn QPtrDictIterator::operator type *() const
  Cast operator. Returns a pointer to the current iterator item.
  Same as current().
*/

/*!
  \fn type *QPtrDictIterator::current() const
  Returns a pointer to the current iterator item.
*/

/*!
  \fn void *QPtrDictIterator::currentKey() const
  Returns the key for the current iterator item.
*/

/*!
  \fn type *QPtrDictIterator::operator()()
  Makes the succeeding item current and returns the original current item.

  If the current iterator item was the last item in the dictionary or if it
  was null, null is returned.
*/

/*!
  \fn type *QPtrDictIterator::operator++()
  Prefix ++ makes the succeeding item current and returns the new current
  item.

  If the current iterator item was the last item in the dictionary or if it
  was null, null is returned.
*/

/*!
  \fn type *QPtrDictIterator::operator+=( uint jump )
  Sets the current item to the item \a jump positions after the current item
  and returns a pointer to that item.

  If that item is beyond the last item or if the dictionary is  empty,
  it sets the current item to null and returns null.
*/
