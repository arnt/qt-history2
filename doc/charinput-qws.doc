/****************************************************************************
** $Id: $
**
** Documentation of
**
** Copyright (C) 2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page charinput-qws.html

\title Character input in Qt/Embedded

Internally in the client/server protocol, each key press and key
release is sent as a \c{QWSKeyEvent}. A QWSKeyEvent contains the
following fields:

\list
 \i \c{unicode}
 
 Unicode value

 \i \c{keycode}
 
 Qt keycode value as defined in qnamespace.h

 \i \c{modifier}
 
 A bitfield consisting of some of Qt::ShiftButton, Qt::ControlButton,
 and Qt::AltButton.

 \i \c{is_press}
 
 \c TRUE if this is a key press, \c FALSE if it is a key release.

 \i \c{is_auto_repeat}
 
 TRUE if this event is caused by auto repeat.

\endlist

When the server receives a key event, it is sent to each client
process, which is responsible for processing the key event and sending
it to the right window, if any. Key events may come from several
different sources.


\section1 Keyboard drivers

A keyboard driver reads data from a device and gives key events to the
server.

Keyboard drivers are currently compiled into the library.
They are defined in the file \c src/kernel/qkeyboard_qws.cpp.
At the time of writing, the following drivers are defined:
\table
\row
\i \c{QWSTtyKeyboardHandler}
\i Input from the system console (tty)
\row
\i \c{QWSVr41xxButtonsHandler}
\i Input handler for the buttons on Cassiopeia-style PDAs
\row
\i \c{QWSVFbKeyboardHandler}
\i Virtual framebuffer key input
\endtable

The keyboard drivers all follow the same pattern. They read keyboard
data from a device, find out which keys were pressed, and then call
the static function QWSServer::processKeyEvent() with the key information.

At present, the console keyboard driver also handles console switching
(<b>Ctrl+Alt-F1</b>...<b>Ctrl+Alt+F10</b>) and termination
(<b>Ctrl+Alt+Backspace</b>).

To add a keyboard driver for a new device, make a subclass of
\c{QWSKeyboardHandler} and instantiate it in
\c{QWSServer::newKeyboardHandler()} (in qkeyboard_qws.cpp).

\section1 Key event filters (input methods)

When the server receives a key event from a keyboard driver, it first
passes it through a filter. 

This can be used to implement input methods, providing input of
characters that are not on the keyboard.

To make an input method, subclass QWSServer::KeyboardFilter (in \c
src/kernel/qwindowsystem_qws.h) and implement the virtual function \c
filter(). If \c filter() returns \c FALSE, the event will be sent to
the clients (using QWSServer::sendKeyEvent()). If \c filter() returns
\c TRUE, the event will be stopped. To generate new key events, use
QWSServer::sendKeyEvent(). (Do not use processKeyEvent(), since this
will lead to infinite recursion.)

To install a keyboard event filter, use
\c{QWSServer::setKeyboardFilter()}. Currently, only one filter
can be installed at a time.

Filtering must be done in the server process.

The launcher example contains an example of a simple input method,
\c{SimpleIM} which reads a substitution table from a file.

\section1 Pen input

Key events do not need to come from a keyboard device. The server
process may call QWSServer::sendKeyEvent() at any time. 

Typically, this is done by popping up a widget, and letting the user
specify characters with the pointer device.

<b>Note</b>: the key input widget should not take focus, since the
server would then just send the key events back to the input widget.
One way to make sure that the input widget never takes focus is to set
the \c{WStyle_Customize} and \c{WStyle_Tool} widget flags in
the QWidget constructor.

The \link http://www.trolltech.com/products/palmtop/ Qt Palmtop\endlink
environment contains various input widgets such as
Handwriting Recognition and Virtual Keyboard.


*/
