/*!
 \page bidi.html

\title Porting applications to Arabic and Hebrew

Even though Qt tries to remove most of the burden of enabling applications for
Arabic and Hebrew from the programmer, there are a few aspects where the
programmer has to take care. This document will try to describe most of the
problems that can occur when trying to translate and use the application in
Arabic or Hebrew.

\section1 Difference with other languages

Arabic and Hebrew are different from most other languages in that they
are written from right to left. Numbers and English words embedded in
an Arabic or Hebrew sentence however are still written left to right.
Text is stored on disk in the logical order, so displaying and editing
has to use an algorithm to reorder the string into the visual order
the user expects.

A simple example is the following string (capital letters signify
Arabic or Hebrew):
\code
THIS IS AN english WORD.
\endcode

The visual output of this would be:

\code
.DROW english NA SI SIHT
\endcode

Qt takes care of all these formatting and reordering issues internally, so you
don't have to worry about it.

Many functions using the QPainter::drawText( int x, int y, const QString &text )
method will get a wrong alignment of their text as localized versions 
should have all text right aligned.

Using the variant of drawText that takes a rectangle to draw text into
will correctly take care of alignment issues. Arabic or Hebrew text
will be right aligned, other text left aligned by default.

<!--
Another big difference is that the whole user interface is mirrored. So a
dialog which would usually be laid out from left to right will be laid out
right to left in Hebrew and Arabic. If you use QLayout, this will be done
automatically inside of Qt, and all dialogs should come out reversed if the app
is translated to Arabic or Hebrew. You can try this effect yourself, by
starting the app with the -reverse command line switch.

\section1 Things ot take care of

First of all, as for any other app that is supposed to be internationalized,
don't use fixed layouts.  Use QLayout instead. This will ensure automatically,
that your application will look the right way when  translated to
Arabic or Hebrew.

There are a few functions kept for compatibilty with older applications that
might lead to unexpected  or wrong results when used in a right to left
language

\section1 Functions you should avoid

QHeader::cellPos()

\section1 Functions that might lead to unexpected results

QSplitter::moveSplitter()

QHeader::offset()
-->

*/
