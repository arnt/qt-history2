/****************************************************************************
** $Id: xml.doc,v 2.45 1999/10/05 12:12:08 arnt Exp $
**
** Documentation on the xml module
**
** Copyright (C) 2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page xml.html

\title Qt XML Module

The XML module provides a well-formed XML parser using the SAX2 (Simple API for
XML) interface plus an implementation of the DOM Level 1 (Document Object
Model).

This document assumes that you are familiar with the XML terminology. It
provides you with information on how to use the XML classes in Qt. 
It is however not intended to teach XML basics. If you wish to learn 
more about XML please refer to other sources like
e.g. <a href="http://www.w3.org/XML/">http://www.w3.org/XML/</a>.


<h2><a name="overview">Overview of the XML architecture in Qt</h2>

The Qt XML Module provides two interfaces for XML: SAX2 and DOM Level 1.

SAX is a very popular event-based standard interface for XML parsers.
The Qt interface follows the design of the SAX2 Java implementation.
Its naming scheme was however adjusted to fit the Qt naming conventions.
Details on SAX2 can be found at
<a href="http://www.megginson.com/SAX/">http://www.megginson.com/SAX/</a>.

Support for SAX2 filters and the reader factory are missing at the moment.
The Qt implementation furthermore omits all SAX1 compatibility classes 
present in the Java interface. 

DOM Level 1 is a W3C Recommendation for XML interfaces that maps the
constituents of a XML document in a tree structure. Details and the
specification of DOM Level 1 can be found at
<a href="http://www.w3.org/DOM/">http://www.w3.org/DOM/</a>.


<h2><a name="introSAX2">Introduction to SAX2</h2>

The SAX2 interface is an event-driven mechanism to provide the user with
document information. "Event" in this context has nothing to do with the
term "event" you probably know from windowing systems; it means that the
parser reports certain document information while parsing the document.
These reported information is referred to as "event".

To make it less abstract consider the following example:

\code 
<quote>To make it less abstract consider the following example:</quote>
\endcode

Whilst reading (a SAX2 parser is usually referred to as "reader") 
the above document three events would be triggered:
<OL>
<LI> A start tag occurs (<tt>&lt;quote&gt;</tt>).
<LI> Character data (i.e. text) is found.
<LI> An end tag is parsed (<tt>&lt;/quote&gt;</tt>).
</OL>

Each time such an event occurs the parser reports it so that 
a suitable event handling routine can be invoked.

Whilst this is a fast and simple approach to read XML documents
manipulation is difficult because data are not stored, simply handled
and discarded serially. This is when the DOM interface comes handy.

The Qt XML module provides an
abstract class, \l QXmlReader, that defines the interface for potential 
SAX2 readers.
At the moment Qt ships with one reader implementation, \l
QXmlSimpleReader.

The reader reports parsing events through special handler classes. In Qt
the following ones are available:
<ul>
<li>\l QXmlContentHandler
    reports events related to the content of a document (e.g. the start tag,
    or characters).
<li>\l QXmlDTDHandler
    reports events related to the DTD (e.g. notation declarations).
<li>\l QXmlErrorHandler
    reports errors or warnings that occurred during parsing.
<li>\l QXmlEntityResolver
    reports external entities during parsing and allows the user to resolve
    external entities him- or herself instead of leaving it to the reader.
<li>\l QXmlDeclHandler
    reports further DTD related events (e.g. attribute declarations).
    Usually users are not interested in them, but under certain circumstances
    this class comes handy.
<li>\l QXmlLexicalHandler
    reports events related to the lexical structure of the document
    (the beginning of the DTD, comments etc.). Occasionally this
    might be useful.
</ul>

These classes are abstract classes describing the interface. The
\l QXmlDefaultHandler class provides a "do nothing" default implementation for
all of them. Therefore users need to overload only the
QXmlDefaultHandler functions they are interested in. 

To read input XML data a special class \l QXmlInputSource is used.

Apart from the already mentioned ones the following SAX2 support classes 
provide the user with useful functionality:
<ul>
<li> \l QXmlAttributes
     is used to pass attributes in a start element event.
<li> \l QXmlLocator
     is used to obtain the actual parsing position of an event.
<li> \l QXmlNamespaceSupport
     is used to easily implement namespace support for a reader.
</ul>

For a more detailed description see the document
"<a href="xml-sax.html">How to use the Qt SAX2 classes</a>".


<h2><a name="introDOM">Introduction to DOM</h2>

DOM provides an interface to access and change the content and structure of
an XML file. It makes a hierarchical view of the document (tree) 
available with the root element of the XML file serving as its root. 
Thus -- in contrast to the SAX2 interface -- an object model of the document 
is resident in memory after parsing which makes manipulation easy. 

In the Qt implementation of the DOM all
nodes in the document tree are subclasses of \l QDomNode.
The document itself is represented as a \l QDomDocument object.

The following table lists the available node classes and 
their potential children classes.
<table>
<tr>
    <th align="left">Node type</th>
    <th align="left">Possible children</th>
</tr>
<tr>
    <td>\l QDomDocument </td>
    <td>\l QDomElement (maximum one), \l QDomProcessingInstruction,
	\l QDomComment, \l QDomDocumentType </td>
</tr>
<tr>
    <td>\l QDomDocumentFragment </td>
    <td>\l QDomElement, \l QDomProcessingInstruction, \l QDomComment,
	\l QDomText, \l QDomCDATASection, \l QDomEntityReference </td>
</tr>
<tr><td>\l QDomDocumentType </td>
    <td>no children </td>
</tr>
<tr><td>\l QDomEntityReference </td>
    <td>\l QDomElement, \l QDomProcessingInstruction, \l QDomComment,
	\l QDomText, \l QDomCDATASection, \l QDomEntityReference </td>
</tr>
<tr><td>\l QDomElement </td>
    <td>\l QDomElement, \l QDomText, \l QDomComment,
	\l QDomProcessingInstruction, \l QDomCDATASection,
	\l QDomEntityReference </td>
</tr>
<tr><td>\l QDomAttr </td>
    <td>\l QDomText, \l QDomEntityReference </td>
</tr>
<tr><td>\l QDomProcessingInstruction </td>
    <td>no children </td>
</tr>
<tr><td>\l QDomComment </td>
    <td>no children </td>
</tr>
<tr><td>\l QDomText </td>
    <td>no children </td>
</tr>
<tr><td>\l QDomCDATASection </td>
    <td>no children </td>
</tr>
<tr><td>\l QDomEntity </td>
    <td>\l QDomElement, \l QDomProcessingInstruction, \l QDomComment,
	\l QDomText, \l QDomCDATASection, \l QDomEntityReference </td>
</tr>
<tr><td>\l QDomNotation </td>
    <td>no children </td>
</tr>
</table>

With \l QDomNodeList and \l QDomNamedNodeMap two collection classes 
are provided: \l QDomNodeList is a list of nodes
whereas \l QDomNamedNodeMap is used to handle unordered sets of nodes
(often used for attributes).

The \l QDomImplementation class allows the user to query features of the
DOM implementation.

To get started please refer to the \l QDomDocument documentation that
describes basic usage.

*/
