/****************************************************************************
** $Id: $
**
** Documentation on the xml module
**
** Copyright (C) 2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page xml.html

\title Qt XML Module

This module is part of the \link editions.html Qt Enterprise Edition \endlink.

The XML module provides a well-formed XML parser using the SAX2 (Simple API for
XML) interface plus an implementation of the DOM Level 2 (Document Object
Model).

\target overview
\section1 Overview of the XML architecture in Qt

The Qt XML Module provides two interfaces for XML: SAX2 and DOM Level 2.

SAX is an event-based standard interface for XML parsers.
The Qt interface follows the design of the SAX2 Java implementation.
Its naming scheme was adapted to fit the Qt naming conventions.
Details on SAX2 can be found at
\link http://www.megginson.com/SAX/ http://www.megginson.com/SAX/ \endlink.

Support for SAX2 filters and the reader factory are under
development. Furthermore the Qt implementation does not include the
SAX1 compatibility classes present in the Java interface.

For an introduction to Qt's SAX2 classes see
"\link xml-sax.html The Qt SAX2 implementation \endlink".
A code example is discussed in the "\link xml-sax-walkthrough.html tagreader
walkthrough \endlink".

DOM Level 2 is a W3C Recommendation for XML interfaces that maps the
constituents of an XML document to a tree structure. Details and the
specification of DOM Level 2 can be found at
\link http://www.w3.org/DOM/ http://www.w3.org/DOM/ \endlink.
More information about the DOM classes in Qt is provided in the
\link xml-dom.html Qt XML DOM overview \endlink.


Qt provides the following XML related classes:

\list
\i \l QDomAttr -- Represents one attribute of a QDomElement
\i \l QDomCDATASection -- Represents an XML CDATA section
\i \l QDomCharacterData -- Represents a generic string in the DOM
\i \l QDomComment -- Represents an XML comment
\i \l QDomDocument -- The representation of an XML document
\i \l QDomDocumentFragment -- Tree of QDomNodes which is usually not a complete QDomDocument
\i \l QDomDocumentType -- The representation of the DTD in the document tree
\i \l QDomElement -- Represents one element in the DOM tree
\i \l QDomEntity -- Represents an XML entity
\i \l QDomEntityReference -- Represents an XML entity reference
\i \l QDomImplementation -- Information about the features of the DOM implementation
\i \l QDomNamedNodeMap -- Collection of nodes that can be accessed by name
\i \l QDomNode -- The base class for all nodes of the DOM tree
\i \l QDomNodeList -- List of QDomNode objects
\i \l QDomNotation -- Represents an XML notation
\i \l QDomProcessingInstruction -- Represents an XML processing instruction
\i \l QDomText -- Represents textual data in the parsed XML document
\i \l QXmlAttributes -- XML attributes
\i \l QXmlContentHandler -- Interface to report logical content of XML data
\i \l QXmlDeclHandler -- Interface to report declaration content of XML data
\i \l QXmlDefaultHandler -- Default implementation of all XML handler classes
\i \l QXmlDTDHandler -- Interface to report DTD content of XML data
\i \l QXmlEntityResolver -- Interface to resolve extern entities contained in XML data
\i \l QXmlErrorHandler -- Interface to report errors in XML data
\i \l QXmlInputSource -- The input data for the QXmlReader subclasses
\i \l QXmlLexicalHandler -- Interface to report lexical content of XML data
\i \l QXmlLocator -- The XML handler classes with information about the actual parsing position
\i \l QXmlNamespaceSupport -- Helper class for XML readers which want to include namespace support
\i \l QXmlParseException -- Used to report errors with the QXmlErrorHandler interface
\i \l QXmlReader -- Interface for XML readers (i.e. for SAX2 parsers)
\i \l QXmlSimpleReader -- Implementation of a simple XML reader (a SAX2 parser)
\endlist

\target namespaces
\section1 An introduction to namespaces

Parts of the Qt XML module documentation assume that you are
familiar with XML namespaces. Here we present a brief introduction;
skip to \link #conventions "Qt XML
documentation conventions" \endlink if you know this material.

Namespaces are a concept introduced into XML to allow a more modular design.
With their help data processing software can easily
resolve naming conflicts in XML documents.

Consider the following example:

\code
<document>
<book>
  <title>Practical XML</title>
  <author title="Ms" name="Eris Kallisti"/>
  <chapter>
    <title>A Namespace Called fnord</title>
  </chapter>
</book>
</document>
\endcode

Here we find three different uses of the name \e title. If you wish
to process this document you will encounter problems
because each of the \e titles should be displayed in a different manner --
even though they have the same name.

The solution would be to have some means of identifying the
first occurrence of \e title as the title of a book, i.e.
to use the \e title element of a
book namespace to distinguish it from for example the chapter title, e.g.:
\code
<book:title>Practical XML</book:title>
\endcode

\e book in this case is
a \e prefix denoting the namespace.

Before we can apply a
namespace to element or attribute names we must declare it.

Namespaces are URIs like \e http://trolltech.com/fnord/book/.
This does not mean that data must be available at this
address; the URI is simply used to provide a unique name.

We declare namespaces in the same way as
attributes; strictly speaking they \e are attributes.
To make for example \e http://trolltech.com/fnord/ the document's
default XML namespace \e xmlns we write

\code
xmlns="http://trolltech.com/fnord/"
\endcode

To distinguish the \e http://trolltech.com/fnord/book/ namespace
from the default, we have to supply it with a prefix:

\code
xmlns:book="http://trolltech.com/fnord/book/"
\endcode

A namespace that is declared like this can be applied
to element and attribute names by prepending the appropriate
prefix and a ":" delimiter. We have already seen this with
the \e book:title element.

Element names without a prefix belong to the default namespace.
This rule does not apply to attributes: an attribute
without a prefix does not belong to any of the declared
XML namespaces at all.
Attributes always belong to the "traditional" namespace
of the element in which they appear. A "traditional" namespace
is not an XML namespace, it simply means that all attribute names
belonging to one element must be different. Later we will see how
to assign an XML namespace to an attribute.

Due to the fact that attributes without prefixes are not in any
XML namespace there is
no collision between the attribute \e title (that belongs to the
\e author element) and for example the \e title element within a \e chapter.

Lets clarify matters with an example:
\code
<document xmlns:book = 'http://trolltech.com/fnord/book/'
          xmlns      = 'http://trolltech.com/fnord/' >
<book>
  <book:title>Practical XML</book:title>
  <book:author xmlns:fnord = 'http://trolltech.com/fnord/'
               title="Ms"
               fnord:title="Goddess"
               name="Eris Kallisti"/>
  <chapter>
    <title>A Namespace Called fnord</title>
  </chapter>
</book>
</document>
\endcode

Within the \e document element we have two namespaces declared.
The default namespace \e http://trolltech.com/fnord/
applies to the \e book element, the \e chapter element,
the appropriate \e title element and of course to \e document itself.

The \e book:author and \e book:title elements
belong to the namespace with the
URI \e http://trolltech.com/fnord/book/.

The two \e book:author attributes \e title and \e name have no XML namespace
assigned.
They are only members of the "traditional" namespace of the element
\e book:author, meaning that for example two \e title attributes
in \e book:author are forbidden.

In the above example we circumvent the last rule by adding a \e title
attribute from the \e http://trolltech.com/fnord/ namespace to \e book:author:
the \e fnord:title comes from the namespace with the prefix \e fnord
that is declared in the \e book:author element.

Clearly the \e fnord namespace has the same namespace URI as the
default namespace. So why didn't we simply use the
default namespace we'd already declared? The answer is quite complex:
\list
\i attributes without a prefix don't belong to any XML namespace at all,
even not to the default namespace;
\i additionally omitting the prefix would lead to a \e title-title clash;
\i writing it as \e xmlns:title would declare a new namespace with
the prefix \e title instead of applying the default \e xmlns namespace.
\endlist

With the Qt XML classes elements and attributes can be accessed in two ways: either
by refering to their qualified names consisting of the namespace prefix
and the "real" name (or \e local name) or
by the combination of local name and namespace URI.

More information on XML namespaces can be found at
\l http://www.w3.org/TR/REC-xml-names/.

\target conventions
\section1 Conventions used in Qt XML documentation

The following terms are used to distinguish the parts of names within the context of
namespaces:
\list
\i  The \e {qualified name}
    is the name as it appears in the document. (In the above example \e
    book:title is a qualified name.)
\i  A \e {namespace prefix} in a qualified name
    is the part to the left of the ":".  (\e book is the namespace prefix in
    \e book:title.)
\i  The \e {local part} of a name (also refered to as the \e {local name}) appears
    to the right of the ":".
    (Thus \e title is the local part of \e book:title.)
\i  The \e {namespace URI} ("Uniform Resource Identifier") is a unique
    identifier for a namespace. It looks like a URL
    (e.g. \e http://trolltech.com/fnord/ ) but does not require
    data to be accessible by the given protocol at the named address.
\endlist

Elements without a ":" (like \e chapter in the example) do not have a
namespace prefix. In this case the local part and the qualified name
are identical (i.e. \e chapter).

*/
