/****************************************************************************
** $Id: xml.doc,v 2.45 1999/10/05 12:12:08 arnt Exp $
**
** Documentation on the xml module
**
** Copyright (C) 2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page xml.html

\title Qt XML Module

The XML module provides a well-formed XML parser with SAX2 (Simple API for
XML) interface plus an implementation of the DOM Level 1 (Document Object
Model).

This document assumes that you are familiar with the XML terminology. It
provides you with information on how to use the XML classes in Qt. 
It is however not intended to teach XML basics. If you wish to learn 
more about XML please refer to other sources like
e.g. <a href="http://www.w3.org/XML/">http://www.w3.org/XML/</a>.


<h2><a name="overview">Overview of the XML architecture in Qt</h2>

The Qt XML Module provides two interfaces for XML: SAX2 and DOM Level 1.

SAX2 is a very popular Java interface for XML parsers that was also adopted
for other languages. The Qt interface follows the design of the Java
interface. Its naming scheme was however adjusted to fit the Qt naming conventions.
Details on SAX2 can be found at
<a href="http://www.megginson.com/SAX/">http://www.megginson.com/SAX/</a>.

Support for SAX2 filters and the reader factory are missing at the moment.
The Qt implementation furthermore omits all SAX1 compatibility classes 
present in the Java interface. 

Refer to the "<a href="xml-sax.html">How to use the Qt SAX2 classes</a>" document
for further information on how to use SAX2 with Qt.

DOM Level 1 is a W3C Recommendation for XML interfaces. Details and the
specification of DOM Level 1 can be found at
<a href="http://www.w3.org/DOM/">http://www.w3.org/DOM/</a>.


<h2><a name="introSAX2">Introduction to SAX2</h2>

The SAX2 interface is a event-driven mechanism to provide the user with
document information. "Event" in this context has nothing to do with the
term "event" you probably know from windowing systems; it means that the
parser reports certain document information while parsing the document.
These reported information is referred to as "event".

The parser in SAX2 is usually referred to as "reader". There is an
abstract class, \l QXmlReader, that defines the interface for potential readers.
At the moment Qt provides one reader implementation, \l
QXmlSimpleReader.

The SAX2 interface provides serial access to the information in the
document; i.e. the reader parses the document serially and 
reports the parsing events as soon as it finds appropriate information in the
document.

The reader reports parsing events through special handler classes. The user
has to install a certain handler class if he or she wants to be informed about
parsing events. The following handler classes are available:
<ul>
<li>\l QXmlContentHandler
    reports events related to the content of a document (e.g. the start tag,
    or characters).
<li>\l QXmlDTDHandler
    reports events related to the DTD (e.g. notation declarations).
<li>\l QXmlErrorHandler
    reports errors or warnings that occurred during parsing.
<li>\l QXmlEntityResolver
    reports external entities during parsing and allows the user to resolve
    external entities him- or herself instead of leaving it to the reader.
<li>\l QXmlDeclHandler
    reports further DTD related events (e.g. attribute declarations).
    Usually users are not interested in them, but under certain circumstances
    this class comes handy.
<li>\l QXmlLexicalHandler
    reports events related to the lexical structure of the document
    (the beginning of the DTD, comments etc.). Occasionally this
    might be useful.
</ul>

All of these are abstract classes describing the interface. With
\l QXmlDefaultHandler "do nothing" default implementations are provided 
so that a user needs to implement only functions he or she is
interested in. 

To read input XML data a special class \l QXmlInputSource is used.

Apart from the already mentioned classes the following SAX2 support classes 
provide the user with useful functionality:
<ul>
<li> \l QXmlAttributes
     is used to pass attributes in a start element event.
<li> \l QXmlLocator
     is used to obtain the actual parsing position of an event.
<li> \l QXmlNamespaceSupport
     is used to easily implement namespace support for a reader.
</ul>

For a more detailed description see the document
"<a href="xml-sax.html">How to use the Qt SAX2 classes</a>".


<h2><a name="introDOM">Introduction to DOM</h2>

DOM provides an interface to access and change the content and structure of
an XML file. It makes a hierarchical view of the document (tree) available. All
nodes in this tree are subclasses of \l QDomNode.

The following table lists all node classes and their potential children classes.
<table>
<tr>
    <th align="left">Node type</th>
    <th align="left">Possible children</th>
</tr>
<tr>
    <td>\l QDomDocument </td>
    <td>\l QDomElement (maximum one), \l QDomProcessingInstruction,
	\l QDomComment, \l QDomDocumentType </td>
</tr>
<tr>
    <td>\l QDomDocumentFragment </td>
    <td>\l QDomElement, \l QDomProcessingInstruction, \l QDomComment,
	\l QDomText, \l QDomCDATASection, \l QDomEntityReference </td>
</tr>
<tr><td>\l QDomDocumentType </td>
    <td>no children </td>
</tr>
<tr><td>\l QDomEntityReference </td>
    <td>\l QDomElement, \l QDomProcessingInstruction, \l QDomComment,
	\l QDomText, \l QDomCDATASection, \l QDomEntityReference </td>
</tr>
<tr><td>\l QDomElement </td>
    <td>\l QDomElement, \l QDomText, \l QDomComment,
	\l QDomProcessingInstruction, \l QDomCDATASection,
	\l QDomEntityReference </td>
</tr>
<tr><td>\l QDomAttr </td>
    <td>\l QDomText, \l QDomEntityReference </td>
</tr>
<tr><td>\l QDomProcessingInstruction </td>
    <td>no children </td>
</tr>
<tr><td>\l QDomComment </td>
    <td>no children </td>
</tr>
<tr><td>\l QDomText </td>
    <td>no children </td>
</tr>
<tr><td>\l QDomCDATASection </td>
    <td>no children </td>
</tr>
<tr><td>\l QDomEntity </td>
    <td>\l QDomElement, \l QDomProcessingInstruction, \l QDomComment,
	\l QDomText, \l QDomCDATASection, \l QDomEntityReference </td>
</tr>
<tr><td>\l QDomNotation </td>
    <td>no children </td>
</tr>
</table>

With \l QDomNodeList and \l QDomNamedNodeMap two collection classes 
are provided: \l QDomNodeList is a list of nodes
whereas \l QDomNamedNodeMap is used to handle unordered sets of nodes
(often used for attributes).

The \l QDomImplementation class allows the user to query features of the
DOM implementation.

To get started please refer to the \l QDomDocument documentation that
describes basic usage.

*/
