/****************************************************************************
** $Id: xml.doc,v 2.45 1999/10/05 12:12:08 arnt Exp $
**
** Documentation on the xml module
**
** Copyright (C) 2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page xml-sax.html

\title The Qt SAX2 implementation

<h2><a name="introSAX2">Introduction to SAX2</h2>

The SAX2 interface is an event-driven mechanism to provide the user with
document information. "Event" in this context has nothing to do with the
term "event" you probably know from windowing systems; it means that the
parser reports certain document information while parsing the document.
These reported information is referred to as "event".

To make it less abstract consider the following example:
\code 
<quote>To make it less abstract consider the following example:</quote>
\endcode

Whilst reading (a SAX2 parser is usually referred to as "reader") 
the above document three events would be triggered:
<OL>
<LI> A start tag occurs (<tt>&lt;quote&gt;</tt>).
<LI> Character data (i.e. text) is found.
<LI> An end tag is parsed (<tt>&lt;/quote&gt;</tt>).
</OL>

Each time such an event occurs the parser reports it so that 
a suitable event handling routine can be invoked.

Whilst this is a fast and simple approach to read XML documents
manipulation is difficult because data are not stored, simply handled
and discarded serially. This is when the <a href="xml-dom.html">DOM interface</a> 
comes handy.

The Qt XML module provides an
abstract class, \l QXmlReader, that defines the interface for potential 
SAX2 readers.
At the moment Qt ships with one reader implementation, \l
QXmlSimpleReader.

The reader reports parsing events through special handler classes. In Qt
the following ones are available:
<ul>
<li>\l QXmlContentHandler
    reports events related to the content of a document (e.g. the start tag
    or characters).
<li>\l QXmlDTDHandler
    reports events related to the DTD (e.g. notation declarations).
<li>\l QXmlErrorHandler
    reports errors or warnings that occurred during parsing.
<li>\l QXmlEntityResolver
    reports external entities during parsing and allows the user to resolve
    external entities him- or herself instead of leaving it to the reader.
<li>\l QXmlDeclHandler
    reports further DTD related events (e.g. attribute declarations).
    Usually users are not interested in them, but under certain circumstances
    this class comes handy.
<li>\l QXmlLexicalHandler
    reports events related to the lexical structure of the document
    (the beginning of the DTD, comments etc.). Occasionally this
    might be useful.
</ul>

These classes are abstract classes describing the interface. The
\l QXmlDefaultHandler class provides a "do nothing" default implementation for
all of them. Therefore users need to overload only the
QXmlDefaultHandler functions they are interested in. 

To read input XML data a special class \l QXmlInputSource is used.

Apart from the already mentioned ones the following SAX2 support classes 
provide the user with useful functionality:
<ul>
<li> \l QXmlAttributes
     is used to pass attributes in a start element event.
<li> \l QXmlLocator
     is used to obtain the actual parsing position of an event.
<li> \l QXmlNamespaceSupport
     is used to easily implement namespace support for a reader.
</ul>


<h2><a name="namespaces">Namespaces</a></h2>   

<a href="xml.html#namespaces">Namespaces</a> do not change the parsing behavior. 
They are only reported through the handler.

You can configure the behavior of the reader when it comes to namespace
processing. This is done with the features
\c http://xml.org/features/namespaces and
\c http://xml.org/features/namespace-prefixes (for details on features see
the following section "<a href="#featuresAndProperties">Features and properties</a>").
 
There are four reporting behaviors that are influenced by these features:
<ol>
<li>The namespace prefix and local part of elements and attributes are
    reported.
<li>The qualified names of elements and attributes are reported.
<li>The startPrefixMapping() and endPrefixMapping() functions of the
    \l QXmlContentHandler are called.
<li>Attributes that declare namespaces (i.e. the attribute \c xmlns and
    attributes starting with \c xmlns:) are reported.
</ol>
 
<a name="sax2namespaces"></a>
SAX2 requires the following behavior:
<table border="1">
<tr>
    <th>namespaces</th><th>namespace-prefixes</th>
    <th>Namespace prefix and local part</th><th>Qualified names</th>
    <th>Prefix mapping</th><th>xmlns attributes</th>
</tr>
<tr>
    <td>TRUE</td><td>FALSE</td>
    <td>Yes</td><td>Unknown</td>
    <td>Yes</td><td>No</td>
</tr>
<tr>
    <td>TRUE</td><td>TRUE</td>
    <td>Yes</td><td>Yes</td>
    <td>Yes</td><td>Yes</td>
</tr>
<tr>
    <td>FALSE</td><td>TRUE</td>
    <td>Unknown</td><td>Yes</td>
    <td>Unknown</td><td>Yes</td>
</tr>
</table>
The combination of both features (namespaces and namespace-prefixes) set to
FALSE is illegal.
 
\l QXmlSimpleReader implements the following behavior:
<table border="1">
<tr>
    <th>namespaces</th><th>namespace-prefixes</th>
    <th>Namespace prefix and local part</th><th>Qualified names</th>
    <th>Prefix mapping</th><th>xmlns attributes</th>
</tr>
<tr>
    <td>TRUE</td><td>FALSE</td>
    <td>Yes</td><td>Yes</td>
    <td>Yes</td><td>No</td>
</tr>
<tr>
    <td>TRUE</td><td>TRUE</td>
    <td>Yes</td><td>Yes</td>
    <td>Yes</td><td>Yes</td>
</tr>
<tr>
    <td>FALSE</td><td>TRUE</td>
    <td>No</td><td>Yes</td>
    <td>No</td><td>Yes</td>
</tr>
</table>
 
By default 
\c http://xml.org/features/namespaces is set to \c TRUE and
\c http://xml.org/features/namespace-prefixes is \c FALSE.
 
                                                                  

<h2><a name="featuresAndProperties">Features and properties</a></h2>
 
SAX2 allows you to set and query features and properties of an XML reader.
 
Features are simply options that change the behavior of the reader. Every
feature has a unique name, represented as an URI, and a value which can be
TRUE or FALSE.
 
Properties are a more general concept. They also have a unique name,
represented as an URI, but their value is \c void*. Thus nearly everything
can be used as a property value. This concept involves some danger,
though: there are no means to ensure type-safety; the user must take care
that he or she passes the correct type. Properties are useful if a reader supports
special handler classes.

<!-- example! -->
 
The URIs used for features and properties often look like URLs, e.g. 
\c http://xml.org/sax/features/namespace. This does not mean that whatsoever
data is required at this address. It is simply a way to define unique names.
 
Everybody can define and use new SAX2 features and properties for his or her
readers. Mandatory is the
support of the two \c http://xml.org/sax/features/namespaces and \c
http://xml.org/sax/features/namespace-prefixes features. Property support is not
required.
 
Features can be set or queried using the following three functions:
\l QXmlReader::setFeature(), \l QXmlReader::feature() and \l
QXmlReader::hasFeature().
 
Similar functions are used to set or query properties:
\l QXmlReader::setProperty(), \l QXmlReader::property() and \l
QXmlReader::hasProperty().                      


<h2>Further reading</h2>

For a practical example on how to use the Qt SAX2 classes see the 
"<a href="xml-sax-walkthrough.html">tagreader walkthrough</a>".

More information about XML (e.g. <a href="xml.html#namespaces">namespaces</a>)
can be found in the <a href="xml.html">introduction to the Qt XML module</a>.

*/
