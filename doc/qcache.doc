/****************************************************************************
** $Id: qcache.doc,v 2.0 1996/09/24 10:15:15 agulbra Exp $
**
** QCache and QCacheIterator class documentation
**
** Copyright (C) 1996 by Troll Tech AS.  All rights reserved.
**
*****************************************************************************/

// Not documented!!!

/*****************************************************************************
  QCache documentation
 *****************************************************************************/

/*sukk
  class QCache qcache.h

  \brief The QCache class is a template class that provides a cache based on \c char* keys.

  \ingroup collection
  \ingroup tools

  QCache is implemented as both a template and a macro class. Define a
  template instance QCache\<X\> to create a cache that operates on
  pointers to X, or X*.

  A cache is a LRU (least recently used) list consisting of cache items.
  Each cache item has a cost. The sum of item costs (\link
  QCache::totalCost() total cost) must not exceed the \link
  QCache::maxCost() maximum cache cost\endlink. If inserting a new item
  will make the total cost go above the maximum cost, the cache removes
  the least recently used items until the total cost gets below the
  maximum cost.

  The cache operation \link QCache::find() find\endlink references an
  item, i.e. it takes it out of the LRU list and re-inserts it as the
  first list item. Items that are seldom referenced are at the end of the
  list and will be thrown out when the cache must make room for a new
  item.

  A cache is a collection that associates an item with a key and a cost.
  The key is used for inserting and looking up an item.  QCache has
  \c char* keys. The cache has a maximum cost. The cost sum of all items
  must not exceed the maximum cache cost.

  The dictionary has very fast insertion and lookup.

  Example:
  \code
    #include <QCache.h>
    #include <stdio.h>

    void main()
    {
	QCache<char> dict( 17, FALSE );	// case insensitive dict of char*

	dict.insert( "France", "Paris" );
	dict.insert( "Russia", "Moscow" );
	dict.insert( "Norway", "Oslo" );

	printf( "%s\n", dict["Norway"] );
	printf( "%s\n", dict["FRANCE"] );
	printf( "%s\n", dict["russia"] );

	if ( !dict["Italy"] )
	    printf( "Italy not defined\n" );
    }
  \endcode

  Program output:
  \code
	Oslo
	Paris
	Moscow
	Italy not defined
  \endcode

  The dictionary in our example maps \c char* keys to \c char* items.
  Note that the mapping is case insensitive (set in the
  \link QCache::QCache() constructor\endlink).  QCache implements the \link
  operator[] [] operator\endlink to lookup an item.

  A QCache can also be instantiated through a macro expansion, but this
  is necessary only for compilers that do not support templates. See the
  \link collection.html collection classes documentation\endlink
  for a general discussion on template-based versus macro-based collections.

  QCache is implemented by QGDict as a hash array with a fixed number of
  entries. Each array entry points to a singly linked list of buckets, in
  which the dictionary items are stored.

  When an item is inserted with a key, the key is converted (hashed) to
  an integer index into the hash array. The item is inserted before the
  first bucket in the list of buckets.

  Looking up an item is normally very fast. The key is again hashed to an
  array index. Then QCache scans the list of buckets and returns the item
  found or null if the item was not found.  You cannot insert null pointers
  into a dictionary.

  The size of the hash array is very important. In order to get good
  performance, you should use a suitably large \link primes.html prime
  number\endlink.  Suitable means equal to or larger than the maximum
  expected number of dictionary items.

  Items with equal keys are allowed.  When inserting two items with the
  same key, only the last inserted item will be visible (last in, first out)
  until it is removed.

  Example:
  \code
    #include <QCache.h>
    #include <stdio.h>

    void main()
    {
	QCache<char> dict;		// case sensitive dict of char*

	dict.insert( "Germany", "Berlin" );
	dict.insert( "Germany", "Bonn" );

	printf( "%s\n", dict["Germany"] );
	dict.remove( "Germany" );	// Oct 3rd 1990
	printf( "%s\n", dict["Germany"] );
    }
  \endcode

  Program output:
  \code
	Bonn
	Berlin
  \endcode

  The QCacheIterator class can traverse the dictionary contents, but only
  in an arbitrary order.  Multiple iterators may independently traverse the
  same dictionary.

  Calling setAutoDelete(TRUE) for a dictionary tells it to delete items
  that are removed .  The default is to not delete items when they are
  removed.

  When inserting an item into a dictionary, only the pointer is copied, not
  the item itself. This is called a shallow copy. It is possible to make the
  dictionary copy all of the item's data (known as a deep copy) when an
  item is inserted.  insert() calls the virtual function
  QCollection::newItem() for the item to be inserted.
  Inherit a dictionary and reimplement it if you want deep copies.

  When removing a dictionary item, the virtual function
  QCollection::deleteItem() is called.  QCache's default implementation
  is to delete the item if auto-deletion is enabled.

  \sa QCacheIterator, QIntDict,
      \link collection.html Collection Classes\endlink
 ----------------------------------------------------------------------------*/


/*sukk
  \fn QCache::QCache( int size, bool caseSensitive, bool copyKeys )
  Constructs a dictionary with the following properties:
  \arg \e size is the size of the internal hash array.
  \arg \e caseSensitive specifies whether to use case sensitive lookup or not.
  \arg \e copyKeys specifies whether to copy the key strings.

  Setting \e size to a suitably large \link primes.html prime
  number\endlink (equal to or greater than the expected number of entries)
  makes the hash distribution better and hence the loopup faster.

  Setting \e caseSensitive to TRUE will treat "abc" and "Abc" as different
  keys.  Setting it to FALSE will make the dictionary ignore case.
  Case insensitive comparision includes only the 26 standard letters A..Z,
  not French or German accents or Scandinavian letters.

  Setting \e copyKeys to TRUE will make the dictionary copy the key
  when an item is inserted.  Setting it to FALSE will make the dictionary
  only use the pointer to the key.
*/

/*sukk
  \fn QCache::QCache( const QCache<type> &dict )
  Constructs copy of \e dict.

  Each item in \e dict are inserted into this dictionary.
  Only the pointers are copied (shallow copy).
*/

/*sukk
  \fn QCache::~QCache()
  Removes all items from the dictionary and destroys it.

  All iterators that access this dictionary will be reset.

  \sa setAutoDelete()
*/

/*sukk
  \fn QCache<type> &QCache::operator=(const QCache<type> &dict)
  Assigns \e dict to this dictionary and returns a reference to this
  dictionary.

  This dictionary is first cleared, then each item in \e dict is inserted
  into this dictionary.
  Only the pointers are copied (shallow copy), unless newItem() has been
  reimplemented().
*/

/*sukk
  \fn uint QCache::count() const
  Returns the number of items in the dictionary.
  \sa isEmpty()
*/

/*sukk
  \fn uint QCache::size() const
  Returns the size of the internal hash array (as specified in the
  constructor).
  \sa count()
*/

/*sukk
  \fn bool QCache::isEmpty() const
  Returns TRUE if the dictionary is empty, i.e. count() == 0, otherwise
  FALSE.
  \sa count()
*/

/*sukk
  \fn void QCache::insert( const char *key, const type *item )
  Inserts the \e key with the \e item into the dictionary.

  The key does not have to be a unique dictionary key.  If multiple items
  are inserted with the same key, only the last item will be visible.

  Null items are not allowed.

  \sa replace()
*/

/*sukk
  \fn void QCache::replace( const char *key, const type *item )
  Replaces an item which has a key equal to \e key with \e item.

  If the item does not already exist, it will be inserted.

  Null items are not allowed.

  Equivalent to:
  \code
    QCache<char> dict;
	...
    if ( dict.find(key) )
	dict.remove( key );
    dict.insert( key, item );
  \endcode

  If there are two or more items with equal keys, then the last inserted
  of these will be replaced.

  \sa insert()
*/

/*sukk
  \fn bool QCache::remove( const char *key )
  Removes the item associated with \e key from the dictionary.
  Returns TRUE if successful, or FALSE if the key does not exist in the
  dictionary.

  If there are two or more items with equal keys, then the last inserted
  of these will be removed.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  All dictionary iterators that refer to the removed item will be set to
  point to the next item in the dictionary traversing order.

  \sa take(), clear(), setAutoDelete()
*/

/*sukk
  \fn type *QCache::take( const char *key )
  Takes the item associated with \e key out of the dictionary without
  deleting it (even if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled).

  If there are two or more items with equal keys, then the last inserted
  of these will be taken.

  Returns a pointer to the item taken out, or null if the key does not
  exist in the dictionary.

  All dictionary iterators that refer to the taken item will be set to
  point to the next item in the dictionary travering order.

  \sa remove(), clear(), setAutoDelete()
*/

/*sukk
  \fn void QCache::clear()
  Removes all items from the dictionary.

  The removed items are deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  All dictionary iterators that access this dictionary will be reset.

  \sa remove(), take(), setAutoDelete()
*/

/*sukk
  \fn type *QCache::find( const char *key ) const
  Returns the item associated with \e key, or null if the key does not
  exist in the dictionary.

  This function uses an internal hashing algorithm to optimize lookup.

  If there are two or more items with equal keys, then the last inserted
  of these will be found.

  Equivalent to the [] operator.

  \sa operator[]
*/

/*sukk
  \fn type *QCache::operator[]( const char *key ) const
  Returns the item associated with \e key, or null if the key does not
  exist in the dictionary.

  This function uses an internal hashing algorithm to optimize lookup.

  If there are two or more items with equal keys, then the last inserted
  of these will be found.

  Equivalent to the find() function.

  \sa find()
*/

/*sukk
  \fn void QCache::statistics() const
  Debugging-only function that prints out the dictionary distribution
  using debug().
*/


/*****************************************************************************
  QCacheIterator documentation
 *****************************************************************************/

/*sukk
  \class QCacheIterator QCache.h
  \brief The QCacheIterator class provides an iterator for QCache collections.

  \ingroup collection
  \ingroup tools

  QCacheIterator is implemented as both a template and a macro class.
  Define a template instance QCacheIterator\<X\> to create a
  dictionary iterator that operates on QCache\<X\> (dictionary of X*).

  Example:
  \code
    #include <QCache.h>
    #include <stdio.h>

    void main()
    {
	QCache<char> dict( 17, FALSE );	// case insensitive dict of char*

	dict.insert( "France", "Paris" );
	dict.insert( "Russia", "Moscow" );
	dict.insert( "Norway", "Oslo" );

	QCacheIterator<char> it( dict ); // iterator for dict

        while ( it.current() ) {
	    printf( "%s -> %s\n", it.currentKey(), it.current() );
	    ++it;
	}
    }
  \endcode

  Program output:
  \code
	Russia -> Moscow
	Norway -> Oslo
	France -> Paris
  \endcode

  Note that the traversal order is arbitrary, you are not guaranteed the
  order above.

  A QCacheIterator can also be instantiated through a macro expansion, but this
  is necessary only for compilers that do not support templates. See the
  \link collection.html collection classes documentation\endlink
  for a general discussion on template-based versus macro-based collections.

  Multiple iterators may independently traverse the same dictionary.
  A QCache knows about all iterators that are operating on the dictionary.
  When an item is removed from the dictionary, QCache update all iterators
  that are referring the removed item to point to the next item in the
  traversing order.

  \sa QCache, \link collection.html Collection Classes\endlink
*/

/*sukk
  \fn QCacheIterator::QCacheIterator( const QCache<type> &dict )
  Constructs an iterator for \e dict.  The current iterator item is
  set to point on the first item in the \e dict.
*/

/*sukk
  \fn QCacheIterator::~QCacheIterator()
  Destroys the iterator.
*/

/*sukk
  \fn uint QCacheIterator::count() const
  Returns the number of items in the dictionary this iterator operates on.
  \sa isEmpty()
*/

/*sukk
  \fn bool QCacheIterator::isEmpty() const
  Returns TRUE if the dictionary is empty, i.e. count() == 0, otherwise FALSE.
  \sa count()
*/

/*sukk
  \fn type *QCacheIterator::toFirst()
  Sets the current iterator item to point to the first item in the
  dictionary and returns a pointer to the item.
  Sets the current item to null and returns null if if the dictionary is
  empty.
*/

/*sukk
  \fn QCacheIterator::operator type *() const
  Cast operator. Returns a pointer to the current iterator item.
  Same as current().
*/

/*sukk
  \fn type *QCacheIterator::current() const
  Returns a pointer to the current iterator item.
*/

/*sukk
  \fn const char *QCacheIterator::currentKey() const
  Returns a pointer to the key for the current iterator item.
*/

/*sukk
  \fn type *QCacheIterator::operator()()
  Makes the succeeding item current and returns the original current item.

  If the current iterator item was the last item in the dictionary or if it
  was null, null is returned.
*/

/*sukk
  \fn type *QCacheIterator::operator++()
  Prefix ++ makes the succeeding item current and returns the new current
  item.

  If the current iterator item was the last item in the dictionary or if it
  was null, null is returned.
*/

/*sukk
  \fn type *QCacheIterator::operator+=( uint jump )
  Returns the item \e jump positions after the current item, or null if
  it is beyond the last item.  Makes this the current item.
*/
