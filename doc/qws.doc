/*! \page install-qws.html
<title>Qt/Embedded Installation</title>
</head><body bgcolor="#ffffff">

\postheader

<h1>Installing Qt/Embedded</h1>


<p>
This installation procedure is written for Linux/i386. It may need
to be modified for other platforms.

<h3>  Unpack the archive if you have not done so already:</h3>
<pre>
	cd &lt;anywhere&gt;
	gunzip qt-embedded.tar.gz    # uncompress the archive
	tar xf qt-embedded.tar       # unpack it
</pre>

  This document assumes that the archive is installed as <tt>~/qt-embedded</tt>.
</p>

<h3>  Install tmake</h3>

You need the newest tmake. (including linux-qws-g++) 
This should be available at the same place as the qt-embedded archive.

<p>
  This document assumes that tmake is installed as <tt>~/tmake</tt>.
</p>

<h3>  Set some environment variables </h3>

<pre>
	QTDIR			- wherever you installed Qt
	PATH			- to locate moc, tmake and so on
	LD_LIBRARY_PATH		- for the shared Qt library
	TMAKEDIR
	TMAKEPATH
</pre>
    for example...
<pre>
	export QTDIR=$HOME/qt-embedded
	export TMAKEDIR=$HOME/tmake

	export PATH=$QTDIR/bin:$PATH:$TMAKEDIR/bin
	export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
	export TMAKEPATH=$TMAKEDIR/lib/linux-qws-g++
</pre>

  
<p>
  Remember to re-source environment files, if necessary.
</p>


<h3> Compile the Qt/Embedded library and examples</h3>

<pre>
	cd ~/qt-embedded
	make
</pre>

<h3> Enable framebuffer support</h3>

<p>
   You may need to recompile your kernel to enable the framebuffer.
   This document does not describe how to do this; the file
   HOWTO-Framebuffer contains a short description. (You should see
   a penguin logo at boot time when the frame buffer is enabled.)

<p>
   For Matrox G100/G200/G400 use the matrox frame buffer driver.

<p>
   For Mach64 and most other cards, use the vesafb driver.


<p>
   Note that some cards are only supported in VGA16 mode, this will
   not work with the current version of Qt/Embedded, since VGA/16 is
   not yet supported. You may need to upgrade your kernel, or even
   switch to an experimental kernel.

<p>
   The frame buffer must also be enabled with a boot parameter. See
   <tt>/usr/src/linux/Documentation/fb</tt> for details.

<p>
   The fbset program, which should be included in Linux distributions,
   may be used to switch video modes without rebooting the system. The
   video mode active when the server is started will be used. (8-bit
   modes are still experimental.) NOTE: fbset does not work with the vesafb
   driver.
</p>

<h3> Change permissions</h3>

<p>
   To run Qt/Embedded, you need write access to the framebuffer device
   <tt>/dev/fb0</tt>. 

<p>
   You also need read access to the mouse device. (Note that
   <tt>/dev/mouse</tt> is normally a symbolic link; the actual mouse device
   must be readable.)
</p>



<h3> How to run the demonstration program</h3>

<p>
   Log into a virtual console and do:

<pre>
	cd ~/qt-embedded/
   	./start-demo
</pre>
  

<h3> Miscellaneous troubleshooting and known bugs</h3>

<p>
  To kill gpm, run the following command as root:
  
<pre>
	gpm -k
</pre>

<p>
  In some cases, if the server does not work, it will work when run as root.

<p>
  Some example programs may not compile with gcc 2.95.


<p>
  Show processes using the framebuffer:

<pre>
    fuser -v /dev/fb0
</pre>

<p>
  Kill such processes:
<pre>
    fuser -vk /dev/fb0
</pre>
  or harsher:
<pre>
    fuser -k -KILL /dev/fb0
</pre>


<p>
  Show existing semaphores:

<pre>
    ipcs            
</pre>
 
<p>
  Remove semaphores:

<pre>
    ipcrm
</pre>

<p>
  The communication between client and server is done through the
  named pipe <tt>/tmp/.QtEmbedded</tt>; sometimes it may need to be deleted
  (eg. if you run Qt/Embedded as root then later as an unprivileged user).
</p>


<h3> Customization  </h3>

<p>
   The Qt/Embedded library can be further reduced in size by removing
   unneeded features. The file <tt>qt-embedded/src/tools/qfeatures.h</tt>
   defines macros of the form <tt>QT_FEATURE_XXXX</tt>. To remove a feature
   from Qt/Embedded, set the macro to 0.

*/

/*! \page fonts-qws.html
<title>Qt/Embedded Fonts</title>
</head><body bgcolor="#ffffff">

\postheader

<h1>Fonts in Qt/Embedded</h1>

<h2>Supported formats</h2>

<p>
Qt/Embedded supports four font formats:

<ul>
 <li><b>TrueType (TTF)</b> - the scalable font technology now standard
	    on MS-Windows and Apple Macintosh, and becoming popular on X11.
 <li><b>Postscript Type1 (PFA/PFB)</b> - scalable fonts often used by printers,
	    also popular on X11. These are similar in functionality to TTF
	    fonts and are not discussed further in this document.
 <li><b>Bitmap Distribution Format fonts (BDF)</b> - a standard format
	    for non-scalable fonts. A large number of BDF fonts are
	    supplied as part of standard X11 distributions - most of
	    these can be used with Qt/Embedded.
 <li><b>Qt Prerendered Font (QPF)</b> - a light-weight non-scalable font
	    format specific to Qt/Embedded.
</ul>

<p>
Support for each of these font formats,
except QPF which is always enabled,
can be enabled or disabled independently by using the
<a href=features.html>Qt/Embedded Features Definition</a>
There is support in
Qt/Embedded for writing a QPF font file from any font, thus you can
initially enable TTF and BDF formats, save QPF files for the fonts and
sizes you need, then remove TTF and BDF support.

<h2>Memory requirements</h2>

<p>
With TTF fonts, each character in the font at a given point size is
only rendered when first used in a drawing or metrics operation. With
BDF fonts all characters are rendered when the font is used.
With QPF fonts, the characters are stored in the same format as Qt uses
when drawing.

<p>
As an example, a 10-point Times font containing the ASCII characters uses
around 1300 bytes when stored in QPF format.

<p>
The QPF format is designed to allow memory-mapped usage of the font,
therefore its RAM consumption can be reduced even further.
In Qt/Embedded 2.2.0, this memory-mapping is not done.

<p>
The scalable fonts use a much larger amount of memory per-font, but
these fonts can give a memory saving if many different sizes of each
font are needed.

<h2>Smooth fonts</h2>

<p>
TTF, PFA, and QPF fonts can be rendered as <i>smooth</i> anti-aliased
fonts to give superior readability. The difference between smooth
and non-smooth fonts is illustrated below.

<center>
<table>
<tr align=center>
<td><img src=smooth.png><td><img src=nonsmooth.png>
<tr align=center>
<td>Smooth<td>Non-smooth
</table>
</center>

<p>
In Qt/Embedded 2.2.0, smooth fonts use 8 times as much memory as non-smooth
fonts (8 times as much). This multiplier will be reduced to a configurable
2 or 4 (ie. 4-level and 16-level shading rather than the current excessive
256-level shading).

<h2>Unicode</h2>

All fonts used by Qt/Embedded use the Unicode character encoding. Most fonts
available today do not actually contain all the Unicode characters, but they
do use the Unicode characters ordering. A single <i>complete</i> 16-point
Unicode font uses over 1Mb of memory.

<h2>The font definition file</h2>

When Qt/Embedded applications run, they look for a file called
<tt>$QWSDIR/etc/fonts/fontdir</tt> or
<tt>/usr/local/qt-embedded/etc/fonts/fontdir</tt>. This file defines the
fonts available to the application. It has the following format:

<p>
<blockquote>
   <i>name</i> <i>file</i> <i>renderer</i> <i>italic</i> <i>weight</i> <i>size</i> <i>flags</i>
</blockquote>

<p>
where:

<blockquote>
<p>
<table>
<tr><td valign=top>      <i>name</i> <td> <b>Helvetica</b>, <b>Times</b>, etc.
<tr><td valign=top>      <i>file</i> <td> <b>helvR0810.bdf</b>, <b>verdana.ttf</b>, etc.
<tr><td valign=top>  <i>renderer</i> <td> <b>BDF</b> or <b>TTF</b>
<tr><td valign=top>    <i>italic</i> <td> <b>y</b> or <b>n</b>
<tr><td valign=top>    <i>weight</i> <td> <b>50</b> is Normal, <b>75</b> is Bold, etc.
<tr><td valign=top>      <i>size</i> <td> <b>0</b> for scalable or 10 times pointsize (eg. <b>120</b> for 12pt)
<tr><td valign=top>     <i>flags</i> <td> Flag characters:<br>
			<b>s</b> = smooth (anti-aliased)<br>
			<b>u</b> = unicode range when saving (default is Latin 1)<br>
			<b>a</b> = ascii range when saving (default is Latin 1)<br>
</table>
</blockquote>

<p>
The font definition file does not specify QPF fonts - these are loaded 
directly from the directory containing the <tt>fontdir</tt> file, and must
be named <i>name</i>_<i>size</i>_<i>weight</i><i>italicflag</i>.qpf, where:

<blockquote>
<p>
<table>
<tr><td valign=top>      <i>name</i> <td> <b>helvetica</b>, <b>times</b>, etc. (lowercase)
<tr><td valign=top>      <i>size</i> <td> 10 times pointsize (eg. <b>120</b> for 12pt)
<tr><td valign=top>    <i>italicflag</i> <td> <b>i</b> for italic or nothing.
<tr><td valign=top>    <i>weight</i> <td> <b>50</b> is Normal, <b>75</b> is Bold, etc.
</table>
</blockquote>

<p>
If an application is run with the <tt>-savefonts</tt> command-line option,
then whenever a font other than a QPF font is used, a corresponding QPF file
is saved. This allows you to easily find the font usage of your applications
and to generate QPF files so that you can eventually reduce the memory
usage of your applications by disabling TTF and BDF support from Qt/Embedded.
option, or by modifying the initialization of <tt>qws_savefonts</tt> in
<tt>kernel/qapplication_qws.cpp</tt> of the Qt/Embedded library source code.
In extreme cases of memory-saving, it is possible to save partially-rendered
fonts (eg. only the characters in "Product Name<sup>TM<sup>") if you are
certain that these are the only characters you will need from the font.
See QMemoryManager::savePrerenderedFont() for this functionality.

<h2>Notes</h2>

<p>
The font definition file, naming conventions for font files, and the format
of QPF files may change in versions of Qt/Embedded after 2.2.0.

<p>
When enabled, Qt/Embedded uses the powerful FreeType2 library to implement
TrueType and Type1 support.

*/
