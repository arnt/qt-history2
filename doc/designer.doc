/****************************************************************************
** Introduction to Qt Designer
**
** Copyright (C) 2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page designer.html

\title Qt GUI Designer

Qt Designer is a visual design tool that makes designing and
implementing user interfaces a lot easier.

<img src="designer.png" alt="Screenshot of Qt Designer">

Here's a brief overview of its key features. For further information,
start \c{Qt Designer} and select \e Manual from the \e Help menu.

\section1 New Features for Qt 3.0

Qt Designer was a pure dialog editor in Qt 2.2 but has now been
extended to provide the full functionality of a GUI design tool.

This includes the ability to lay out main windows with menus and
toolbars. Actions can be edited within Qt Designer and then plugged
into toolbars and menu bars via drag and drop. Splitters can now be
used in a way similar to layouts to group widgets horizontally or
vertically.

In Qt 2.2, many of the dialogs created by Qt Designer had to be
subclassed to implement functionality beyond the predefined signal and
slot connections. Whilst the subclassing approach is still fully supported,
Qt Designer now offers an alternative: a plugin for editing 
slots. The editor offers features such as syntax highlighting,
completion, parentheses matching and incremental search.

The functionality of Qt Designer can now be extended via plugins.
Using Qt Designer's interface or by implementing one of the provided
interfaces in a plugin, a two way communication between plugin and Qt
Designer can be established. This functionality is used to implement
plugins for custom widgets, so that they can be used as real widgets
inside the designer.

Qt Designer fully supports Qt's SQL module. All SQL widgets can be
laid out within Qt Designer, and relationships can be established
between controls visually. Many interactions can be defined purely in
terms of Qt's signals/slots mechanism directly in Qt Designer.

Basic support for project management has been added. This allows you
to read and edit *.pro files, add and remove files to/from the project
and do some global operations on the project. You can now open the
project file and have one-click access to all the *.ui forms in the
project.

In addition to generating code via uic, Qt Designer now supports the
dynamic creation of widgets directly from XML user interface
description files (*.ui files) at runtime. This eliminates the need of
recompiling your application when the GUI changes, and could be used
to enable your customers to do their own customizations. Technically,
the feature is provided by a new class, QWidgetFactory in the
QResource library.

\section1 Dynamic geometry management for full i18n and cross-platform support

  The designer offers all the strength of the Qt layout system with a
  a well-designed point and click interface. Geometry management makes
  an application adjust automatically to language changes, different
  GUI styles on different target platforms and different desktop
  settings like font sizes.

\section1 Visual access to Qt's signal/slot mechanism

 In the designer, you can connect signals to slots by dragging a line
  with the connection tool.

\section1 Internationalization (I18n)

 In its output, the designer quotes user strings with a
  tr-macro. Thus it works well together with Qt's built-in or any
  other i18n system.

\section1 Nested widgets/layouts

 Both widgets and layouts can be nested in a hierarchy, just like in
  hand-crafted Qt code.

\section1 Unlimited undo and redo

 The unlimited undo and redo system makes it simple to try different
  arrangements of the widgets until the result satisfies you.

\section1 Convenient editing of all widget properties

 Qt Designer uses a generic and very powerful property editor for
  most widget properties. Special editors for some widgets (like
  listboxes or comboboxes) allow you to fill these widgets with
  content without writing extra code.

\section1 Direct tabfocus editing

 A graphical tab-order tool makes it possible to edit the tabfocus
  chain intuitively with point and click.

\section1 Ensures unique keyboard accelerators

  Qt Designer checks that your keyboard shortcuts don't clash.

\section1 XML format

 The designer's native file format (*.ui files) is a well-defined true
  XML format.

\section1 Clean extensibility through subclassing

 No need to modify generated code. If you need extended functionality
  inside a generated dialog, you can easily do this by subclassing.
  With Qt 3.0 you can also write code directly in \e{Qt Designer} so
  you don't have to subclass if you don't want to.

\section1 User Interface Compiler (uic) integrates into your build system

 No need to add generated code to the source repository of your
  version control system. With Qt Designer, you only deal with ui
  files. The uic compiler will then integrate the necessary C++ code
  on the fly during compile time.

\section1 Works together with Visual Studio (tm)

 If you use Visual Studio (tm), we provide
  tighter integration with a plugin.

\section1 Searchable and indexed documentation and help system, includes the Qt API reference

 Hit <b>F1</b> to launch \e{Qt Assistant} the new help browser that
 supports and search capabilities. 

If you are interested in the Qt Professional Edition or the
Qt Enterprise Edition, please write to
\link mailto:sales@trolltech.com sales@trolltech.com\endlink. In
case you have any bug reports, suggestions or wishes, send them to 
\link mailto:qt-bugs@trolltech.com qt-bugs@trolltech.com\endlink. Other mail can
be sent to \link mailto:info@trolltech.com info@trolltech.com\endlink.



*/
