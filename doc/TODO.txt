General clean-up
----------------

64-bit-clean sizeof and size_t
  On 64-bit platforms sizeof and size_t are 64-bit and cannot be cast to
  uint. Review code and API to get 64-bit-clean.

Check > 2Gb file access is possible on 64-bit platforms
  Offsets must be ulong, not uint, etc.

const-correctness for char* (Dimitri)
  Some functions in the API return char* instead of const char*.
  Change to const char* in the API and the code. Remove some casts that
  had been added as a workaround to avoid relevant warnings.
  This is illegal C/C++:
    char *str = "constant!"

Pointer to pointer to member function
  Avoid it in the code and the API. Use a pointer to member function. This
  way a cast will be an implicit reinterpret_cast.
  QMember* QConnection::member()
  should be
  QMember QConnection::member().

Use _OS_*_ and _CC_*_
  Use _OS_*_ and _CC_*_ everywhere or create new Q_* flags.
  For example
    #if defined(BSD4_4)
  should be something like
    #if defined(_OS_FREEBSD_) && defined(...
  or
    #if defined(Q_BSD44_SOCKET_API)
  At least this is how it was done until now because this level of indirection
  had proved useful in the past...


Specific enhancements
---------------------

QRect
  Make 0x0 rectangles valid and fix any problems that may arise from it.

PNG
  Get Qt to work with libpng 1.0.8. Send a bug report if the bug is in
  libpng 1.0.8 and find a workaround. Use functions instead of direct struct
  access to maintain binary compatibility with all libpng versions.

PNG
  Two images from the PNG test suite are still not read correctly.

Drag and Drop
  Still doesn't work (sometimes crashes?) when dragging from or dropping to
  non-Qt programs:
    Can't paste or drop to NEdit.
    Can't drag from ClearCase.
    Asks useless question when dropping Netscape's "Location".
    Can't paste from Netscape.


Feature Requests
----------------

QFileDialog
  setSelectedFilter( const QString&/int ) to set used filter
  set filter to initial file-extension

QSizeGrip (Win32) (Volker)
  Outlined resize as set in the system properties

QButtonGroup
  Should work not only for QRadioButtons

QProgressBar
  setPercentageVisible( bool )

QProgressBar
  Add a "Busy" indicator for operations which have no concept of
  "percentage" like waiting for a network operation to be completed.

QScrollView
  Add a AutoOneFit resize policy.

QApplication
  something like bool hasPostedEvents() (info/arc-07/15087)

New functionality
-----------------

Docking widgets (Reggie)
    QDockArea and QDockWidget (or QToolWindow) to allow real
    docking (floating and inside a dockarea) like in Visual
    Studio. Also have resizeable dockwindows and all that
    stuff. Toolbars will then be just such
    toolwindows/dockwidgets.

Plugin System (Volker)
    System for dynamically loading plugins. First used by designer
    but offered as Qt class. Find a solution to fix qAddPostRoutine
    and static meta object problems with unloading libs (maybe have a
    look at the hacks done in KDE to see all problems)

BiDi (Lars)
    BiDi algorithm for all text displaying. ASA the QTextView,
    QTextBrowser, QTextEdit, QRichText part described in
    "Extending existing functionality" is working start integrating
    the BiDi stuff into that.

Database classes (Dave)
    Description missing here...

QSettings (Brad, Volker)
    QSetting class to store Qt settings in a XML tree
    structure. Offer API so that Qt apps can use that to store
    settings. Allow to read/write all C++ and Qt datatypes
    (QVariant). On windows do it either as Registry frontend or also
    using XML. When done, get rid of all static QApplication methods
    which are just settings and replace that by having a QSetting
    object. Also write a tool which allows to set the Qt relevant
    settings (default style, double click interval, etc.)


Extending existing functionality
--------------------------------

Action/Mainwindow editor (Reggie)
    Actioneditor for QMainWindow so that one can drag'n'drop
    actions in a special mode between the actin editor (which shows
    all available actions) and the menus and toolbars. Allows also
    creating new toolbars and menus (?) on the fly. Like you can do
    in Visual Studio and MS-Office

QTextView, QTextBrowser, QTextEdit, QRichText (Matthias, Reggie)
    Merge the old QRichText engine with the new one from QTextEdit
    (done already), and make QTextView,QTextBrowser, QTextEdit and
    QSimpleRichText using this engine. Then get rid of QMultiLineEdit

Text drawing in Qt (Matthias, Reggie, Lars)
    After the above (QRichText merging) and the BiDi stuff is
    done, use QSimpleRichText or directly QRichText for all text
    drawing in Qt, like QPainter's magic draw_format_text. Probably
    don't use it everywhere (too much memory wasting), but everwhere
    where more than one line, richtext or BiDi is displayed.

QThread (Volker, Brad)
    Evaluate possibility of event-loop passing and provide API for
    accessing low-level properties (e.g. priority and rights)
