/****************************************************************************
** $Id: collect.doc,v 2.9 1999/01/28 15:40:17 warwick Exp $
**
** Qt collection classes documentation
**
** Copyright (C) 1992-1999 Troll Tech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Troll Tech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** Licensees with valid Qt Professional Edition licenses may distribute and
** use this file in accordance with the Qt Professional Edition License
** provided at sale or upon request.
**
** See http://www.troll.no/pricing.html or email sales@troll.no for
** information about the Professional Edition licensing, or see
** http://www.troll.no/qpl/ for QPL licensing information.
**
*****************************************************************************/

/*!
\page collection.html

<title>Qt Collection Classes</title>
</head><body bgcolor="#ffffff">

\postheader

<h1 align=center>Collection Classes</h1><br clear="all">

A collection class is a class that can contain a number of items in a
certain data structure and perform operations on the contained items;
insert, remove, find etc.

Qt has many collection classes:
<ul>
<li> \link QCache QCache\endlink and \link QIntCache QIntCache\endlink;
	LRU (least recently used) cache structures.
<li> \link QDict QDict\endlink, \link QIntDict QIntDict\endlink, and
	    \link QPtrDict QPtrDict\endlink; dictionary structures.
<li> \link QList QList\endlink; a doubly linked list structure.
<li> \link QQueue QQueue\endlink; a FIFO (first in, first out) queue structure.
<li> \link QStack QStack\endlink; a LIFO (last in, first out) stack structure.
<li> \link QVector QVector\endlink; a vector structure.
</ul>

Some of these classes have corresponding iterators.  An iterator
is a class for safely traversing the items in a collection:
<ul>
<li> \link QCacheIterator QCacheIterator\endlink and
	\link QIntCacheIterator QIntCacheIterator\endlink 
<li> \link QDictIterator QDictIterator\endlink,
	\link QIntDictIterator QIntDictIterator\endlink, and
	\link QPtrDictIterator QPtrDictIterator\endlink 
<li> \link QListIterator QListIterator\endlink 
</ul>

The collection classes work with pointers to items.  Qt has an array
template class, \link QArray QArray\endlink, which stores the items
directly in the array.  QArray only works for classes that do not have a
constructor, a destructor or any virtual functions.

<h2>Architecture</h2>

There are three internal base
classes; \link QGCache QGCache\endlink, \link QGDict QGDict\endlink and
\link QGList QGList\endlink that operate on \c void* pointers.  A thin
template layer implements the actual collections by casting item pointers
to and from \c void*.

This strategy allows Qt's templates to be very economical on space
(instantiating one of these templates adds only inline-able calls to
the base classes), while it does not hurt performance too much.  Qt's
templates do not afford as much scope for optimization as the STL
templates do, so for applications where speed is critical and code
size is less important, the STL is preferable.

<h2>A List Example</h2>

This example shows how to store Employee items in a list and prints
them out in the reverse order:

\code
    #include <qlist.h>
    #include <qstring.h>
    #include <stdio.h>

    class Employee
    {
    public:
        Employee( const char *name, int salary ) { n=name; s=salary; }
        const char *name()   const		 { return n; }
        int	    salary() const		 { return s; }
    private:
        QString     n;
        int         s;
    };

    void main()
    {
	QList<Employee> list;		// list of pointers to Employee
	list.setAutoDelete( TRUE );	// delete items when they are removed

	list.append( new Employee("Bill", 50000) );
	list.append( new Employee("Steve",80000) );
	list.append( new Employee("Ron",  60000) );

	QListIterator<Employee> it(list); // iterator for employee list
	for ( it.toLast(); it.current(); --it) ) {
	    Employee *emp = it.current();
	    printf( "%s earns %d\n", emp->name(), emp->salary() );
        }
    }
\endcode

Program output:
\code
	Ron earns 60000
	Steve earns 80000
	Bill earns 50000
\endcode


<h2>Managing Collection Items</h2>

All collections inherit the \link QCollection QCollection\endlink base
class.  This class knows only the number of items in the collection and
the delete strategy.

Items in a collection are by default not deleted when they are removed
from the collection. The \link QCollection::setAutoDelete()
QCollection::setAutoDelete()\endlink function specifies the delete
strategy. In the list example, we enable auto-deletion to make the list
delete the items when they are removed from the list.

When inserting an item into a collection, only the pointer is copied, not
the item itself. This is called a shallow copy. It is possible to make the
collection copy all of the item's data (known as a deep copy) when an item
is inserted.  All collection functions that insert an item call the
virtual function \link QCollection::newItem()
QCollection::newItem()\endlink for the item to be inserted.  Inherit a
collection and reimplement it if you want to have deep copies in your
collection.

When removing an item from a list, the virtual function \link
QCollection::deleteItem() QCollection::deleteItem()\endlink is called.
The default implementation in all collection classes is to delete the item
if auto-deletion is enabled.


<h2>Usage</h2>

A collection class, for instance QList\<type\>, defines a
collection of \e pointers to \e type objects.  The pointer (*) is
implicit.

We discuss \link QList QList\endlink here, but the same applies for all
collection classes and all collection class iterators.

Template instantiation:
\code
  QList<Employee> list;		// wherever the list is used
\endcode

The item's class or type, Employee in our example, must be defined prior
to the list definition.

\code
  // Does not work: Employee is not defined
  class Employee;
  QList<Employee> list;

  // This works: Employee is defined before it is used
  class Employee {
    ...
  };
  QList<Employee> list;
\endcode

<h2>Iterators</h2>

Although \link QList QList\endlink has member functions to traverse the
list, it can often be better to make use of an iterator. \link
QListIterator QListIterator\endlink is very safe and can traverse lists
that are being modified at the same time.  Multiple iterators can work
independently on the same collection.

A QList has an internal list of all iterators that are currently operating
on the list.  When a list entry is removed, the list updates all iterators
to point to this entry.

The \link QDict QDict\endlink and \link QCache QCache\endlink collections
have no traversal functions. To traverse the these collections, you must
use \link QDictIterator QDictIterator\endlink or \link QCacheIterator
QCacheIterator\endlink .


<h2>Predefined Collections</h2>

Qt has the following predefined collection classes:
<ul>
<li> String lists; \link QStrList QStrList\endlink and
	\link QStrIList QStrIList\endlink (\link qstrlist.h qstrlist.h\endlink)
<li> String vectors; \link QStrVec QStrVec\endlink and
	\link QStrIVec QStrIVec\endlink (\link qstrvec.h qstrvec.h\endlink)
</ul>

Note that the "String" referred to above is just a regular C char*, not
a QString or QCString.

<h2>Comparison with the STL</h2>

We often get questions about why Qt does not use the STL, and why Qt's
container templates are provided at all.  Here are the major factors
why we use and provide these templates: <ul>

<li>Qt's container templates add less space when instantiated than the
STL ones do.  Size is important for a library, and Qt contains many
instantiations of QDict, QList etc.

<li>Qt's containers are often not as fast as the STL's, for several
reasons.  This is however not very important for Qt, as they are used
in code that doesn't need to be very fast.  (The speed-critical data
structures in Qt are mostly caches - either QCache instantiations or
custom-written, custom-optimized ones.)

<li>Qt's containers are much more portable than the STL.  When we
started writing Qt, STL was far away in the future, and when we
released Qt 1.0, no widely-used compilers could compile the STL.  For
a library such as Qt, it is of course very important to compile on the
widest possible variety of compilers.

<li>Qt's containers are documented because we document our APIs, and
the containers and their documentation are provided as parts of Qt's
external API because we saw no reason to hide them.

<ul>

There are also other differences, but the ones above are the important
reasons behind our decision to write, use and provide these classes.

*/
