/****************************************************************************
** $Id: collect.doc,v 1.10 1995/12/20 22:02:09 hanord Exp $
**
** Qt collection classes documentation
**
** Copyright (C) 1995 by Troll Tech AS.  All rights reserved.
**
*****************************************************************************/

/*!
\page collection.html

<title>Qt Collection Classes</title>
</head><body>
<h1>Collection Classes</h1>
<hr>

<h2>Introduction</h2>

A collection class is a class that can contain a number of items in a
certain data structure and perform operations on the contained items;
insert, remove, find etc.

Qt has many collection classes:
<ul>
<li> \link QCache QCache\endlink and \link QIntCache QIntCache\endlink;
	LRU (least recently used) cache structures.
<li> \link QDict QDict\endlink and \link QIntDict QIntDict\endlink;
	dictionary structures.
<li> \link QList QList\endlink; a doubly linked list structure.
<li> \link QQueue QQueue\endlink; a FIFO (first in, first out) queue structure.
<li> \link QStack QStack\endlink; a LIFO (last in, first out) stack structure.
<li> \link QVector QVector\endlink; a vector structure.
</ul>

Some of these classes have corresponding iterators.  An iterator
is a class for safely traversing the items in a collection:
<ul>
<li> \link QCacheIterator QCacheIterator\endlink and
	\link QIntCacheIterator QIntCacheIterator\endlink 
<li> \link QDictIterator QDictIterator\endlink and
	\link QIntDictIterator QIntDictIterator\endlink 
<li> \link QListIterator QListIterator\endlink 
</ul>

The collection classes work with pointers to items.  Qt has an array
template class, \link QArray QArray\endlink, which stores the items
directly in the array.  QArray only works for classes that do not have a
constructor, a destructor or any virtual functions.


<h2>Architecture</h2>

Basically, there are two different implementation strategies for
collection classes.
<ol>
<li>The collection can only contain objects that inherit a special
    collectable class.  This is the Smalltalk way of doing it.
<li>The collection is a template (generic) class.
    Specific collections must be instantiated from the template.
    This allows any object to be stored in a collection.
</ol>

In Qt, we have chosen the second approach.  There are three internal base
classes; \link QGCache QGCache\endlink, \link QGDict QGDict\endlink and
\link QGList QGList\endlink that operate on \c void* pointers.  A thin
template layer implements the actual collections by casting item pointers
to and from \c void*.

Some compilers do not support C++ templates. For these compilers,
we have implemented macro expansions that emulate templates.


<h2>A List Example</h2>

This example shows how to store Employee items in a list and prints
them out in the reverse order:

\code
    #include <qlist.h>
    #include <qstring.h>
    #include <stdio.h>

    class Employee
    {
    public:
        Employee( const char *name, int salary ) { n=name; s=salary; }
        const char *name()   const		 { return n; }
        int	    salary() const		 { return s; }
    private:
        QString     n;
        int         s;
    };

    void main()
    {
	QList<Employee> list;		// list of pointers to Employee
	list.setAutoDelete( TRUE );	// delete items when they are removed

	list.append( new Employee("Bill", 50000) );
	list.append( new Employee("Steve",80000) );
	list.append( new Employee("Ron",  60000) );

	QListIterator<Employee> it(list); // iterator for employee list
	for ( it.toLast(); it.current(); --it) ) {
	    Employee *emp = it.current();
	    printf( "%s earns %d\n", emp->name(), emp->salary() );
        }
    }
\endcode

Program output:
\code
	Ron earns 60000
	Steve earns 80000
	Bill earns 50000
\endcode


<h2>Managing Collection Items</h2>

All collections inherit the \link QCollection QCollection\endlink base
class.  This class knows only the number of items in the collection and
the delete strategy.

Items in a collection are by default not deleted when they are removed
from the collection. The \link QCollection::setAutoDelete()
QCollection::setAutoDelete()\endlink function specifies the delete
strategy. In the list example, we enable auto-deletion to make the list
delete the items when they are removed from the list.

When inserting an item into a collection, only the pointer is copied, not
the item itself. This is called a shallow copy. It is possible to make the
collection copy all of the item's data (known as a deep copy) when an item
is inserted.  All collection functions that insert an item call the
virtual function \link QCollection::newItem()
QCollection::newItem()\endlink for the item to be inserted.  Inherit a
collection and reimplement it if you want to have deep copies in your
collection.

When removing an item from a list, the virtual function \link
QCollection::deleteItem() QCollection::deleteItem()\endlink is called.
The default implementation in all collection classes is to delete the item
if auto-deletion is enabled.


<h2>Templates and Macros</h2>

A template-based collection, for instance QList\<type\>, defines a
collection of \e pointers to \e type objects.  The pointer (*) is
implicit.

We discuss \link QList QList\endlink here, but the same applies for all
collection classes and all collection class iterators.

Template instantiation:
\code
  QList<Employee> list;		// wherever the list is used
\endcode

The item's class or type, Employee in our example, must be defined prior
to the list definition.

\code
  // Does not work: Employee is not defined
  class Employee;
  QList<Employee> list;

  // This works: Employee is defined before it is used
  class Employee {
    ...
  };
  QList<Employee> list;
\endcode

The list can also be instantiated through a macro expansion.
This is necessary only for compilers that do not support templates.

Macro instantiation:
\code
  declare(QListM,Employee);	// declare once (for instance in a .h file)
    ...
  QListM(Employee) list;	// wherever the list is used
\endcode

If you want to make your code work for compilers that do not have
template support, but use templates if they are available, you
can use \c typedef:

\code
    ...
  #if defined(USE_TEMPLATECLASS)
  typedef QListT<Employee>	   EmployeeList;
  #else
  typedef declare(QListM,Employee) EmployeeList;
  #endif

  void main()
  {
      EmployeeList list;	// list of pointers to Employee
      ...
\endcode

\c USE_TEMPLATECLASS is defined in qglobal.h.

QListT refers to the QList template and QListM refers to the QList macro.
QList defaults to QListT if templates are supported, QListM otherwise.

We recommend using templates, because macro collections are harder to
debug.  C++ debuggers understand templates but not macros.


<h2>Iterators</h2>

Although \link QList QList\endlink has member functions to traverse the
list, it can often be better to make use of an iterator. \link
QListIterator QListIterator\endlink is very safe and can traverse lists
that are being modified at the same time.  Multiple iterators can work
independently on the same collection.

A QList has an internal list of all iterators that are currently operating
on the list.  When a list entry is removed, the list updates all iterators
to point to this entry.

The \link QDict QDict\endlink and \link QCache QCache\endlink collections
have no traversal functions. To traverse the these collections, you must
use \link QDictIterator QDictIterator\endlink or \link QCacheIterator
QCacheIterator\endlink .


<h2>Predefined Collections</h2>

Qt has the following predefined collection classes:
<ul>
<li> String lists; \link QStrList QStrList\endlink and
	\link QStrIList QStrIList\endlink (\link qstrlist.h qstrlist.h\endlink)
<li> String vectors; \link QStrVec QStrVec\endlink and
	\link QStrIVec QStrIVec\endlink (\link qstrvec.h qstrvec.h\endlink)
</ul>

*/
