/****************************************************************************
** $Id: qlist.doc,v 1.5 1995/12/13 13:25:41 hanord Exp $
**
** QList and QListIterator class documentation
**
** Copyright (C) 1995 by Troll Tech AS.  All rights reserved.
**
*****************************************************************************/


/*****************************************************************************
  QList documentation
 *****************************************************************************/

/*----------------------------------------------------------------------------
  \class QList qlist.h
  \brief The QList class is a template collection for doubly linked lists.

  \ingroup collection

  QList is implemented as both a template and a macro class. Define a
  template instance QList<X> to create a list that operates on pointers
  to X, or X*.

  Example:
  \code
    #include <qlist.h>
    #include <qstring.h>
    #include <stdio.h>

    class Employee
    {
    public:
        Employee( const char *name, int salary )
	    { empname = name;  empsal = salary; }
        const char *name()   const	{ return empname; }
        int	    salary() const	{ return empsal; }
    private:
        QString     empname;
        int         empsal;
    };

    void main()
    {
	QList<Employee> list;		// list of pointers to Employee
	list.setAutoDelete( TRUE );	// delete items when they are removed

	list.append( new Employee("Bill", 50000) );
	list.append( new Employee("Steve",80000) );
	list.append( new Employee("Ron",  60000) );

	Employee *emp;
	for ( emp=list.first(); emp != 0; emp=list.next() )
	    printf( "%s earns %d\n", emp->name(), emp->salary() );
    }
  \endcode

  The program output is:
  \code
	Bill earns 50000
	Steve earns 80000
	Ron earns 60000
  \endcode

  The list item's class or type, Employee in our example, must be defined
  prior to the list definition. Some compilers allow a QList<X> before
  X is defined and assume that X has no destructor.

  \code
    // Bad code: X's destructor will never be called
    class X;
    QList<X> list;

    // Good code: X is defined before it is used
    class X {
 	...
    };
    QList<X> list;
  \endcode

  A list can also be instantiated through a macro expansion, but this
  is necessary only for compilers that do not support templates. See the
  \link collectionclasses.html collection classes documentation\endlink
  for a discussion on macro-based collections.

  Macro expansion:
  \code
      ...
    declare(QListM,Employee);		// must declare the list

    void main()
    {
	QListM(Employee) list;		// list of pointers to Employee
      ...
  \endcode

  If you want to make your code work for compilers that do not have
  template support, but use templates if they are available, you
  can make a \c typedef'd list:

  \code
      ...
    #if defined(USE_TEMPLATECLASS)
    typedef QList<Employee> EmployeeList;
    #else
    typedef declare(QListM,Employee) EmployeeList;
    #endif

    void main()
    {
	EmployeeList list;		// list of pointers to Employee
      ...
  \endcode
  
  The list class is indexable and has a \link at() current index\endlink
  and a \link current() current item\endlink.  The first item corresponds
  to index 0.  The current index is -1 if the current item is null.

  QList has several member functions for traversing the list, but using
  a QListIterator can be more practical. Multiple list iterators may
  traverse the same list, independent of each other and independent of
  the current list item.

  In the example above, we make the call setAutoDelete(TRUE).
  Enabling auto-deletion tells the list to delete items that are removed
  from the list.  The default is to not delete items when they are
  removed, but that would cause a memory leak in our example since we have
  no other references to the list items.

  List items are stored as \c void* in the internal QLNode, which also
  keeps the pointers to the next and previous list items.  The functions
  currentNode(), removeNode() and takeNode() operate directly on the
  QLNode, but they should be used with care.

  When inserting items into a list, only the pointer is copied, not the
  item itself. This is called a shallow copy. It is possible to make the
  list copy all of the item's data (deep copy) when an item is inserted,
  because insert(), inSort() and append() call the virtual function
  QCollection::newItem() for the item to be inserted. Reimplement it if
  you want to have deep copies in your list.

  When an item is removed from the list, the virtual function
  QCollection::deleteItem() is called.  QList's default implementation
  is to delete the item if auto-deletion is enabled.

  The virtual function QGList::compareItems() can be reimplemented to
  compare two list items. This function is called from all list functions
  that need to compare list items, for instance remove(const type*).
  If you only want to deal with pointers, there are functions that
  compare pointers instead, for instance removeRef(const type*).
  These functions are somewhat faster than those that call compareItems().

  The QStrList class in qstrlist.h is a list of \c char*.  QStrList is
  a good example of a list that reimplements newItem(), deleteItem() and
  compareItems()

  \sa QListIterator, \link collectionclasses.html collection classes\endlink
 ----------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------
  \fn QList::QList()
  Constructs an empty list.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QList::QList( const QList<type> &list )
  Constructs copy of \e list.

  Each items in \e list is appended to this list.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QList::~QList()
  Removes all items from the list and destroys the list.

  All list iterators that access this list will be reset.

  \sa setAutoDelete()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QList<type> &QList::operator=(const QList<type> &list)
  Assigns \e list to this list and returns a reference to this list.

  This list is first cleared, then each items in \e list is appended to
  this list.  Only the pointers are copied, unless newItem() has been
  reimplemented().
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn uint QList::count() const
  Returns the number of items in the list.
  \sa isEmpty()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::isEmpty() const
  Returns TRUE if the list is empty, i.e. count() == 0, or FALSE if it is
  not empty.
  \sa count()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::insert( uint index, const type *item )
  Inserts the \e item at the position \e index in the list.

  Returns TRUE if successful, or FALSE if \e index is out of range.
  The valid range is 0 - count() inclusive.  The item is appended
  if \e index == count().

  The inserted item becomes the current list item.

  \sa append(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn void QList::inSort( const type *item )
  Inserts the \e item at its sorted position in the list.

  The sort order depends on the virtual QGList::compareItems() function.
  All items must be inserted with inSort() to maintain the sorting order.

  The inserted item becomes the current list item.

  \sa insert(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn void QList::append( const type *item )
  Inserts the \e item at the end of the list.

  The inserted item becomes the current list item.

  \sa insert(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::remove( uint index )
  Removes the item at position \e index in the list.

  Returns TRUE if successful, or FALSE if \e index is out of range.
  The valid range is 0 - (count() - 1) inclusive.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The item after the removed item becomes the new current list item
  if the removed item is not the last item in the list.  If the
  last item is removed, the new last item becomes the current item.
  The current item is set to null if the list becomes empty.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa take(), clear(), setAutoDelete(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::remove()
  Removes the current list item.

  Returns TRUE if successful, or FALSE if the current item is null.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The item after the removed item becomes the new current list item
  if the removed item is not the last item in the list.  If the
  last item is removed, the new last item becomes the current item.
  The current item is set to null if the list becomes empty.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa take(), clear(), setAutoDelete(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::remove( const type *item )
  Removes the first occurence of \e item from the list.

  Returns TRUE if successful, or FALSE if the item cannot be found in the
  list.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The compareItems() function is called when looking for the \e item
  in the list. If compareItems() is not reimplemented, it is more
  efficient to call removeRef().

  The item after the removed item becomes the new current list item
  if the removed item is not the last item in the list.  If the
  last item is removed, the new last item becomes the current item.
  The current item is set to null if the list becomes empty.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa removeRef(), take(), clear(), setAutoDelete(), compareItems(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::removeRef( const type *item )
  Removes the first occurence of \e item from the list.

  Returns TRUE if successful, or FALSE if the item cannot be found in the
  list.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The list is scanned until the pointer \e item is found.  It is removed
  if it is found.

  Equivalent to:
  \code
    if ( list.findRef(item) != -1 )
	list.remove();
  \endcode

  The item after the removed item becomes the new current list item
  if the removed item is not the last item in the list.  If the
  last item is removed, the new last item becomes the current item.
  The current item is set to null if the list becomes empty.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa remove(), clear(), setAutoDelete(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn void QList::removeNode( QLNode *node )
  Removes the \e node from the list.

  This node must exist in the list, otherwise the program may crash.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The first item in the list will become the new current list item.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \warning Do not call this function unless you are an expert.

  \sa takeNode(), currentNode()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::removeFirst()
  Removes the first item from the list.
  Returns TRUE if successful, or FALSE if the list is empty.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The first item in the list becomes the new current list item.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa removeLast(), setAutoDelete(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::removeLast()
  Removes the last item from the list.
  Returns TRUE if successful, or FALSE if the list is empty.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The last item in the list becomes the new current list item.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa removeFirst(), setAutoDelete(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::take( uint index )
  Takes the item at position \e index out of the list without
  deleting it (even if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled).

  Returns a pointer to the item taken out of the list, or null if
  the index is out of range.
  The valid range is 0 - (count() - 1) inclusive.

  The item after the taken item becomes the new current list item
  if the taken item is not the last item in the list.  If the
  last item is taken, the new last item becomes the current item.
  The current item is set to null if the list becomes empty.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa remove(), clear(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::take()
  Takes the current item out of the list without deleting it (even if
  \link QCollection::setAutoDelete() auto-deletion\endlink is enabled).
  Returns a pointer to the item taken out of the list, or null if
  the current item is null.

  The item after the taken item becomes the new current list item
  if the taken item is not the last item in the list.  If the
  last item is taken, the new last item becomes the current item.
  The current item is set to null if the list becomes empty.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa remove(), clear(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::takeNode( QLNode *node )
  Takes the \e node out of the list without deleting its item (even if
  \link QCollection::setAutoDelete() auto-deletion\endlink is enabled).
  Returns a pointer to the item taken out of the list.

  This node must exist in the list, otherwise the program may crash.

  The first item in the list becomes the new current list item.

  \warning Do not call this function unless you are an expert.

  \sa removeNode(), currentNode()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn void QList::clear()
  Removes all items from the list.

  The removed items are deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  All list iterators that access this list will be reset.

  \sa remove(), take(), setAutoDelete()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::find( const type *item )
  Finds the first occurrence of \e item in the list.

  If the item is found, the list sets the current item to point to
  the found item and returns the index of this item.
  If the item is not found, the list sets the current item to null,
  the current index to -1 and returns -1.

  The compareItems() function is called when looking for the \e item
  in the list. If compareItems() is not reimplemented, it is more
  efficient to call findRef().

  \sa findNext(), findRef(), compareItems(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::findNext( const type *item )
  Finds the next occurrence of \e item in the list, starting from
  the current list item.

  If the item is found, the list sets the current item to point to
  the found item and returns the index of this item.
  If the item is not found, the list sets the current item to null,
  the current index to -1 and returns -1.

  The compareItems() function is called when looking for the \e item
  in the list. If compareItems() is not reimplemented, it is more
  efficient to call findNextRef().

  \sa find(), findNextRef(), compareItems(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::findRef( const type *item )
  Finds the first occurrence of \e item in the list.

  If the item is found, the list sets the current item to point to
  the found item and returns the index of this item.
  If the item is not found, the list sets the current item to null,
  the current index to -1 and returns -1.

  Calling this function is must faster than find(), because find()
  compares \e item with each list item using compareItems().
  This function only compares the pointers.

  \sa findNextRef(), find(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::findNextRef( const type *item )
  Finds the next occurrence of \e item in the list, starting from the
  current list item.

  If the item is found, the list sets the current item to point to
  the found item and returns the index of this item.
  If the item is not found, the list sets the current item to null,
  the current index to -1 and returns -1.

  Calling this function is must faster than findNext(), because findNext()
  compares \e item with each list item using compareItems().
  This function only compares the pointers.

  \sa findRef(), findNext(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn uint QList::contains( const type *item ) const
  Counts and returns the number of occurrences of \e item in the list.

  The compareItems() function is called when looking for the \e item
  in the list. If compareItems() is not reimplemented, it is more
  efficient to call containsRef().

  Does not affect the current list item.

  \sa containsRef(), compareItems()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn uint QList::containsRef( const type *item ) const
  Counts and returns the number of occurrences of \e item in the list.

  Calling this function is must faster than contains(), because contains()
  compares \e item with each list item using compareItems().
  This function only compares the pointers.

  Does not affect the current list item.

  \sa contains()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::at( uint index )
  Returns a pointer to the item at position \e index in the list, or
  null if the index is out of range.

  Sets the current list item to this item if \e index is valid.
  The valid range is 0 - (count() - 1) inclusive.

  This function is very efficient.  It starts scanning from the first
  item, last item or current item, whichever is closest to \e index.

  \sa current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::at() const
  Returns the index of the current list item.  The returned value is -1
  if the current item is null.
  \sa current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::current() const
  Returns a pointer to the current list item.  The current item may be
  null (implies that the current index is -1).
  \sa at()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QLNode *QList::currentNode() const
  Returns a pointer to the current list node.

  The node can be kept and removed later using removeNode().
  The advantage is that the item can be removed directly without
  searching the list.

  \warning Do not call this function unless you are an expert.

  \sa removeNode(), takeNode(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::getFirst() const
  Returns a pointer to the first item in the list, or null if the
  list is empty.

  Does not affect the current list item.

  \sa first(), getLast()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::getLast() const
  Returns a pointer to the first item in the list, or null if the
  list is empty.

  Does not affect the current list item.

  \sa last(), getFirst()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::first()
  Returns a pointer to the first item in the list and makes this the
  current list item, or null if the list is empty.
  \sa getFirst(), last(), next(), prev(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::last()
  Returns a pointer to the last item in the list and makes this the
  current list item, or null if the list is empty.
  \sa getLast(), first(), next(), prev(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::next()
  Returns a pointer to the item succeeding the current item.

  Returns null if the current items is null or equal to the last item.

  Makes the succeeding item current it is the last item or the current
  item is  null.

  \sa first(), last(), prev(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::prev()
  Returns a pointer to the item preceding the current item.

  Returns null if the current items is null or equal to the first item.

  Makes the preceding item current it is the first item or the current
  item is  null.

  \sa first(), last(), next(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn void QList::toVector( QGVector *vec ) const
  Stores all list items in the vector \e vec.

  The vector must be have the same item type, otherwise the result
  will be undefined.
 ----------------------------------------------------------------------------*/


/*****************************************************************************
  QListIterator documentation
 *****************************************************************************/

/*----------------------------------------------------------------------------
  \class QListIterator qlist.h
  \brief The QListIterator class provides an iterator for QList collections.

  \ingroup iterators

  QListIterator is implemented as both a template and a macro class.
  Defined a template instance QListIterator<X> to create a list iterator
  that operates on QList<X> (list of X*).

  Example:
  \code
    #include <qlist.h>
    #include <qstring.h>
    #include <stdio.h>

    class Employee
    {
    public:
        Employee( const char *name, int salary )
	    { empname = name;  empsal = salary; }
        const char *name()   const	{ return empname; }
        int	    salary() const	{ return empsal; }
    private:
        QString     empname;
        int         empsal;
    };

    void main()
    {
	QList<Employee> list;		  // list of pointers to Employee
	list.setAutoDelete( TRUE );	  // delete items when they are removed

	list.append( new Employee("Bill", 50000) );
	list.append( new Employee("Steve",80000) );
	list.append( new Employee("Ron",  60000) );

	QListIterator<Employee> it(list); // iterator for employee list
	for ( ; it.current(); ++it) ) {
	    Employee *emp = it.current();
	    printf( "%s earns %d\n", emp->name(), emp->salary() );
        }
    }
  \endcode

  The program output is:
  \code
	Bill earns 50000
	Steve earns 80000
	Ron earns 60000
  \endcode

  A macro expansion can be used instead of templates, but then you
  must first declare a QListIterator before using it.

  Macro expansion:
  \code
      ...
    declare(QListIteratorM,Employee);	  // must declare the list iterator

    void main()
    {
      ...
	QListIteratorM(Employee) it;	  // list of pointers to Employee
      ...
  \endcode

  See the \link QList QList documentation\endlink for how to combine
  templates and macros in the same code.

  Although QList has member functions to traverse the doubly linked list
  structure, using a list iterator is a much more robust way of traversing
  the list, because multiple list iterators can operate on the same list,
  independent of each other and independent of the current list item.
  An iterator has a current list item and can get the next and previous
  list items.  It can only traverse the list, never modify it.

  A QList knows about all list iterators that are operating on the list.
  When a list item is removed from the list, the list update all iterators
  that are pointing the removed item and set them to point to the new
  current item in the list.


  Example:
  \code
    #include <qlist.h>
    #include <qstring.h>
    #include <stdio.h>

    class Employee
    {
	...	// same as above
    };

    void main()
    {
	QList<Employee> list;		  // list of pointers to Employee
	list.setAutoDelete( TRUE );	  // delete items when they are removed

	list.append( new Employee("Bill", 50000) );
	list.append( new Employee("Steve",80000) );
	list.append( new Employee("Ron",  60000) );

	QListIterator<Employee> it(list);

	list.at( 1 );			  // current list item: "Steve"
        it.toLast();			  // it: "Ron"
	--it;				  // it: "Steve"

	  // Now, both the list and the iterator are referring the same item

	list.remove();
	printf( "%s\n", it.current()->name() );

	  // Output: "Ron"
    }
  \endcode

  The list iterator in our example is set to point to the new current
  list item when the current iterator item is removed.

  \sa QList, \link collectionclasses.html collection classes\endlink
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QListIterator::QListIterator( const QList<type> &list )
  Constructs an iterator for \e list.  The current iterator item is
  set to point on the first item in the \e list.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QListIterator::~QListIterator()
  Destroys the iterator.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn uint QListIterator::count() const
  Returns the number of items in the list.
  \sa isEmpty()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QListIterator::isEmpty() const
  Returns TRUE if the list is empty, i.e. count() == 0, or FALSE if it is
  not empty.
  \sa count()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QListIterator::atFirst() const
  Returns TRUE if the current iterator item is the first list item, otherwise
  FALSE.
  \sa toFirst(), atLast()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QListIterator::atLast() const
  Returns TRUE if the current iterator item is the last list item, otherwise
  FALSE.
  \sa toLast(), atFirst()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QListIterator::toFirst()
  Sets the current iterator item to point to the first list item and returns
  a pointer to the item.  Sets the current item to null and returns null if
  if the list is empty.
  \sa toLast(), atFirst()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QListIterator::toLast()
  Sets the current iterator item to point to the last list item and returns
  a pointer to the item.  Sets the current item to null and returns null if
  if the list is empty.
  \sa toFirst(), atLast()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QListIterator::operator type *() const
  Cast operator. Returns a pointer to the current iterator item.
  Same as current().
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QListIterator::current() const
  Returns a pointer to the current iterator item.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QListIterator::operator()()
  Makes the succeeding item current and returns the original current item.

  If the current iterator item was the last item in the list, or if it was
  null, null is returned.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QListIterator::operator++()
  Prefix ++ makes the succeeding item current and returns the new current
  item.

  If the current iterator item was the last item in the list, or if it was
  null, null is returned.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QListIterator::operator+=( uint jump )
  Returns the object \e jump positions after the current item, or null if
  it is beyond the last item.  Makes this the current item.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QListIterator::operator--()
  Prefix -- makes the preceding item current and returns the new current
  item.

  If the current iterator item was the first item in the list, or if it was
  null, null is returned.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QListIterator::operator-=( uint jump )
  Returns the object \e jump positions before the current item, or null if
  it is beyond the first item.  Makes this the current item.
 ----------------------------------------------------------------------------*/
