/****************************************************************************
** $Id: qlist.doc,v 1.2 1995/12/12 11:01:50 hanord Exp $
**
** QList and QListIterator class documentation
**
** Copyright (C) 1995 by Troll Tech AS.  All rights reserved.
**
*****************************************************************************/


/*----------------------------------------------------------------------------
  \class QList qlist.h
  \brief The QList class is a template collection for doubly linked lists.

  \ingroup collection

  The list class is indexable and has a \link at() current index\endlink
  and a \link current() current object\endlink.

  Use the QListIterator class for traversing the list.

  Example:
  \code
    // Template instantiation:
        QList<QWidget>  widgetList;	// list of pointers to QWidget

    // Macro instantiation:
        declare(QListM,QWidget);	// declare it once
	QListM(QWidget) widgetList;	// wherever it is used
  \endcode

  The virtual function <code>int QGList::compareItems()</code> can be
  reimplemented to compare two list objects. The return value is:
  <ol>
  <li> 0 if object1 == object2
  <li> < 0 if object1 < object2
  <li> > 0 if object1 > object2
  </ol>
  The default implementation returns the expression
  <code>object1 != object2</code>.  QStrList class in qstrlist.h
  reimplements it to compare two <code>const char *</code>:
  \code
    int QStrList::compareItems( GCI s1, GCI s2 )
    {
	return strcmp( (const char *)s1, (const char *)s2 );
    }
  \endcode

  The compareItems() function is called by the following list functions:
  <ul>
  <li> inSort()
  <li> remove(const type *)
  <li> find(const type *)
  <li> findNext(const type *)
  <li> contains(const type *)
  </ul>
  All these function (except inSort()) will work even if compareItems() is
  not reimplemented.

  \sa \link collectionclasses collection classes\endlink
 ----------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------
  \fn QList::QList()
  Constructs an empty list.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QList::QList( const QList<type> &list )
  Constructs a list that is a copy of the objects in \e list.

  All objects in \e list are inserted into this list.  
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QList::~QList()
  Removes all objects from the list and destroys the list.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QList &QList::operator=(const QList<type> &list)
  Assigns \e list to this list and returns a reference to this list.

  All objects in \e list are inserted into this list.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn uint QList::count() const
  Returns the number of objects in the collection.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::isEmpty() const
  Returns TRUE if the list is empty, i.e. count() == 0, or FALSE if it
  not empty.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::insert( uint index, const type *object )
  Inserts the \e object at the position \e index in the list.

  Returns TRUE if successful, or FALSE if \e index is out of range.
  The index must be between 0 and count() (inclusive).

  The object inserted becomes the current object.

  \sa append(), remove()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn void QList::inSort( const type *object )
  Inserts the \e object sorted in the list.

  The sort order depends on the virtual QGList::compareItems() function.
  All objects must be inserted with inSort() to maintain the soring
  order.

  The object inserted becomes the current object.

  \sa insert(), remove()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn void QList::append( const type *object )
  Inserts the \e object at the end of the list.

  The object inserted becomes the current object.

  \sa insert(), remove()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::remove( uint index )
  Removes the object at the position \e index in the list.

  Returns TRUE if successful, or FALSE if \e index is out of range.
  The index must be between 0 and count() (inclusive).

  The removed object are be deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The object after the removed object becomes the new current object
  if the removed object is not the last object in the list.  If the
  last object is removed, the new last object becomes the current object.

  \sa take(), clear()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::remove()
  Removes the current list object from the list.

  Returns TRUE if successful, or FALSE if the list is empty.

  The removed object are deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The object after the removed object becomes the new current object
  if the removed object is not the last object in the list.  If the
  last object is removed, the new last object becomes the current object.

  \sa take(), clear()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::remove( const type *object )
  Removes the \e object from the list.

  Returns TRUE if successful, or FALSE if the object cannot be found in the
  list.

  The removed object are deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The object after the removed object becomes the new current object
  if the removed object is not the last object in the list.  If the
  last object is removed, the new last object becomes the current object.

  The compareItems() function is called when looking for the \e object
  in the list. If compareItems() is not reimplemented, it is more
  efficient to call removeRef().

  \sa removeRef(), take(), clear()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::removeRef( const type *object )
  Removes the \e object from the list.

  Returns TRUE if successful, or FALSE if the object cannot be found in the
  list.

  The removed object are deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The object after the removed object becomes the new current object
  if the removed object is not the last object in the list.  If the
  last object is removed, the new last object becomes the current object.

  The list is scanned until the pointer \e object is found.  If it removed
  if it is found.

  Equivalent to:
  \code
    if ( list.findRef(object) != -1 )
	list.remove();
  \endcode

  \sa remove(), clear()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::removeNode( QLNode *node )
  Removes the \e node from the list.

  Returns TRUE if successful, or FALSE if the node structure seems to
  be corrupted.

  The removed object are deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The first object in the list will become the new current object.

  \warning Do not call this function unless you are an expert.

  \sa takeNode()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::removeFirst()
  Removes the first object in the list.

  Returns TRUE if successful, or FALSE if the list is empty.

  The removed object are deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The first object in the list becomes the new current object.

  \sa removeLast()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::removeLast()
  Removes the first object in the list.

  Returns TRUE if successful, or FALSE if the list is empty.

  The removed object are deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The last object in the list becomes the new current object.

  \sa removeFirst()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::removeLast()
  Removes the first object in the list.

  Returns TRUE if successful, or FALSE if the list is empty.

  The removed object are deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The last object in the list becomes the new current object.

  \sa removeFirst()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::take( uint index )
  Takes the object at the position \e index out of the list without
  deleting it (even if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled).

  Returns a pointer to the object taken out of the list, or null if
  the index is out of range. The index must be between 0 and count()
  (inclusive).

  The object after the taken object becomes the new current object
  if the taken object is not the last object in the list.  If the
  last object is taken, the new last object becomes the current object.

  \sa remove(), clear()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::take()
  Takes the current object out of the list without deleting it (even if
  \link QCollection::setAutoDelete() auto-deletion\endlink is enabled).

  Returns a pointer to the object taken out of the list, or null if
  the list is empty.

  The object after the taken object becomes the new current object
  if the taken object is not the last object in the list.  If the
  last object is taken, the new last object becomes the current object.

  \sa remove(), clear()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::takeNode( QLNode *node )
  Takes the \e node out of the list without deleting its object (even if
  \link QCollection::setAutoDelete() auto-deletion\endlink is enabled).

  Returns a pointer to the object taken out of the list, or null if
  the node structure seems to be corrupted.

  The first object in the list becomes the new current object.

  \warning Do not call this function unless you are an expert.

  \sa removeNode()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn void QList::clear()
  Removes all objects from the list.

  The removed objects are deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  \sa remove(), take()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::find( const type *object )
  Finds the first occurence of the \e object in the list.

  If the object is found, the list sets the current object to point to
  the found object and returns the index of this object.
  If the object is not found, the list sets the current object to null,
  the current index to -1 and returns -1.

  The compareItems() function is called when looking for the \e object
  in the list. If compareItems() is not reimplemented, it is more
  efficient to call findRef().

  \sa findNext(), findRef()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::findNext( const type *object )
  Finds the next occurence of the \e object in the list, starting from
  the current node.

  If the object is found, the list sets the current object to point to
  the found object and returns the index of this object.
  If the object is not found, the list sets the current object to null,
  the current index to -1 and returns -1.

  The compareItems() function is called when looking for the \e object
  in the list. If compareItems() is not reimplemented, it is more
  efficient to call findNextRef().

  \sa find(), findNextRef()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::findRef( const type *object )
  Finds the first occurence of the \e object in the list.

  If the object is found, the list sets the current object to point to
  the found object and returns the index of this object.
  If the object is not found, the list sets the current object to null,
  the current index to -1 and returns -1.

  Calling this function is must faster than find(), because find()
  compares \e object with each list object using compareItems().
  This function only compares the pointers.

  \sa findNextRef(), find()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::findNextRef( const type *object )
  Finds the next occurence of the \e object in the list, starting
  from the current node.

  If the object is found, the list sets the current object to point to
  the found object and returns the index of this object.
  If the object is not found, the list sets the current object to null,
  the current index to -1 and returns -1.

  Calling this function is must faster than find(), because find()
  compares \e object with each list object using compareItems().
  This function only compares the pointers.

  \sa findRef(), findNext()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::contains( const type *object )
  Counts and returns the number of occurences of \e object in the list.

  The compareItems() function is called when looking for the \e object
  in the list. If compareItems() is not reimplemented, it is more
  efficient to call containsRef().

  \sa containsRef()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::containsRef( const type *object )
  Counts and returns the number of occurences of \e object in the list.

  Calling this function is must faster than find(), because find()
  compares \e object with each list object using compareItems().
  This function only compares the pointers.

  \sa contains()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::at( uint index )
  Returns a pointer to the object at position \e index in the list, or
  null if the index is out of range.

  Sets the current list object to this object.

  \sa current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn uint QList::at() const
  Returns the index of the current list object.
  \sa current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::current() const
  Returns a pointer to the current list object.
  \sa at()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QLNode *QList::currentNode() const
  Returns a pointer to the current list node.
  \warning Do not call this function unless you are an expert.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::getFirst() const
  Returns a pointer to the first object in the list, or null if the
  list is empty.
  \sa getLast()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::getLast() const
  Returns a pointer to the first object in the list, or null if the
  list is empty.
  \sa getFirst()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::first()
  Returns a pointer to the first object in the list and makes this the
  current list object.
  \sa getFrst(), last(), next(), prev()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::last()
  Returns a pointer to the last object in the list and makes this the
  current list object.
  \sa getLast(), first(), next(), prev()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::next()
  Returns a pointer to the object succeeding the current object, or null
  if it is the last object.

  Makes the succeeding object current if the last list object was not
  current.

  \sa first(), last(), prev()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::prev()
  Returns a pointer to the object preceding the current object, or null
  if it is the first object.

  Makes the preceding object current if the first list object was not
  current.

  \sa first(), last(), next()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn void QList::toVector( QGVector *vec )
  Stores all list objects in the vector \e vec.

  The vector must be have the same object type, otherwise the result
  will be undefined.
 ----------------------------------------------------------------------------*/

