/****************************************************************************
** $Id: qlist.doc,v 1.4 1995/12/12 20:57:57 hanord Exp $
**
** QList and QListIterator class documentation
**
** Copyright (C) 1995 by Troll Tech AS.  All rights reserved.
**
*****************************************************************************/


/*****************************************************************************
  QList documentation
 *****************************************************************************/

/*----------------------------------------------------------------------------
  \class QList qlist.h
  \brief The QList class is a template collection for doubly linked lists.

  \ingroup collection

  QList is implemented as both as template and a macro class.  In order
  to create a list of the type X, you must instantiate a list class
  for X.  The list operate on pointers to X, or X*.

  Example:
  \code
    #include <qlist.h>
    #include <stdio.h>

    int main()
    {
	QList<double> list;		// list of pointers to double
	list.setAutoDelete( TRUE );	// delete items when they are removed
	list.append( new double(3.14) );
	list.append( new double(8.62) );
	list.insert( 1, new double(4.51) );

	double *x;
	for ( x=list.first(); x != 0; x=list.next() )
	    printf( "%g\n", *x );
    }
  \endcode

  The program output is:
  \code
	3.14
	4.51
	8.62
  \endcode

  The list item's class or type, \c double in our example, must be defined
  prior to the list instantiation. Some compilers allow a QList<X> before
  X is defined and believe that X has no destructor.

  A list can also be instantiated through a macro expansion, but this
  is only for compilers that do not support templates.  See the
  \link collectionclasses.html collection classes\endlink for how to
  use the macro versions.

  QList has several member functions for traversing the list, but using
  a QListIterator is safer and just as efficient.  Multiple list iterators
  can independently traverse the same list.

  The list class is indexable and has a \link at() current index\endlink
  and a \link current() current item\endlink.  The first item corresponds
  to index 0.  The current index is -1 if the current item is null.

  In the example above, we make the call setAutoDelete(TRUE).
  Enabling auto-deletion tells the list to delete items that are removed
  from the list.  The default is to not delete items when they are
  removed, but that would cause a memory leak since we have no other
  references to the list items in our example.
  
  List items are stored as \c void* in the internal QLNode, which also
  keeps the pointers to the next and previous list items.  The functions
  currentNode(), removeNode() and takeNode() operate directly on the
  QLNode, but they should be used with care.

  The virtual function QGList::compareItems() can be reimplemented to
  compare two list items. The return value is:
  <ul>
  <li> 0 if item1 == item2
  <li> \< 0 if item1 < item2
  <li> \> 0 if item1 > item2
  </ul>
  The default implementation returns the expression
  <code>item1 != item2</code>.

  The compareItems() function is called by the following list functions:
  <ol>
  <li> inSort()
  <li> remove(const type *)
  <li> find(const type *)
  <li> findNext(const type *)
  <li> contains(const type *)
  </ol>
  The 4 last functions will work even if compareItems() is not reimplemented,
  but in that case we recommend using removeRef(), findRef(), findNextRef()
  and containsRef() instead.  inSort() does not work if compareItems() is
  not defined.

  \sa QListIterator, \link collectionclasses.html collection classes\endlink
 ----------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------
  \fn QList::QList()
  Constructs an empty list.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QList::QList( const QList<type> &list )
  Constructs a list and inserts all items in \e list into this list.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QList::~QList()
  Removes all items from the list and destroys the list.

  All list iterators that access this list will be reset.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QList<type> &QList::operator=(const QList<type> &list)
  Assigns \e list to this list and returns a reference to this list.

  All items in \e list are inserted into this list.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn uint QList::count() const
  Returns the number of items in the list.
  \sa isEmpty()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::isEmpty() const
  Returns TRUE if the list is empty, i.e. count() == 0, or FALSE if it
  not empty.
  \sa count()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::insert( uint index, const type *item )
  Inserts the \e item at the position \e index in the list.

  Returns TRUE if successful, or FALSE if \e index is out of range.
  The valid range is 0 - count() inclusive.  The item is appended
  if \e index == count().

  The inserted item becomes the current list item.

  \sa append(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn void QList::inSort( const type *item )
  Inserts the \e item at its sorted position in the list.

  The sort order depends on the virtual QGList::compareItems() function.
  All items must be inserted with inSort() to maintain the sorting order.

  The inserted item becomes the current list item.

  \sa insert(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn void QList::append( const type *item )
  Inserts the \e item at the end of the list.

  The inserted item becomes the current list item.

  \sa insert(), current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::remove( uint index )
  Removes the item at position \e index in the list.

  Returns TRUE if successful, or FALSE if \e index is out of range.
  The valid range is 0 - (count() - 1) inclusive.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The item after the removed item becomes the new current list item
  if the removed item is not the last item in the list.  If the
  last item is removed, the new last item becomes the current item.
  The current item is set to null if the list becomes empty.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa take(), clear(), setAutoDelete()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::remove()
  Removes the current list item.

  Returns TRUE if successful, or FALSE if the current item is null.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The item after the removed item becomes the new current list item
  if the removed item is not the last item in the list.  If the
  last item is removed, the new last item becomes the current item.
  The current item is set to null if the list becomes empty.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa take(), clear(), setAutoDelete()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::remove( const type *item )
  Removes the \e item from the list.

  Returns TRUE if successful, or FALSE if the item cannot be found in the
  list.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The compareItems() function is called when looking for the \e item
  in the list. If compareItems() is not reimplemented, it is more
  efficient to call removeRef().

  The item after the removed item becomes the new current list item
  if the removed item is not the last item in the list.  If the
  last item is removed, the new last item becomes the current item.
  The current item is set to null if the list becomes empty.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa removeRef(), take(), clear(), setAutoDelete()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::removeRef( const type *item )
  Removes the \e item from the list.

  Returns TRUE if successful, or FALSE if the item cannot be found in the
  list.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The list is scanned until the pointer \e item is found.  It is removed
  if it is found.

  Equivalent to:
  \code
    if ( list.findRef(item) != -1 )
	list.remove();
  \endcode

  The item after the removed item becomes the new current list item
  if the removed item is not the last item in the list.  If the
  last item is removed, the new last item becomes the current item.
  The current item is set to null if the list becomes empty.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa remove(), clear()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::removeNode( QLNode *node )
  Removes the \e node from the list.

  Returns TRUE if successful, or FALSE if the node structure looks
  corrupted.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The first item in the list will become the new current list item.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \warning Do not call this function unless you are an expert.

  \sa takeNode(), currentNode()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::removeFirst()
  Removes the first item from the list.

  Returns TRUE if successful, or FALSE if the list is empty.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The first item in the list becomes the new current list item.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa removeLast(), setAutoDelete()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QList::removeLast()
  Removes the last item from the list.

  Returns TRUE if successful, or FALSE if the list is empty.

  The removed item is deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  The last item in the list becomes the new current list item.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa removeFirst(), setAutoDelete()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::take( uint index )
  Takes the item at position \e index out of the list without
  deleting it (even if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled).

  Returns a pointer to the item taken out of the list, or null if
  the index is out of range.
  The valid range is 0 - (count() - 1) inclusive.

  The item after the taken item becomes the new current list item
  if the taken item is not the last item in the list.  If the
  last item is taken, the new last item becomes the current item.
  The current item is set to null if the list becomes empty.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa remove(), clear()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::take()
  Takes the current item out of the list without deleting it (even if
  \link QCollection::setAutoDelete() auto-deletion\endlink is enabled).

  Returns a pointer to the item taken out of the list, or null if
  the current item is null.

  The item after the taken item becomes the new current list item
  if the taken item is not the last item in the list.  If the
  last item is taken, the new last item becomes the current item.
  The current item is set to null if the list becomes empty.

  All list iterators that refer to the item that is removed, will
  be set to point to the new current item.

  \sa remove(), clear()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::takeNode( QLNode *node )
  Takes the \e node out of the list without deleting its item (even if
  \link QCollection::setAutoDelete() auto-deletion\endlink is enabled).

  Returns a pointer to the item taken out of the list, or null if
  the node structure looks corrupted.

  The first item in the list becomes the new current list item.

  \warning Do not call this function unless you are an expert.

  \sa removeNode(), currentNode()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn void QList::clear()
  Removes all items from the list.

  The removed items are deleted if \link QCollection::setAutoDelete()
  auto-deletion\endlink is enabled.

  All list iterators that access this list will be reset.

  \sa remove(), take(), setAutoDelete()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::find( const type *item )
  Finds the first occurrence of \e item in the list.

  If the item is found, the list sets the current item to point to
  the found item and returns the index of this item.
  If the item is not found, the list sets the current item to null,
  the current index to -1 and returns -1.

  The compareItems() function is called when looking for the \e item
  in the list. If compareItems() is not reimplemented, it is more
  efficient to call findRef().

  \sa findNext(), findRef()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::findNext( const type *item )
  Finds the next occurence of \e item in the list, starting from
  the current list item.

  If the item is found, the list sets the current item to point to
  the found item and returns the index of this item.
  If the item is not found, the list sets the current item to null,
  the current index to -1 and returns -1.

  The compareItems() function is called when looking for the \e item
  in the list. If compareItems() is not reimplemented, it is more
  efficient to call findNextRef().

  \sa find(), findNextRef()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::findRef( const type *item )
  Finds the first occurrence of \e item in the list.

  If the item is found, the list sets the current item to point to
  the found item and returns the index of this item.
  If the item is not found, the list sets the current item to null,
  the current index to -1 and returns -1.

  Calling this function is must faster than find(), because find()
  compares \e item with each list item using compareItems().
  This function only compares the pointers.

  \sa findNextRef(), find()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::findNextRef( const type *item )
  Finds the next occurence of \e item in the list, starting from the
  current list item.

  If the item is found, the list sets the current item to point to
  the found item and returns the index of this item.
  If the item is not found, the list sets the current item to null,
  the current index to -1 and returns -1.

  Calling this function is must faster than find(), because find()
  compares \e item with each list item using compareItems().
  This function only compares the pointers.

  \sa findRef(), findNext()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn uint QList::contains( const type *item ) const
  Counts and returns the number of occurrences of \e item in the list.

  The compareItems() function is called when looking for the \e item
  in the list. If compareItems() is not reimplemented, it is more
  efficient to call containsRef().

  \sa containsRef()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn uint QList::containsRef( const type *item ) const
  Counts and returns the number of occurences of \e item in the list.

  Calling this function is must faster than find(), because find()
  compares \e item with each list item using compareItems().
  This function only compares the pointers.

  \sa contains()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::at( uint index )
  Returns a pointer to the item at position \e index in the list, or
  null if the index is out of range.

  Sets the current list item to this item if \e index is valid.

  This function is very efficient.  It starts scanning from the first
  item, last item or current item, whichever is closest to \e index.

  \sa current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn int QList::at() const
  Returns the index of the current list item.  The returned value is -1
  if the current item is null.
  \sa current()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::current() const
  Returns a pointer to the current list item.  The current item may be
  null (implies that the current index is -1).
  \sa at()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QLNode *QList::currentNode() const
  Returns a pointer to the current list node.

  The node can be kept and removed later using removeNode().
  The advantage is that the item can be removed directly without
  searching the list.

  \warning Do not call this function unless you are an expert.

  \sa removeNode(), takeNode()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::getFirst() const
  Returns a pointer to the first item in the list, or null if the
  list is empty.
  \sa getLast()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::getLast() const
  Returns a pointer to the first item in the list, or null if the
  list is empty.
  \sa getFirst()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::first()
  Returns a pointer to the first item in the list and makes this the
  current list item, or returns 0 if the list is empty.
  \sa getFirst(), last(), next(), prev()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::last()
  Returns a pointer to the last item in the list and makes this the
  current list item, or returns 0 if the list is empty.
  \sa getLast(), first(), next(), prev()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::next()
  Returns a pointer to the item succeeding the current item, or null
  if it is the last item.

  Makes the succeeding item current if the last list item was not
  current.

  \sa first(), last(), prev()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QList::prev()
  Returns a pointer to the item preceding the current item, or null
  if it is the first item.

  Makes the preceding item current if the first list item was not
  current.

  \sa first(), last(), next()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn void QList::toVector( QGVector *vec ) const
  Stores all list items in the vector \e vec.

  The vector must be have the same item type, otherwise the result
  will be undefined.
 ----------------------------------------------------------------------------*/


/*****************************************************************************
  QListIterator documentation
 *****************************************************************************/

/*----------------------------------------------------------------------------
  \class QListIterator qlist.h
  \brief The QListIterator class provides an iterator for QList collections.

  \ingroup iterators

  QListIterator is implemented as both as template and a macro class.
  In order to create a list iterator of the type X, you must instantiate
  a list iterator class for X.  This iterator operates on QList<X>.

  Although QList has member functions to traverse the doubly linked list
  structure, using a list iterator is a much more robust way of traversing
  the list.

  An iterator has a current list item and can get the next and previous
  list items.  It can only traverse the list, never modify it.  Multiple
  iterators can operate on the same list and have different current items.

  A QList knows about all list iterators that are operating on the list.
  When a list item is removed from the list, the list update all iterators
  that are pointing the removed item and set them to point to the new
  current item in the list.


  Example:
  \code
    #include <qlist.h>
    #include <stdio.h>

    int main()
    {
	QList<double> list;		// list of pointers to double
	list.setAutoDelete( TRUE );	// delete items when they are removed
	list.append( new double(3.14) );
	list.append( new double(8.62) );
	list.insert( 1, new double(4.51) );

	QListIterator<double> it(list);	// starts with the first item
	for ( ; it.current() != 0; ++it )
	    printf( "%g\n", *it.current() );
    }
  \endcode

  The program output is:
  \code
	3.14
	4.51
	8.62
  \endcode

  \sa QList, \link collectionclasses.html collection classes\endlink
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QListIterator::QListIterator( const QList<type> &list )
  Constructs an iterator for \e list.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn QListIterator::~QListIterator()
  Destroys the iterator.
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn uint QListIterator::count() const
  Returns the number of items in the list.
  \sa isEmpty()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QListIterator::isEmpty() const
  Returns TRUE if the list is empty, i.e. count() == 0, or FALSE if it
  not empty.
  \sa count()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QListIterator::atFirst() const
  Returns TRUE if the current iterator item is the first list item, otherwise
  FALSE.
  \sa toFirst(), atLast()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn bool QListIterator::atLast() const
  Returns TRUE if the current iterator item is the last list item, otherwise
  FALSE.
  \sa toLast(), atFirst()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QListIterator::toFirst()
  Sets the current iterator item to point to the first list item and returns
  a pointer to the item.  Sets the current item to null and returns null if
  if the list is empty.
  \sa toLast(), atFirst()
 ----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  \fn type *QListIterator::toLast()
  Sets the current iterator item to point to the last list item and returns
  a pointer to the item.  Sets the current item to null and returns null if
  if the list is empty.
  \sa toFirst(), atLast()
 ----------------------------------------------------------------------------*/

