/****************************************************************************
** $Id: design.doc,v 2.6 1999/04/28 09:53:48 aavit Exp $
**
** Qt/Embedded Virtual Framebuffer
**
** Copyright (C) 1992-2000 Troll Tech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Troll Tech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** Licensees holding valid Qt Professional Edition licenses may use this
** file in accordance with the Qt Professional Edition License Agreement
** provided with the Qt Professional Edition.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
** information about the Professional Edition licensing, or see
** http://www.trolltech.com/qpl/ for QPL licensing information.
**
*****************************************************************************/
 
/*! \page qvfb-qws.html

<title>Qt/Embedded Virtual Framebuffer</title>
</head><body bgcolor="#ffffff">

\postheader

<h1 align=center>Qt/Embedded Virtual Framebuffer</h1><br clear="all">

The virtual framebuffer allows Qt/Embedded programs to be developed on your
desktop machine, without switching between consoles and X11.
<p>
The virtual framebuffer is located in $QTDIR/util/qvfb

<h3>Using the virtual framebuffer</h3>
<ol> 
<li>Set QT_FEATURE_QWS_VFB in $QTDIR/src/tools/qfeature.h and compile the
    Qt/Embedded library.
<li>Compile qvfb as a normal Qt/X11 application and run it.
<li>Start a Qt/Embedded master application (i.e. construct QApplication with
    QApplication::GuiServer flag or use the -qws command line parameter).
</ol>

If a program linked to the Qt library with QT_FEATURE_QWS_VFB enabled is
started and qvfb is not running, the program will attempt to use the
normal framebuffer device.  This allows you to test using the real framebuffer
without recompiling.

<p>
qvfb supports the following command line options:
 
<table>
<tr><td>[-width width]</td><td>the width of the virtual framebuffer (default: 240).</td></tr>
<tr><td>[-height height]</td><td>the height of the virtual framebuffer (default: 320).</td></tr>
<tr><td>[-depth depth]</td><td>the depth of the virtual framebuffer (8 or 32, default: 8).</td></tr>
<tr><td>[-nocursor]</td><td>do not display the X11 cursor in the framebuffer window.</td></tr>
</table>

<h3>Virtual Framebuffer Design</h3>

The virtual framebuffer emulates a framebuffer using a shared memory region
(the virtual frame buffer) and a utility to display the framebuffer in a
window (qvfb).  The regions of the display that have changed are updated
periodically, so you will see discrete snapshots of the framebuffer rather
than each individual drawing operation.  For this reason drawing problems
such as flickering may not be apparent until the program is run using a real
framebuffer.
<p>
The target refresh rate can be set via the View->Refresh Rate menu item.
This will cause qvfb to check for updated regions more quickly.  The rate
is a target only.  If little drawing is being done, the framebuffer will
not show any updates between drawing events.  If an application is displaying
an animation the updates will be frequent, and the application and
qvfb will fight for processor time.
<p>
Mouse and keyboard events are passed to the Qt/Embedded master process via
named pipes.
<p>
The virtual framebuffer is a development tool only.  No security issues have
been considered in the virtual framebuffer design.  It should not be used
in a production environment and QT_FEATURE_QWS_VFB should always be disabled
in production libraries.

*/
