/****************************************************************************
**
** Documentation to some of the modules.
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
\page modules.html

\title About Modules

When you install Qt, certain modules are built into the library. For
the Qt Enterprise Edition, Qt Evaluation Edition and Qt Free Edition
this is all modules. For Qt Professional Edition, the base modules
are available: the \e{tools}, \e{kernel}, \e{widgets}, \e{dialog},
\e{iconview}, and \e{workspace} modules. Trolltech does not currently
offer modules for sale individually.

All modules may be used only under the terms of the licenses associated
with each Edition.

\list
\i \link canvas.html Canvas Module\endlink
\i \link iconview.html IconView Module\endlink
\i \link network.html Network Module\endlink
\i \link opengl.html OpenGL Module\endlink
\i \link sql.html SQL Module\endlink
\i \link table.html Table Module\endlink
\i \link workspace.html Workspace (MDI) Module\endlink
\i \link xml.html XML Module\endlink
\i \link activeqt.html ActiveQt Framework\endlink:
    \list
    \i \link qaxserver.html QAxServer Module\endlink
    \i \link qaxcontainer.html QAxContainer Module\endlink
    \endlist
\i \link motif-extension.html QMotif Extension\endlink
\i \link netscape-plugin.html Netscape Plugin Extension\endlink
\endlist

*/

/*!
\page iconview.html

\title IconView Module

The icon view module provides a powerful visualization widget called
\l QIconView. API and feature-wise it is similar to \l QListView and
\l QListBox. It contains optionally labelled pixmap items that the user
can select, drag around, rename, delete, etc.

<center><a href="qiconview.html"><img src="qiconview-w.png" alt="Screenshot of QIconVIew"></a></center>

Please see the \link qiconview.html class documentation \endlink for
details.

*/

/*!
\page workspace.html

\title Workspace Module

\section1 Overview

The workspace module provides all the facilities needed to allow
developers to create a Multiple Document Interface (MDI) for their
applications.
This kind of user interface provides the user with a single workspace
window that represents the application's documents as decorated
child windows.
MDI environments are typically seen in integrated environments for
software development, but can be applied to almost any project-based
working environment. For example, 
\link http://www.trolltech.com/products/solutions/catalog/Tools/qtobjectinspector/
Qt Object Inspector \endlink uses a workspace to organize information
about running Qt applications.

Any standard Qt widget can be inserted into a workspace and used as a
document window, from simple functional widgets such as labels and
frames to more sophisticated containers such as icon views, list views,
\if defined(commercial)
tables,
\endif
and even other workspaces.

Child windows can be managed easily, especially when the workspace
is used with the
\link http://www.trolltech.com/products/solutions/catalog/Widgets/qtwindowlistmenu/
Window Menu \endlink from Qt Solutions.

\img qworkspace.png

\section1 Details

Workspaces in Qt are implemented in the QWorkspace class, a dervied
class of QWidget. Workspace widgets can be added to any container
widgets that accept QWidgets, making it easy to add MDI functionality
to an application.

Standard Qt widgets are added to the workspace to become child
windows. These child widgets can either be created with the workspace
as their parent, or reparented into the workspace from elsewhere.

A workspace manages the layout of its child widgets in a different
way to that of other container widgets, like QHBox, QVBox, and QGrid.
The user can freely arrange the child windows within the workspace, and
functions also exist to tidy the windows into cascaded and tiled arrangements.
Child windows can be maximized, minimized, and restored by the user just
like normal top-level widgets; functions also exist to achieve this from within
the application. In the common case, when used as the central widget of a
\l {main window}, workspaces can take advantage of the main window's
menu bar to provide maximized child windows with window furniture.

Workspaces can be made to automatically provide scrollbars, so that the
user can access all child windows if the required workspace area
exceeds the visible size of the workspace.

Please see the \link qworkspace.html class documentation \endlink for
further details.

*/
