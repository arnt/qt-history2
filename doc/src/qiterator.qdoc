/*! \class QListIterator
    \brief The QListIterator class provides a Java-style const iterator for QList and QQueue.

    QList has both \l{Java-style iterators} and \l{STL-style
    iterators}. The Java-style iterators are more high-level and
    easier to use than the STL-style iterators; on the other hand,
    they are slightly less efficient.

    An alternative to using iterators is to use index positions. Most
    QList member functions take an index as their first parameter,
    making it possible to access, modify, and remove items without
    using iterators.

    QListIterator\<T\> allows you to iterate over a QList\<T\> (or a
    QQueue\<T\>). If you want to modify the list as you iterate over
    it, use QListMutableIterator\<T\> instead.

    The QListIterator constructor takes a QList as argument. After
    construction, the iterator is located at the very beginning of
    the list (before the first item). Here's how to iterate over all
    the elements sequentially:

    \code
	QList<float> list;
        ...
	QListIterator<float> i(list);
        while (i.hasNext())
	    cout << i.next() << endl;
    \endcode

    The next() function returns the next item in the list and
    advances the iterator. Unlike STL-style iterators, Java-style
    iterators point \e between items rather than directly \e at
    items. The first call to next() advances the iterator to the
    position between the first and second item, and returns the first
    item; the second call to next() advances the iterator to the
    position between the second and third item, and returns the second
    item; and so on.

    \img javaiterators1.png

    Here's how to iterate over the elements in reverse order:

    \code
	QListIterator<float> i(list);
        i.toBack();
        while (i.hasPrevious())
	    cout << i.previous() << endl;
    \endcode

    If you want to find all occurrences of a particular value, use
    findNext() or findPrevious() in a loop.

    Multiple iterators can be used on the same list. If the list is
    modified while a QListIterator is active, the QListIterator will
    continue iterating over the original list, ignoring the modified
    copy.

    \sa QListMutableIterator, QList::const_iterator
*/

/*! \class QLinkedListIterator
    \brief The QLinkedListIterator class provides a Java-style const iterator for QLinkedList.

    QLinkedList has both \l{Java-style iterators} and
    \l{STL-style iterators}. The Java-style iterators are more
    high-level and easier to use than the STL-style iterators; on the
    other hand, they are slightly less efficient.

    QLinkedListIterator\<T\> allows you to iterate over a
    QLinkedList\<T\>. If you want to modify the list as you iterate
    over it, use QLinkedListMutableIterator\<T\> instead.

    The QLinkedListIterator constructor takes a QLinkedList as
    argument. After construction, the iterator is located at the very
    beginning of the list (before the first item). Here's how to
    iterate over all the elements sequentially:

    \code
	QLinkedList<float> list;
        ...
	QLinkedListIterator<float> i(list);
        while (i.hasNext())
	    cout << i.next() << endl;
    \endcode

    The next() function returns the next item in the list and
    advances the iterator. Unlike STL-style iterators, Java-style
    iterators point \e between items rather than directly \e at
    items. The first call to next() advances the iterator to the
    position between the first and second item, and returns the first
    item; the second call to next() advances the iterator to the
    position between the second and third item, and returns the second
    item; and so on.

    \img javaiterators1.png

    Here's how to iterate over the elements in reverse order:

    \code
	QLinkedListIterator<float> i(list);
        i.toBack();
        while (i.hasPrevious())
	    cout << i.previous() << endl;
    \endcode

    If you want to find all occurrences of a particular value, use
    findNext() or findPrevious() in a loop.

    Multiple iterators can be used on the same list. If the list is
    modified while a QLinkedListIterator is active, the
    QLinkedListIterator will continue iterating over the original
    list, ignoring the modified copy.

    \sa QLinkedListMutableIterator, QLinkedList::const_iterator
*/

/*! \class QVectorIterator
    \brief The QVectorIterator class provides a Java-style const iterator for QVector and QStack.

    QVector has both \l{Java-style iterators} and \l{STL-style
    iterators}. The Java-style iterators are more high-level and
    easier to use than the STL-style iterators; on the other hand,
    they are slightly less efficient.

    An alternative to using iterators is to use index positions. Most
    QVector member functions take an index as their first parameter,
    making it possible to access, insert, and remove items without
    using iterators.

    QVectorIterator\<T\> allows you to iterate over a QVector\<T\>
    (or a QStack\<T\>). If you want to modify the vector as you
    iterate over it, use QVectorMutableIterator\<T\> instead.

    The QVectorIterator constructor takes a QVector as argument.
    After construction, the iterator is located at the very beginning
    of the vector (before the first item). Here's how to iterate over
    all the elements sequentially:

    \code
	QVector<float> vector;
        ...
	QVectorIterator<float> i(vector);
        while (i.hasNext())
	    cout << i.next() << endl;
    \endcode

    The next() function returns the next item in the vector and
    advances the iterator. Unlike STL-style iterators, Java-style
    iterators point \e between items rather than directly \e at
    items. The first call to next() advances the iterator to the
    position between the first and second item, and returns the first
    item; the second call to next() advances the iterator to the
    position between the second and third item, returning the second
    item; and so on.

    \img javaiterators1.png

    Here's how to iterate over the elements in reverse order:

    \code
	QVectorIterator<float> i(vector);
        i.toBack();
        while (i.hasPrevious())
	    cout << i.previous() << endl;
    \endcode

    If you want to find all occurrences of a particular value, use
    findNext() or findPrevious() in a loop.

    Multiple iterators can be used on the same vector. If the vector
    is modified while a QVectorIterator is active, the QVectorIterator
    will continue iterating over the original vector, ignoring the
    modified copy.

    \sa QVectorIterator, QVector::const_iterator
*/

/*! \class QListMutableIterator
    \brief The QListMutableIterator class provides a Java-style non-const iterator for QList and QQueue.

    QList has both \l{Java-style iterators} and \l{STL-style
    iterators}. The Java-style iterators are more high-level and
    easier to use than the STL-style iterators; on the other hand,
    they are slightly less efficient.

    An alternative to using iterators is to use index positions. Most
    QList member functions take an index as their first parameter,
    making it possible to access, insert, and remove items without
    using iterators.

    QListMutableIterator\<T\> allows you to iterate over a QList\<T\>
    (or a QQueue\<T\>) and modify the list. If you don't want to
    modify the list (or have a const QList), use the slightly faster
    QListIterator\<T\> instead.

    The QListMutableIterator constructor takes a QList as argument.
    After construction, the iterator is located at the very beginning
    of the list (before the first item). Here's how to iterate over
    all the elements sequentially:

    \code
	QList<float> list;
        ...
	QListMutableIterator<float> i(list);
        while (i.hasNext())
	    cout << i.next() << endl;
    \endcode

    The next() function returns the next item in the list and
    advances the iterator. Unlike STL-style iterators, Java-style
    iterators point \e between items rather than directly \e at
    items. The first call to next() advances the iterator to the
    position between the first and second item, and returns the first
    item; the second call to next() advances the iterator to the
    position between the second and third item, returning the second
    item; and so on.

    \img javaiterators1.png

    Here's how to iterate over the elements in reverse order:

    \code
	QListMutableIterator<float> i(list);
        i.toBack();
        while (i.hasPrevious())
	    cout << i.previous() << endl;
    \endcode

    If you want to find all occurrences of a particular value, use
    findNext() or findPrevious() in a loop.

    If you want to remove items as you iterate over the list, use
    remove(). If you want to modify the value of an item, use
    setValue(). If you want to insert a new item in the list, use
    insert().

    Example:
    \code
	QListMutableIterator<int> i(list);
        while (i.hasNext()) {
	    int val = i.next();
            if (val < 0) {
		i.setValue(-val);
            } else if (val == 0) {
		i.remove();
            }
        }
    \endcode

    The example traverses a list, replacing negative numbers with
    their absolute values, and eliminating zeroes.

    \sa QListIterator, QList::iterator
*/

/*! \class QLinkedListMutableIterator
    \brief The QLinkedListMutableIterator class provides a Java-style non-const iterator for QLinkedList.

    QLinkedList has both \l{Java-style iterators} and
    \l{STL-style iterators}. The Java-style iterators are more
    high-level and easier to use than the STL-style iterators; on the
    other hand, they are slightly less efficient.

    QLinkedListMutableIterator\<T\> allows you to iterate over a
    QLinkedList\<T\> and modify the list. If you don't want to modify
    the list (or have a const QLinkedList), use the slightly faster
    QLinkedListIterator\<T\> instead.

    The QLinkedListMutableIterator constructor takes a QLinkedList as
    argument. After construction, the iterator is located at the very
    beginning of the list (before the first item). Here's how to
    iterate over all the elements sequentially:

    \code
	QLinkedList<float> list;
        ...
	QLinkedListMutableIterator<float> i(list);
        while (i.hasNext())
	    cout << i.next() << endl;
    \endcode

    The next() function returns the next item in the list and
    advances the iterator. Unlike STL-style iterators, Java-style
    iterators point \e between items rather than directly \e at
    items. The first call to next() advances the iterator to the
    position between the first and second item, and returns the first
    item; the second call to next() advances the iterator to the
    position between the second and third item, returning the second
    item; and so on.

    \img javaiterators1.png

    Here's how to iterate over the elements in reverse order:

    \code
	QLinkedListMutableIterator<float> i(list);
        i.toBack();
        while (i.hasPrevious())
	    cout << i.previous() << endl;
    \endcode

    If you want to find all occurrences of a particular value, use
    findNext() or findPrevious() in a loop.

    If you want to remove items as you iterate over the list, use
    remove(). If you want to modify the value of an item, use
    setValue(). If you want to insert a new item in the list, use
    insert().

    Example:
    \code
	QLinkedListMutableIterator<int> i(list);
        while (i.hasNext()) {
	    int val = i.next();
            if (val < 0) {
		i.setValue(-val);
            } else if (val == 0) {
		i.remove();
            }
        }
    \endcode

    The example traverses a list, replacing negative numbers with
    their absolute values, and eliminating zeroes.

    \sa QLinkedListIterator, QLinkedList::iterator
*/

/*! \class QVectorMutableIterator
    \brief The QVectorMutableIterator class provides a Java-style non-const iterator for QVector and QStack.

    QVector has both \l{Java-style iterators} and \l{STL-style
    iterators}. The Java-style iterators are more high-level and
    easier to use than the STL-style iterators; on the other hand,
    they are slightly less efficient.

    An alternative to using iterators is to use index positions. Most
    QVector member functions take an index as their first parameter,
    making it possible to access, insert, and remove items without
    using iterators.

    QVectorMutableIterator\<T\> allows you to iterate over a
    QVector\<T\> and modify the vector. If you don't want to modify
    the vector (or have a const QVector), use the slightly faster
    QVectorIterator\<T\> instead.

    The QVectorMutableIterator constructor takes a QVector as
    argument. After construction, the iterator is located at the very
    beginning of the list (before the first item). Here's how to
    iterate over all the elements sequentially:

    \code
	QVector<float> vector;
        ...
	QVectorMutableIterator<float> i(vector);
        while (i.hasNext())
	    cout << i.next() << endl;
    \endcode

    The next() function returns the next item in the vector and
    advances the iterator. Unlike STL-style iterators, Java-style
    iterators point \e between items rather than directly \e at
    items. The first call to next() advances the iterator to the
    position between the first and second item, and returns the first
    item; the second call to next() advances the iterator to the
    position between the second and third item, returning the second
    item; and so on.

    \img javaiterators1.png

    Here's how to iterate over the elements in reverse order:

    \code
	QVectorMutableIterator<float> i(vector);
        i.toBack();
        while (i.hasPrevious())
	    cout << i.previous() << endl;
    \endcode

    If you want to find all occurrences of a particular value, use
    findNext() or findPrevious() in a loop.

    If you want to remove items as you iterate over the vector, use
    remove(). If you want to modify the value of an item, use
    setValue(). If you want to insert a new item in the vector, use
    insert().

    Example:
    \code
	QVectorMutableIterator<int> i(vector);
        while (i.hasNext()) {
	    int val = i.next();
            if (val < 0) {
		i.setValue(-val);
            } else if (val == 0) {
		i.remove();
            }
        }
    \endcode

    The example traverses a vector, replacing negative numbers with
    their absolute values, and eliminating zeroes.

    \sa QVectorIterator, QVector::iterator
*/

/*! \fn QListIterator::QListIterator(const QList<T> &list)
    \fn QLinkedListIterator::QLinkedListIterator(const QLinkedList<T> &list)
    \fn QListMutableIterator::QListMutableIterator(QList<T> &list)
    \fn QLinkedListMutableIterator::QLinkedListMutableIterator(QLinkedList<T> &list)

    Constructs an iterator for traversing \a list. The iterator is
    set to be at the front of the list (before the first item).

    \sa operator=()
*/

/*! \fn QVectorIterator::QVectorIterator(const QVector<T> &vector)
    \fn QVectorMutableIterator::QVectorMutableIterator(QVector<T> &vector)

    Constructs an iterator for traversing \a vector. The iterator is
    set to be at the front of the vector (before the first item).

    \sa operator=()
*/

/*!
    \fn QListMutableIterator::~QListMutableIterator()
    \fn QLinkedListMutableIterator::~QLinkedListMutableIterator()
    \fn QVectorMutableIterator::~QVectorMutableIterator()

    Destroys the iterator.

    \sa operator=()
*/

/*! \fn void QListMutableIterator::operator=(QList<T> &list)
    \fn void QLinkedListMutableIterator::operator=(QLinkedList<T> &list)
    \fn void QListIterator::operator=(const QList<T> &list)
    \fn void QLinkedListIterator::operator=(const QLinkedList<T> &list)

    Makes the iterator operate on \a list. The iterator is set to be
    at the front of the list (before the first item).

    \sa toFront(), toBack()
*/

/*! \fn void QVectorIterator::operator=(const QVector<T> &vector)
    \fn void QVectorMutableIterator::operator=(QVector<T> &vector)

    Makes the iterator operate on \a vector. The iterator is set to be
    at the front of the vector (before the first item).

    \sa toFront(), toBack()
*/

/*! \fn void QListIterator::toFront()
    \fn void QLinkedListIterator::toFront()
    \fn void QVectorIterator::toFront()
    \fn void QListMutableIterator::toFront()
    \fn void QLinkedListMutableIterator::toFront()
    \fn void QVectorMutableIterator::toFront()

    Moves the iterator to the front of the container (before the
    first item).

    \sa toBack(), next()
*/

/*! \fn void QListIterator::toBack()
    \fn void QLinkedListIterator::toBack()
    \fn void QListMutableIterator::toBack()
    \fn void QLinkedListMutableIterator::toBack()
    \fn void QVectorIterator::toBack()
    \fn void QVectorMutableIterator::toBack()

    Moves the iterator to the back of the container (after the last
    item).

    \sa toFront(), previous()
*/

/*! \fn bool QListIterator::hasNext() const
    \fn bool QLinkedListIterator::hasNext() const
    \fn bool QVectorIterator::hasNext() const
    \fn bool QListMutableIterator::hasNext() const
    \fn bool QLinkedListMutableIterator::hasNext() const
    \fn bool QVectorMutableIterator::hasNext() const

    Returns true if there is at least one item ahead of the iterator,
    i.e. the iterator is \e not at the back of the container;
    otherwise returns false.

    \sa hasPrevious(), next()
*/

/*! \fn const T &QListIterator::next()
    \fn const T &QLinkedListIterator::next()
    \fn const T &QVectorIterator::next()

    Returns the next item and advances the iterator by one position.

    Calling this function on an iterator located at the back of the
    container leads to undefined results.

    \sa hasNext(), peekNext(), previous()
*/

/*! \fn T &QListMutableIterator::next()
    \fn T &QLinkedListMutableIterator::next()
    \fn T &QVectorMutableIterator::next()

    Returns a reference to the next item, and advances the iterator
    by one position.

    Calling this function on an iterator located at the back of the
    container leads to undefined results.

    \sa hasNext(), peekNext(), previous()
*/

/*! \fn const T &QListIterator::peekNext() const
    \fn const T &QLinkedListIterator::peekNext() const
    \fn const T &QVectorIterator::peekNext() const

    Returns the next item without moving the iterator.

    Calling this function on an iterator located at the back of the
    container leads to undefined results.

    \sa hasNext(), next(), peekPrevious()
*/

/*! \fn T &QListMutableIterator::peekNext() const
    \fn T &QLinkedListMutableIterator::peekNext() const
    \fn T &QVectorMutableIterator::peekNext() const

    Returns a reference to the next item, without moving the iterator.

    Calling this function on an iterator located at the back of the
    container leads to undefined results.

    \sa hasNext(), next(), peekPrevious()
*/

/*! \fn bool QListIterator::hasPrevious() const
    \fn bool QLinkedListIterator::hasPrevious() const
    \fn bool QVectorIterator::hasPrevious() const
    \fn bool QListMutableIterator::hasPrevious() const
    \fn bool QLinkedListMutableIterator::hasPrevious() const
    \fn bool QVectorMutableIterator::hasPrevious() const

    Returns true if there is at least one item behind the iterator,
    i.e. the iterator is \e not at the front of the container;
    otherwise returns false.

    \sa hasNext(), previous()
*/

/*! \fn const T &QListIterator::previous()
    \fn const T &QLinkedListIterator::previous()
    \fn const T &QVectorIterator::previous()

    Returns the previous item and moves the iterator back by one
    position.

    Calling this function on an iterator located at the front of the
    container leads to undefined results.

    \sa hasPrevious(), peekPrevious(), next()
*/

/*! \fn T &QListMutableIterator::previous()
    \fn T &QLinkedListMutableIterator::previous()
    \fn T &QVectorMutableIterator::previous()
    \fn T &QListMutableIterator::peekPrevious() const
    \fn T &QLinkedListMutableIterator::peekPrevious() const
    \fn T &QVectorMutableIterator::peekPrevious() const

    Returns a reference to the previous item and moves the iterator
    back by one position.

    Calling this function on an iterator located at the front of the
    container leads to undefined results.

    \sa hasPrevious(), peekPrevious(), next()
*/

/*! \fn const T &QListIterator::peekPrevious() const
    \fn const T &QLinkedListIterator::peekPrevious() const
    \fn const T &QVectorIterator::peekPrevious() const

    Returns the previous item without moving the iterator.

    Calling this function on an iterator located at the front of the
    container leads to undefined results.

    \sa hasPrevious(), previous(), peekNext()
*/

/*! \fn bool QListIterator::findNext(const T &value)
    \fn bool QLinkedListIterator::findNext(const T &value)
    \fn bool QVectorIterator::findNext(const T &value)
    \fn bool QListMutableIterator::findNext(const T &value)
    \fn bool QLinkedListMutableIterator::findNext(const T &value)
    \fn bool QVectorMutableIterator::findNext(const T &value)

    Searches for \a value starting from the current iterator position
    forward. Returns true if \a value is found; otherwise returns false.

    After the call, if \a value was found, the iterator is positioned
    just after the matching item; otherwise, the iterator is
    positioned at the back of the container.

    \sa findPrevious()
*/

/*! \fn bool QListIterator::findPrevious(const T &value)
    \fn bool QLinkedListIterator::findPrevious(const T &value)
    \fn bool QVectorIterator::findPrevious(const T &value)
    \fn bool QListMutableIterator::findPrevious(const T &value)
    \fn bool QLinkedListMutableIterator::findPrevious(const T &value)
    \fn bool QVectorMutableIterator::findPrevious(const T &value)

    Searches for \a value starting from the current iterator position
    backward. Returns true if \a value is found; otherwise returns
    false.

    After the call, if \a value was found, the iterator is positioned
    just before the matching item; otherwise, the iterator is
    positioned at the front of the container.

    \sa findNext()
*/

/*! \fn void QListMutableIterator::remove()

    Removes the last item that was jumped over using one of the
    traversal functions (next(), previous(), findNext(), findPrevious()).

    Example:
    \code
	QListMutableIterator<int> i(list);
        while (i.hasNext()) {
	    int val = i.next();
            if (val < -32768 || val > 32767)
		i.remove();
        }
    \endcode

    \sa insert(), setValue()
*/

/*! \fn void QLinkedListMutableIterator::remove()

    Removes the last item that was jumped over using one of the
    traversal functions (next(), previous(), findNext(), findPrevious()).

    Example:
    \code
	QLinkedListMutableIterator<int> i(list);
        while (i.hasNext()) {
	    int val = i.next();
            if (val < -32768 || val > 32767)
		i.remove();
        }
    \endcode

    \sa insert(), setValue()
*/

/*! \fn void QVectorMutableIterator::remove()

    Removes the last item that was jumped over using one of the
    traversal functions (next(), previous(), findNext(), findPrevious()).

    Example:
    \code
	QVectorMutableIterator<int> i(list);
        while (i.hasNext()) {
	    int val = i.next();
            if (val < -32768 || val > 32767)
		i.remove();
        }
    \endcode

    \sa insert(), setValue()
*/

/*! \fn void QListMutableIterator::setValue(const T &value) const

    Replaces the value of the last item that was jumped over using
    one of the traversal functions with \a value.

    The traversal functions are next(), previous(), findNext(), and
    findPrevious().

    Example:
    \code
	QListMutableIterator<double> i(list);
        while (i.hasNext()) {
	    double val = i.next();
            i.setValue(sqrt(val));
        }
    \endcode

    \sa value(), remove(), insert()
*/

/*! \fn void QLinkedListMutableIterator::setValue(const T &value) const

    Replaces the value of the last item that was jumped over using
    one of the traversal functions with \a value.

    The traversal functions are next(), previous(), findNext(), and
    findPrevious().

    Example:
    \code
	QLinkedListMutableIterator<double> i(list);
        while (i.hasNext()) {
	    double val = i.next();
            i.setValue(sqrt(val));
        }
    \endcode

    \sa value(), remove(), insert()
*/

/*! \fn void QVectorMutableIterator::setValue(const T &value) const

    Replaces the value of the last item that was jumped over using
    one of the traversal functions with \a value.

    The traversal functions are next(), previous(), findNext(), and
    findPrevious().

    Example:
    \code
	QVectorMutableIterator<double> i(list);
        while (i.hasNext()) {
	    double val = i.next();
            i.setValue(sqrt(val));
        }
    \endcode

    \sa value(), remove(), insert()
*/

/*! \fn const T &QListMutableIterator::value() const
    \fn const T &QLinkedListMutableIterator::value() const
    \fn const T &QVectorMutableIterator::value() const

    Returns the value of the last item that was jumped over using one
    of the traversal functions (next(), previous(), findNext(),
    findPrevious()).

    After a call to next() or findNext(), value() is equivalent to
    peekPrevious(). After a call to previous() or findPrevious(), value() is
    equivalent to peekNext().

    \sa setValue()
*/

/*! \fn void QListMutableIterator::insert(const T &value)
    \fn void QLinkedListMutableIterator::insert(const T &value)
    \fn void QVectorMutableIterator::insert(const T &value)

    Inserts \a value at the current iterator position. After the
    call, the iterator is located just after the inserted item.

    \sa remove(), setValue()
*/

/*! \class QMapIterator
    \brief The QMapIterator class provides a Java-style const iterator for QMap and QMultiMap.

    QMap has both \l{Java-style iterators} and \l{STL-style
    iterators}. The Java-style iterators are more high-level and
    easier to use than the STL-style iterators; on the other hand,
    they are slightly less efficient.

    QMapIterator\<Key, T\> allows you to iterate over a QMap (or a
    QMultiMap). If you want to modify the map as you iterate over
    it, use QMapMutableIterator instead.

    The QMapIterator constructor takes a QMap as argument. After
    construction, the iterator is located at the very beginning of
    the map (before the first item). Here's how to iterate over all
    the elements sequentially:

    \code
	QMap<int, QWidget *> map;
        ...
	QMapIterator<QString, QWidget *> i(map);
        while (i.hasNext()) {
	    i.next();
	    cout << i.key() << ": " << i.value() << endl;
	}
    \endcode

    The next() function returns the next item in the map and
    advances the iterator. The key() and value() functions return the
    key and value of the last item that was jumped over.

    Unlike STL-style iterators, Java-style iterators point \e between
    items rather than directly \e at items. The first call to next()
    advances the iterator to the position between the first and
    second item, and returns the first item; the second call to
    next() advances the iterator to the position between the second
    and third item; and so on.

    \img javaiterators1.png

    Here's how to iterate over the elements in reverse order:

    \code
	QMapIterator<int, QWidget *> i(map);
        i.toBack();
        while (i.hasPrevious()) {
	    i.previous();
	    cout << i.key() << ": " << i.value() << endl;
	}
    \endcode

    If you want to find all occurrences of a particular value, use
    findNext() or findPrevious() in a loop. For example:

    \code
	QMapIterator<int, QWidget *> i(map);
        while (i.findNext(widget)) {
	    cout << "Found widget " << widget << " under key "
		 << i.key() << endl;
        }
    \endcode

    Multiple iterators can be used on the same map. If the map is
    modified while a QMapIterator is active, the QMapIterator will
    continue iterating over the original map, ignoring the modified
    copy.

    \sa QMapMutableIterator, QMap::const_iterator
*/

/*! \class QHashIterator

    \brief The QHashIterator class provides a Java-style const iterator for QHash and QMultiHash.

    QHash has both \l{Java-style iterators} and \l{STL-style
    iterators}. The Java-style iterators are more high-level and
    easier to use than the STL-style iterators; on the other hand,
    they are slightly less efficient.

    QHashIterator\<Key, T\> allows you to iterate over a QHash (or a
    QMultiHash). If you want to modify the hash as you iterate over
    it, use QHashMutableIterator instead.

    The QHashIterator constructor takes a QHash as argument. After
    construction, the iterator is located at the very beginning of
    the hash (before the first item). Here's how to iterate over all
    the elements sequentially:

    \code
	QHash<int, QWidget *> hash;
        ...
	QHashIterator<QString, QWidget *> i(hash);
        while (i.hasNext()) {
	    i.next();
	    cout << i.key() << ": " << i.value() << endl;
	}
    \endcode

    The next() function returns the next item in the hash and
    advances the iterator. The key() and value() functions return the
    key and value of the last item that was jumped over.

    Unlike STL-style iterators, Java-style iterators point \e between
    items rather than directly \e at items. The first call to next()
    advances the iterator to the position between the first and
    second item, and returns the first item; the second call to
    next() advances the iterator to the position between the second
    and third item; and so on.

    \img javaiterators1.png

    Here's how to iterate over the elements in reverse order:

    \code
	QHashIterator<int, QWidget *> i(hash);
        i.toBack();
        while (i.hasPrevious()) {
	    i.previous();
	    cout << i.key() << ": " << i.value() << endl;
	}
    \endcode

    If you want to find all occurrences of a particular value, use
    findNext() or findPrevious() in a loop. For example:

    \code
	QHashIterator<int, QWidget *> i(hash);
        while (i.findNext(widget)) {
	    cout << "Found widget " << widget << " under key "
		 << i.key() << endl;
        }
    \endcode

    Multiple iterators can be used on the same hash. If the hash is
    modified while a QHashIterator is active, the QHashIterator will
    continue iterating over the original hash, ignoring the modified
    copy.

    \sa QHashMutableIterator, QHash::const_iterator
*/

/*! \class QMapMutableIterator
    \brief The QMapMutableIterator class provides a Java-style non-const iterator for QMap and QMultiMap.

    QMap has both \l{Java-style iterators} and \l{STL-style
    iterators}. The Java-style iterators are more high-level and
    easier to use than the STL-style iterators; on the other hand,
    they are slightly less efficient.

    QMapMutableIterator\<Key, T\> allows you to iterate over a QMap
    (or a QMultiMap) and modify the map. If you don't want to modify
    the map (or have a const QMap), use the slightly faster
    QMapIterator instead.

    The QMapMutableIterator constructor takes a QMap as argument.
    After construction, the iterator is located at the very beginning
    of the map (before the first item). Here's how to iterate over
    all the elements sequentially:

    \code
	QMap<int, QWidget *> map;
        ...
	QMapMutableIterator<QString, QWidget *> i(map);
        while (i.hasNext()) {
	    i.next();
	    cout << i.key() << ": " << i.value() << endl;
	}
    \endcode

    The next() function returns the next item in the map and
    advances the iterator. The key() and value() functions return the
    key and value of the last item that was jumped over.

    Unlike STL-style iterators, Java-style iterators point \e between
    items rather than directly \e at items. The first call to next()
    advances the iterator to the position between the first and
    second item, and returns the first item; the second call to
    next() advances the iterator to the position between the second
    and third item; and so on.

    \img javaiterators1.png

    Here's how to iterate over the elements in reverse order:

    \code
	QMapMutableIterator<int, QWidget *> i(map);
        i.toBack();
        while (i.hasPrevious()) {
	    i.previous();
	    cout << i.key() << ": " << i.value() << endl;
	}
    \endcode

    If you want to find all occurrences of a particular value, use
    findNext() or findPrevious() in a loop. For example:

    \code
	QMapMutableIterator<int, QWidget *> i(map);
        while (i.findNext(widget)) {
	    cout << "Found widget " << widget << " under key "
		 << i.key() << endl;
        }
    \endcode

    If you want to remove items as you iterate over the map, use
    remove(). If you want to modify the value of an item, use
    setValue().

    Example:

    \code
	QMapMutableIterator<QString, QString> i(map);
        while (i.hasNext()) {
	    i.next();
            if (i.key() == i.value())
		i.remove();
        }
    \endcode

    The example removes all (key, value) pairs where the key and the
    value are the same.

    \sa QMapIterator, QMap::iterator
*/

/*! \class QHashMutableIterator
    \brief The QHashMutableIterator class provides a Java-style non-const iterator for QHash and QMultiHash.

    QHash has both \l{Java-style iterators} and \l{STL-style
    iterators}. The Java-style iterators are more high-level and
    easier to use than the STL-style iterators; on the other hand,
    they are slightly less efficient.

    QHashMutableIterator\<Key, T\> allows you to iterate over a QHash
    (or a QMultiHash) and modify the hash. If you don't want to modify
    the hash (or have a const QHash), use the slightly faster
    QHashIterator instead.

    The QHashMutableIterator constructor takes a QHash as argument.
    After construction, the iterator is located at the very beginning
    of the hash (before the first item). Here's how to iterate over
    all the elements sequentially:

    \code
	QHash<int, QWidget *> hash;
        ...
	QHashMutableIterator<QString, QWidget *> i(hash);
        while (i.hasNext()) {
	    i.next();
	    cout << i.key() << ": " << i.value() << endl;
	}
    \endcode

    The next() function returns the next item in the hash and
    advances the iterator. The key() and value() functions return the
    key and value of the last item that was jumped over.

    Unlike STL-style iterators, Java-style iterators point \e between
    items rather than directly \e at items. The first call to next()
    advances the iterator to the position between the first and
    second item, and returns the first item; the second call to
    next() advances the iterator to the position between the second
    and third item; and so on.

    \img javaiterators1.png

    Here's how to iterate over the elements in reverse order:

    \code
	QHashMutableIterator<int, QWidget *> i(hash);
        i.toBack();
        while (i.hasPrevious()) {
	    i.previous();
	    cout << i.key() << ": " << i.value() << endl;
	}
    \endcode

    If you want to find all occurrences of a particular value, use
    findNext() or findPrevious() in a loop. For example:

    \code
	QHashMutableIterator<int, QWidget *> i(hash);
        while (i.findNext(widget)) {
	    cout << "Found widget " << widget << " under key "
		 << i.key() << endl;
        }
    \endcode

    If you want to remove items as you iterate over the hash, use
    remove(). If you want to modify the value of an item, use
    setValue().

    Example:

    \code
	QHashMutableIterator<QString, QString> i(hash);
        while (i.hasNext()) {
	    i.next();
            if (i.key() == i.value())
		i.remove();
        }
    \endcode

    The example removes all (key, value) pairs where the key and the
    value are the same.

    \sa QHashIterator, QHash::iterator
*/

/*! \fn QMapIterator::QMapIterator(const QMap<Key, T> &map)
    \fn QMapMutableIterator::QMapMutableIterator(QMap<Key, T> &map)

    Constructs an iterator for traversing \a map. The iterator is set
    to be at the front of the map (before the first item).

    \sa operator=()
*/

/*! \fn QHashIterator::QHashIterator(const QHash<Key, T> &hash)
    \fn QHashMutableIterator::QHashMutableIterator(QHash<Key, T> &hash)

    Constructs an iterator for traversing \a hash. The iterator is
    set to be at the front of the hash (before the first item).

    \sa operator=()
*/

/*!
    \fn QMapMutableIterator::~QMapMutableIterator()
    \fn QHashMutableIterator::~QHashMutableIterator()

    Destroys the iterator.

    \sa operator=()
*/

/*! \fn void QMapIterator::operator=(const QMap<Key, T> &map)
    \fn void QMapMutableIterator::operator=(QMap<Key, T> &map)

    Makes the iterator operate on \a map. The iterator is set to be
    at the front of the map (before the first item).

    \sa toFront(), toBack()
*/

/*! \fn void QHashIterator::operator=(const QHash<Key, T> &hash)
    \fn void QHashMutableIterator::operator=(QHash<Key, T> &hash)

    Makes the iterator operate on \a hash. The iterator is set to be
    at the front of the hash (before the first item).

    \sa toFront(), toBack()
*/

/*! \fn void QMapIterator::toFront()
    \fn void QHashIterator::toFront()
    \fn void QMapMutableIterator::toFront()
    \fn void QHashMutableIterator::toFront()

    Moves the iterator to the front of the container (before the
    first item).

    \sa toBack(), next()
*/

/*! \fn void QMapIterator::toBack()
    \fn void QHashIterator::toBack()
    \fn void QMapMutableIterator::toBack()
    \fn void QHashMutableIterator::toBack()

    Moves the iterator to the back of the container (after the last
    item).

    \sa toFront(), previous()
*/

/*! \fn bool QMapIterator::hasNext() const
    \fn bool QHashIterator::hasNext() const
    \fn bool QMapMutableIterator::hasNext() const
    \fn bool QHashMutableIterator::hasNext() const

    Returns true if there is at least one item ahead of the iterator,
    i.e. the iterator is \e not at the back of the container;
    otherwise returns false.

    \sa hasPrevious(), next()
*/

/*! \fn QMapIterator::Item QMapIterator::next()
    \fn QHashIterator::Item QHashIterator::next()

    Returns the next item and advances the iterator by one position.

    Call key() on the return value to obtain the item's key, and
    value() to obtain the value.

    Calling this function on an iterator located at the back of the
    container leads to undefined results.

    \sa hasNext(), peekNext(), previous()
*/

/*! \fn QMapMutableIterator::Item QMapMutableIterator::next()
    \fn QHashMutableIterator::Item QHashMutableIterator::next()

    Returns the next item and advances the iterator by one position.

    Call key() on the return value to obtain the item's key, and
    value() to obtain the value.

    Calling this function on an iterator located at the back of the
    container leads to undefined results.

    \sa hasNext(), peekNext(), previous()
*/

/*! \fn QMapIterator::Item QMapIterator::peekNext() const
    \fn QHashIterator::Item QHashIterator::peekNext() const

    Returns the next item without moving the iterator.

    Call key() on the return value to obtain the item's key, and
    value() to obtain the value.

    Calling this function on an iterator located at the back of the
    container leads to undefined results.

    \sa hasNext(), next(), peekPrevious()
*/

/*! \fn QMapMutableIterator::Item QMapMutableIterator::peekNext() const
    \fn QHashMutableIterator::Item QHashMutableIterator::peekNext() const

    Returns a reference to the next item without moving the iterator.

    Call key() on the return value to obtain the item's key, and
    value() to obtain the value.

    Calling this function on an iterator located at the back of the
    container leads to undefined results.

    \sa hasNext(), next(), peekPrevious()
*/

/*! \fn bool QMapIterator::hasPrevious() const
    \fn bool QHashIterator::hasPrevious() const
    \fn bool QMapMutableIterator::hasPrevious() const
    \fn bool QHashMutableIterator::hasPrevious() const

    Returns true if there is at least one item behind the iterator,
    i.e. the iterator is \e not at the front of the container;
    otherwise returns false.

    \sa hasNext(), previous()
*/

/*! \fn QMapIterator::Item QMapIterator::previous()
    \fn QHashIterator::Item QHashIterator::previous()

    Returns the previous item and moves the iterator back by one
    position.

    Call key() on the return value to obtain the item's key, and
    value() to obtain the value.

    Calling this function on an iterator located at the front of the
    container leads to undefined results.

    \sa hasPrevious(), peekPrevious(), next()
*/

/*! \fn QMapMutableIterator::Item QMapMutableIterator::previous()
    \fn QHashMutableIterator::Item QHashMutableIterator::previous()

    Returns the previous item and moves the iterator back by one
    position.

    Call key() on the return value to obtain the item's key, and
    value() to obtain the value.

    Calling this function on an iterator located at the front of the
    container leads to undefined results.

    \sa hasPrevious(), peekPrevious(), next()
*/

/*! \fn QMapIterator::Item QMapIterator::peekPrevious() const
    \fn QHashIterator::Item QHashIterator::peekPrevious() const

    Returns the previous item without moving the iterator.

    Call key() on the return value to obtain the item's key, and
    value() to obtain the value.

    Calling this function on an iterator located at the front of the
    container leads to undefined results.

    \sa hasPrevious(), previous(), peekNext()
*/

/*! \fn QMapMutableIterator::Item QMapMutableIterator::peekPrevious() const
    \fn QHashMutableIterator::Item QHashMutableIterator::peekPrevious() const

    Returns the previous item without moving the iterator.

    Call key() on the return value to obtain the item's key, and
    value() to obtain the value.

    Calling this function on an iterator located at the front of the
    container leads to undefined results.

    \sa hasPrevious(), previous(), peekNext()
*/

/*! \fn const T &QMapIterator::value() const
    \fn const T &QHashIterator::value() const

    Returns the value of the last item that was jumped over using one
    of the traversal functions (next(), previous(), findNext(),
    findPrevious()).

    After a call to next() or findNext() or findNextKey(), value() is
    equivalent to peekPrevious().value(). After a call to previous()
    or findPrevious(), value() is equivalent to peekNext().value().

    \sa key()
*/

/*!
    \fn const T &QMapMutableIterator::value() const
    \fn const T &QHashMutableIterator::value() const

    Returns the value of the last item that was jumped over using one
    of the traversal functions (next(), previous(), findNext(),
    findPrevious()).

    After a call to next() or findNext() or findNextKey(), value() is
    equivalent to peekPrevious().value(). After a call to previous()
    or findPrevious(), value() is equivalent to peekNext().value().

    \sa key(), setValue()
*/

/*! \fn const Key &QMapIterator::key() const
    \fn const Key &QHashIterator::key() const
    \fn const Key &QMapMutableIterator::key() const
    \fn const Key &QHashMutableIterator::key() const

    Returns the key of the last item that was jumped over using one
    of the traversal functions (next(), previous(), findNext(),
    findPrevious()).

    After a call to next() or findNext() or findNextKey(), key() is
    equivalent to peekPrevious().key(). After a call to previous() or
    findPrevious(), key() is equivalent to peekNext().key().

    \sa value()
*/

/*! \fn bool QMapIterator::findNext(const T &value)
    \fn bool QHashIterator::findNext(const T &value)
    \fn bool QMapMutableIterator::findNext(const T &value)
    \fn bool QHashMutableIterator::findNext(const T &value)

    Searches for \a value starting from the current iterator position
    forward. Returns true if a (key, value) pair with value \a value
    is found; otherwise returns false.

    After the call, if \a value was found, the iterator is positioned
    just after the matching item; otherwise, the iterator is
    positioned at the back of the container.

    \sa findNextKey(), findPrevious()
*/

/*! \fn bool QMapIterator::findPrevious(const T &value)
    \fn bool QHashIterator::findPrevious(const T &value)
    \fn bool QMapMutableIterator::findPrevious(const T &value)
    \fn bool QHashMutableIterator::findPrevious(const T &value)

    Searches for \a value starting from the current iterator position
    backward. Returns true if a (key, value) pair with value \a value
    is found; otherwise returns false.

    After the call, if \a value was found, the iterator is positioned
    just before the matching item; otherwise, the iterator is
    positioned at the front of the container.

    \sa findNext()
*/

/*! \fn void QMapMutableIterator::remove()
    \fn void QHashMutableIterator::remove()

    Removes the last item that was jumped over using one of the
    traversal functions (next(), previous(), findNext(), findPrevious()).

    \sa setValue()
*/

/*! \fn void QMapMutableIterator::setValue(const T &value)
    \fn void QHashMutableIterator::setValue(const T &value)

    Replaces the value of the last item that was jumped over using
    one of the traversal functions with \a value.

    The traversal functions are next(), previous(), findNext(), and
    findPrevious().

    \sa key(), value(), remove()
*/
