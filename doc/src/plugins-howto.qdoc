/****************************************************************************
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \page plugins-howto.html
    \title How to Create Qt Plugins

    Qt provides two APIs for creating plugins:

    \list
    \o A higher-level API for writing extensions to Qt itself: custom database
       drivers, image formats, text codecs, custom styles, etc.
    \o A lower-lever API for extending Qt applications.
    \endlist

    For example, if you want to write a custom QStyle subclass and
    have Qt applications load it dynamically, you would use the
    higher-level API; whereas if you want to extend \e{Qt Designer},
    you would use the lower-level API.

    Since the higher-level API is built on top of the lower-level API,
    some issues are common to both.

    Topics:

    \tableofcontents

    \section1 The Higher-Level API: Writing Qt Extensions

    Writing a plugin that extends Qt itself is achieved by
    subclassing the appropriate plugin base clase, implementing a few
    functions, and adding a macro.

    There are several plugin base classes. Derived plugins are stored
    by default in the standard plugin directory.

    \table
    \header \o Base Class              \o Default Path                \o Key Case Sensitivity
    \row    \o QAccessibleBridgePlugin \o \c plugins/accessiblebridge \o Case Sensitive
    \row    \o QAccessiblePlugin       \o \c plugins/accessible       \o Case Sensitive
    \row    \o QDecorationPlugin       \o \c plugins/decorations      \o Case Sensitive
    \row    \o QGfxDriverPlugin        \o \c plugins/gfxdrivers       \o Case Sensitive
    \row    \o QIconEnginePlugin       \o \c plugins/iconengines      \o Case Insensitive
    \row    \o QImageIOPlugin          \o \c plugins/imageformats     \o Case Sensitive
    \row    \o QInputContextPlugin     \o \c plugins/inputmethods     \o Case Sensitive
    \row    \o QKbdDriverPlugin        \o \c plugins/kbddrivers       \o Case Sensitive
    \row    \o QMouseDriverPlugin      \o \c plugins/mousedrivers     \o Case Sensitive
    \row    \o QPictureFormatPlugin    \o \c plugins/pictureformats   \o Case Sensitive
    \row    \o QSqlDriverPlugin        \o \c plugins/sqldrivers       \o Case Sensitive
    \row    \o QStylePlugin            \o \c plugins/styles           \o Case Insensitive
    \row    \o QTextCodecPlugin        \o \c plugins/codecs           \o Case Sensitive
    \endtable

    But where is the \c{plugins} directory? When the application is
    run, Qt will first treat the application's executable directory
    as the \c{pluginsbase}. For example if the application is in
    \c{C:\Program Files\MyApp} and has a style plugin, Qt will look
    in \c{C:\Program Files\MyApp\styles}. (See
    QCoreApplication::applicationDirPath() for how to find out where
    the application's executable is.) Qt will also look in the
    directory specified by
    QLibraryInfo::location(QLibraryInfo::PluginsPath), which
    typically is located in \c QTDIR/plugins (where \c QTDIR is the
    directory where Qt is installed). If you want Qt to look in
    additional places you can add as many paths as you need with
    calls to QCoreApplication::addLibraryPath(). And if you want to
    set your own path or paths you can use
    QCoreApplication::setLibraryPaths().

    Suppose that you have a new style class called \c MyStyle that
    you want to make available as a plugin. The required code is
    straightforward:

    \code
        class MyStylePlugin : public QStylePlugin
        {
        public:
            QStringList keys() const {
                return QStringList() << "mystyle"; 
            }

            QStyle *create(const QString &key) { 
                if (key == "mystyle")
                    return new MyStyle;
                return 0;
            }
        };

        Q_EXPORT_PLUGIN(MyStylePlugin)
    \endcode

    (Note that QStylePlugin is case-insensitive, and the lower-case
    version of the key is used; most other plugins are case
    sensitive.)

    For database drivers, image formats, text codecs, and most other
    plugin types, no explicit object creation is required. Qt will
    find and create them as required. Styles are an exception, since
    you might want to set a style explicitly in code. To apply a
    style, use code like this:

    \code
        QApplication::setStyle(QStyleFactory::create("MyStyle"));
    \endcode

    Some plugin classes require additional functions to be
    implemented. See the class documentation for details of the
    virtual functions that must be reimplemented for each type of
    plugin.

    Qt applications automatically know which plugins are available,
    because plugins are stored in the standard plugin subdirectories.
    Because of this applications don't require any code to find and load
    plugins, since Qt handles them automatically.

    The default directory for plugins is \c{QTDIR/plugins} (where \c
    QTDIR is the directory where Qt is installed), with each type of
    plugin in a subdirectory for that type, e.g. \c styles. If you
    want your applications to use plugins and you don't want to use
    the standard plugins path, have your installation process
    determine the path you want to use for the plugins, and save the
    path, e.g. using QSettings, for the application to read when it
    runs. The application can then call
    QCoreApplication::addLibraryPath() with this path and your
    plugins will be available to the application. Note that the final
    part of the path (e.g., \c styles) cannot be changed.

    The normal way to include a plugin with an application is either
    to compile it in with the application or to compile it into a
    dynamic library and use it like any other library. If you want
    the plugin to be loadable then one approach is to create a
    subdirectory under the application and place the plugin in that
    directory.

    \section1 The Lower-Level API: Extending Qt Applications

    Not only Qt itself but also Qt application can be extended
    through plugins. This requires the application to detect and load
    plugins using QPluginLoader. In that context, plugins may provide
    arbitrary functionality and are not limited to database drivers,
    image formats, text codecs, styles, and the other types of plugin
    that extend Qt's functionality.

    Making an application extensible through plugins involves the
    following steps:

    \list 1
    \o Define a set of interfaces (classes with only pure virtual
       functions) used to talk to the plugins.
    \o Use the Q_DECLARE_INTERFACE() macro to tell Qt's
       \l{meta-object system} about the interface.
    \o Use QPluginLoader in the application to load the plugins.
    \o Use qobject_cast() to test whether a plugin implements a given
       interface.
    \endlist

    Writing a plugin involves these steps:

    \list 1
    \o Declare a plugin class that inherits from QObject and from the
       interfaces that the plugin wants to provide.
    \o Use the Q_INTERFACES() macro to tell Qt's \l{meta-object
       system} about the interfaces.
    \o Export the plugin using the Q_EXPORT_PLUGIN() macro.
    \o Build the plugin using an suitable \c .pro file.
    \endlist

    For example, here's the definition of an interface class:

    \quotefromfile tools/plugandpaint/interfaces.h
    \skipto class FilterInterface
    \printuntil };
    \skipto Q_DECLARE_INTERFACE(FilterInterface
    \printuntil com.trolltech

    Here's the definition of a plugin class that implements that
    interface:

    \quotefromfile tools/plugandpaintplugins/extrafilters/extrafiltersplugin.h
    \skipto #include
    \printuntil };

    The \l{tools/plugandpaint}{Plug & Paint} example documentation
    explains this process in detail. See also
    \l{Creating Custom Widgets for Qt Designer} for information about issues
    that are specific to \QD.

    \section1 Loading and Verifying Plugins

    When loading plugins, the Qt library does some sanity checking to
    determine whether or not the plugin can be loaded and used. This
    provides the ability to have multiple versions and configurations of
    the Qt library installed side by side.

    \list
    \o Plugins linked with a Qt library that has a higher major and/or
       minor version number will not be loaded by a library with a lower
       major and/or minor version number.

       \e {Rationale:}
       A plugin linked against a newer Qt library may use new
       features that are not available in older versions. Trolltech
       has a policy of adding new features and APIs only between minor
       releases, which is why this test only looks at the major and minor
       version numbers, and not at the patch version number.

    \o The Qt library and all plugins are built using a \e {build
       key}. The build key in the Qt library is examined against the build
       key in the plugin, and if they match, the plugin is loaded. If the
       build keys do not match, then the Qt library refuses to load the
       plugin.

       \e {Rationale:}
       See the Rationale for the build key below.
    \endlist

    When building plugins to extend an application, it is important to ensure
    that the plugin is configured in the same way as the application. This means
    that if the application was built in release mode, plugins should be built
    in release mode, too. 

    If you configure Qt to be built in both debug and release modes,
    but only build applications in release mode, you need to ensure that your
    plugins are also built in release mode. By default, if a debug build of Qt is
    available, plugins will \e only be built in debug mode. To force the
    plugins to be built in release mode, add the following line to the plugin's
    project file:

    \code
    CONFIG += release
    \endcode

    This will ensure that the plugin is compatible with the version of the library
    used in the application.

    \section1 The Build Key

    When loading plugins, Qt checks the build key of each plugin against its
    own configuration to ensure that only compatible plugins are loaded; any
    plugins that are configured differently are not loaded.

    The build key contains the following information:
    \list
    \o Architecture, operating system and compiler.

       \e {Rationale:}
       In cases where different versions of the same compiler do not
       produce binary compatible code, the version of the compiler is
       also present in the build key.

    \o Configuration of the Qt library. The configuration is a list
       of the missing features that affect the available API in the
       library. 

       \e {Rationale:}
       Two different configurations of the same version of
       the Qt library are not binary compatible. The Qt library that
       loads the plugin uses the list of (missing) features to
       determine if the plugin is binary compatible.

       \e {Note:} There are cases where a plugin can use features that are
       available in two different configurations. However, the
       developer writing plugins would need to know which features are
       in use, both in their plugin and internally by the utility
       classes in Qt. The Qt library would require complex feature
       and dependency queries and verification when loading plugins.
       Requiring this would place an unnecessary burden on the developer, and
       increase the overhead of loading a plugin. To reduce both
       development time and application runtime costs, a simple string
       comparision of the build keys is used.

    \o Optionally, an extra string may be specified on the configure
       script command line.

       \e {Rationale:}
       When distributing binaries of the Qt library with an
       application, this provides a way for developers to write
       plugins that can only be loaded by the library with which the
       plugins were linked.
    \endlist

    \sa QPluginLoader, QLibrary
*/
