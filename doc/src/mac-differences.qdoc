/****************************************************************************
**
** Qt/Mac documentation.
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \page mac-differences.html

    \title Qt/Mac-Specific Issues

    This file outlines known issues and possible workarounds for
    limitations on Mac OS X with Qt. Contact Trolltech support if you find
    additional issues which are not covered here.

    See also the document \link qtmac-as-native.html Qt/Mac is Mac OS X
    Native\endlink.

    \tableofcontents

    \section1 GUI Applications

    GUI Applications must be run out of a bundle (something like widgets.app/)
    or using the open(1) command. Mac OS X needs this to dispatch events
    correctly, as well as gaining access to the menu bar.
    
    If you are using older versions of GDB you must run with the full path to
    the executable.  Later versions allow you to pass the bundle name on the
    command line.

    \section1 QCursor

    Mac OS X only supports 16x16 custom cursors. For now the only
    workaround to this problem is to use a small customs cursors (16x16)
    with QCursor.

    \section1 Painting
    Mac OS X always double buffers the screen so the \l{WA_PaintOnScreen} attribute
    has no effect. Also it is impossible to paint outside of a paint event so
    \l{WA_PaintOutsidePaintEvent} has no effect either.

    \section1 Library Support

    \section2 Bundle-Based Libraries

    If you want to incorporate dynamic libraries as part of your Mac OS X
    application bundle (the application directory), then you place these into a
    directory called Frameworks, a subdirectory of the application bundle.

    The application finds these dynamic libraries if the libraries have an
    install name of "@executable_path/../Frameworks/libname.dylib.

    If you use \c qmake and Makefiles, use the \c QMAKE_LFFLAGS_SONAME setting:

    \code
        QMAKE_LFLAGS_SONAME  = -Wl,-install_name,@executable_path/../Frameworks/
    \endcode

    Alternatively you can modify the intall name using the install_name_tool(1)
    command line tool. See its manpage for more information.

    Note that the \c DYLD_LIBRARY_PATH environment variable will override these
    settings, and any other default paths such as a lookup of dynamic
    libraries inside \c /usr/lib and similar default locations.

    \section2 Combining Libraries

    If you want to build a new dynamic library combining the Qt 4.0 dynamic
    libraries, you need to introduce the \c{ld -r} flag. Then relocation
    information is stored in the the output file, so that this file could
    be the subject of another \c ld run. This is done by setting the \c -r flag
    in the \c .pro file, and the \c LFLAGS settings.

    \section2 Initialization Order

    dyld(1) will call global static initializers in the order in which
    they are linked into your application. If a library links against Qt
    and references globals in Qt (from global initializers in your own
    library) you should be sure to link against Qt before your library,
    otherwise the result will be undefined (as Qt's global initializers
    have not been called yet).

    \section1 Compiler Settings

    \section2 Compile-Time Flags

    There are two flags that are helpful when wanting to define Mac OS X specific code.

    \c Q_OS_DARWIN is defined when Qt detects you are on a Darwin-based system (including the Open Source version)
    \c Q_WS_MAC is defined when we the Mac OS X GUI is present.

    \c Q_OS_MAC is defined as a convenience and is available whenever Q_OS_DARWIN is defined.

    If you desire to define for specific versions of Mac OS X, use the
    availability macros defined in /usr/include/AvailabilityMacros.h.

    See QSysInfo for information on runtime version checking.

    \section1 Mac OS X Native API Access

    \section2 Accessing the Bundle Path

    The Mac OS X application is actually a directory (ending with \c .app). This
    directory has various sub-directories and sources. In case you want
    to place for example the plugin directory, inside this bundle, then you need
    to find out where the bundle resides on the disk. The following code will
    do this:

    \code
	CFURLRef pluginRef = CFBundleCopyBundleURL(CFBundleGetMainBundle());
	CFStringRef macPath = CFURLCopyFileSystemPath(pluginRef, 
                                               kCFURLPOSIXPathStyle);
	const char *pathPtr = CFStringGetCStringPtr(macPath, 
                                               CFStringGetSystemEncoding());
	qDebug("Path = %s", pathPtr);
        CFRelease(pluginRef);
        CFRelease(macPath);
    \endcode

    Do not forget to protect this code with an #if defined(Q_WS_MAC) macro if
    you are deploying on more than one platform.

    \section2 Translating the Application Menu and Native Dialogs

    The items in the Application Menu will be merged correctly for you
    localized application, but they will not show up translated until
    you add a localized resource folder inside the Bundle see:

    http://developer.apple.com/documentation/CoreFoundation/Conceptual/CFBundles/index.html

    And look for the heading: Adding Localized Resources

    The main thing you need to do is create a file called locversion.plist.
    Here is an example one for Norwegian:

    \code
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN"
        "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>LprojCompatibleVersion</key>
            <string>123</string>
            <key>LprojLocale</key>
            <string>no</string>
            <key>LprojRevisionLevel</key>
            <string>1</string>
            <key>LprojVersion</key>
            <string>123</string>
        </dict>
        </plist>
    \endcode

    Then when you run the application with your preferred language set to Norwegian
    you should see menu items like "Avslutt" instead of "Quit".

    \section1 User Interface

    \section2 Right-Mouse Clicks

    If you want to provide right-mouse click support for Mac OS X, use the
    QContextMenuEvent class. This will map to a context menu event, in other
    words a menu that will display a popup selection. This is the most common
    use of right-mouse clicks, and maps to a control-click with the Mac OS X
    one-button mouse support.

    \section2 Menu Bar

    Qt/Mac will automatically detect your menu bars for you and turn them
    into Mac native menu bars. Fitting this into your existing Qt application
    will normally be automatic, however, if you have special needs the Qt/Mac
    implementation currently selects a menu bar by starting at the active window
    (i.e. QApplication::activeWindow()), and applying:

    \list 1
    \i If the window has a QMenuBar then it is used.
    \i If the window is a modal then its menu bar is used. If no menu bar is
       specified then a default menu bar is used (as documented below).
    \i If the window has no parent then the default menub ar is used (as documented below).
    \endlist

    The above 3 guidelines are followed all the way up the parent window chain until
    one of the above is satisifed. If all else fails a default menu bar will be
    created, the default menu bar on Qt/Mac is an empty menu bar, however you can
    create a different default menu bar by creating a parentless QMenuBar; the
    first one created will be designated the default menu bar, and will be
    used whenever a default menu bar is needed.

    \section1 Limitations

    \section2 Menu Items

    \list

    \i Items with accelerators that have more than one keystroke
    (QKeySequence) will not be honored, and the first key will be used.

    \endlist

    \section2 Native Widgets

    Qt/Mac now has support for sheets, drawers. Represented as \l {WMacSheet} and
    \l {WMacDrawer} in the window flags respectiviely. Brushed metal windows are
    also possible using \l {WA_MacMetalStyle} window attribute.

    This beta does not support the chooser (Panther-style tabs). There may be
    support for these in a future version of Qt.
*/
