/*!
\page designer-manual.html

\title Qt Designer

\section1 Overview

\QD is Trolltech's tool for designing and building graphical user
interfaces (GUIs) from Qt components. It allows you to design and build
widgets and dialogs using on-screen forms using the same widgets that
will be used in your application.
Components created with \QD can also take advantage of Qt's
signals and slots, and they can even be previewed so that you can
be certain that they will look and feel exactly as you expect.

\list
\i \l{designer-getting-started.html}{Getting Started}
  \list
  \i \l{designer-getting-started.html#LaunchingDesigner}{Launching Designer}
  \i \l{designer-getting-started.html#TheUserInterface}{The User Interface}
  \endlist
\i \l{designer-designing-a-component.html}{Designing a Component}
  \list
  \i \l{designer-designing-a-component.html#CreatingADialog}{Creating a Dialog}
  \i \l{designer-designing-a-component.html#ComposingTheDialog}{Composing The Dialog}
  \i \l{designer-designing-a-component.html#CreatingALayout}{Creating a Layout}
  \endlist
\i \l{designer-using-a-component.html}{Using a Component In Your Application}
\endlist

*/

/*!
\page designer-getting-started.html

\title Getting Started

\section1 Overview

This manual covers the fundamental steps that most users will take when
creating graphical user interfaces with \QD. We will introduce the
main features of the tool by creating a simple dialog that we can use
directly, or subclass in an example program.

\image designer-getting-started.png A simple dialog produced with \QD.

\target LaunchingDesigner
\section1 Launching Designer

The way that you launch \QD depends on your platform:

\list
\i On Windows, click the Start button, open the \e Programs submenu, open
the \e{Qt 4} submenu, and click \e Designer.
\i On Unix or Linux, you may find a \QD icon on the desktop background or
in the desktop start menu under the \e Programming or \e Development
submenus. You can launch \QD from this icon. Alternatively, you can
enter \c{designer} in a terminal window.
\i On Mac OS X, double click on \QD in the Finder.
\endlist

\target TheUserInterface
\section1 The User Interface

\QD provides a multi-window user interface that can be used natively, or
from within an integrated development environment (IDE). You can arrange
each of the tool panels to suit your own working style. The main window
consists of a menu bar, a tool bar, and a toolbox that contains the
widgets you can use to create your user interface.

\table
\row
\i \inlineimage designer-main-window.png
\i \bold{Designer's main window:}
The menu bar provides all the standard functions for opening and closing
forms, editing, and lets you control which of the tool panels are shown.
When a new component is being designed, the form used to compose its
user interface can also be managed from \QD's main menu.

The tool bar displays common actions that are used when editing a form.
These are also available via the main menu.

The toolbox provides common widgets that are used to design components.
The toolbox contains groups of widgets in different categories.
\omit
It can also be extended to support user-defined categories.
\endomit
\endtable

Most features of \QD are accessible via the menu bar, tool bar, or the
toolbox. Some features are also available through context menus that can
opened over the form windows. On most platforms, the right mouse button is
used to open context menus.

\l{designer-manual.html}{[Qt Designer]}
\l{designer-designing-a-component.html}{[Designing a Component]}
*/

/*!
\page designer-designing-a-component.html

\title Designing a Component

\tableofcontents

\section1 Overview

In this chapter we will look at the main steps that users will take
when creating new graphical user interfaces with \QD. Usually,
creating a new component for an application will involve various
activities:

\list
\i Deciding which kind of component to use.
\i Composing the user interface by adding widgets from the tool panel to
   the form.
\i Laying out the contents of the form.
\i Setting the tab order of the widgets.
\i Connecting widgets together with signals and slots by using the connection
   editor.
\i Previewing the form.
\endlist

Users may find that they they prefer to perform these activities in a
different order, and we expect that for complex widgets the design process
may involve many iterations of these steps. However, we present each of the
activities in the above order, and leave it up to the user to find the
approach that suits them best.

In this chapter, we show how to use Designer to create a simple dialog
which we will later use in a simple application. This is not intended
to be a tutorial; the dialog is just a useful example that will help
explain certain features of the tool. General concepts are explained
in the gray boxes in each section, and you can follow links from these
to read more about the features being discussed.

\target CreatingADialog
\section1 Creating a Dialog

\QD can be used to create user interfaces for different purposes,
and provides different kinds of forms for each of these. The first choice
that you face when creating a new user interface is to decide which kind of
form you will be using; for example, you may require a dialog rather than
a generic custom widget. New forms can be created by opening the \key File
menu and selecting the \key{New Form...} option, or by pressing \key{Ctrl+N}.

\table
\row \i
\inlineimage designer-choosing-form.png Choosing a form for the component you need.
\i \bold{Choosing a form:} \QD provides a number of template forms that are
suitable for different kinds of components. You can either choose one of
these templates or open an form that was saved earlier.
\endtable

If your requirements later change so that you need to supply a different
type of component, you can easily reuse the contents of your existing form.
For our example, we select the form that is suitable for a dialog, and an
empty form is created ready for use.

\omit
\image designer-empty-form.png
\endomit

\target ComposingTheDialog
\section1 Composing The Dialog

The empty form is displayed as an empty widget with a grid pattern overlayed
on the widget area in a style similar to many drawing packages. 
\QD provides two different editing modes: in form editing mode, widgets can
be arranged, resized, and configured in the form; in connection editing mode,
signals and slots connections can be made between the widgets.

We ensure that \QD is in form editing mode by selecting the ### entry from
the ### menu, or by giving keyboard focus to the form and pressing
\key ###. This makes it possible to drag widgets from the main toolbox
onto the form.

\table
\row \i
\l{designer-editing-mode.html}{\inlineimage designer-editing-modes.png}
\i \bold{Editing modes:} In \l{designer-editing-mode.html}{form editing mode},
we can change the appearance of the form, add layouts, and edit the properties
of each widget.

In \l{designer-connection-mode.html}{connection editing mode}, we can connect
widgets together using Qt's signals and slots mechanism.
\endtable

For our example, we will create a dialog that lets the user create an image
with a given size and color depth - these properties can be represented by
spinboxes and a combobox. We will also provide a line edit so that the user
can specify a name for the image if they want.

Before we begin adding widgets to the form, it is useful to resize it to
give us the required amount of space to work with. We can make the form
larger than necessary because it can be resized again later.

We start composing the dialog by placing some text labels onto the form.
This is achieved by dragging each \e Label from the \e Display section
of the toolbox onto the form. We add some spinboxes and a combobox from
the \e Input section of the toolbox, some spacers from the \e Spacers
section, and two push buttons from the \e Buttons section.
It is useful to place the widgets where they are needed on the form
because it helps visualize how it will appear when it is finished.

\image designer-dialog-initial.png

The label text and initial values are changed by using the Property
Editor. This can be accessed by opening the \e Tools menu in \QD's main
window and selecting \e{Property Editor}, or by pressing \key{Ctrl+I}.
For the labels, we only need to change the \c text properties; for the
spinboxes, we must change the \c value, \c minimum, and \c maximum
properties.

\table
\row \i
\l{designer-editing-mode.html#EditingWidgets}{\inlineimage designer-property-editor.png}
\i \bold{The Property Editor:} Widgets
\endtable

Widgets and spacers can be moved around on the form by dragging them to
their new locations. Widgets can be resized 


\target CreatingALayout
\section1 Creating a Layout

In Qt, widget positions and sizes are organized by layout managers. Before a
form can be used, it is necessary to put each of the widgets into layouts,
and set the form's overall layout. \QD provides all the standard types of
layout, making it simple to experiment with different ways of arranging
components.

At any point during editing, we can experiment with the layout of the widgets
on the form by selecting one of the standard Qt layouts. These can be selected
in \QD's tool bar or from the form's context menu.



\l{designer-getting-started.html}{[Getting Started]}
\l{designer-manual.html}{[Up]}
\l{designer-using-a-component.html}{[Using a Component In Your Application]}
*/

/*!
\page designer-using-a-component.html

\title Using a Component In Your Application


\l{designer-designing-a-component.html}{[Designing a Component]}
\l{designer-manual.html}{[Up]}

*/

/*!
\page designer-editing-mode.html

\title Editing Mode

\image designer-editing-mode.png

\section1 Overview

In \QD's editing mode, items can be dragged from the main window's toolbox to
a form, edited, dragged around on the form, and even dragged between forms.
The editing interface is intuitive for simple operations, and still provides
support for flexible layout features.

\target EditingWidgets
\section1 Editing Widgets

In editing mode

\section2 Selecting

Widgets are selected by clicking on them with the left mouse button. When
selected, resize handles are shown at the corners and on each edge of the
widget, indicating that the widget can be resized.

The Property Editor always shows the properties of the currently selected
widget.



\section2 Dragging

\section2 Resizing


\table
\row \i
\inlineimage designer-dragging-onto-form.png
\i \bold{Drag and drop:} \QD makes extensive use of the drag and drop
facilities provided by Qt. Widgets can be dragged from the toolbox and dropped
onto the form.

Widgets can also be "cloned" on the form: Holding down \key Ctrl and dragging
the widget creates a copy of the widget that can be dragged to a new position.
\endtable

\section1 Layout Managers

Before the form can be used The widgets on the form are 

\section2 Horizontal and Vertical Layouts

\section2 Grid Layout

*/

/*!
\page designer-connection-mode.html

\title Connection Mode

\image designer-connection-mode.png
*/
