/****************************************************************************
**
** Copyright (C) 2006-$THISYEAR$ $TROLLTECH$. All rights reserved.
**
** This file is part of the $MODULE$ of the Qt Toolkit.
**
** $TROLLTECH_DUAL_LICENSE$
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \page qtopiacore-fonts.html

    \title Qtopia Core Fonts
    \ingroup qtopiacore

    \l {Qtopia Core} uses the \l
    {http://freetype.sourceforge.net/freetype2/index.html}{FreeType 2}
    font engine to produce font output. For this reason it supports
    the same font formats as this font engine. In addition, \l {Qtopia
    Core} supports the Qt Prerendered Font (\l QPF), a light-weight
    non-scalable font format specific to \l {Qtopia Core}. Several of
    the formats may be rendered using anti-aliasing for improved
    readability on low-resolution devices.

    When \l {Qtopia Core} applications run, they look for a file called \c
    fontdir in \l {Qtopia Core}'s \c /lib/fonts/ directory. This file
    defines the fonts that are available to the application (i.e. the
    fonts located in the \c /lib/fonts/ directory), and can be
    modified to specify the preferred fonts.

    Support for other font formats can be added, contact
    \l{mailto:info@trolltech.com}{info@trolltech.com} for more
    information.

    \tableofcontents

    \table 100%
    \row
    \o
    \bold {Optimization}

    Both the \l FreeType and \l QPF formats are features that can be
    disabled using \l {Qtopia Core}'s feature definition system,
    reducing the size of Qt and saving resources.

    Note that at least one font format must be defined.

    See the \l {Fine-Tuning Features in Qtopia Core} documentation for
    details.

    \o
    \inlineimage qtopiacore-fontfeatures.png
    \endtable

    All supported fonts use the Unicode character encoding. Most fonts
    available today do, but they usually don't contain \e all the
    Unicode characters. A complete 16-point Unicode font uses over 1
    MB of memory.

    \warning The font definition file, naming conventions for the font
    files, and the format of QPF files may change in future versions
    of \l {Qtopia Core}.

    \target FreeType
    \section1 FreeType Formats

    By default, the \l
    {http://freetype.sourceforge.net/freetype2/index.html}{FreeType 2}
    font engine (and \l {Qtopia Core}) supports the following font formats:

    \list
        \o TrueType (TTF)
        \o PostScript Type1 (PFA/PFB)
        \o Bitmap Distribution Format (BDF)
        \o CID-keyed Type1
        \o Compact Font Format (CFF)
        \o OpenType fonts
        \o SFNT-based bitmap fonts
        \o Portable Compiled Format (PCF)
        \o Microsoft Windows Font File Format (Windows FNT)
        \o Portable Font Resource (PFR)
        \o Type 42 (limited support)
    \endlist

    It is possible to add modules to the \l
    {http://freetype.sourceforge.net/freetype2/index.html}{FreeType 2}
    font engine to support other types of font files. For more
    information, see the font engine's own website: \l
    http://freetype.sourceforge.net/freetype2/index.html.

    \target QPF
    \section1 Qt Prerendered Font

    The Qt Prerendered Font (QPF) is a platform specific, light-weight
    and non-scalable font format.

    With Qt/Embedded (\l {Qtopia Core}'s predecessor) versions 2 and 3, it
    was possible to create custom QPF font files, for example creating
    QPF files from a TrueType (TTF) or Bitmap Distribution Format
    (BDF) font, removing the need for TTF and BDF support. Qt/Embedded
    also provided the \c makeqpf tool, located in Qt's \c tools
    directory, for producing QPF font files.

    Note that the \c makeqpf tool is not yet ported to \l {Qtopia Core}.

\omit
    \section1 Memory Requirements

    Taking advantage of the way the QPF format is structured, Qtopia
    Core memory-maps the data rather than reading and parsing it. This
    reduces RAM consumption even further.

    Scalable fonts use a larger amount of memory per font, but
    these fonts provide a memory saving if many different sizes of each
    font are needed.
\endomit

    \section1 Specifying Fonts

    To specify the application's fonts, you must modify the \c fontdir
    in Qt's \c /lib/fonts/ directory. The file defines the fonts
    available to the application, and has the following format:

    \code
        name file renderer italic weight size flags
    \endcode

    \table 100%
    \header \o Field \o Description
    \row \o \bold name
    \o The name of the font format, e.g.,\c Helvetica, \c Times, etc.
    \row \o \bold file
    \o The name of the file containing the font, e.g., \c
    helvR0810.bdf, \c verdana.ttf, etc.
    \row \o \bold renderer
    \o Specifies the font engine that should be used to render the
    font, currently only the FreeType font engine (\c FT) is
    supported.
    \row \o \bold italic
    \o Specifies whether the font is italic or not; the accepted
    values are \c y or \c n.
    \row \o \bold weight
    \o Specifies the font's weight: \c 50 is normal, \c 75 is bold,
    etc.
    \row \o \bold size
    \o Specifies the font size, i.e., point size * 10. For example, a
    value of 120 means 12pt. A value of 0 means that the font is
    scalable.
    \row \o \bold flags
    \o Various flags specifying the font rendering and encoding:
    \list
        \o \c s: smooth (anti-aliased)
        \o \c u: Unicode range when saving (the default is Latin1)
        \o \c a: ASCII range when saving (the default is Latin1)
    \endlist
    \endtable

    The font definition file does not specify \l QPF fonts; these are
    loaded directly from the directory containing the \c fontdir
    file. Note that the file name describes the font, for example \c
    helvetica_120_50.qpf is 12 point Helvetica while \c
    helvetica_120_50i.qpf is 12 point Helvetica \e italic.
*/
