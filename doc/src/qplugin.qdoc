/****************************************************************************
**
** Copyright (C) 1992-$THISYEAR$ $TROLLTECH$. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \headerfile <QtPlugin>
    \title Macros for Defining Plugins

    \brief The <QtPlugin> header files defines macros for defining plugins.

    \sa {How to Create Qt Plugins}
*/

/*!
    \macro Q_DECLARE_INTERFACE(ClassName, Identifier)
    \relates <QtPlugin>

    This macro associates the given \a Identifier (a string literal)
    to the interface class called \a ClassName. The \a Identifier must
    be unique. For example:

    \quotefromfile tools/plugandpaint/interfaces.h
    \skipto Q_DECLARE_INTERFACE
    \printuntil )

    This macro is normally used right after the class definition for
    \a ClassName, in a header file. See the
    \l{tools/plugandpaint}{Plug & Paint} example for details.

    If you want to use Q_DECLARE_INTERFACE with interface classes
    declared in a namespace then you have to make sure the Q_DECLARE_INTERFACE
    is not inside a namespace though. For example:
    \code
        namespace Foo
        {
            struct MyInterface { ... };
        }

        Q_DECLARE_INTERFACE(Foo::MyInterface, "org.examples.MyInterface")
    \endcode

    \sa Q_INTERFACES(), Q_EXPORT_PLUGIN2(), {How to Create Qt Plugins}
*/

/*!
    \macro Q_EXPORT_PLUGIN(ClassName)
    \relates <QtPlugin>
    \obsolete

    Use Q_EXPORT_PLUGIN2() instead. This macro is equivalent to
    Q_EXPORT_PLUGIN2(\a ClassName, \a ClassName).
*/

/*!
    \macro Q_EXPORT_PLUGIN2(PluginName, ClassName)
    \relates <QtPlugin>
    \since 4.1
    \keyword Q_EXPORT_PLUGIN2

    This macro exports the plugin class \a ClassName with the name \a
    PluginName. There should be exactly one occurrence of this macro in a Qt
    plugin's source code (in an implementation file).

    Example:

    \code
        Q_EXPORT_PLUGIN2(pnp_extrafilters, ExtraFiltersPlugin)
    \endcode

    See the \l{tools/plugandpaint}{Plug & Paint} example for details.

    \sa Q_DECLARE_INTERFACE(), {How to Create Qt Plugins}
*/

/*!
    \macro Q_IMPORT_PLUGIN(PluginName)
    \relates <QtPlugin>

    This macro imports the plugin named \a PluginName. Inserting this macro
    into your application's source code will allow you to
    make use of a static plugin.

    Example:

    \code
        Q_IMPORT_PLUGIN(qjpeg)
    \endcode

    Static plugins must also be included by the linker when your
    application is built. For Qt's predefined plugins,
    you can use the \c QTPLUGIN to add
    the required plugins to your build. For example:

    \code
        TEMPLATE      = app
        QTPLUGIN     += qjpeg qgif qmng    # image formats
    \endcode

    \sa {Static Plugins}, {How to Create Qt Plugins}, {Using qmake}
*/

/*!
    \macro Q_EXPORT_STATIC_PLUGIN(ClassName)
    \relates <QtPlugin>
    \internal
*/
