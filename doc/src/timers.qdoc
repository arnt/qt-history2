/*!
    \page timers.html
    \title Timers
    \ingroup architecture

    QObject, the base class of all Qt objects, provides the basic
    timer support in Qt. With QObject::startTimer(), you start a
    timer with an interval in milliseconds as argument. The function
    returns a unique integer timer ID. The timer will now fire at
    regular intervals until you explicitly call QObject::killTimer()
    with the timer ID.

    For this mechanism to work, the application must run in an event
    loop. You start an event loop with QApplication::exec(). When a
    timer fires, the application sends a QTimerEvent, and the flow of
    control leaves the event loop until the timer event is processed.
    This implies that a timer cannot fire while your application is
    busy doing something else. In other words: the accuracy of timers
    depends on the granularity of your application.

    There is practically no upper limit for the interval value (more
    than one year is possible). The accuracy depends on the
    underlying operating system. Windows 98 has 55 millisecond
    accuracy; other systems that we have tested can handle 1
    millisecond intervals.

    The main API for the timer functionality is QTimer. That class
    provides regular timers that emit a signal when the timer fires, and
    inherits QObject so that it fits well into the ownership structure
    of most GUI programs. The normal way of using it is like this:

    \quotefromfile snippets/timers/timers.cpp
    \skipto = new QTimer
    \printline = new
    \printline connect(
    \printline start(1000

    The QTimer object is made into a child of this widget, so that
    when this widget is deleted, the timer is deleted too. Next, its
    timeout signal is connected to the slot that will do the work,
    and finally it's started.

    QTimer also provides a static function for single-shot timers.
    For example:

    \skipto singleShot
    \printline singleShot

    200 milliseconds (0.2 seconds) after this line of code is
    executed, the \c updateCaption() slot will be called.

    For QTimer to work, you must have an event loop in your
    application; that is, you must call QCoreApplication::exec()
    somewhere. Timer events will be delivered only while the event
    loop is running. In multithreaded applications, you can use timer
    events in any thread that has an event loop. To start an event
    loop from a non-GUI thread, use QThread::exec().

    The \l{widgets/analogclock}{Analog Clock} example shows how to use
    QTimer to redraw a widget at regular intervals. From \c{AnalogClock}'s
    implementation:

    \quotefromfile widgets/analogclock/analogclock.cpp
    \skipto ::AnalogClock
    \printline ::
    \printline : QWidget
    \printline {
    \printline QTimer
    \printline connect(
    \printline start(1000)
    \dots
    \skipto /^\}$/
    \printline }

    Every second, QTimer will call the QWidget::update() slot to
    refresh the clock's display.

    If you already have a QObject subclass and want an easy
    optimization, you can use QBasicTimer instead of QTimer. With
    QBasicTimer, you must reimplement
    \l{QObject::timerEvent()}{timerEvent()} in your QObject subclass
    and handle the timeout there. The \l{widgets/wiggly}{Wiggly}
    example shows how to use QBasicTimer.
*/
