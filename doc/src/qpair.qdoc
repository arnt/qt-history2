/****************************************************************************
**
** QPair class documentation.
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*****************************************************************************
  QPair documentation
 *****************************************************************************/


/*!
    \class QPair
    \brief The QPair class is a template class that stores a pair of items.

    \ingroup tools
    \ingroup shared
    
    QPair\<T1, T2\> can be used in your application if the STL \c
    pair type is not available. It stores one value of type T1 and
    one value of type T2. It can be used as a return value for a
    function that needs to return two values, or as the value type of
    a \l{generic container}.

    Here's an example of a QPair that stores one QString and one \c
    double value:

    \code
        QPair<QString, double> pair;
    \endcode

    The components are accessible as public data members called \l
    first and \l second. For example:

    \code
        pair.first = "pi";
        pair.second = 3.14159265358979323846;
    \endcode

    QPair's template data types (T1 and T2) must be \l{assignable
    data types}. You cannot, for example, store a QWidget as a value;
    instead, store a QWidget *. A few functions have additional
    requirements; these requirements are documented on a per-function
    basis.

    \sa {Generic Containers}
*/

/*! \enum QPair::first_type

    The type of the first element in the pair (T1).

    \sa first
*/

/*! \enum QPair::second_type

    The type of the second element in the pair (T2).

    \sa second
*/

/*! \variable QPair::first

    The first element in the pair.
*/

/*! \variable QPair::second

    The second element in the pair.
*/

/*! \fn QPair::QPair()

    Constructs an empty pair. The \c first and \c second elements are
    initialized with \l{default-constructed values}.
*/

/*!
    \fn QPair::QPair(const T1 &value1, const T2 &value2)

    Constructs a pair and initializes the \c first element with \a
    value1 and the \c second element with \a value2.

    \sa qMakePair()
*/

/*!
    \fn QPair &QPair::operator=(const QPair &other)

    Assigns \a other to this pair.
*/

/*! \fn bool operator==(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)

    \relates QPair

    Returns true if \a p1 is equal to \a p2; otherwise returns false.
    Two pairs compare equal if their \c first data members compare
    equal and if their \c second data members compare equal.

    This function requires the T1 and T2 types to have an
    implementation of \c operator==().
*/

/*! \fn bool operator!=(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)

    \relates QPair

    Returns true if \a p1 is not equal to \a p2; otherwise returns
    false. Two pairs compare as not equal if their \c first data
    members are not equal or if their \c second data members are not
    equal.

    This function requires the T1 and T2 types to have an
    implementation of \c operator==().
*/

/*! \fn bool operator<(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)

    \relates QPair

    Returns true if \a p1 is less than \a p2; otherwise returns
    false. The comparison is done on the \c first members of \a p1
    and \a p2; if they compare equal, the \c second members are
    compared to break the tie.

    This function requires the T1 and T2 types to have an
    implementation of \c operator<().
*/

/*! \fn bool operator>(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)

    \relates QPair

    Returns true if \a p1 is greater than \a p2; otherwise returns
    false. The comparison is done on the \c first members of \a p1
    and \a p2; if they compare equal, the \c second members are
    compared to break the tie.

    This function requires the T1 and T2 types to have an
    implementation of \c operator<().
*/

/*! \fn bool operator<=(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)

    \relates QPair

    Returns true if \a p1 is less than or equal to \a p2; otherwise
    returns false. The comparison is done on the \c first members of
    \a p1 and \a p2; if they compare equal, the \c second members are
    compared to break the tie.

    This function requires the T1 and T2 types to have an
    implementation of \c operator<().
*/

/*! \fn bool operator>=(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)

    \relates QPair

    Returns true if \a p1 is greater than or equal to \a p2;
    otherwise returns false. The comparison is done on the \c first
    members of \a p1 and \a p2; if they compare equal, the \c second
    members are compared to break the tie.

    This function requires the T1 and T2 types to have an
    implementation of \c operator<().
*/

/*!
    \fn QPair<T1, T2> qMakePair(const T1 &value1, const T2 &value2)

    \relates QPair

    Returns a QPair\<T1, T2\> that contains \a value1 and \a value2.
    Example:

    \code
        QList<QPair<int, double> > list;
        list.append(qMakePair(66, 3.14159));
    \endcode

    This is equivalent to QPair<T1, T2>(\a value1, \a value2), but
    usually requires less typing.
*/

/*! \fn QDataStream &operator>>(QDataStream &in, QPair<T1, T2> &pair)

    \relates QPair

    Reads a pair from stream \a in into \a pair.

    This function requires the T1 and T2 types to implement \c operator>>().

    \sa {Format of the QDataStream operators}
*/

/*! \fn QDataStream &operator<<(QDataStream &out, const QPair<T1, T2> &pair)

    \relates QPair

    Writes the pair \a pair to stream \a out.

    This function requires the T1 and T2 types to implement \c operator<<().

    \sa {Format of the QDataStream operators}
*/
