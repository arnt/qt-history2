/*!
    \page qt4-designer.html

    \title The New Qt Designer

    \contentspage {What's New in Qt 4}{Home}
    \previouspage The Qt 4 Main Window Classes
    \nextpage Cross-Platform Accessibility Support in Qt 4

    \QD has been completely re-written based on our experience with the previous
    versions of the product for Qt 3. One of the main new ideas behind this new
    version is to release the application as a collection of interchangeable
    components that include the form editor, widget box, and other useful tools
    for creating graphical user interfaces with Qt. These components can either
    be used together in the \QD application, or independently integrated into
    other systems.
    As a result, certain features such as the project editor and code editor have
    been removed from the version included with this release.

    The current version of \QD is near feature complete and can be used for
    many tasks. However, it is still under continuous development. This
    document will explain what is already in place.

    See also the \l{Qt Designer Manual}.

    \tableofcontents

    \section1 The Current State of Qt Designer

    When used as a standalone application, \QD includes a number of components
    that work together to provide a flexible GUI design tool. Widgets and dialog
    windows can be composed using a form-based interface that fully supports drag
    and drop, clipboard operations, and an undo/redo stack.

    This version of \QD introduces a number of editing modes to make different
    types of editing more natural. Each editing mode displays the form in an
    appropriate way for that mode, and provides a specialized user interface for
    manipulating its contents.
    Examples of editing modes include Form Editing mode, Signals and Slots Editing
    mode, Buddy Editing mode, and Tab Order Editing mode.

    \section2 User Interface Features

    \table
    \row \i \inlineimage designer-main-window.png
    \i \bold{Widget Box}

    The widget box displays a categorized list of widgets and other objects that
    can be placed on a form using drag and drop.

    When \QD is in Top Level mode, the window containing the widget box also holds
    the main menu and tool bar. When in Workspace mode, the widget box
    becomes an independent window within the \QD workspace.

    The contents of the widget box are defined in an XML file that holds a
    collection of .ui documents for standard Qt widgets. This file can be extended,
    making it possible to add custom widgets to the widget box.
    \endtable

    \table
    \row \i \bold{Property Editor}

    The property editor allows designers to edit most properties of widgets and
    layout objects. The property names and values are presented in an editable
    tree view that shows the properties of the currently selected object.

    Certain resources, such as icons, can be configured in the property editor.
    Resources can be taken from any currently installed resource files, making
    it easier to design self-contained components.
    \i \inlineimage designer-property-editor.png
    \endtable

    \section2 Editing Features

    \table
    \row \i \inlineimage designer-choosing-form.png
    \i \bold{Form Templates}

    Form templates provide ready-to-use forms for various types of widgets,
    such as QWidget, QDialog, and QMainWindow. Custom templates based on
    these widgets can also be created.

    Templates can contain child widgets and layouts. Designers can
    save time by creating templates for the most common user interface
    features for repeated use.
    \endtable

    \table
    \row
    \i \bold{Form Editing Mode}

    The new form editor allows widgets to be dropped into existing layouts on
    the form. Previously, it was necessary to break layouts in order to add
    new widgets to them.

    \QD now supports more direct manipulation of widgets:
    You can clone a widget by dragging it with the \key CTRL key held down, and
    it is even possible to drag widgets between forms.

    In-place widget editors provide specialized editing facilities for
    the most-used widget properties.
    \i \inlineimage designer-editing-mode.png
    \endtable

    \table
    \row
    \i \inlineimage designer-connection-mode.png
    \i \bold{Signals and Slots Editing Mode}

    \QD now employs a "wired" approach to the problem of representing and editing
    connections between objects on a form. This editing mode displays all the
    signal and slot connections on your form as arrows. These arrows can be
    manipulated visually, and provide the user with an overview of the form's
    connection logic.

    Connections can be made between objects on a form and the form itself.
    This is particularly useful when designing dialogs.
    \endtable

    \table
    \row
    \i \bold{Buddy Editing Mode}

    Widgets that cannot accept keyboard input are often given buddy widgets
    that will take the keyboard focus on their behalf. In Buddy Editing mode,
    \QD provides a similar to that used in Signals and Slots Editing mode to
    show the relationships between widgets and their buddies.
    \i \inlineimage designer-buddy-mode.png
    \endtable

    \table
    \row
    \i \inlineimage designer-tab-order-mode.png
    \i \bold{Tab Order Mode}

    In this mode, users can specify the order in which input widgets accept
    the keyboard focus.

    The way that the tab order is defined follows the approach taken in Qt 3's
    version of \QD.
    \endtable

    \table
    \row
    \i \bold{Resource Editor}

    Resources can be associated with a given form, and these can be modified
    and extended using a file browser style interface.

    The Resource Editor uses files that are processed by various components of
    the \l{The Qt Resource System}{Qt Resource System} to ensure that all
    required resources are embedded in the application.
    \i \inlineimage designer-resources-editing.png
    \endtable

    \section2 Plugin Support

    \table
    \row
    \i \inlineimage worldtimeclockplugin-example.png
    \i \bold{Custom Widgets}

    Plugins can be used to add new custom widgets, special editors, and
    support for widgets from the Qt 3 support library.

    Support for custom widget plugins allows user interface designers to
    use application-specific widgets in their designs as early as possible
    in the development process.

    \QD handles custom widgets in the same way as standard Qt widgets,
    and allows custom signals and slots to be connected to other objects
    from within Signals and Slots Editing mode.
    \endtable

    \table
    \row
    \i \bold{Qt Designer SDK}

    The new modular \QD is designed to be integrated into other environments
    and extended with custom components.

    The Software Development Toolkit is a library that developers can use to
    write extensions and plugins for \QD, and enables \QD components to be
    embedded into Integrated Development Environments (IDEs). Documentation of
    this API is currently underway and more should appear during the
    maintenance releases of Qt 4.
    \i \inlineimage designer-custom-widget-box.png
    \endtable
*/
