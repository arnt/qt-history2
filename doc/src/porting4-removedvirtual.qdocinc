\row \o void QAccessibleInterface::clearSelection() \o Port to the new QAccessibleInterface API.
\row \o int QAccessibleInterface::controlAt(int, int) const \o Port to the new QAccessibleInterface API.
\row \o bool QAccessibleInterface::doDefaultAction(int) \o Port to the new QAccessibleInterface API.
\row \o QMemArray<int> QAccessibleInterface::selection() const \o Port to the new QAccessibleInterface API.
\row \o bool QAccessibleInterface::setFocus(int) \o Port to the new QAccessibleInterface API.
\row \o bool QAccessibleInterface::setSelected(int, bool, bool) \o Port to the new QAccessibleInterface API.
\row \o bool QAction::addTo(QWidget *) \o Use Q3Action instead.
\row \o void QAction::addedTo(QWidget *, QWidget *) \o Use Q3Action instead.
\row \o void QAction::addedTo(int, QPopupMenu *) \o Use Q3Action instead.
\row \o bool QAction::removeFrom(QWidget *) \o Use Q3Action instead.
\row \o void QAction::setAccel(const QKeySequence &) \o Use Q3Action instead.
\row \o void QAction::setEnabled(bool) \o Use Q3Action instead.
\row \o void QAction::setIconSet(const QIcon &) \o Use Q3Action instead.
\row \o void QAction::setMenuText(const QString &) \o Use Q3Action instead.
\row \o void QAction::setOn(bool) \o Use Q3Action instead.
\row \o void QAction::setStatusTip(const QString &) \o Use Q3Action instead.
\row \o void QAction::setText(const QString &) \o Use Q3Action instead.
\row \o void QAction::setToggleAction(bool) \o Use Q3Action instead.
\row \o void QAction::setToolTip(const QString &) \o Use Q3Action instead.
\row \o void QAction::setWhatsThis(const QString &) \o Use Q3Action instead.
\row \o void QButton::drawButton(QPainter *) \o Use Q3Button instead.
\row \o void QButton::drawButtonLabel(QPainter *) \o Use Q3Button instead.
\row \o void QButton::setAccel(const QKeySequence &) \o Setter
\row \o void QButton::setAutoRepeat(bool) \o Setter
\row \o void QButton::setDown(bool) \o Setter
\row \o void QButton::setPixmap(const QPixmap &) \o Setter
\row \o void QButton::setState(ToggleState) \o Setter
\row \o void QButton::setText(const QString &) \o Setter
\row \o void QButton::setToggleType(ToggleType) \o Setter
\row \o void QButtonGroup::moveFocus(int) \o Setter
\row \o void QButtonGroup::setButton(int) \o Setter
\row \o void QButtonGroup::setExclusive(bool) \o Setter
\row \o void QButtonGroup::setRadioButtonExclusive(bool) \o Setter
\row \o void QComboBox::setAutoCompletion(bool) \o Setter
\row \o void QComboBox::setAutoResize(bool) \o Setter
\row \o void QComboBox::setCurrentItem(int) \o Setter
\row \o void QComboBox::setCurrentText(const QString &) \o Setter
\row \o void QComboBox::setFont(const QFont &) \o Setter
\row \o void QComboBox::setInsertionPolicy(Policy) \o Setter
\row \o void QComboBox::setLineEdit(QLineEdit *) \o Setter
\row \o void QComboBox::setListBox(QListBox *) \o Setter
\row \o void QComboBox::setMaxCount(int) \o Setter
\row \o void QComboBox::setPalette(const QPalette &) \o Setter
\row \o void QComboBox::setSizeLimit(int) \o Setter
\row \o void QComboBox::setValidator(const QValidator *) \o Setter
\row \o void QDateEdit::fix() \o Port to the new QDateTimeEdit API
\row \o QString QDateEdit::sectionFormattedText(int) \o Port to the new QDateTimeEdit API
\row \o void QDateEdit::setAutoAdvance(bool) \o Port to the new QDateTimeEdit API
\row \o void QDateEdit::setDate(const QDate &) \o Port to the new QDateTimeEdit API
\row \o void QDateEdit::setDay(int) \o Port to the new QDateTimeEdit API
\row \o void QDateEdit::setMaxValue(const QDate &) \o Port to the new QDateTimeEdit API
\row \o void QDateEdit::setMinValue(const QDate &) \o Port to the new QDateTimeEdit API
\row \o void QDateEdit::setMonth(int) \o Port to the new QDateTimeEdit API
\row \o void QDateEdit::setOrder(Order) \o Port to the new QDateTimeEdit API
\row \o void QDateEdit::setRange(const QDate &, const QDate &) \o Port to the new QDateTimeEdit API
\row \o void QDateEdit::setSeparator(const QString &) \o Port to the new QDateTimeEdit API
\row \o void QDateEdit::setYear(int) \o Port to the new QDateTimeEdit API
\row \o void QDateTimeEdit::setAutoAdvance(bool) \o Port to the new QDateTimeEdit API
\row \o void QDateTimeEdit::setDateTime(const QDateTime &) \o Port to the new QDateTimeEdit API
\row \o void QDial::rangeChange() \o Reimplement QDial::sliderChange() instead.
\row \o void QDial::repaintScreen(const QRect *) \o Reimplement QDial::paintEvent() instead
\row \o void QDial::setNotchTarget(double) \o
\row \o void QDial::setNotchesVisible(bool) \o
\row \o void QDial::setTracking(bool) \o
\row \o void QDial::setValue(int) \o Use QDial::sliderChange() instead.
\row \o void QDial::setWrapping(bool) \o
\row \o void QDial::valueChange() \o Use QDial::sliderChange() instead.
\row \o QString QDir::absFilePath(const QString &, bool) const \o Value type
\row \o QString QDir::absPath() const \o Value type
\row \o QString QDir::canonicalPath() const \o Value type
\row \o bool QDir::cd(const QString &, bool) \o Value type
\row \o bool QDir::cdUp() \o Value type
\row \o void QDir::convertToAbs() \o Value type
\row \o QString QDir::dirName() const \o Value type
\row \o QStrList QDir::encodedEntryList(int, int) const \o Value type
\row \o QStrList QDir::encodedEntryList(const QString &, int, int) const \o Value type
\row \o const QFileInfoList * QDir::entryInfoList(int, int) const \o Value type
\row \o const QFileInfoList * QDir::entryInfoList(const QString &, int, int) const \o Value type
\row \o QStringList QDir::entryList(const QString &, int, int) const \o Value type
\row \o QStringList QDir::entryList(int, int) const \o Value type
\row \o bool QDir::exists() const \o Value type
\row \o bool QDir::exists(const QString &, bool) \o Value type
\row \o QString QDir::filePath(const QString &, bool) const \o Value type
\row \o bool QDir::isReadable() const \o Value type
\row \o bool QDir::isRelative() const \o Value type
\row \o bool QDir::isRoot() const \o Value type
\row \o bool QDir::mkdir(const QString &, bool) const \o Value type
\row \o bool QDir::operator!=() const \o Value type
\row \o bool QDir::operator==() const \o Value type
\row \o QString QDir::path() const \o Value type
\row \o bool QDir::remove(const QString &, bool) \o Value type
\row \o bool QDir::rename(const QString &, const QString &, bool) \o Value type
\row \o bool QDir::rmdir(const QString &, bool) const \o Value type
\row \o void QDir::setFilter(int) \o Value type
\row \o void QDir::setMatchAllDirs(bool) \o Value type
\row \o void QDir::setNameFilter(const QString &) \o Value type
\row \o void QDir::setPath(const QString &) \o Value type
\row \o void QDir::setSorting(int) \o Value type
\row \o void QDns::setLabel(const QString &) \o Use Q3Dns instead.
\row \o void QDns::setLabel(const QHostAddress &) \o Use Q3Dns instead.
\row \o void QDns::setRecordType(RecordType) \o Use Q3Dns instead.
\row \o void QDockWindow::dock() \o
\row \o void QDockWindow::setCloseMode(int) \o Setter
\row \o void QDockWindow::setFixedExtentHeight(int) \o Setter
\row \o void QDockWindow::setFixedExtentWidth(int) \o Setter
\row \o void QDockWindow::setHorizontallyStretchable(bool) \o Setter
\row \o void QDockWindow::setMovingEnabled(bool) \o Setter
\row \o void QDockWindow::setNewLine(bool) \o Setter
\row \o void QDockWindow::setOffset(int) \o Setter
\row \o void QDockWindow::setOpaqueMoving(bool) \o Setter
\row \o void QDockWindow::setOrientation(Orientation) \o Setter
\row \o void QDockWindow::setResizeEnabled(bool) \o Setter
\row \o void QDockWindow::setVerticallyStretchable(bool) \o Setter
\row \o void QDockWindow::setWidget(QWidget *) \o Setter
\row \o void QDockWindow::undock() \o
\row \o QString QDomAttr::name() const \o Value type
\row \o QDomElement QDomAttr::ownerElement() const \o Value type
\row \o void QDomAttr::setValue(const QString &) \o Value type
\row \o bool QDomAttr::specified() const \o Value type
\row \o QString QDomAttr::value() const \o Value type
\row \o void QDomCharacterData::appendData(const QString &) \o Value type
\row \o QString QDomCharacterData::data() const \o Value type
\row \o void QDomCharacterData::deleteData(unsigned, unsigned) \o Value type
\row \o void QDomCharacterData::insertData(unsigned, const QString &) \o Value type
\row \o uint QDomCharacterData::length() const \o Value type
\row \o void QDomCharacterData::replaceData(unsigned, unsigned, const QString &) \o Value type
\row \o void QDomCharacterData::setData(const QString &) \o Value type
\row \o QString QDomCharacterData::substringData(unsigned, unsigned) \o Value type
\row \o QDomNamedNodeMap QDomDocumentType::entities() const \o Value type
\row \o QString QDomDocumentType::internalSubset() const \o Value type
\row \o QString QDomDocumentType::name() const \o Value type
\row \o QDomNamedNodeMap QDomDocumentType::notations() const \o Value type
\row \o QString QDomDocumentType::publicId() const \o Value type
\row \o QString QDomDocumentType::systemId() const \o Value type
\row \o QDomNamedNodeMap QDomElement::attributes() const \o Value type
\row \o QDomNodeList QDomElement::elementsByTagName(const QString &) const \o Value type
\row \o QDomNodeList QDomElement::elementsByTagNameNS(const QString &, const QString &) const \o Value type
\row \o QString QDomEntity::notationName() const \o Value type
\row \o QString QDomEntity::publicId() const \o Value type
\row \o QString QDomEntity::systemId() const \o Value type
\row \o QDomDocument QDomImplementation::createDocument(const QString &, const QString &, const QDomDocumentType &) \o Value type
\row \o QDomDocumentType QDomImplementation::createDocumentType(const QString &, const QString &, const QString &) \o Value type
\row \o bool QDomImplementation::hasFeature(const QString &, const QString &) \o Value type
\row \o QDomImplementation::~QDomImplementation() \o Value type
\row \o QDomNode QDomNode::appendChild(const QDomNode &) \o Value type
\row \o QDomNamedNodeMap QDomNode::attributes() const \o Value type
\row \o QDomNodeList QDomNode::childNodes() const \o Value type
\row \o QDomNode QDomNode::cloneNode(bool) const \o Value type
\row \o QDomNode QDomNode::firstChild() const \o Value type
\row \o bool QDomNode::hasAttributes() const \o Value type
\row \o bool QDomNode::hasChildNodes() const \o Value type
\row \o QDomNode QDomNode::insertAfter(const QDomNode &, const QDomNode &) \o Value type
\row \o QDomNode QDomNode::insertBefore(const QDomNode &, const QDomNode &) \o Value type
\row \o bool QDomNode::isAttr() const \o Value type
\row \o bool QDomNode::isCDATASection() const \o Value type
\row \o bool QDomNode::isCharacterData() const \o Value type
\row \o bool QDomNode::isComment() const \o Value type
\row \o bool QDomNode::isDocument() const \o Value type
\row \o bool QDomNode::isDocumentFragment() const \o Value type
\row \o bool QDomNode::isDocumentType() const \o Value type
\row \o bool QDomNode::isElement() const \o Value type
\row \o bool QDomNode::isEntity() const \o Value type
\row \o bool QDomNode::isEntityReference() const \o Value type
\row \o bool QDomNode::isNotation() const \o Value type
\row \o bool QDomNode::isProcessingInstruction() const \o Value type
\row \o bool QDomNode::isSupported(const QString &, const QString &) const \o Value type
\row \o bool QDomNode::isText() const \o Value type
\row \o QDomNode QDomNode::lastChild() const \o Value type
\row \o QString QDomNode::localName() const \o Value type
\row \o QString QDomNode::namespaceURI() const \o Value type
\row \o QDomNode QDomNode::nextSibling() const \o Value type
\row \o QString QDomNode::nodeName() const \o Value type
\row \o QDomNode::NodeType QDomNode::nodeType() const \o Value type
\row \o QString QDomNode::nodeValue() const \o Value type
\row \o void QDomNode::normalize() \o Value type
\row \o QDomDocument QDomNode::ownerDocument() const \o Value type
\row \o QDomNode QDomNode::parentNode() const \o Value type
\row \o QString QDomNode::prefix() const \o Value type
\row \o QDomNode QDomNode::previousSibling() const \o Value type
\row \o QDomNode QDomNode::removeChild(const QDomNode &) \o Value type
\row \o QDomNode QDomNode::replaceChild(const QDomNode &, const QDomNode &) \o Value type
\row \o void QDomNode::setNodeValue(const QString &) \o Value type
\row \o void QDomNode::setPrefix(const QString &) \o Value type
\row \o QDomNode::~QDomNode() \o Value type
\row \o QDomNode QDomNodeList::item(int) const \o Value type
\row \o uint QDomNodeList::length() const \o Value type
\row \o QDomNodeList::~QDomNodeList() \o Value type
\row \o QString QDomProcessingInstruction::data() const \o Value type
\row \o void QDomProcessingInstruction::setData(const QString &) \o Value type
\row \o QString QDomProcessingInstruction::target() const \o Value type
\row \o int QEventLoop::enterLoop() \o Port to the new QAbstractEventDispatcher API
\row \o int QEventLoop::exec() \o Port to the new QAbstractEventDispatcher API
\row \o void QEventLoop::exit(int) \o Port to the new QAbstractEventDispatcher API
\row \o void QEventLoop::exitLoop() \o Port to the new QAbstractEventDispatcher API
\row \o bool QEventLoop::hasPendingEvents() const \o Port to the new QAbstractEventDispatcher API
\row \o int QEventLoop::loopLevel() const \o Port to the new QAbstractEventDispatcher API
\row \o bool QEventLoop::processEvents(ProcessEventsFlags) \o Port to the new QAbstractEventDispatcher API
\row \o void QEventLoop::registerSocketNotifier(QSocketNotifier *) \o Port to the new QAbstractEventDispatcher API
\row \o void QEventLoop::unregisterSocketNotifier(QSocketNotifier *) \o Port to the new QAbstractEventDispatcher API
\row \o void QEventLoop::wakeUp() \o Port to the new QAbstractEventDispatcher API
\row \o void QFileDialog::setSelectedFilter(const QString &) \o Use Q3FileDialog
\row \o void QFileDialog::setSelectedFilter(int) \o Use Q3FileDialog
\row \o void QFrame::drawContents(QPainter *) \o
\row \o void QFrame::drawFrame(QPainter *) \o
\row \o void QFrame::frameChanged() \o
\row \o void QFrame::setFrameRect(const QRect &) \o
\row \o void QFrame::setFrameStyle(int) \o
\row \o void QFrame::setLineWidth(int) \o
\row \o void QFrame::setMargin(int) \o
\row \o void QFrame::setMidLineWidth(int) \o
\row \o void QGridLayout::setColStretch(int, int) \o
\row \o void QGridLayout::setRowStretch(int, int) \o
\row \o void QGroupBox::setAlignment(int) \o
\row \o void QGroupBox::setColumnLayout(int, Orientation) \o
\row \o void QGroupBox::setTitle(const QString &) \o
\row \o QHostAddress::~QHostAddress() \o
\row \o int QIODevice::getch() \o
\row \o int QIODevice::putch(int) \o
\row \o QByteArray QIODevice::readAll() \o
\row \o Q_LONG QIODevice::readLine(char *, Q_ULONG) \o
\row \o int QIODevice::ungetch(int) \o
\row \o void QIcon::setPixmap(const QString &, Size, Mode, State) \o
\row \o void QIcon::setPixmap(const QPixmap &, Size, Mode, State) \o
\row \o QIcon::~QIcon() \o
\row \o void QLabel::setAlignment(int) \o
\row \o void QLabel::setAutoResize(bool) \o
\row \o void QLabel::setBuddy(QWidget *) \o
\row \o void QLabel::setFont(const QFont &) \o
\row \o void QLabel::setMovie(const QMovie &) \o
\row \o void QLabel::setNum(int) \o
\row \o void QLabel::setNum(double) \o
\row \o void QLabel::setPicture(const QPicture &) \o
\row \o void QLabel::setPixmap(const QPixmap &) \o
\row \o void QLabel::setText(const QString &) \o
\row \o QLayoutIterator QLayout::iterator() \o
\row \o void QLayout::setAutoAdd(bool) \o
\row \o void QLayout::setMargin(int) \o
\row \o void QLayout::setMenuBar(QMenuBar *) \o
\row \o void QLayout::setSpacing(int) \o
\row \o QLayoutIterator QLayoutItem::iterator() \o
\row \o void QLayoutItem::setAlignment(int) \o
\row \o bool QLibrary::unload() \o
\row \o QLibrary::~QLibrary() \o
\row \o void QLineEdit::clear() \o
\row \o void QLineEdit::clearValidator() \o
\row \o void QLineEdit::copy() const \o
\row \o void QLineEdit::cut() \o
\row \o void QLineEdit::deselect() \o
\row \o void QLineEdit::insert(const QString &) \o
\row \o void QLineEdit::paste() \o
\row \o void QLineEdit::redo() \o
\row \o void QLineEdit::selectAll() \o
\row \o void QLineEdit::setAlignment(int) \o
\row \o void QLineEdit::setCursorPosition(int) \o
\row \o void QLineEdit::setDragEnabled(bool) \o
\row \o void QLineEdit::setEchoMode(EchoMode) \o
\row \o void QLineEdit::setFrame(bool) \o
\row \o void QLineEdit::setMaxLength(int) \o
\row \o void QLineEdit::setReadOnly(bool) \o
\row \o void QLineEdit::setSelection(int, int) \o
\row \o void QLineEdit::setText(const QString &) \o
\row \o void QLineEdit::setValidator(const QValidator *) \o
\row \o void QLineEdit::undo() \o
\row \o void QMainWindow::addDockWindow(QDockWindow *, Dock, bool) \o
\row \o void QMainWindow::addDockWindow(QDockWindow *, const QString &, Dock, bool) \o
\row \o void QMainWindow::customize() \o
\row \o bool QMainWindow::isCustomizable() const \o
\row \o void QMainWindow::moveDockWindow(QDockWindow *, Dock) \o
\row \o void QMainWindow::moveDockWindow(QDockWindow *, Dock, bool, int, int) \o
\row \o void QMainWindow::removeDockWindow(QDockWindow *) \o
\row \o void QMainWindow::setAppropriate(QDockWindow *, bool) \o
\row \o void QMainWindow::setCentralWidget(QWidget *) \o
\row \o void QMainWindow::setDockEnabled(QDockWindow *, Dock, bool) \o
\row \o void QMainWindow::setDockEnabled(Dock, bool) \o
\row \o void QMainWindow::setDockMenuEnabled(bool) \o
\row \o void QMainWindow::setDockWindowsMovable(bool) \o
\row \o void QMainWindow::setOpaqueMoving(bool) \o
\row \o void QMainWindow::setRightJustification(bool) \o
\row \o void QMainWindow::setUpLayout() \o
\row \o void QMainWindow::setUsesBigPixmaps(bool) \o
\row \o void QMainWindow::setUsesTextLabel(bool) \o
\row \o bool QMainWindow::showDockMenu(const QPoint &) \o
\row \o void QMenuBar::activateItemAt(int) \o
\row \o void QMenuBar::menuContentsChanged() \o
\row \o void QMenuBar::menuDelPopup(QPopupMenu *) \o
\row \o void QMenuBar::menuInsPopup(QPopupMenu *) \o
\row \o void QMenuBar::menuStateChanged() \o
\row \o void QMenuBar::setId(int, int) \o
\row \o void QMenuBar::setSeparator(Separator) \o
\row \o void QMenuBar::updateItem(int) \o
\row \o void QMultiLineEdit::setAlignment(int) \o
\row \o void QMultiLineEdit::setAutoUpdate(bool) \o
\row \o QMutex::~QMutex() \o
\row \o bool QObject::checkConnectArgs(const char *, const QObject *, const char *) \o
\row \o const char * QObject::className() const \o
\row \o void QObject::insertChild(QObject *) \o
\row \o QVariant QObject::property(const char *) const \o
\row \o void QObject::removeChild(QObject *) \o
\row \o void QObject::setName(const char *) \o
\row \o bool QObject::setProperty(const char *, const QVariant &) \o
\row \o bool QPaintDevice::cmd(int , QPainter * , QPDevCmdParam *) \o
\row \o Qt::HANDLE QPaintDevice::handle() const \o
\row \o HDC QPaintDevice::handle() const \o
\row \o void QPopupMenu::activateItemAt(int) \o
\row \o void QPopupMenu::menuContentsChanged() \o
\row \o void QPopupMenu::menuDelPopup(QPopupMenu *) \o
\row \o void QPopupMenu::menuInsPopup(QPopupMenu *) \o
\row \o void QPopupMenu::menuStateChanged() \o
\row \o void QPopupMenu::setActiveItem(int) \o
\row \o void QPopupMenu::setCheckable(bool) \o
\row \o void QPopupMenu::setId(int, int) \o
\row \o void QPopupMenu::updateItem(int) \o
\row \o int QPrinter::resolution() const \o
\row \o void QPrinter::setColorMode(ColorMode) \o
\row \o void QPrinter::setCreator(const QString &) \o
\row \o void QPrinter::setDocName(const QString &) \o
\row \o void QPrinter::setFromTo(int, int) \o
\row \o void QPrinter::setFullPage(bool) \o
\row \o void QPrinter::setMinMax(int, int) \o
\row \o void QPrinter::setNumCopies(int) \o
\row \o void QPrinter::setOrientation(Orientation) \o
\row \o void QPrinter::setOutputFileName(const QString &) \o
\row \o void QPrinter::setOutputToFile(bool) \o
\row \o void QPrinter::setPageOrder(PageOrder) \o
\row \o void QPrinter::setPageSize(PageSize) \o
\row \o void QPrinter::setPaperSource(PaperSource) \o
\row \o void QPrinter::setPrintProgram(const QString &) \o
\row \o void QPrinter::setPrinterName(const QString &) \o
\row \o void QPrinter::setPrinterSelectionOption(const QString &) \o
\row \o void QPrinter::setResolution(int) \o
\row \o void QProcess::addArgument(const QString& arg) \o
\row \o void QProcess::closeStdin() \o
\row \o bool QProcess::launch(const QByteArray& buf, QStringList *env) \o
\row \o bool QProcess::launch(const QString& buf, QStringList *env) \o
\row \o QString QProcess::readLineStderr() \o
\row \o QString QProcess::readLineStdout() \o
\row \o QByteArray QProcess::readStderr() \o
\row \o QByteArray QProcess::readStdout() \o
\row \o void QProcess::setArguments(const QStringList& args) \o
\row \o void QProcess::setWorkingDirectory(const QDir& dir) \o
\row \o bool QProcess::start(QStringList *env) \o
\row \o void QProcess::writeToStdin(const QByteArray& buf) \o
\row \o bool QProgressBar::setIndicator(QString &, int, int) \o
\row \o void QProgressBar::setProgress(int) \o
\row \o void QProgressBar::setTotalSteps(int) \o
\row \o void QPushButton::setAutoDefault(bool) \o
\row \o void QPushButton::setDefault(bool) \o
\row \o void QPushButton::setIsMenuButton(bool) \o
\row \o void QPushButton::setOn(bool) \o
\row \o void QRadioButton::setChecked(bool) \o
\row \o uchar * QScreen::cache(int , int) \o
\row \o void QScreen::set(unsigned int , unsigned int , unsigned int , unsigned) \o
\row \o void QScreen::uncache(uchar *) \o
\row \o void QScrollBar::setOrientation(Orientation) \o
\row \o void QScrollBar::setTracking(bool) \o
\row \o void QSignalMapper::setMapping(const QObject *, const QString &) \o
\row \o void QSignalMapper::setMapping(const QObject *, int) \o
\row \o void QSlider::rangeChange() \o Reimplement QSlider::sliderChange() instead.
\row \o void QSlider::setOrientation(Orientation) \o
\row \o void QSlider::setPalette(const QPalette &) \o
\row \o void QSlider::setTickInterval(int) \o
\row \o void QSlider::setTickmarks(TickSetting) \o
\row \o void QSlider::setTracking(bool) \o
\row \o void QSlider::setValue(int) \o
\row \o void QSlider::valueChange() \o Reimplement QSlider::sliderChange() instead.
\row \o QString QSpinBox::cleanText() const \o
\row \o void QSpinBox::interpretText() \o
\row \o QString QSpinBox::prefix() const \o
\row \o void QSpinBox::rangeChange() \o Reimplement QSpinBox::sliderChange() instead.
\row \o void QSpinBox::selectAll() \o
\row \o void QSpinBox::setButtonSymbols(ButtonSymbols) \o
\row \o void QSpinBox::setPrefix(const QString &) \o
\row \o void QSpinBox::setSpecialValueText(const QString &) \o
\row \o void QSpinBox::setSuffix(const QString &) \o
\row \o void QSpinBox::setValidator(const QValidator *) \o
\row \o void QSpinBox::setValue(int) \o
\row \o void QSpinBox::setWrapping(bool) \o
\row \o void QSpinBox::stepDown() \o
\row \o void QSpinBox::stepUp() \o
\row \o QString QSpinBox::suffix() const \o
\row \o void QSpinBox::updateDisplay() \o
\row \o void QSpinBox::valueChange() \o Reimplement QSpinBox::sliderChange() instead.
\row \o void QSplitter::drawSplitter(QPainter *, QCOORD, QCOORD, QCOORD, QCOORD) \o
\row \o void QSplitter::setOpaqueResize(bool) \o
\row \o void QSplitter::setOrientation(Orientation) \o
\row \o void QSplitter::setResizeMode(QWidget *, ResizeMode) \o
\row \o void QSqlDatabase::setDatabaseName(const QString &) \o
\row \o void QSqlDatabase::setHostName(const QString &) \o
\row \o void QSqlDatabase::setPassword(const QString &) \o
\row \o void QSqlDatabase::setPort(int) \o
\row \o void QSqlDatabase::setUserName(const QString &) \o
\row \o QSqlQuery QSqlDriver::createQuery() const \o
\row \o QString QSqlDriver::nullText() const \o
\row \o QSqlRecord QSqlDriver::record(const QSqlQuery &) const \o
\row \o QSqlRecordInfo QSqlDriver::recordInfo(const QSqlQuery &) const \o
\row \o QSqlRecordInfo QSqlDriver::recordInfo(const QString &) const \o
\row \o void QSqlError::setDatabaseText(const QString &) \o
\row \o void QSqlError::setDriverText(const QString &) \o
\row \o void QSqlError::setNumber(int) \o
\row \o void QSqlError::setType(int) \o
\row \o QSqlError::~QSqlError() \o
\row \o void QSqlField::setName(const QString &) \o
\row \o void QSqlField::setNull() \o
\row \o void QSqlField::setReadOnly(bool) \o
\row \o void QSqlField::setValue(const QVariant &) \o
\row \o QVariant QSqlField::value() const \o
\row \o QSqlField::~QSqlField() \o
\row \o void QSqlFieldInfo::setCalculated(bool) \o
\row \o void QSqlFieldInfo::setGenerated(bool) \o
\row \o void QSqlFieldInfo::setTrim(bool) \o
\row \o QSqlFieldInfo::~QSqlFieldInfo() \o
\row \o void QSqlIndex::append(const QSqlField &) \o
\row \o void QSqlIndex::append(const QSqlField &, bool) \o
\row \o void QSqlIndex::setCursorName(const QString &) \o
\row \o void QSqlIndex::setDescending(int, bool) \o
\row \o void QSqlIndex::setName(const QString &) \o
\row \o void QSqlRecord::append(const QSqlField &) \o
\row \o void QSqlRecord::clear() \o
\row \o void QSqlRecord::clearValues(bool) \o
\row \o void QSqlRecord::insert(int, const QSqlField &) \o
\row \o void QSqlRecord::remove(int) \o
\row \o void QSqlRecord::setGenerated(const QString &, bool) \o
\row \o void QSqlRecord::setGenerated(int, bool) \o
\row \o void QSqlRecord::setNull(int) \o
\row \o void QSqlRecord::setNull(const QString &) \o
\row \o void QSqlRecord::setValue(const QString &, const QVariant &) \o
\row \o void QSqlRecord::setValue(int, const QVariant &) \o
\row \o QString QSqlRecord::toString(const QString &, const QString &,") const \o
\row \o QStringList QSqlRecord::toStringList(const QString &) const \o
\row \o QVariant QSqlRecord::value(int) const \o
\row \o QVariant QSqlRecord::value(const QString &) const \o
\row \o QSqlRecord::~QSqlRecord() \o
\row \o void QStatusBar::addWidget(QWidget *, int, bool) \o
\row \o void QStyle::polishPopupMenu(QPopupMenu *) \o
\row \o QTextCustomItem * QStyleSheet::tag(const QString &, const QMap<QString, QString> & attr, const QString &, const QMimeSourceFactory &, bool, QTextDocument *) const \o
\row \o int QTabBar::addTab(QTab *) \o
\row \o int QTabBar::insertTab(QTab *, int) \o
\row \o void QTabBar::layoutTabs() \o
\row \o void QTabBar::paint(QPainter *, QTab *, bool) const \o
\row \o void QTabBar::paintLabel(QPainter *, const QRect &, QTab *, bool) const \o
\row \o void QTabBar::removeTab(QTab *) \o
\row \o QTab * QTabBar::selectTab(const QPoint &) const \o
\row \o void QTabBar::setCurrentTab(int) \o
\row \o void QTabBar::setCurrentTab(QTab *) \o
\row \o void QTabBar::setShape(Shape) \o
\row \o void QTabBar::setTabEnabled(int, bool) \o
\row \o void QTabWidget::addTab(QWidget *, const QString &) \o
\row \o void QTabWidget::addTab(QWidget *, const QIcon &, const QString &) \o
\row \o void QTabWidget::addTab(QWidget *, QTab *) \o
\row \o void QTabWidget::insertTab(QWidget *, const QIcon &, const QString &, int) \o
\row \o void QTabWidget::insertTab(QWidget *, const QString &, int) \o
\row \o void QTabWidget::insertTab(QWidget *, QTab *, int) \o
\row \o void QTabWidget::removePage(QWidget *) \o
\row \o void QTabWidget::showPage(QWidget *) \o
\row \o void QTextEdit::append(const QString &) \o
\row \o void QTextEdit::clear() \o
\row \o void QTextEdit::clearParagraphBackground(int) \o
\row \o void QTextEdit::copy() \o
\row \o QPopupMenu * QTextEdit::createPopupMenu(const QPoint &) \o
\row \o QPopupMenu * QTextEdit::createPopupMenu() \o
\row \o void QTextEdit::cut() \o
\row \o void QTextEdit::del() \o
\row \o void QTextEdit::doKeyboardAction(KeyboardAction) \o
\row \o void QTextEdit::ensureCursorVisible() \o
\row \o bool QTextEdit::find(const QString &, bool, bool, bool, int *, int *) \o
\row \o bool QTextEdit::focusNextPrevChild(bool) \o
\row \o int QTextEdit::heightForWidth(int) const \o
\row \o void QTextEdit::insert(const QString &, bool, bool, bool) \o
\row \o void QTextEdit::insertAt(const QString &, int, int) \o
\row \o void QTextEdit::insertParagraph(const QString &, int) \o
\row \o void QTextEdit::moveCursor(CursorAction, bool) \o
\row \o void QTextEdit::paste() \o
\row \o void QTextEdit::pasteSubType(const QCString &) \o
\row \o void QTextEdit::placeCursor(const QPoint &, QTextCursor *) \o
\row \o void QTextEdit::redo() \o
\row \o void QTextEdit::removeParagraph(int) \o
\row \o void QTextEdit::removeSelectedText(int) \o
\row \o void QTextEdit::removeSelection(int) \o
\row \o void QTextEdit::scrollToAnchor(const QString &) \o
\row \o void QTextEdit::scrollToBottom() \o
\row \o void QTextEdit::selectAll(bool) \o
\row \o void QTextEdit::setAlignment(int) \o
\row \o void QTextEdit::setBold(bool) \o
\row \o void QTextEdit::setColor(const QColor &) \o
\row \o void QTextEdit::setCurrentFont(const QFont &) \o
\row \o void QTextEdit::setCursorPosition(int, int) \o
\row \o void QTextEdit::setFamily(const QString &) \o
\row \o void QTextEdit::setItalic(bool) \o
\row \o void QTextEdit::setLinkUnderline(bool) \o
\row \o void QTextEdit::setMimeSourceFactory(QMimeSourceFactory *) \o
\row \o void QTextEdit::setModified(bool) \o
\row \o void QTextEdit::setOverwriteMode(bool) \o
\row \o void QTextEdit::setPaper(const QBrush &) \o
\row \o void QTextEdit::setParagraphBackgroundColor(int, const QColor &) \o
\row \o void QTextEdit::setPointSize(int) \o
\row \o void QTextEdit::setReadOnly(bool) \o
\row \o void QTextEdit::setSelection(int, int, int, int, int) \o
\row \o void QTextEdit::setSelectionAttributes(int, const QColor &, bool) \o
\row \o void QTextEdit::setStyleSheet(QStyleSheet *) \o
\row \o void QTextEdit::setTabStopWidth(int) \o
\row \o void QTextEdit::setText(const QString &, const QString &) \o
\row \o void QTextEdit::setTextFormat(TextFormat) \o
\row \o void QTextEdit::setUnderline(bool) \o
\row \o void QTextEdit::setUndoDepth(int) \o
\row \o void QTextEdit::setUndoRedoEnabled(bool) \o
\row \o void QTextEdit::setVerticalAlignment(VerticalAlignment) \o
\row \o void QTextEdit::setWordWrap(WordWrap) \o
\row \o void QTextEdit::setWrapColumnOrWidth(int) \o
\row \o void QTextEdit::setWrapPolicy(WrapPolicy) \o
\row \o void QTextEdit::sync() \o
\row \o void QTextEdit::undo() \o
\row \o void QTextEdit::zoomIn() \o
\row \o void QTextEdit::zoomIn(int) \o
\row \o void QTextEdit::zoomOut(int) \o
\row \o void QTextEdit::zoomOut() \o
\row \o void QTextEdit::zoomTo(int) \o
\row \o QString QTimeEdit::sectionFormattedText(int) \o
\row \o void QTimeEdit::setAutoAdvance(bool) \o
\row \o void QTimeEdit::setHour(int) \o
\row \o void QTimeEdit::setMaxValue(const QTime &) \o
\row \o void QTimeEdit::setMinValue(const QTime &) \o
\row \o void QTimeEdit::setMinute(int) \o
\row \o void QTimeEdit::setRange(const QTime &, const QTime &) \o
\row \o void QTimeEdit::setSecond(int) \o
\row \o void QTimeEdit::setSeparator(const QString &) \o
\row \o void QTimeEdit::setTime(const QTime &) \o
\row \o void QToolBar::clear() \o
\row \o void QToolBar::setLabel(const QString &) \o
\row \o void QToolBar::setStretchableWidget(QWidget *) \o
\row \o void QToolButton::setIconSet(const QIcon &) \o
\row \o void QToolButton::setOn(bool) \o
\row \o void QToolButton::setTextLabel(const QString &, bool) \o
\row \o void QToolButton::setToggleButton(bool) \o
\row \o void QToolButton::setUsesBigPixmap(bool) \o
\row \o void QToolButton::setUsesTextLabel(bool) \o
\row \o void QToolTip::maybeTip(const QPoint &) \o
\row \o void QUrl::addPath(const QString &) \o Value type
\row \o bool QUrl::cdUp() \o Value type
\row \o bool QUrl::parse(const QString &) \o Value type
\row \o void QUrl::reset() \o Value type
\row \o void QUrl::setEncodedPathAndQuery(const QString &) \o Value type
\row \o void QUrl::setFileName(const QString &) \o Value type
\row \o void QUrl::setHost(const QString &) \o Value type
\row \o void QUrl::setPassword(const QString &) \o Value type
\row \o void QUrl::setPath(const QString &) \o Value type
\row \o void QUrl::setPort(int) \o Value type
\row \o void QUrl::setProtocol(const QString &) \o Value type
\row \o void QUrl::setQuery(const QString &) \o Value type
\row \o void QUrl::setRef(const QString &) \o Value type
\row \o void QUrl::setUser(const QString &) \o Value type
\row \o QString QUrl::toString(bool, bool) const \o Value type
\row \o QUrl::~QUrl() \o Value type
\row \o QWaitCondition::~QWaitCondition() \o Value type
\row \o bool QWhatsThis::clicked(const QString &) \o
\row \o QString QWhatsThis::text(const QPoint &) \o
\row \o QWhatsThis::~QWhatsThis() \o
\row \o void QWidget::adjustSize() \o
\row \o bool QWidget::close(bool) \o
\row \o void QWidget::create(WId, bool, bool) \o
\row \o bool QWidget::customWhatsThis() const \o
\row \o void QWidget::destroy(bool, bool) \o
\row \o void QWidget::enabledChange(bool) \o Reimplement QWidget::changeEvent() and handle QEvent::EnabledChange
\row \o void QWidget::fontChange(const QFont &) \o Reimplement QWidget::changeEvent() and handle QEvent::FontChange
\row \o void QWidget::imComposeEvent(QIMEvent *) \o Reimplement QWidget::inputMethodEvent() instead.
\row \o void QWidget::imEndEvent(QIMEvent *) \o Reimplement QWidget::inputMethodEvent() instead.
\row \o void QWidget::imStartEvent(QIMEvent *) \o Reimplement QWidget::inputMethodEvent() instead.
\row \o void QWidget::move(int, int) \o
\row \o void QWidget::paletteChange(const QPalette &) \o Reimplement QWidget::changeEvent() and handle QEvent::PaletteChange and/or QEvent::ApplicationPaletteChange
\row \o void QWidget::polish() \o
\row \o void QWidget::reparent(QWidget *, WFlags, const QPoint &, bool) \o
\row \o void QWidget::resize(int, int) \o
\row \o void QWidget::setAcceptDrops(bool) \o Setter
\row \o void QWidget::setActiveWindow() \o Setter
\row \o void QWidget::setAutoMask(bool) \o Setter
\row \o void QWidget::setBackgroundColor(const QColor &) \o Setter
\row \o void QWidget::setBackgroundMode(BackgroundMode) \o Setter
\row \o void QWidget::setBackgroundOrigin(BackgroundOrigin) \o Setter
\row \o void QWidget::setBackgroundPixmap(const QPixmap &) \o Setter
\row \o void QWidget::setCaption(const QString &) \o Reimplement QWidget::changeEvent() and handle QEvent::WindowTitleChange
\row \o void QWidget::setCursor(const QCursor &) \o Setter
\row \o void QWidget::setEnabled(bool) \o Setter
\row \o void QWidget::setEraseColor(const QColor &) \o Setter
\row \o void QWidget::setErasePixmap(const QPixmap &) \o Setter
\row \o void QWidget::setFocus() \o Setter
\row \o void QWidget::setFocusPolicy(FocusPolicy) \o Setter
\row \o void QWidget::setFocusProxy(QWidget *) \o Setter
\row \o void QWidget::setFont(const QFont &) \o Reimplement QWidget::changeEvent() and handle QEvent::FontChange and/or QEvent::ApplicationFontChange
\row \o void QWidget::setGeometry(int, int, int, int) \o Setter
\row \o void QWidget::setGeometry(const QRect &) \o Setter
\row \o void QWidget::setIcon(const QPixmap &) \o Reimplement QWidget::changeEvent() and handle QEvent::WindowIconChange
\row \o void QWidget::setIconText(const QString &) \o Reimplement QWidget::changeEvent() and handle QEvent::IconTextChange
\row \o void QWidget::setKeyCompression(bool) \o Setter
\row \o void QWidget::setMask(const QRegion &) \o Setter
\row \o void QWidget::setMask(const QBitmap &) \o Setter
\row \o void QWidget::setMaximumSize(int, int) \o Setter
\row \o void QWidget::setMicroFocusHint(int, int, int, int, bool, QFont *) \o Setter
\row \o void QWidget::setMinimumSize(int, int) \o Setter
\row \o void QWidget::setMouseTracking(bool) \o Reimplement QWidget::changeEvent() and handle QEvent::MouseTrackingChange
\row \o void QWidget::setPalette(const QPalette &) \o Reimplement QWidget::changeEvent() and handle QEvent::PaletteChange and/or QEvent::ApplicationPaletteChange
\row \o void QWidget::setPaletteBackgroundColor(const QColor &) \o Setter
\row \o void QWidget::setPaletteBackgroundPixmap(const QPixmap &) \o Setter
\row \o void QWidget::setSizeIncrement(int, int) \o Setter
\row \o void QWidget::setSizePolicy(QSizePolicy) \o Setter
\row \o void QWidget::setUpdatesEnabled(bool) \o Setter
\row \o void QWidget::setWFlags(WFlags) \o Setter
\row \o void QWidget::showMaximized() \o Reimplement QWidget::changeEvent() and handle QEvent::WindowStateChange
\row \o void QWidget::showMinimized() \o Reimplement QWidget::changeEvent() and handle QEvent::WindowStateChange
\row \o void QWidget::showNormal() \o Reimplement QWidget::changeEvent() and handle QEvent::WindowStateChange
\row \o void QWidget::styleChange(QStyle &) \o Reimplement QWidget::changeEvent() and handle QEvent::StyleChange
\row \o void QWidget::unsetCursor() \o Setter
\row \o void QWidget::windowActivationChange(bool) \o Reimplement QWidget::changeEvent() and handle QEvent::ActivationChange
