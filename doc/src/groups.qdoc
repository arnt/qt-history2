/****************************************************************************
**
** Copyright (C) 1992-$THISYEAR$ $TROLLTECH$. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \page groups.html

    \title Grouped Classes
    \ingroup classlists

    This page provides a way of navigating Qt's classes by grouping
    related classes together. Some classes may appear in more than one group.

    \table
    \header
    \o Group
    \o Description

    \row
    \o \l{Abstract Widget Classes}
    \o Abstract widget classes usable through subclassing.

    \row
    \o \l{Accessibility Classes}
    \o Classes that provide support for accessibility.

    \row
    \o \l{Advanced Widgets}
    \o Advanced GUI widgets such as tab widgets and progress bars.

    \row
    \o \l{Basic Widgets}
    \o Basic GUI widgets such as buttons, comboboxes and scrollbars.

    \omit
    \row
    \o \l{Component Model}
    \o Interfaces and helper classes for the Qt Component Model.
    \endomit

    \row
    \o \l{Database Classes}
    \o Database related classes, e.g. for SQL databases.

    \row
    \o \l{Date and Time Classes}
    \o Classes for handling date and time.

    \row
    \o \l{Desktop Environment Classes}
    \o Classes for interacting with the user's desktop environment.

    \row
    \o \l{Drag and Drop}
    \o Classes dealing with drag and drop and mime type
       encoding and decoding.

    \row
    \o \l{Environment Classes}
    \o Classes providing various global services such as
       event handling, access to system settings and internationalization.

    \row
    \o \l{Event Classes}
    \o Classes used to create and handle events.

    \row
    \o \l{Non-GUI Classes}
    \o Collection classes such as list, queue, stack and string, along
    with other classes that can be used without needing QApplication.

    \row
    \o \l{Multimedia, Graphics, and Printing}
    \o Classes that provide support for graphics (2D, and with OpenGL, 3D),
    image encoding, decoding, and manipulation, sound, animation,
    printing, etc.

    \row
    \o \l{Help System}
    \o Classes used to provide online-help for applications.

    \row
    \o \l{Layout Management}
    \o Classes handling automatic resizing and moving of widgets, for
            composing complex dialogs.

    \row
    \o \l{Shared Classes}
    \o Classes that use reference counting for fast copying.

    \row
    \o \l{Input/Output and Networking}
    \o Classes providing file input and output along with directory and
    network handling.

    \row
    \o \l{Main Window and Related Classes}
    \o Everything you need for a typical modern main application window,
    including menus, toolbars, workspace, etc.

    \row
    \o \l{Miscellaneous Classes}
    \o Various other useful classes.

    \row
    \o \l{Model/View Classes}
    \o Classes that use the model/view design pattern.

    \row
    \o \l{Object Model}
    \o The Qt GUI toolkit's underlying object model.

    \row
    \o \l{Organizers}
    \o User interface organizers such as splitters, tab bars, button groups, etc.

    \row
    \o \l{Plugin Classes}
    \o Plugin related classes.

    \row
    \o \l{Standard Dialog Classes}
    \o Ready-made dialogs for file, font, color selection and more.

    \row
    \o \l{Generic Containers}
    \o Qt's template-based container classes.

    \row
    \o \l{Text Related Classes}
    \o Classes for text
    processing. (See also \l{XML Classes}.)

    \row
    \o \l{Threading Classes}
    \o Classes that provide threading support.

    \row
    \o \l{Widget Appearance and Style}
    \o Appearance customization with styles, fonts, colors etc.

    \row
    \o \l{XML Classes}
    \o Classes that support XML, via, for example DOM and SAX.

    \row
    \o \l{Qtopia Core Classes}
    \o Classes that are specific to Qtopia Core (Qt for embedded Linux).

    \endtable

*/

/*!
    \group advanced

    \title Advanced Widgets

    These classes provide more complex user interface widgets (controls).

*/

/*!
    \group abstractwidgets

    \title Abstract Widget Classes

    These classes are abstract widgets; they are generally not usable in
    themselves, but provide functionality that can be used by inheriting
    these classes.

*/

/*!
    \group accessibility

    \title Accessibility Classes

    Classes that provide support for accessibility.

    Accessible applications are able to be used by users who cannot use
    conventional means of interaction. These classes provide support for
    accessible applications.

*/

/*!
    \group appearance

    \title Widget Appearance and Style

    These classes are used to customize an application's appearance and
    style.

*/

/*!
    \group application

    \title Main Window and Related Classes

    These classes provide everything you need for a typical modern main
    application window, like the main window itself, menu and tool bars,
    a statusbar, etc.

*/


/*!
    \group basic

    \title Basic Widgets

    These basic widgets (controls) are designed for direct use.
    There are also some \l{Abstract Widget Classes} that are designed for
    subclassing, and some more complex \l{Advanced Widgets}.

*/

/* \group componentmodel

    \title Component Model

    These classes and interfaces form the basis of the \l{Qt Component Model}.

*/

/*!
    \group database

    \title Database Classes

    These classes provide access to SQL databases.
*/


/*!
    \group dialogs

    \title Standard Dialog Classes

    These classes are complex widgets, composed of simpler widgets; dialog
    boxes, generally.
*/

/*!
    \group desktop

    \title Desktop Environment Classes

    These classes provide ways to interact with the user's desktop environment and
    take advantage of common services.
*/

/*!
    \group draganddrop

    \title Drag And Drop Classes

    These classes deal with drag and drop and the necessary mime type
    encoding and decoding. See also \link dnd.html Drag and Drop with
    Qt. \endlink
*/

/*!
    \group environment

    \title Environment Classes

    These classes providing various global services to your application such as
    event handling, access to system settings, internationalization, etc.

*/

/*!
    \group events

    \title Event Classes

    These classes are used to create and handle events.

    For more information see the \link object.html Object model\endlink
    and \link signalsandslots.html Signals and Slots\endlink.
*/


/*!
    \group geomanagement

    \title Layout Management

    These classes provide automatic geometry (layout) management of widgets.

*/


/*!
    \group helpsystem

    \title Help System

    \keyword help system

    These classes provide for all forms of online-help in your application,
    with three levels of detail:

    \list 1
        \o Tool Tips and Status Bar message - flyweight help, extremely brief,
	    entirely integrated in the user interface, requiring little
	    or no user interaction to invoke.
        \o What's This? - lightweight, but can be
	    a three-paragraph explanation.
        \o Online Help - can encompass any amount of information,
	    but is typically slower to call up, somewhat separated
	    from the user's work, and often users feel that using online
	    help is a digression from their real task.
    \endlist

*/


/*!
    \group io

    \title Input/Output and Networking

    These classes are used to handle input and output to and from external
    devices, processes, files etc. as well as manipulating files and directories.
*/

/*!
    \group misc

    \title Miscellaneous Classes

    These classes are useful classes not fitting into any other category.

*/


/*!
    \group model-view

    \title Model/View Classes

    These classes use the model/view design pattern in which the
    underlying data (in the model) is kept separate from the way the data
    is presented and manipulated by the user (in the view). See also
    \link model-view-programming.html Model/View Programming\endlink.

*/

/*!
    \group multimedia

    \title Multimedia, Graphics, and Printing

    These classes provide support for graphics (2D, and with OpenGL, 3D),
    image encoding, decoding, and manipulation, sound, animation, printing
    etc.

    See also this introduction to the \link coordsys.html Qt
    coordinate system. \endlink

*/

/*!
    \group objectmodel

    \title Object Model

    These classes form the basis of the \l{Qt Object Model}.

*/

/*!
    \group organizers

    \title Organizers

    These classes are used to organize and group GUI primitives into more
    complex applications or dialogs.

*/


/*!
    \group plugins

    \title Plugin Classes

    These classes deal with shared libraries, (e.g. .so and DLL files),
    and with Qt plugins.

    See the \link plugins-howto.html plugins documentation\endlink.

    See also the \l{ActiveQt framework} for Windows.

*/

/*!
    \group qws

    \title Qtopia Core Classes
    \ingroup qtopiacore

    These classes are relevant to \l{Qtopia Core} users.
*/

/*!
    \group shared
    \ingroup architecture

    \title Implicitly Shared Classes

    \keyword implicit data sharing
    \keyword implicit sharing
    \keyword implicitly shared
    \keyword reference counting
    \keyword shared implicitly
    \keyword shared classes

    Many C++ classes in Qt use implicit data sharing to maximize
    resource usage and minimize copying of data. The only important
    effect is that the classes listed here \e can be passed around as
    arguments efficiently, even though they may seem heavyweight.

    \tableofcontents

    \section1 Overview

    A shared class consists of a pointer to a shared data block that
    contains a reference count and the data.

    When a shared object is created, it sets the reference count to 1. The
    reference count is incremented whenever a new object references the
    shared data, and decremented when the object dereferences the shared
    data. The shared data is deleted when the reference count becomes
    zero.

    \keyword deep copy
    \keyword shallow copy

    When dealing with shared objects, there are two ways of copying an
    object. We usually speak about \e deep and \e shallow copies. A deep
    copy implies duplicating an object. A shallow copy is a reference
    copy, i.e. just a pointer to a shared data block. Making a deep copy
    can be expensive in terms of memory and CPU. Making a shallow copy is
    very fast, because it only involves setting a pointer and incrementing
    the reference count.

    Object assignment (with operator=()) for implicitly shared objects is
    implemented using shallow copies.

    The benefit of sharing is that a program does not need to duplicate
    data unnecessarily, which results in lower memory use and less copying
    of data. Objects can easily be assigned, sent as function arguments,
    and returned from functions.

    Implicit sharing takes place behind the scenes; the programmer
    does not need to worry about it. Even in multithreaded
    applications, implicit sharing takes place, as explained in
    \l{Threads and Implicit Sharing}.

    \section1 Implicit Sharing in Detail

    Implicit sharing automatically detaches the object from a shared block
    if the object is about to change and the reference count is greater
    than one. (This is often called "copy-on-write" or "value semantics".)

    An implicitly shared class has total control of its internal data. In
    any member functions that modify its data, it automatically detaches
    before modifying the data.

    The QPen class, which uses implicit sharing, detaches from the shared
    data in all member functions that change the internal data.

    Code fragment:
    \code
        void QPen::setStyle(Qt::PenStyle style)
        {
            detach();           // detach from common data
            d->style = style;   // set the style member
        }

        void QPen::detach()
        {
            if (d->ref != 1) {
                ...             // perform a deep copy
            }
        }
    \endcode

    \section1 List of Classes

    The classes listed below automatically detach from common data if
    an object is about to be changed. The programmer will not even
    notice that the objects are shared. Thus you should treat
    separate instances of them as separate objects. They will always
    behave as separate objects but with the added benefit of sharing
    data whenever possible. For this reason, you can pass instances
    of these classes as arguments to functions by value without
    concern for the copying overhead.

    Example:
    \code
        QPixmap p1, p2;
        p1.load("image.bmp");
        p2 = p1;                        // p1 and p2 share data

        QPainter paint;
        paint.begin(&p2);               // cuts p2 loose from p1
        paint.drawText(0,50, "Hi");
        paint.end();
    \endcode

    In this example, \c p1 and \c p2 share data until QPainter::begin()
    is called for \c p2, because painting a pixmap will modify it.

    \warning Do not copy an implicitly shared container (QMap,
    QVector, etc.) while you are iterating over it using an non-const
    \l{STL-style iterator}.
*/

/*!
    \group text

    \title Text Related Classes

    These classes are relevant to text processing. See also the
    \l{Rich Text Processing} overview and the
    \l{XML classes}.
*/

/*!
    \group thread

    \title Threading Classes

    These classes are relevant to threaded applications.
*/


/*!
    \group time

    \title Date and Time Classes

    These classes provide system-independent date and time abstractions.

*/

/*!
    \group tools

    \title Non-GUI Classes

    The non-GUI classes are general-purpose collection and string classes
    that may be used independently of the GUI classes.

    In particular, these classes do not depend on QApplication at all,
    and so can be used in non-GUI programs.

*/

/*!
    \group xml-tools

    \title XML Classes

    These classes are relevant to XML users.
*/
