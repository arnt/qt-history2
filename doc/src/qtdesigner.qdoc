// Doc: Interface only

/*!
    \class QDesignerMemberSheetExtension
    \brief The QDesignerMemberSheetExtension class provides an extension to an object's member
    sheet in Qt Designer. 
    \inmodule QtDesigner
*/

/*!
    \fn QDesignerMemberSheetExtension::~QDesignerMemberSheetExtension() {
*/

/*!
    \fn int QDesignerMemberSheetExtension::count() const
*/

/*!
    \fn int QDesignerMemberSheetExtension::indexOf(const QString &name) const
*/

/*!
    \fn QString QDesignerMemberSheetExtension::memberName(int index) const
*/

/*!
    \fn QString QDesignerMemberSheetExtension::memberGroup(int index) const
*/

/*!
    \fn void QDesignerMemberSheetExtension::setMemberGroup(int index, const QString &group)
*/

/*!
    \fn bool QDesignerMemberSheetExtension::isVisible(int index) const
*/

/*!
    \fn void QDesignerMemberSheetExtension::setVisible(int index, bool b)
*/

/*!
    \fn virtual bool QDesignerMemberSheetExtension::isSignal(int index) const
*/

/*!
    \fn bool QDesignerMemberSheetExtension::isSlot(int index) const
*/

/*!
    \fn bool QDesignerMemberSheetExtension::inheritedFromWidget(int index)
*/

/*!
    \fn QString QDesignerMemberSheetExtension::declaredInClass(int index) const
*/

/*!
    \fn QString QDesignerMemberSheetExtension::signature(int index) const
*/

/*!
    \fn QList<QByteArray> QDesignerMemberSheetExtension::parameterTypes(int index) const
*/

/*!
    \fn QList<QByteArray> QDesignerMemberSheetExtension::parameterNames(int index) const
*/


// Doc: Interface only

/*!
    \class QDesignerLayoutDecorationExtension
    \brief The QDesignerLayoutDecorationExtension class provides an extension to a layout in \QD.
    \inmodule QtDesigner
*/

/*!
    \enum QDesignerLayoutDecorationExtension::InsertMode

    This enum describes the modes that are used to insert items into a layout.

    \value InsertWidgetMode Widgets are inserted into empty cells in a layout.
    \value InsertRowMode    Whole rows are inserted into a vertical or grid layout.
    \value InsertColumnMode Whole columns are inserted into a horizontal or grid layout.
*/

/*!
    \fn virtual QDesignerLayoutDecorationExtension::~QDesignerLayoutDecorationExtension()

    Destroys the extension.
*/

/*!
    \fn virtual QList<QWidget*> QDesignerLayoutDecorationExtension::widgets(QLayout *layout) const

    Returns the widgets that are managed by the given \a layout.

    \sa insertWidget(), removeWidget()
*/

/*!
    \fn QRect QDesignerLayoutDecorationExtension::itemInfo(int index) const

    Returns the rectangle covered by the item at the given \a index in the layout.
*/

/*!
    \fn int QDesignerLayoutDecorationExtension::indexOf(QWidget *widget) const

    Returns the index of the specified \a widget in the layout.
*/

/*!
    \fn int QDesignerLayoutDecorationExtension::indexOf(QLayoutItem *item) const

    Returns the index of the specified layout \a item.
*/

/*!
    \fn QDesignerLayoutDecorationExtension::InsertMode QDesignerLayoutDecorationExtension::currentInsertMode() const

    Returns the current insertion mode.
*/

/*!
    \fn int QDesignerLayoutDecorationExtension::currentIndex() const

    Returns the current index in the layout.
*/

/*!
    \fn QPair<int, int> QDesignerLayoutDecorationExtension::currentCell() const

    Returns a pair containing the row and column of the current cell in the layout.
*/

/*!
    \fn void QDesignerLayoutDecorationExtension::insertWidget(QWidget *widget, const QPair<int, int> &cell)

    Inserts the given \a widget into the specified \a cell in the layout.

    \sa removeWidget()
*/

/*!
    \fn void QDesignerLayoutDecorationExtension::removeWidget(QWidget *widget)

    Removes the specified \a widget from the layout.

    \sa insertWidget()
*/

/*!
    \fn void QDesignerLayoutDecorationExtension::insertRow(int row)

    Inserts a new row into the form at the position specified by \a row.
*/

/*!
    \fn void QDesignerLayoutDecorationExtension::insertColumn(int column)

    Inserts a new column into the form at the position specified by \a column.
*/

/*!
    \fn void QDesignerLayoutDecorationExtension::simplify()

    Simplifies the layout by removing unnecessary empty rows and columns, and by changing the
    number of rows or columns spanned by widgets.
*/

/*!
    \fn int QDesignerLayoutDecorationExtension::findItemAt(const QPoint &position) const

    Returns the index of the item in the layout that covers the given \a position.
*/

/*!
    \fn int QDesignerLayoutDecorationExtension::findItemAt(int row, int column) const

    Returns the item in the layout that occupies the specified \a row and \a column in the layout.

    Currently, this only applies to grid layouts.
*/

/*!
    \fn void QDesignerLayoutDecorationExtension::adjustIndicator(const QPoint &position, int index)

    Adjusts the indicator for the specified \a widget so that it lies at the given \a position on
    the form.
*/


// Doc: Interface only

/*!
    \class QDesignerContainerExtension
    \brief The QDesignerContainerExtension class provides extensions for container widgets in \QD.
    \inmodule QtDesigner
*/

/*!
    \fn QDesignerContainerExtension::~QDesignerContainerExtension()

    Destroys the extension.
*/

/*!
    \fn int QDesignerContainerExtension::count() const

    Returns the number of widgets in the container.
*/

/*!
    \fn QWidget *QDesignerContainerExtension::widget(int index) const

    Returns the widget at the given \a index in the container.

    \sa addWidget(), insertWidget()
*/

/*!
    \fn int QDesignerContainerExtension::currentIndex() const

    Returns the current index, corresponding to the current widget in the container.

    \sa setCurrentIndex()
*/

/*!
    \fn void QDesignerContainerExtension::setCurrentIndex(int index)

    Sets the current index, corresponding to the current widget in the container.

    \sa currentIndex()
*/

/*!
    \fn void QDesignerContainerExtension::addWidget(QWidget *widget)

    Adds the given \a widget to the container after all the existing widgets.

    \sa insertWidget(), remove()
*/

/*!
    \fn void QDesignerContainerExtension::insertWidget(int index, QWidget *widget)

    Inserts the given \a widget into the container at the specified \a index.

    \sa addWidget(), remove()
*/

/*!
    \fn void QDesignerContainerExtension::remove(int index)

    Removes the widget at the given \a index in the container.

    \sa addWidget(), insertWidget()
*/


// Doc: Interface only

/*!
    \class QDesignerTaskMenuExtension
    \inmodule QtDesigner
*/

/*!
    \fn QDesignerTaskMenuExtension::~QDesignerTaskMenuExtension()
*/

/*!
    \fn QAction *QDesignerTaskMenuExtension::preferredEditAction() const
*/

/*!
    \fn QList<QAction*> QDesignerTaskMenuExtension::taskActions() const
*/


// Doc: Interface only

/*!
    \class QDesignerCustomWidgetCollectionInterface
    \brief The QDesignerCustomWidgetCollectionInterface class provides an interface that is used
    to manage collections of custom widgets in \QD.
    \inmodule QtDesigner
*/

/*!
    \fn QDesignerCustomWidgetCollectionInterface::~QDesignerCustomWidgetCollectionInterface() {

    Destroys the interface.
*/

/*!
    \fn QList<QDesignerCustomWidgetInterface*> QDesignerCustomWidgetCollectionInterface::customWidgets() const

    Returns a list of interfaces to the custom widgets in the container.
*/


// Doc: Interface only

/*!
    \class QDesignerCustomWidgetInterface
    \brief The QDesignerCustomWidgetInterface class provides an interface to a custom widget in
    \QD.
    \inmodule QtDesigner

    \sa {Creating Custom Widgets for Qt Designer}
*/

/*!
    \fn QDesignerCustomWidgetInterface::~QDesignerCustomWidgetInterface()

    Destroys the custom widget interface.
*/

/*!
    \fn QString QDesignerCustomWidgetInterface::name() const

    Returns the name of the class that implements the custom widget.
*/

/*!
    \fn QString QDesignerCustomWidgetInterface::group() const

    Returns the name of the group to which the custom widget belongs.
*/

/*!
    \fn QString QDesignerCustomWidgetInterface::toolTip() const

    Returns a short description of the widget that can be used by \QD in a tool tip.
*/

/*!
    \fn QString QDesignerCustomWidgetInterface::whatsThis() const

    Returns a description of the widget that can be used by \QD in "What's This?" help for the
    widget.
*/

/*!
    \fn QString QDesignerCustomWidgetInterface::includeFile() const

    Returns the path to the include file that \l uic uses when creating code for the custom
    widget.
*/

/*!
    \fn QIcon QDesignerCustomWidgetInterface::icon() const

    Returns the icon used to represent the custom widget in \QD's widget box.
*/

/*!
    \fn bool QDesignerCustomWidgetInterface::isContainer() const

    Returns true if the custom widget is intended to be used as a container; otherwise returns
    false.

    Most custom widgets are not used to hold other widgets, so their implementations of this
    function will return false, but custom containers will return true to ensure that they
    behave correctly in \QD.
*/

/*!
    \fn QWidget *QDesignerCustomWidgetInterface::createWidget(QWidget *parent)

    Returns a new widget with the given \a parent.
*/

/*!
    \fn bool QDesignerCustomWidgetInterface::isInitialized() const

    Returns true if the widget has been initialized; otherwise returns false.

    \sa initialize()
*/

/*!
    \fn void QDesignerCustomWidgetInterface::initialize(QDesignerFormEditorInterface *core)

    Initializes the widget for use with the form editor with the specified \a core interface.

    \sa isInitialized()
*/

/*!
    \fn QString QDesignerCustomWidgetInterface::domXml() const

    Returns the XML that is used to describe widget properties to \QD.
*/

/*!
    \fn QString QDesignerCustomWidgetInterface::codeTemplate() const

    Returns the code template that \QD includes in forms that contain the custom widget when
    they are saved.

    \l uic uses the code template to provide code for constructing the custom widget.
*/


// Doc: Abstract class

/*!
    \class QDesignerDnDItemInterface
    \brief The QDesignerDnDItemInterface class provides an interface that is used to manage items
    during a drag and drop operation.
    \inmodule QtDesigner
*/

/*!
    \enum QDesignerDnDItemInterface::DropType

    This enum describes the result of a drag and drop operation.

    \value MoveDrop The item was moved.
    \value CopyDrop The item was copied.
*/

/*!
    \fn QDesignerDnDItemInterface::QDesignerDnDItemInterface()

    Constructs a new interface to a drag and drop item.
*/

/*!
    \fn QDesignerDnDItemInterface::~QDesignerDnDItemInterface()

    Destroys the interface to the item.
*/

/*!
    \fn DomUI *QDesignerDnDItemInterface::domUi() const

    Returns a user interface object for the item.
*/

/*!
    \fn QWidget *QDesignerDnDItemInterface::widget() const

    Returns the widget being copied or moved in the drag and drop operation.

    \sa source()
*/

/*!
    \fn QWidget *QDesignerDnDItemInterface::decoration() const

    Returns the widget used to represent the item.
*/

/*!
    \fn QPoint QDesignerDnDItemInterface::hotSpot() const

    Returns the cursor's hotspot.

    \sa QDrag::hotSpot()
*/

/*!
    \fn DropType QDesignerDnDItemInterface::type() const

    Returns the type of drag and drop operation in progress.
*/

/*!
    \fn QWidget *QDesignerDnDItemInterface::source() const

    Returns the widget that is the source of the drag and drop operation; i.e. the original
    container of the widget being dragged.

    \sa widget()
*/


// Doc: Abstract class

/*!
    \class QDesignerIconCacheInterface
    \brief The QDesignerIconCacheInterface class provides an interface to \QD's icon cache.
    \inmodule QtDesigner
*/

/*!
    \fn QDesignerIconCacheInterface::QDesignerIconCacheInterface(QObject *parent)

    Constructs a new interface with the given \a parent.
*/

/*!
    \fn QIcon QDesignerIconCacheInterface::nameToIcon(const QString &filePath, const QString &qrcPath)

    Returns the icon associated with the name specified by \a filePath in the resource
    file specified by \a qrcPath.

    If \a qrcPath refers to a valid resource file, the name used for the file path is a path
    within those resources; otherwise the file path refers to a local file.

    \sa {The Qt Resource System}, nameToPixmap()
*/

/*!
    \fn QPixmap QDesignerIconCacheInterface::nameToPixmap(const QString &filePath, const QString &qrcPath)

    Returns the pixmap associated with the name specified by \a filePath in the resource
    file specified by \a qrcPath.

    If \a qrcPath refers to a valid resource file, the name used for the file path is a path
    within those resources; otherwise the file path refers to a local file.

    \sa {The Qt Resource System}, nameToIcon()
*/

/*!
    \fn QString QDesignerIconCacheInterface::iconToFilePath(const QIcon &icon) const

    Returns the file path associated with the given \a icon. The file path is a path within
    an application resources.
*/

/*!
    \fn QString QDesignerIconCacheInterface::iconToQrcPath(const QIcon &icon) const

    Returns the path to the resource file that refers to the specified \a icon. The resource
    path refers to a local file.
*/

/*!
    \fn QString QDesignerIconCacheInterface::pixmapToFilePath(const QPixmap &pixmap) const

    Returns the file path associated with the given \a pixmap. The file path is a path within
    an application resources.
*/

/*!
    \fn QString QDesignerIconCacheInterface::pixmapToQrcPath(const QPixmap &pixmap) const

    Returns the path to the resource file that refers to the specified \a pixmap. The resource
    path refers to a local file.
*/

/*!
    \fn QList<QPixmap> QDesignerIconCacheInterface::pixmapList() const

    Returns a list of pixmaps for the icons provided by the icon cache.
*/

/*!
    \fn QList<QIcon> QDesignerIconCacheInterface::iconList() const

    Returns a list of icons provided by the icon cache.
*/

/*!
    \fn QString QDesignerIconCacheInterface::resolveQrcPath(const QString &filePath, const QString &qrcPath, const QString &workingDirectory) const

    Returns a path to a resource specified by the \a filePath within the resource file located
    at \a qrcPath. If \a workingDirectory is a valid path to a directory, the path returned will
    be relative to that directory; otherwise an absolute path is returned.

    \omit
    ### Needs checking
    \endomit
*/


// Doc: Interface only

/*!
    \class QDesignerPropertySheetExtension
    The QDesignerPropertySheetExtension class provides an extension to a widget's property sheet
    in \QD.
    \inmodule QtDesigner
*/

/*!
    \fn QDesignerPropertySheetExtension::~QDesignerPropertySheetExtension()
*/

/*!
    \fn int QDesignerPropertySheetExtension::count() const
*/

/*!
    \fn int QDesignerPropertySheetExtension::indexOf(const QString &name) const
*/

/*!
    \fn QString QDesignerPropertySheetExtension::propertyName(int index) const
*/

/*!
    \fn QString QDesignerPropertySheetExtension::propertyGroup(int index) const
*/

/*!
    \fn void QDesignerPropertySheetExtension::setPropertyGroup(int index, const QString &group)
*/

/*!
    \fn bool QDesignerPropertySheetExtension::hasReset(int index) const
*/

/*!
    \fn bool QDesignerPropertySheetExtension::reset(int index)
*/

/*!
    \fn bool QDesignerPropertySheetExtension::isVisible(int index) const
*/

/*!
    \fn void QDesignerPropertySheetExtension::setVisible(int index, bool b)
*/

/*!
    \fn bool QDesignerPropertySheetExtension::isAttribute(int index) const
*/

/*!
    \fn void QDesignerPropertySheetExtension::setAttribute(int index, bool b)
*/

/*!
    \fn QVariant QDesignerPropertySheetExtension::property(int index) const
*/

/*!
    \fn void QDesignerPropertySheetExtension::setProperty(int index, const QVariant &value)
*/

/*!
    \fn bool QDesignerPropertySheetExtension::isChanged(int index) const
*/

/*!
    \fn void QDesignerPropertySheetExtension::setChanged(int index, bool changed)
*/
