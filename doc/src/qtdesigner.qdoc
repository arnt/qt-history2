// Doc: Interface only

/*!
    \class QDesignerMemberSheetExtension
    \brief The QDesignerMemberSheetExtension class provides extensions to objects member sheets
    in \QD. 
    \inmodule QtDesigner
*/

/*!
    \fn virtual QDesignerMemberSheetExtension::~QDesignerMemberSheetExtension() {
*/

/*!
    \fn virtual int QDesignerMemberSheetExtension::count() const = 0
*/

/*!
    \fn virtual int QDesignerMemberSheetExtension::indexOf(const QString &name) const = 0
*/

/*!
    \fn virtual QString QDesignerMemberSheetExtension::memberName(int index) const = 0
*/

/*!
    \fn virtual QString QDesignerMemberSheetExtension::memberGroup(int index) const = 0
*/

/*!
    \fn virtual void QDesignerMemberSheetExtension::setMemberGroup(int index, const QString &group) = 0
*/

/*!
    \fn virtual bool QDesignerMemberSheetExtension::isVisible(int index) const = 0
*/

/*!
    \fn virtual void QDesignerMemberSheetExtension::setVisible(int index, bool b) = 0
*/

/*!
    \fn virtual bool QDesignerMemberSheetExtension::isSignal(int index) const = 0
*/

/*!
    \fn virtual bool QDesignerMemberSheetExtension::isSlot(int index) const = 0
*/

/*!
    \fn virtual bool QDesignerMemberSheetExtension::inheritedFromWidget(int index) const = 0
*/

/*!
    \fn virtual QString QDesignerMemberSheetExtension::declaredInClass(int index) const = 0
*/

/*!
    \fn virtual QString QDesignerMemberSheetExtension::signature(int index) const = 0
*/

/*!
    \fn virtual QList<QByteArray> QDesignerMemberSheetExtension::parameterTypes(int index) const = 0
*/

/*!
    \fn virtual QList<QByteArray> QDesignerMemberSheetExtension::parameterNames(int index) const = 0
*/


// Doc: Interface only

/*!
    \class QDesignerLayoutDecorationExtension
    \brief The QDesignerLayoutDecorationExtension class provides extensions for layouts in \QD.
    \inmodule QtDesigner
*/

/*!
    \enum QDesignerLayoutDecorationExtension::InsertMode

    This enum describes the modes that are used to insert items into a layout.

    \value InsertWidgetMode Widgets are inserted into empty cells in a layout.
    \value InsertRowMode    Whole rows are inserted into a vertical or grid layout.
    \value InsertColumnMode Whole columns are inserted into a horizontal or grid layout.
*/

/*!
    \fn virtual QDesignerLayoutDecorationExtension::~QDesignerLayoutDecorationExtension()

    Destroys the extension.
*/

/*!
    \fn virtual QList<QWidget*> QDesignerLayoutDecorationExtension::widgets(QLayout *layout) const = 0

    Returns the widgets that are managed by the given \a layout.

    \sa insertWidget(), removeWidget()
*/

/*!
    \fn virtual QRect QDesignerLayoutDecorationExtension::itemInfo(int index) const = 0

    Returns the rectangle covered by the item at the given \a index in the layout.
*/

/*!
    \fn virtual int QDesignerLayoutDecorationExtension::indexOf(QWidget *widget) const = 0

    Returns the index of the specified \a widget in the layout.
*/

/*!
    \fn virtual int QDesignerLayoutDecorationExtension::indexOf(QLayoutItem *item) const = 0

    Returns the index of the specified layout \a item.
*/

/*!
    \fn virtual QDesignerLayoutDecorationExtension::InsertMode QDesignerLayoutDecorationExtension::currentInsertMode() const = 0

    Returns the current insertion mode.
*/

/*!
    \fn virtual int QDesignerLayoutDecorationExtension::currentIndex() const = 0

    Returns the current index in the layout.
*/

/*!
    \fn virtual QPair<int, int> QDesignerLayoutDecorationExtension::currentCell() const = 0

    Returns a pair containing the row and column of the current cell in the layout.
*/

/*!
    \fn virtual void QDesignerLayoutDecorationExtension::insertWidget(QWidget *widget, const QPair<int, int> &cell) = 0

    Inserts the given \a widget into the specified \a cell in the layout.

    \sa removeWidget()
*/

/*!
    \fn virtual void QDesignerLayoutDecorationExtension::removeWidget(QWidget *widget) = 0

    Removes the specified \a widget from the layout.

    \sa insertWidget()
*/

/*!
    \fn virtual void QDesignerLayoutDecorationExtension::insertRow(int row) = 0

    Inserts a new row into the form at the position specified by \a row.
*/

/*!
    \fn virtual void QDesignerLayoutDecorationExtension::insertColumn(int column) = 0

    Inserts a new column into the form at the position specified by \a column.
*/

/*!
    \fn virtual void QDesignerLayoutDecorationExtension::simplify() = 0

    Simplifies the layout by removing unnecessary empty rows and columns, and by changing the
    number of rows or columns spanned by widgets.
*/

/*!
    \fn virtual int QDesignerLayoutDecorationExtension::findItemAt(const QPoint &position) const = 0

    Returns the index of the item in the layout that covers the given \a position.
*/

/*!
    \fn virtual int QDesignerLayoutDecorationExtension::findItemAt(int row, int column) const = 0

    Returns the item in the layout that occupies the specified \a row and \a column in the layout.

    Currently, this only applies to grid layouts.
*/

/*!
    \fn virtual void QDesignerLayoutDecorationExtension::adjustIndicator(const QPoint &position, int index) = 0

    Adjusts the indicator for the specified \a widget so that it lies at the given \a position on
    the form.
*/


// Doc: Interface only

/*!
    \class QDesignerContainerExtension
    \brief The QDesignerContainerExtension class provides extensions for container widgets in \QD.
    \inmodule QtDesigner
*/

/*!
    \fn virtual QDesignerContainerExtension::~QDesignerContainerExtension()

    Destroys the extension.
*/

/*!
    \fn virtual int QDesignerContainerExtension::count() const = 0

    Returns the number of widgets in the container.
*/

/*!
    \fn virtual QWidget *QDesignerContainerExtension::widget(int index) const = 0

    Returns the widget at the given \a index in the container.

    \sa addWidget(), insertWidget()
*/

/*!
    \fn virtual int QDesignerContainerExtension::currentIndex() const = 0

    Returns the current index, corresponding to the current widget in the container.

    \sa setCurrentIndex()
*/

/*!
    \fn virtual void QDesignerContainerExtension::setCurrentIndex(int index) = 0

    Sets the current index, corresponding to the current widget in the container.

    \sa currentIndex()
*/

/*!
    \fn virtual void QDesignerContainerExtension::addWidget(QWidget *widget) = 0

    Adds the given \a widget to the container after all the existing widgets.

    \sa insertWidget(), remove()
*/

/*!
    \fn virtual void QDesignerContainerExtension::insertWidget(int index, QWidget *widget) = 0

    Inserts the given \a widget into the container at the specified \a index.

    \sa addWidget(), remove()
*/

/*!
    \fn virtual void QDesignerContainerExtension::remove(int index) = 0

    Removes the widget at the given \a index in the container.

    \sa addWidget(), insertWidget()
*/


// Doc: Interface only

/*!
    \class QDesignerTaskMenuExtension
    \inmodule QtDesigner
*/

/*!
    \fn virtual QDesignerTaskMenuExtension::~QDesignerTaskMenuExtension()
*/

/*!
    \fn virtual QAction *QDesignerTaskMenuExtension::preferredEditAction() const
*/

/*!
    \fn virtual QList<QAction*> QDesignerTaskMenuExtension::taskActions() const = 0
*/


// Doc: Interface only

/*!
    \class QDesignerCustomWidgetCollectionInterface
    \brief The QDesignerCustomWidgetCollectionInterface provides an interface that is used to
    manage collections of custom widgets in \QD.
    \inmodule QtDesigner
*/

/*!
    \fn virtual QDesignerCustomWidgetCollectionInterface::~QDesignerCustomWidgetCollectionInterface() {

    Destroys the interface.
*/

/*!
    \fn virtual QList<QDesignerCustomWidgetInterface*> QDesignerCustomWidgetCollectionInterface::customWidgets() const = 0

    Returns a list of interfaces to the custom widgets in the container.
*/


// Doc: Interface only

/*!
    \class QDesignerCustomWidgetInterface
    \brief The QDesignerCustomWidgetInterface provides an interface to a custom widget in \QD.
    \inmodule QtDesigner

    \sa \link Creating Custom Widgets for Qt Designer \endlink
*/

/*!
    \fn virtual QDesignerCustomWidgetInterface::~QDesignerCustomWidgetInterface()

    Destroys the custom widget interface.
*/

/*!
    \fn virtual QString QDesignerCustomWidgetInterface::name() const = 0

    Returns the name of the class that implements the custom widget.
*/

/*!
    \fn virtual QString QDesignerCustomWidgetInterface::group() const = 0

    Returns the name of the group to which the custom widget belongs.
*/

/*!
    \fn virtual QString QDesignerCustomWidgetInterface::toolTip() const = 0

    Returns a short description of the widget that can be used by \QD in a tool tip.
*/

/*!
    \fn virtual QString QDesignerCustomWidgetInterface::whatsThis() const = 0

    Returns a description of the widget that can be used by \QD in "What's This?" help for the
    widget.
*/

/*!
    \fn virtual QString QDesignerCustomWidgetInterface::includeFile() const = 0

    Returns the path to the include file that \l uic uses when creating code for the custom
    widget.
*/

/*!
    \fn virtual QIcon QDesignerCustomWidgetInterface::icon() const = 0

    Returns the icon used to represent the custom widget in \QD's widget box.
*/

/*!
    \fn virtual bool QDesignerCustomWidgetInterface::isContainer() const = 0

    Returns true if the custom widget is intended to be used as a container; otherwise returns
    false.

    Most custom widgets are not used to hold other widgets, so their implementations of this
    function will return false, but custom containers will return true to ensure that they
    behave correctly in \QD.
*/

/*!
    \fn virtual QWidget *QDesignerCustomWidgetInterface::createWidget(QWidget *parent) = 0

    Returns a new widget with the given \a parent.
*/

/*!
    \fn virtual bool QDesignerCustomWidgetInterface::isInitialized()

    Returns true if the widget has been initialized; otherwise returns false.

    \sa initialize()
*/

/*!
    \fn virtual void QDesignerCustomWidgetInterface::initialize(QDesignerFormEditorInterface *core)

    Initializes the widget for use with the form editor with the specified \a core interface.

    \sa isInitialized()
*/

/*!
    \fn virtual QString QDesignerCustomWidgetInterface::domXml() const

    Returns the XML that is used to describe widget properties to \QD.
*/

/*!
    \fn virtual QString QDesignerCustomWidgetInterface::codeTemplate() const

    Returns the code template that \QD includes in forms that contain the custom widget when
    they are saved.

    \l uic uses the code template to provide code for constructing the custom widget.
*/


// Doc: Abstract class

/*!
    \class QDesignerDnDItemInterface
    \brief The QDesignerDnDItemInterface class provides an interface that is used to manage items
    during a drag and drop operation.
    \inmodule QtDesigner
*/

/*!
    \enum QDesignerDnDItemInterface::DropType

    This enum describes the result of a drag and drop operation.

    \value MoveDrop The item was moved.
    \value CopyDrop The item was copied.
*/

/*!
    \fn QDesignerDnDItemInterface::QDesignerDnDItemInterface()

    Constructs a new interface to a drag and drop item.
*/

/*!
    \fn virtual QDesignerDnDItemInterface::~QDesignerDnDItemInterface()

    Destroys the interface to the item.
*/

/*!
    \fn virtual DomUI *QDesignerDnDItemInterface::domUi() const = 0

    Returns a user interface object for the item.
*/

/*!
    \fn virtual QWidget *QDesignerDnDItemInterface::widget() const = 0

    Returns the widget being copied or moved in the drag and drop operation.

    \sa source()
*/

/*!
    \fn virtual QWidget *QDesignerDnDItemInterface::decoration() const = 0

    Returns the widget used to represent the item.
*/

/*!
    \fn virtual QPoint QDesignerDnDItemInterface::hotSpot() const = 0

    Returns the cursor's hotspot.

    \sa QDrag::hotSpot()
*/

/*!
    \fn virtual DropType QDesignerDnDItemInterface::type() const = 0

    Returns the type of drag and drop operation in progress.
*/

/*!
    \fn virtual QWidget *QDesignerDnDItemInterface::source() const = 0

    Returns the widget that is the source of the drag and drop operation; i.e. the original
    container of the widget being dragged.

    \sa widget()
*/


// Doc: Abstract class

/*!
    \class QDesignerIconCacheInterface
    \brief The QDesignerIconCacheInterface provides an interface to \QD's icon cache.
    \inmodule QtDesigner
*/

/*!
    \fn QDesignerIconCacheInterface::QDesignerIconCacheInterface(QObject *parent)

    Constructs a new interface with the given \a parent.
*/

/*!
    \fn virtual QIcon QDesignerIconCacheInterface::nameToIcon(const QString &filePath, const QString &qrcPath) = 0

    Returns the icon associated with the name specified by \a filePath in the resource
    file specified by \a qrcPath.

    If \a qrcPath refers to a valid resource file, the name used for the file path is a path
    within those resources; otherwise the file path refers to a local file.

    \sa \link The Qt Resource System \endlink, nameToPixmap()
*/

/*!
    \fn virtual QPixmap QDesignerIconCacheInterface::nameToPixmap(const QString &filePath, const QString &qrcPath) = 0

    Returns the pixmap associated with the name specified by \a filePath in the resource
    file specified by \a qrcPath.

    If \a qrcPath refers to a valid resource file, the name used for the file path is a path
    within those resources; otherwise the file path refers to a local file.

    \sa \link The Qt Resource System \endlink, nameToPixmap()
*/

/*!
    \fn virtual QString QDesignerIconCacheInterface::iconToFilePath(const QIcon &icon) const = 0

    Returns the file path associated with the given \a icon. The file path is a path within
    an application resources.
*/

/*!
    \fn virtual QString QDesignerIconCacheInterface::iconToQrcPath(const QIcon &icon) const = 0

    Returns the path to the resource file that refers to the specified \a icon. The resource
    path refers to a local file.
*/

/*!
    \fn virtual QString QDesignerIconCacheInterface::pixmapToFilePath(const QPixmap &pixmap) const = 0

    Returns the file path associated with the given \a pixmap. The file path is a path within
    an application resources.
*/

/*!
    \fn virtual QString QDesignerIconCacheInterface::pixmapToQrcPath(const QPixmap &pixmap) const = 0

    Returns the path to the resource file that refers to the specified \a pixmap. The resource
    path refers to a local file.
*/

/*!
    \fn virtual QList<QPixmap> QDesignerIconCacheInterface::pixmapList() const = 0

    Returns a list of pixmaps for the icons provided by the icon cache.
*/

/*!
    \fn virtual QList<QIcon> QDesignerIconCacheInterface::iconList() const = 0

    Returns a list of icons provided by the icon cache.
*/

/*!
    \fn virtual QString QDesignerIconCacheInterface::resolveQrcPath(const QString &filePath, const QString &qrcPath, const QString &workingDirectory) const = 0

    Returns a path to a resource specified by the \a filePath within the resource file located
    at \a qrcPath. If \a workingDirectory is a valid path to a directory, the path returned will
    be relative to that directory; otherwise an absolute path is returned.

    \omit
    ### Needs checking
    \endomit
*/


// Doc: Interface only

/*!
    \class QDesignerPropertySheetExtension
    The QDesignerPropertySheetExtension class provides extensions to widget property sheets in \QD.
    \inmodule QtDesigner
*/

/*!
    \fn virtual QDesignerPropertySheetExtension::~QDesignerPropertySheetExtension()
*/

/*!
    \fn virtual int QDesignerPropertySheetExtension::count() const = 0
*/

/*!
    \fn virtual int QDesignerPropertySheetExtension::indexOf(const QString &name) const = 0
*/

/*!
    \fn virtual QString QDesignerPropertySheetExtension::propertyName(int index) const = 0
*/

/*!
    \fn virtual QString QDesignerPropertySheetExtension::propertyGroup(int index) const = 0
*/

/*!
    \fn virtual void QDesignerPropertySheetExtension::setPropertyGroup(int index, const QString &group) = 0
*/

/*!
    \fn virtual bool QDesignerPropertySheetExtension::hasReset(int index) const = 0
*/

/*!
    \fn virtual bool QDesignerPropertySheetExtension::reset(int index) = 0
*/

/*!
    \fn virtual bool QDesignerPropertySheetExtension::isVisible(int index) const = 0
*/

/*!
    \fn virtual void QDesignerPropertySheetExtension::setVisible(int index, bool b) = 0
*/

/*!
    \fn virtual bool QDesignerPropertySheetExtension::isAttribute(int index) const = 0
*/

/*!
    \fn virtual void QDesignerPropertySheetExtension::setAttribute(int index, bool b) = 0
*/

/*!
    \fn virtual QVariant QDesignerPropertySheetExtension::property(int index) const = 0
*/

/*!
    \fn virtual void QDesignerPropertySheetExtension::setProperty(int index, const QVariant &value) = 0
*/

/*!
    \fn virtual bool QDesignerPropertySheetExtension::isChanged(int index) const = 0
*/

/*!
    \fn virtual void QDesignerPropertySheetExtension::setChanged(int index, bool changed) = 0
*/
