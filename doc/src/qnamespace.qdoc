/****************************************************************************
**
** Qt's global enums etc.
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the kernel module of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \enum Qt::AlignmentFlag

    This enum type is used to describe alignment. It contains
    horizontal and vertical flags.

    The horizontal flags are:

    \value AlignAuto Aligns according to the language. Left for most,
	right for Arabic and Hebrew.
    \value AlignLeft Aligns with the left edge.
    \value AlignRight Aligns with the right edge.
    \value AlignHCenter Centers horizontally in the available space.
    \value AlignJustify Justifies the text in the available space.
	Does not work for everything and may be interpreted as
	AlignAuto in some cases.

    The vertical flags are:

    \value AlignTop Aligns with the top.
    \value AlignBottom Aligns with the bottom.
    \value AlignVCenter Centers vertically in the available space.

    You can use only one of the horizontal flags at a time. There is
    one two-dimensional flag:

    \value AlignCenter Centers in both dimensions.

    You can use at most one horizontal and one vertical flag at a time. \c
    AlignCenter counts as both horizontal and vertical.

    Masks:

    \value AlignHorizontal_Mask
    \value AlignVertical_Mask

    Conflicting combinations of flags have undefined meanings.
*/

/*!
    \enum Qt::GlobalColor

    Qt's 19 predefined QColor objects

    \value white
    \value black
    \value red
    \value darkRed
    \value green
    \value darkGreen
    \value blue
    \value darkBlue
    \value cyan
    \value darkCyan
    \value magenta
    \value darkMagenta
    \value yellow
    \value darkYellow
    \value gray
    \value darkGray
    \value lightGray
    \value color0 0 pixel value (for bitmaps)
    \value color1 1 pixel value (for bitmaps)

    \img qt-colors.png Qt Colors

    \sa QColor

*/

/*!
    \enum Qt::PenStyle

    This enum type defines the pen styles that can be drawn using
    QPainter. The styles are

    \value NoPen  no line at all. For example, QPainter::drawRect()
    fills but does not draw any boundary line.

    \value SolidLine  a plain line.

    \value DashLine  dashes separated by a few pixels.

    \value DotLine  dots separated by a few pixels.

    \value DashDotLine  alternate dots and dashes.

    \value DashDotDotLine  one dash, two dots, one dash, two dots.

    \omitvalue MPenStyle

    \img pen-styles.png Pen Styles

    \sa QPen
*/

/*!
    \enum Qt::PenCapStyle

    This enum type defines the pen cap styles supported by Qt, i.e.
    the line end caps that can be drawn using QPainter.

    \value FlatCap  a square line end that does not cover the end
	point of the line.
    \value SquareCap  a square line end that covers the end point and
	extends beyond it by half the line width.
    \value RoundCap  a rounded line end.
    \omitvalue MPenCapStyle

    \img pen-cap-styles.png Pen Cap Styles

    \sa QPen
*/

/*!
    \enum Qt::PenJoinStyle

    This enum type defines the pen join styles supported by Qt, i.e.
    which joins between two connected lines can be drawn using
    QPainter.

    \value MiterJoin  The outer edges of the lines are extended to
	meet at an angle, and this area is filled.
    \value BevelJoin  The triangular notch between the two lines is filled.
    \value RoundJoin  A circular arc between the two lines is filled.
    \omitvalue MPenJoinStyle

    \img pen-join-styles.png Pen Join Styles

    \sa QPen
*/

/*!
    \enum Qt::BrushStyle

    \value NoBrush
    \value SolidPattern
    \value Dense1Pattern
    \value Dense2Pattern
    \value Dense3Pattern
    \value Dense4Pattern
    \value Dense5Pattern
    \value Dense6Pattern
    \value Dense7Pattern
    \value HorPattern
    \value VerPattern
    \value CrossPattern
    \value BDiagPattern
    \value FDiagPattern
    \value DiagCrossPattern
    \value LinearGradientPattern
    \value CustomPattern

    \img brush-styles.png Brush Styles

    \sa QBrush
*/

/*!
    \enum Qt::TextFlags

    This enum type is used to define some modifier flags. Some of
    these flags only make sense in the context of printing:

    \value TextSingleLine Treats all whitespace as spaces and prints just
	one line.
    \value TextDontClip If it's impossible to stay within the given bounds,
	it prints outside.
    \value TextExpandTabs Makes the U+0009 (ASCII tab) character move to
	the next tab stop.
    \value TextShowMnemonic Displays the string "\&P" as \underline{P}
	(see QButton for an example). For an ampersand, use "\&\&".
    \value TextWordWrap Breaks lines at appropriate points, e.g. at word
	boundaries.
    \value TextWrapAnywhere Breaks lines anywhere, even within words.
    \value TextHideMnemonic Same as \c TextShowMnemonic but doesn't draw the underlines.
    \value TextDontPrint Treat this text as "hidden" and don't print
    it.
    \value TextIncludeTrailingSpaces Don't automatically delete
    trailing whitespace.
    \value TextOverline Draw a line \e over the text.
    \value TextUnderline Underline the text.
    \value TextStrikeOut Draw a line through the text.

    \omitvalue BreakAnywhere
    \omitvalue DontClip
    \omitvalue DontPrint
    \omitvalue ExpandTabs
    \omitvalue IncludeTrailingSpaces
    \omitvalue NoAccel
    \omitvalue Overline 
    \omitvalue ShowPrefix
    \omitvalue SingleLine
    \omitvalue StrikeOut
    \omitvalue Underline
    \omitvalue WordBreak

    You can use as many modifier flags as you want, except that \c
    TextSingleLine and \c TextWordBreak cannot be combined.

    Flags that are inappropriate for a given use are generally
    ignored.  
*/

/*!
    \enum Qt::BGMode

    Background mode

    \value TransparentMode
    \value OpaqueMode
*/

/*!
    \enum Qt::ConnectionType

    \internal

    \value AutoConnection
    \value DirectConnection
    \value QueuedConnection
*/

/*!
    \enum Qt::DateFormat

    \value TextDate The default Qt format.
    \value ISODate ISO 8601 extended format (YYYY-MM-DD, or with time,
    YYYY-MM-DDTHH:MM:SS).
    \value LocalDate The locale-dependent format.
*/


/*!
    \enum Qt::TimeSpec

    \value LocalTime Locale dependent time (Timezones and Daylight Savings Time).
    \value UTC Coordinated Universal Time, replaces Greenwich Mean Time.
*/

/*!
    \enum Qt::DayOfWeek

    \value Monday
    \value Tuesday
    \value Wednesday
    \value Thursday
    \value Friday
    \value Saturday
    \value Sunday
*/

/*! 
    \enum Qt::ScaleMode

    This enum type defines the different ways of scaling an image or a
    size object.

    \img qimage-scaling.png

    \value IgnoreAspectRatio  The size is scaled freely. The ratio is not
                              preserved.
    \value KeepAspectRatio    The size is scaled to a rectangle as large as
                              possible inside a given rectangle, preserving
                              the aspect ratio.
    \value KeepAspectRatioByExpanding  The size is scaled to a rectangle as
                              small as possible outside a given rectangle,
                              preserving the aspect ratio.

    \sa QSize::scale(), QImage::scale(), QImage::smoothScale()
*/

/*!
    \enum Qt::RectangleEdge

    \value LeftEdge
    \value TopEdge
    \value RightEdge
    \value BottomEdge
*/

/*!
    \enum Qt::CaseSensitivity

    \value CaseInsensitive
    \value CaseSensitive
*/

/*!
    \enum Qt::ToolBarArea

    \value ToolBarAreaLeft
    \value ToolBarAreaRight
    \value ToolBarAreaTop
    \value ToolBarAreaBottom
    \value AllToolBarAreas

    \omitvalue ToolBarAreaMask
    \omitvalue NToolBarAreas
*/

/*!
    \enum Qt::DockWindowArea

    \value DockWindowAreaLeft
    \value DockWindowAreaRight
    \value DockWindowAreaTop
    \value DockWindowAreaBottom
    \value AllDockWindowAreas

    \omitvalue DockWindowAreaMask
    \omitvalue NDockWindowAreas
*/

/*!
    \enum Qt::BackgroundMode

    \compat

    \value FixedColor
    \value FixedPixmap
    \value NoBackground
    \value PaletteForeground
    \value PaletteButton
    \value PaletteLight
    \value PaletteMidlight
    \value PaletteDark
    \value PaletteMid
    \value PaletteText
    \value PaletteBrightText
    \value PaletteBase
    \value PaletteBackground
    \value PaletteShadow
    \value PaletteHighlight
    \value PaletteHighlightedText
    \value PaletteButtonText
    \value PaletteLink
    \value PaletteLinkVisited
    \value X11ParentRelative
*/

/*!
    \enum Qt::ImageConversionFlag

    The options marked "(default)" are set if no other values from
    the list are included (since the defaults are zero):

    Color/Mono preference (ignored for QBitmap):

    \value AutoColor (default) - If the image has \link
           QImage::depth() depth\endlink 1 and contains only
           black and white pixels, the pixmap becomes monochrome.
    \value ColorOnly The pixmap is dithered/converted to the
           \link QPixmap::defaultDepth() native display depth\endlink.
    \value MonoOnly The pixmap becomes monochrome. If necessary,
           it is dithered using the chosen dithering algorithm.

    Dithering mode preference for RGB channels:

    \value DiffuseDither (default) - A high-quality dither.
    \value OrderedDither A faster, more ordered dither.
    \value ThresholdDither No dithering; closest color is used.

    Dithering mode preference for alpha channel:

    \value ThresholdAlphaDither (default) - No dithering.
    \value OrderedAlphaDither A faster, more ordered dither.
    \value DiffuseAlphaDither A high-quality dither.
    \omitvalue NoAlpha

    Color matching versus dithering preference:

    \value PreferDither (default when converting to a pixmap) - Always dither
           32-bit images when the image is converted to 8 bits.
    \value AvoidDither (default when converting for the purpose of saving to
           file) - Dither 32-bit images only if the image has more than 256
           colors and it is being converted to 8 bits.
    \omitvalue AutoDither

    \omitvalue ColorMode_Mask
    \omitvalue Dither_Mask
    \omitvalue AlphaDither_Mask
    \omitvalue DitherMode_Mask
*/

/*! \enum Qt::GUIStyle

    \compat
*/

/*!
    \enum Qt::UIEffect

    \value UI_General
    \value UI_AnimateMenu
    \value UI_FadeMenu
    \value UI_AnimateCombo
    \value UI_AnimateTooltip
    \value UI_FadeTooltip
    \value UI_AnimateToolBox Reserved

    \sa QApplication::setEffectEnabled()
*/

/*! \enum Qt::AspectRatioMode

    This enum type defines what happens to the aspect ratio when
    scaling an rectangle.

    \img qimage-scaling.png

    \value IgnoreAspectRatio  The size is scaled freely. The aspect
                              ratio is not preserved.
    \value KeepAspectRatio  The size is scaled to a rectangle as
                            large as possible inside a given
                            rectangle, preserving the aspect ratio.
    \value KeepAspectRatioByExpanding  The size is scaled to a
                                       rectangle as small as possible
                                       outside a given rectangle,
                                       preserving the aspect ratio.

    \sa QSize::scale(), QImage::scale()
*/

/*! \typedef Qt::ScaleMode
    \compat

    Use Qt::AspectRatioMode instead.
*/

/*! \enum Qt::TransformationMode

    This enum type defines whether image transformations (e.g.,
    scaling) should be smooth or not.

    \value FastTransformation  The transformation is performed
                               quickly, with no smoothing.
    \value SmoothTransformation  The resulting image has smoothed
                                 edges.

    \sa QImage::scale()
*/

/*! \enum Qt::SettingsFormat

    This enum type specifies the storage format used by QCoreSettings
    and QSettings.

    \value NativeFormat  Store the settings using the most
                         appropriate storage format for the platform.
                         On Windows, this means the system registry;
                         on Mac OS X, this means the CFPreferences
                         API; on Unix/X11, this means textual
                         configuration files in INI format.
    \value IniFormat  Store the settings in INI files.

    On Unix/X11, \c NativeFormat and \c IniFormat mean the same
    thing, except that the file extension is different (\c .conf for
    \c NativeFormat, \c .ini for \c IniFormat).

    The INI file format is a standard Windows file format that Qt
    supports on all platforms.
*/

/*! \enum Qt::SettingsScope

    This enum specifies whether settings are user-specific or shared
    by all users of the same system.

    \value UserScope  Store settings in a location specific to the
                      current user (e.g., in the user's home
                      directory).
    \value SystemScope  Store settings in a global location, so that
                        all users on the same machine access the same
                        set of settings.
*/

/*! \typedef Qt::HANDLE

    Platform-specific handle type for system objects. This is
    equivalent to \c{void *} on Windows, Mac OS X, and Qt/Embedded,
    and to \c{unsigned long} on X11.

    \warning Using this type is not portable.
*/
