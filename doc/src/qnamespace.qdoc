/****************************************************************************
**
** Qt's global enums etc.
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the kernel module of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \namespace Qt

    \brief The Qt namespace contains miscellaneous identifiers
    used throughout the Qt library.

    \ingroup misc
*/

/*!
    \enum Qt::Orientation

    This type is used to signify an object's orientation.

    \value Horizontal
    \value Vertical

    Orientation is used with QScrollBar for example.
*/

/*!
    \enum Qt::AlignmentFlag

    This enum type is used to describe alignment. It contains
    horizontal and vertical flags.

    The horizontal flags are:

    \value AlignAuto Aligns according to the language. Left for most,
	right for Arabic and Hebrew.
    \value AlignLeft Aligns with the left edge.
    \value AlignRight Aligns with the right edge.
    \value AlignHCenter Centers horizontally in the available space.
    \value AlignJustify Justifies the text in the available space.
	Does not work for everything and may be interpreted as
	AlignAuto in some cases.

    The vertical flags are:

    \value AlignTop Aligns with the top.
    \value AlignBottom Aligns with the bottom.
    \value AlignVCenter Centers vertically in the available space.

    You can use only one of the horizontal flags at a time. There is
    one two-dimensional flag:

    \value AlignCenter Centers in both dimensions.

    You can use at most one horizontal and one vertical flag at a time. \c
    AlignCenter counts as both horizontal and vertical.

    Masks:

    \value AlignHorizontal_Mask
    \value AlignVertical_Mask

    Conflicting combinations of flags have undefined meanings.
*/

/*!
    \enum Qt::MouseButton

    This enum type describes the different mouse buttons.

    \value NoButton        The button state does not refer to any
    button (see QMouseEvent::button()).
    \value LeftButton      The left button is pressed, or an event refers
    to the left button. (The left button may be the right button on
    left-handed mice.)
    \value RightButton     The right button.
    \value MidButton       The middle button.
    \value XButton1        The first X button.
    \value XButton2        The second X button.

    \omitvalue MouseButtonMask

    \sa KeyboardModifier Modifier
*/

/*!
    \enum Qt::KeyboardModifier

    This enum describes the modifier keys.

    \value NoModifier       No modifier key is pressed.
    \value ShiftModifier    A Shift key on the keyboard is pressed.
    \value ControlModifier  A Ctrl key on the keyboard is pressed.
    \value AltModifier      An Alt key on the keyboard is pressed.
    \value MetaModifier     A Meta key on the keyboard is pressed.
    \value KeypadModifier   A keypad button is pressed.

    \omitvalue KeyboardModifierMask

    \sa MouseButton Modifier
*/

/*!
    \enum Qt::Modifier

    This enum provides shorter names for the keyboard modifier keys
    supported by Qt.

    \value SHIFT The Shift keys provided on all standard keyboards.
    \value META The Meta keys.
    \value CTRL The Ctrl keys.
    \value ALT The normal Alt keys, but not keys like AltGr.
    \value UNICODE_ACCEL The shortcut is specified as a Unicode code
    point, not as a Qt Key.
    \omitvalue MODIFIER_MASK

    \sa KeyboardModifier MouseButton
*/

/*!
    \enum Qt::GlobalColor

    \raw HTML
    <style type="text/css" id="colorstyles">
     #white { background-color: #ffffff; color: #000000 }
     #black { background-color: #000000; color: #ffffff }
     #red { background-color: #ff0000; color: #000000 }
     #darkRed { background-color: #800000; color: #ffffff }
     #green { background-color: #00ff00; color: #000000 }
     #darkGreen { background-color: #008000; color: #ffffff }
     #blue { background-color: #0000ff; color: #ffffff }
     #darkBlue { background-color: #000080; color: #ffffff }
     #cyan { background-color: #00ffff; color: #000000 }
     #darkCyan { background-color: #008080; color: #ffffff }
     #magenta { background-color: #ff00ff; color: #000000 }
     #darkMagenta { background-color: #800080; color: #ffffff }
     #yellow { background-color: #ffff00; color: #000000 }
     #darkYellow { background-color: #808000; color: #ffffff }
     #gray { background-color: #a0a0a4; color: #000000 }
     #darkGray { background-color: #808080; color: #ffffff }
     #lightGray { background-color: #c0c0c0; color: #000000 }
    </style>
    \endraw

    Qt's 19 predefined QColor objects

    \value white       \raw HTML
    White <tt id="white">(#ffffff)</tt>
    \endraw
    \value black       \raw HTML
    Black <tt id="black">(#000000)</tt>
    \endraw
    \value red         \raw HTML
    Red <tt id="red">(#ff0000)</tt>
    \endraw
    \value darkRed     \raw HTML
    Dark red <tt id="darkRed">(#800000)</tt>
    \endraw
    \value green       \raw HTML
    Green <tt id="green">(#00ff00)</tt>
    \endraw
    \value darkGreen   \raw HTML
    Dark green <tt id="darkGreen">(#008000)</tt>
    \endraw
    \value blue        \raw HTML
    Blue <tt id="blue">(#0000ff)</tt>
    \endraw
    \value darkBlue    \raw HTML
    Dark blue <tt id="darkBlue">(#000080)</tt>
    \endraw
    \value cyan        \raw HTML
    Cyan <tt id="cyan">(#00ffff)</tt>
    \endraw
    \value darkCyan    \raw HTML
    Dark cyan <tt id="darkCyan">(#008080)</tt>
    \endraw
    \value magenta     \raw HTML
    Magenta <tt id="magenta">(#ff00ff)</tt>
    \endraw
    \value darkMagenta \raw HTML
    Dark magenta <tt id="darkMagenta">(#800080)</tt>
    \endraw
    \value yellow      \raw HTML
    Yellow <tt id="yellow">(#ffff00)</tt>
    \endraw
    \value darkYellow  \raw HTML
    Dark yellow <tt id="darkYellow">(#808000)</tt>
    \endraw
    \value gray        \raw HTML
    Gray <tt id="gray">(#a0a0a4)</tt>
    \endraw
    \value darkGray    \raw HTML
    Dark gray <tt id="darkGray">(#808080)</tt>
    \endraw
    \value lightGray   \raw HTML
    Light gray <tt id="lightGray">(#c0c0c0)</tt>
    \endraw
    \value color0 0 pixel value (for bitmaps)
    \value color1 1 pixel value (for bitmaps)

    \omit
    \img qt-colors.png Qt Colors
    \endomit

    \sa QColor

*/

/*!
    \enum Qt::PenStyle

    This enum type defines the pen styles that can be drawn using
    QPainter. The styles are

    \value NoPen  no line at all. For example, QPainter::drawRect()
    fills but does not draw any boundary line.

    \value SolidLine  a plain line.

    \value DashLine  dashes separated by a few pixels.

    \value DotLine  dots separated by a few pixels.

    \value DashDotLine  alternate dots and dashes.

    \value DashDotDotLine  one dash, two dots, one dash, two dots.

    \omitvalue MPenStyle

    \img pen-styles.png Pen Styles

    \sa QPen
*/

/*!
    \enum Qt::PenCapStyle

    This enum type defines the pen cap styles supported by Qt, i.e.
    the line end caps that can be drawn using QPainter.

    \value FlatCap  a square line end that does not cover the end
	point of the line.
    \value SquareCap  a square line end that covers the end point and
	extends beyond it by half the line width.
    \value RoundCap  a rounded line end.
    \omitvalue MPenCapStyle

    \img pen-cap-styles.png Pen Cap Styles

    \sa QPen
*/

/*!
    \enum Qt::PenJoinStyle

    This enum type defines the pen join styles supported by Qt, i.e.
    which joins between two connected lines can be drawn using
    QPainter.

    \value MiterJoin  The outer edges of the lines are extended to
	meet at an angle, and this area is filled.
    \value BevelJoin  The triangular notch between the two lines is filled.
    \value RoundJoin  A circular arc between the two lines is filled.
    \omitvalue MPenJoinStyle

    \img pen-join-styles.png Pen Join Styles

    \sa QPen
*/

/*!
    \enum Qt::BrushStyle

    \value NoBrush
    \value SolidPattern
    \value Dense1Pattern
    \value Dense2Pattern
    \value Dense3Pattern
    \value Dense4Pattern
    \value Dense5Pattern
    \value Dense6Pattern
    \value Dense7Pattern
    \value HorPattern
    \value VerPattern
    \value CrossPattern
    \value BDiagPattern
    \value FDiagPattern
    \value DiagCrossPattern
    \value LinearGradientPattern
    \value CustomPattern

    \img brush-styles.png Brush Styles

    \sa QBrush
*/

/*!
    \enum Qt::TextFlags

    This enum type is used to define some modifier flags. Some of
    these flags only make sense in the context of printing:

    \value TextSingleLine Treats all whitespace as spaces and prints just
	one line.
    \value TextDontClip If it's impossible to stay within the given bounds,
	it prints outside.
    \value TextExpandTabs Makes the U+0009 (ASCII tab) character move to
	the next tab stop.
    \value TextShowMnemonic Displays the string "\&P" as \underline{P}
	(see QButton for an example). For an ampersand, use "\&\&".
    \value TextWordWrap Breaks lines at appropriate points, e.g. at word
	boundaries.
    \value TextWrapAnywhere Breaks lines anywhere, even within words.
    \value TextHideMnemonic Same as \c TextShowMnemonic but doesn't draw the underlines.
    \value TextDontPrint Treat this text as "hidden" and don't print
    it.
    \value TextIncludeTrailingSpaces Don't automatically delete
    trailing whitespace.
    \value TextOverline Draw a line \e over the text.
    \value TextUnderline Underline the text.
    \value TextStrikeOut Draw a line through the text.

    \omitvalue BreakAnywhere
    \omitvalue DontClip
    \omitvalue DontPrint
    \omitvalue ExpandTabs
    \omitvalue IncludeTrailingSpaces
    \omitvalue NoAccel
    \omitvalue Overline
    \omitvalue ShowPrefix
    \omitvalue SingleLine
    \omitvalue StrikeOut
    \omitvalue Underline
    \omitvalue WordBreak

    You can use as many modifier flags as you want, except that \c
    TextSingleLine and \c TextWordBreak cannot be combined.

    Flags that are inappropriate for a given use are generally
    ignored.
*/

/*!
    \enum Qt::BGMode

    Background mode

    \value TransparentMode
    \value OpaqueMode
*/

/*!
    \enum Qt::ConnectionType

    \internal

    \value AutoConnection
    \value DirectConnection
    \value QueuedConnection
*/

/*!
    \enum Qt::DateFormat

    \value TextDate The default Qt format.
    \value ISODate ISO 8601 extended format (YYYY-MM-DD, or with time,
    YYYY-MM-DDTHH:MM:SS).
    \value LocalDate The locale-dependent format.
*/


/*!
    \enum Qt::TimeSpec

    \value LocalTime Locale dependent time (Timezones and Daylight Savings Time).
    \value UTC Coordinated Universal Time, replaces Greenwich Mean Time.
*/

/*!
    \enum Qt::DayOfWeek

    \value Monday
    \value Tuesday
    \value Wednesday
    \value Thursday
    \value Friday
    \value Saturday
    \value Sunday
*/

/*!
    \enum Qt::CaseSensitivity

    \value CaseInsensitive
    \value CaseSensitive
*/

/*!
    \enum Qt::ToolBarArea

    \value LeftToolBarArea
    \value RightToolBarArea
    \value TopToolBarArea
    \value BottomToolBarArea
    \value AllToolBarAreas

    \omitvalue ToolBarAreaMask
    \omitvalue NToolBarAreas
    \omitvalue ToolBarArea_Mask
*/

/*!
    \enum Qt::DockWindowArea

    \value LeftDockWindowArea
    \value RightDockWindowArea
    \value TopDockWindowArea
    \value BottomDockWindowArea
    \value AllDockWindowAreas

    \omitvalue DockWindowAreaMask
    \omitvalue NDockWindowAreas
    \omitvalue DockWindowArea_Mask
*/

/*!
    \enum Qt::BackgroundMode

    \compat

    \value FixedColor
    \value FixedPixmap
    \value NoBackground
    \value PaletteForeground
    \value PaletteButton
    \value PaletteLight
    \value PaletteMidlight
    \value PaletteDark
    \value PaletteMid
    \value PaletteText
    \value PaletteBrightText
    \value PaletteBase
    \value PaletteBackground
    \value PaletteShadow
    \value PaletteHighlight
    \value PaletteHighlightedText
    \value PaletteButtonText
    \value PaletteLink
    \value PaletteLinkVisited
    \value X11ParentRelative
*/

/*!
    \enum Qt::ImageConversionFlag

    The options marked "(default)" are set if no other values from
    the list are included (since the defaults are zero):

    Color/Mono preference (ignored for QBitmap):

    \value AutoColor (default) - If the image has \link
           QImage::depth() depth\endlink 1 and contains only
           black and white pixels, the pixmap becomes monochrome.
    \value ColorOnly The pixmap is dithered/converted to the
           \link QPixmap::defaultDepth() native display depth\endlink.
    \value MonoOnly The pixmap becomes monochrome. If necessary,
           it is dithered using the chosen dithering algorithm.

    Dithering mode preference for RGB channels:

    \value DiffuseDither (default) - A high-quality dither.
    \value OrderedDither A faster, more ordered dither.
    \value ThresholdDither No dithering; closest color is used.

    Dithering mode preference for alpha channel:

    \value ThresholdAlphaDither (default) - No dithering.
    \value OrderedAlphaDither A faster, more ordered dither.
    \value DiffuseAlphaDither A high-quality dither.
    \omitvalue NoAlpha

    Color matching versus dithering preference:

    \value PreferDither (default when converting to a pixmap) - Always dither
           32-bit images when the image is converted to 8 bits.
    \value AvoidDither (default when converting for the purpose of saving to
           file) - Dither 32-bit images only if the image has more than 256
           colors and it is being converted to 8 bits.
    \omitvalue AutoDither

    \omitvalue ColorMode_Mask
    \omitvalue Dither_Mask
    \omitvalue AlphaDither_Mask
    \omitvalue DitherMode_Mask
*/

/*! \enum Qt::GUIStyle

    \compat

    \value WindowsStyle
    \value MotifStyle
    \value MacStyle
    \value Win3Style
    \value PMStyle
*/

/*!
    \enum Qt::UIEffect

    \value UI_General
    \value UI_AnimateMenu
    \value UI_FadeMenu
    \value UI_AnimateCombo
    \value UI_AnimateTooltip
    \value UI_FadeTooltip
    \value UI_AnimateToolBox Reserved

    \sa QApplication::setEffectEnabled()
*/

/*! \enum Qt::AspectRatioMode

    This enum type defines what happens to the aspect ratio when
    scaling an rectangle.

    \img qimage-scaling.png

    \value IgnoreAspectRatio  The size is scaled freely. The aspect
                              ratio is not preserved.
    \value KeepAspectRatio  The size is scaled to a rectangle as
                            large as possible inside a given
                            rectangle, preserving the aspect ratio.
    \value KeepAspectRatioByExpanding  The size is scaled to a
                                       rectangle as small as possible
                                       outside a given rectangle,
                                       preserving the aspect ratio.

    \omitvalue ScaleFree
    \omitvalue ScaleMin
    \omitvalue ScaleMax

    \sa QSize::scale(), QImage::scale()
*/

/*! \typedef Qt::ScaleMode
    \compat

    Use Qt::AspectRatioMode instead.

    The enum values have been renamed as follows:

    \table
    \row \i Old enum value \i New enum value
    \row \i Qt::ScaleFree  \i Qt::IgnoreAspectRatio
    \row \i Qt::ScaleMin   \i Qt::KeepAspectRatio
    \row \i Qt::ScaleMax   \i Qt::KeepAspectRatioByExpanding
    \endtable
*/

/*! \enum Qt::TransformationMode

    This enum type defines whether image transformations (e.g.,
    scaling) should be smooth or not.

    \value FastTransformation  The transformation is performed
                               quickly, with no smoothing.
    \value SmoothTransformation  The resulting image has smoothed
                                 edges.

    \sa QImage::scale()
*/

/*!
    \enum Qt::WidgetAttribute

    \keyword widget attributes

    This enum type is used to specify various widget
    attributes. Attributes are set and cleared with
    QWidget::setAttribute(), and queried with QWidget::hasAttribute(),
    although some have special convenience functions which are
    mentioned below.

    \value WA_DeleteOnClose makes Qt delete this widget when the
    widget has accepted closeEvent(), or when the widget tried to
    ignore closeEvent() but could not.

    \value WA_KeyCompression Enables key event compression if set,
    and disables it if not set. By default key compression is off, so
    widgets receive one key press event for each key press (or more,
    since autorepeat is usually on). If you turn it on and your
    program doesn't keep up with key input, Qt may try to compress key
    events so that more than one character can be processed in each
    event.

    For example, a word processor widget might receive 2, 3 or more
    characters in each QKeyEvent::text(), if the layout recalculation
    takes too long for the CPU.

    If a widget supports multiple character unicode input, it is
    always safe to turn the compression on.

    Qt performs key event compression only for printable characters.
    Qt::Modifier keys, cursor movement keys, function keys and
    miscellaneous action keys (e.g. Escape, Enter, Backspace,
    PrintScreen) will stop key event compression, even if there are
    more compressible key events available.

    Not all platforms support this compression, in which case turning
    it on will have no effect.

    This is set/cleared by the widget's author.

    \value WA_PendingMoveEvent Indicates that a move event is
    pending, e.g. when a hidden widget was moved. This is set/cleared
    by the Qt kernel

    \value WA_PendingResizeEvent Indicates that a resize event is
    pending, e.g. when a hidden widget was resized. This is
    set/cleared by the Qt kernel.

    \value WA_UnderMouse Indicates that the widget is under the
    mouse cursor. The value is not updated correctly during drag and
    drop operations. There is also a getter function
    QWidget::underMouse(). This is set/cleared by the Qt kernel.

    \value WA_Disabled Indicates that the widget is disabled, i.e.
    it does not receive any mouse or keyboard events. There is also a
    getter functions QWidget::isEnabled().  This is set/cleared by the
    Qt kernel.

    \value WA_ContentsPropagated Allows the contents painted in a
    QWidget::paintEvent() to be used as the background for children
    that inherit their background. This is set/cleared by the widget
    author or by the style.

    \value WA_ForceDisabled Indicates that the widget is
    explicitly disabled, i.e. it will remain disabled even when all
    its ancestors are set to the enabled state. This implies
    WA_Disabled. This is set/cleared by QWidget::setEnabled() and
    QWidget::setDisabled().

    \value WA_SetPalette Indicates that the widgets has a palette
    of its own. This is set/cleared by QWidget::setPalette().

    \value WA_SetFont Indicates that the widgets has a font of its
    own. This is set/cleared by QWidget::setFont().

    \value WA_SetCursor Indicates that the widgets has a cursor of its
    own. This is set/cleared by QWidget::setCursor() and
    QWidget::unsetCursor().

    \value WA_SetForegroundRole Indicates that the widgets has an
    explicit foreground role. This is set/cleared by
    QWidget::setForegroundRole().

    \value WA_SetBackgroundRole Indicates that the widgets has an
    explicit background role. This is set/cleared by
    QWidget::setBackgroundRole().

    \value WA_NoBackground Indicates that the widget paints all its
    pixels when it receives a paint event. It is thus not required for
    operations like updating, resizing, scrolling and focus changes to
    call erase the widget before generating paint events. Using
    WA_NoBackground is a small optimization. It can help to reduce
    flicker on systems that do not provide double buffer support, and
    it avoids the computational cycles necessary to erase the
    background prior to paint. NOTE: Unlike WA_NoSystemBackground,
    WA_NoBackground makes an effort to avoid transparent window
    backgrounds. This is set/cleared by the widget's author.

    \value WA_NoSystemBackground Indicates that the widget has no
    background, i.e. when the widget receives paint events, the
    background is not automatically repainted. NOTE: Unlike
    WA_NoBackground, newly exposed areas are \e never filled with the
    background (e.g after showing a window for the first time the user
    can see "through" it until the application processes the paint
    events). Setting this flag implicitly disables double buffering
    for the widget. This is set/cleared by the widget's author.

    \value WA_UpdatesDisabled Indicates that updates are blocked
    (including the system background). This flag must never be
    set/cleared by the widget author. It is set/cleared by the Qt
    kernel.

    \value WA_ForceUpdatesDisabled Indicates that the widget is
    explicitly updates disabled, i.e. it will remain disabled even
    when all its ancestors are set to the updates enabled state. This
    implies WA_UpdatesDisabled. This is set/cleared by
    QWidget::setUpdatesEnabled().

    \value WA_StaticContents Indicates that the widget contents
    are north-west aligned and static. On resize, such a widget will
    receive paint events only for the newly visible part of itself.
    This is set/cleared by the widget's author.

    \value WA_PaintOnScreen Indicates that the widget wants to
    draw directly onto the screen (implies no double buffering). This
    is not supported on all platforms. This is set/cleared by the
    widget's author.

    \value WA_PaintUnclipped Makes all painters operating on this
    widget unclipped. Children of this widget or other widgets in
    front of it do not clip the area the painter can paint on.

    \value WA_PaintOutsidePaintEvent Makes it possible to use QPainter
    to paint on the widget outside \l{QWidget::paintEvent()}{paintEvent()}.
    This is currently not supported on Mac OS X. We recommend that you
    use this attribute only when porting Qt 3 code to Qt 4.

    \value WA_WindowModified Indicates that the window is marked as
    modified. On some platforms this will mean nothing, on others
    (including Mac OS X and Windows) the window will take a modified
    appearance. This is set/cleared by QWidget::setWindowModified().

    \value WA_Resized Indicates that the widget has an explicit
    size. This is set/cleared by QWidget::resize() and
    by QWidget::setGeometry().

    \value WA_Moved Indicates that the widget has an explicit
    position. This is set/cleared by QWidget::move() and
    by QWidget::setGeometry().

    \value WA_Mapped Indicates that the widget is mapped on screen.
    This is set/cleared by the Qt kernel.

    \value WA_NoMouseReplay Used for popup widgets. Indicates that the
    most recent mouse press event should not be replayed when the
    popup widget closes. The flag is set by the widget's author and
    cleared by the Qt kernel every time the widget receives a new
    mouse event.

    \value WA_OutsideWSRange Indicates that the widget is outside
    the valid range of the window system's coordinate system. A widget
    outside the valid range cannot be mapped on screen. This is
    set/cleared by the Qt kernel.

    \value WA_MacMetalStyle Indicates the the widget should be
    drawn in metal style as supported by the windowing system (only
    meaningfull on Mac OS X). This is set by widget's author.

    \value WA_CustomWhatsThis Indicates that the widget wants to
    continue operating normally in What's This mode This is set by the
    widget's author.

    \value WA_LayoutOnEntireRect Indicates that the widget
    wants QLayout to operate on the entire QWidget::rect(), not only
    on QWidget::contentsRect(). This is set by the widget's author.

    \value WA_NoChildEventsForParent Indicates that the widget does
    not want ChildAdded or ChildRemoved events sent to its
    parent. This is rarely necessary but can help to avoid automatic
    insertion widgets like splitters and layouts. This is set by a
    widget's author.

    \value WA_MouseTracking Indicates that the widget has mouse tracking
    enabled. See QWidget::mouseTracking.

    \omitvalue WA_ForegroundInherited
    \omitvalue WA_SetWindowIcon
    \omitvalue WA_PendingUpdate
    \omitvalue WA_LaidOut
    \omitvalue WA_GrabbedShortcut
    \omitvalue WA_TransparentForMouseEvents
    \omitvalue WA_InvalidSize
    \omitvalue WA_ForceUpdatesDisabled

    \omitvalue WA_AttributeCount
*/

/*! \enum Qt::SettingsFormat

    This enum type specifies the storage format used by QCoreSettings
    and QSettings.

    \value NativeFormat  Store the settings using the most
                         appropriate storage format for the platform.
                         On Windows, this means the system registry;
                         on Mac OS X, this means the CFPreferences
                         API; on Unix/X11, this means textual
                         configuration files in INI format.
    \value IniFormat  Store the settings in INI files.

    On Unix/X11, \c NativeFormat and \c IniFormat mean the same
    thing, except that the file extension is different (\c .conf for
    \c NativeFormat, \c .ini for \c IniFormat).

    The INI file format is a standard Windows file format that Qt
    supports on all platforms.
*/

/*! \enum Qt::SettingsScope

    This enum specifies whether settings are user-specific or shared
    by all users of the same system.

    \value UserScope  Store settings in a location specific to the
                      current user (e.g., in the user's home
                      directory).
    \value SystemScope  Store settings in a global location, so that
                        all users on the same machine access the same
                        set of settings.
*/

/*! \typedef Qt::HANDLE

    Platform-specific handle type for system objects. This is
    equivalent to \c{void *} on Windows, Mac OS X, and Qt/Embedded,
    and to \c{unsigned long} on X11.

    \warning Using this type is not portable.
*/

/*!
    \enum Qt::Key

    The key names used by Qt.

    \value Key_Escape
    \value Key_Tab
    \value Key_Backtab
    \omitvalue Key_BackTab
    \value Key_Backspace
    \omitvalue Key_BackSpace
    \value Key_Return
    \value Key_Enter
    \value Key_Insert
    \value Key_Delete
    \value Key_Pause
    \value Key_Print
    \value Key_SysReq
    \value Key_Clear
    \value Key_Home
    \value Key_End
    \value Key_Left
    \value Key_Up
    \value Key_Right
    \value Key_Down
    \value Key_PageUp
    \omitvalue Key_Prior
    \value Key_PageDown
    \omitvalue Key_Next
    \value Key_Shift
    \value Key_Control
    \value Key_Meta
    \value Key_Alt
    \value Key_CapsLock
    \value Key_NumLock
    \value Key_ScrollLock
    \value Key_F1
    \value Key_F2
    \value Key_F3
    \value Key_F4
    \value Key_F5
    \value Key_F6
    \value Key_F7
    \value Key_F8
    \value Key_F9
    \value Key_F10
    \value Key_F11
    \value Key_F12
    \value Key_F13
    \value Key_F14
    \value Key_F15
    \value Key_F16
    \value Key_F17
    \value Key_F18
    \value Key_F19
    \value Key_F20
    \value Key_F21
    \value Key_F22
    \value Key_F23
    \value Key_F24
    \value Key_F25
    \value Key_F26
    \value Key_F27
    \value Key_F28
    \value Key_F29
    \value Key_F30
    \value Key_F31
    \value Key_F32
    \value Key_F33
    \value Key_F34
    \value Key_F35
    \value Key_Super_L
    \value Key_Super_R
    \value Key_Menu
    \value Key_Hyper_L
    \value Key_Hyper_R
    \value Key_Help
    \value Key_Direction_L
    \value Key_Direction_R
    \value Key_Space
    \value Key_Any
    \value Key_Exclam
    \value Key_QuoteDbl
    \value Key_NumberSign
    \value Key_Dollar
    \value Key_Percent
    \value Key_Ampersand
    \value Key_Apostrophe
    \value Key_ParenLeft
    \value Key_ParenRight
    \value Key_Asterisk
    \value Key_Plus
    \value Key_Comma
    \value Key_Minus
    \value Key_Period
    \value Key_Slash
    \value Key_0
    \value Key_1
    \value Key_2
    \value Key_3
    \value Key_4
    \value Key_5
    \value Key_6
    \value Key_7
    \value Key_8
    \value Key_9
    \value Key_Colon
    \value Key_Semicolon
    \value Key_Less
    \value Key_Equal
    \value Key_Greater
    \value Key_Question
    \value Key_At
    \value Key_A
    \value Key_B
    \value Key_C
    \value Key_D
    \value Key_E
    \value Key_F
    \value Key_G
    \value Key_H
    \value Key_I
    \value Key_J
    \value Key_K
    \value Key_L
    \value Key_M
    \value Key_N
    \value Key_O
    \value Key_P
    \value Key_Q
    \value Key_R
    \value Key_S
    \value Key_T
    \value Key_U
    \value Key_V
    \value Key_W
    \value Key_X
    \value Key_Y
    \value Key_Z
    \value Key_BracketLeft
    \value Key_Backslash
    \value Key_BracketRight
    \value Key_AsciiCircum
    \value Key_Underscore
    \value Key_QuoteLeft
    \value Key_BraceLeft
    \value Key_Bar
    \value Key_BraceRight
    \value Key_AsciiTilde
    \value Key_nobreakspace
    \value Key_exclamdown
    \value Key_cent
    \value Key_sterling
    \value Key_currency
    \value Key_yen
    \value Key_brokenbar
    \value Key_section
    \value Key_diaeresis
    \value Key_copyright
    \value Key_ordfeminine
    \value Key_guillemotleft
    \value Key_notsign
    \value Key_hyphen
    \value Key_registered
    \value Key_macron
    \value Key_degree
    \value Key_plusminus
    \value Key_twosuperior
    \value Key_threesuperior
    \value Key_acute
    \value Key_mu
    \value Key_paragraph
    \value Key_periodcentered
    \value Key_cedilla
    \value Key_onesuperior
    \value Key_masculine
    \value Key_guillemotright
    \value Key_onequarter
    \value Key_onehalf
    \value Key_threequarters
    \value Key_questiondown
    \value Key_Agrave
    \value Key_Aacute
    \value Key_Acircumflex
    \value Key_Atilde
    \value Key_Adiaeresis
    \value Key_Aring
    \value Key_AE
    \value Key_Ccedilla
    \value Key_Egrave
    \value Key_Eacute
    \value Key_Ecircumflex
    \value Key_Ediaeresis
    \value Key_Igrave
    \value Key_Iacute
    \value Key_Icircumflex
    \value Key_Idiaeresis
    \value Key_ETH
    \value Key_Ntilde
    \value Key_Ograve
    \value Key_Oacute
    \value Key_Ocircumflex
    \value Key_Otilde
    \value Key_Odiaeresis
    \value Key_multiply
    \value Key_Ooblique
    \value Key_Ugrave
    \value Key_Uacute
    \value Key_Ucircumflex
    \value Key_Udiaeresis
    \value Key_Yacute
    \value Key_THORN
    \value Key_ssharp
    \omitvalue Key_agrave
    \omitvalue Key_aacute
    \omitvalue Key_acircumflex
    \omitvalue Key_atilde
    \omitvalue Key_adiaeresis
    \omitvalue Key_aring
    \omitvalue Key_ae
    \omitvalue Key_ccedilla
    \omitvalue Key_egrave
    \omitvalue Key_eacute
    \omitvalue Key_ecircumflex
    \omitvalue Key_ediaeresis
    \omitvalue Key_igrave
    \omitvalue Key_iacute
    \omitvalue Key_icircumflex
    \omitvalue Key_idiaeresis
    \omitvalue Key_eth
    \omitvalue Key_ntilde
    \omitvalue Key_ograve
    \omitvalue Key_oacute
    \omitvalue Key_ocircumflex
    \omitvalue Key_otilde
    \omitvalue Key_odiaeresis
    \value Key_division
    \omitvalue Key_oslash
    \omitvalue Key_ugrave
    \omitvalue Key_uacute
    \omitvalue Key_ucircumflex
    \omitvalue Key_udiaeresis
    \omitvalue Key_yacute
    \omitvalue Key_thorn
    \value Key_ydiaeresis
    \value Key_Multi_key
    \value Key_Codeinput
    \value Key_SingleCandidate
    \value Key_MultipleCandidate
    \value Key_PreviousCandidate
    \value Key_Mode_switch
    \value Key_Kanji
    \value Key_Muhenkan
    \value Key_Henkan
    \value Key_Romaji
    \value Key_Hiragana
    \value Key_Katakana
    \value Key_Hiragana_Katakana
    \value Key_Zenkaku
    \value Key_Hankaku
    \value Key_Zenkaku_Hankaku
    \value Key_Touroku
    \value Key_Massyo
    \value Key_Kana_Lock
    \value Key_Kana_Shift
    \value Key_Eisu_Shift
    \value Key_Eisu_toggle
    \value Key_Hangul
    \value Key_Hangul_Start
    \value Key_Hangul_End
    \value Key_Hangul_Hanja
    \value Key_Hangul_Jamo
    \value Key_Hangul_Romaja
    \value Key_Hangul_Jeonja
    \value Key_Hangul_Banja
    \value Key_Hangul_PreHanja
    \value Key_Hangul_PostHanja
    \value Key_Hangul_Special
    \value Key_Dead_Grave
    \value Key_Dead_Acute
    \value Key_Dead_Circumflex
    \value Key_Dead_Tilde
    \value Key_Dead_Macron
    \value Key_Dead_Breve
    \value Key_Dead_Abovedot
    \value Key_Dead_Diaeresis
    \value Key_Dead_Abovering
    \value Key_Dead_Doubleacute
    \value Key_Dead_Caron
    \value Key_Dead_Cedilla
    \value Key_Dead_Ogonek
    \value Key_Dead_Iota
    \value Key_Dead_Voiced_Sound
    \value Key_Dead_Semivoiced_Sound
    \value Key_Dead_Belowdot
    \value Key_Dead_Hook
    \value Key_Dead_Horn
    \value Key_Back
    \value Key_Forward
    \value Key_Stop
    \value Key_Refresh
    \value Key_VolumeDown
    \value Key_VolumeMute
    \value Key_VolumeUp
    \value Key_BassBoost
    \value Key_BassUp
    \value Key_BassDown
    \value Key_TrebleUp
    \value Key_TrebleDown
    \value Key_MediaPlay
    \value Key_MediaStop
    \value Key_MediaPrevious
    \omitvalue Key_MediaPrev
    \value Key_MediaNext
    \value Key_MediaRecord
    \value Key_HomePage
    \value Key_Favorites
    \value Key_Search
    \value Key_Standby
    \value Key_OpenUrl
    \value Key_LaunchMail
    \value Key_LaunchMedia
    \value Key_Launch0
    \value Key_Launch1
    \value Key_Launch2
    \value Key_Launch3
    \value Key_Launch4
    \value Key_Launch5
    \value Key_Launch6
    \value Key_Launch7
    \value Key_Launch8
    \value Key_Launch9
    \value Key_LaunchA
    \value Key_LaunchB
    \value Key_LaunchC
    \value Key_LaunchD
    \value Key_LaunchE
    \value Key_LaunchF
    \value Key_MediaLast
    \value Key_unknown

    \sa QKeyEvent::key()
*/

/*!
    \enum Qt::HitTestAccuracy

    This enum contains the types of accuracy that can be used by the
    QTextDocument class when testing for mouse clicks on text documents.

    \value ExactHit The point at which input occurred must coincide
                    exactly with input-sensitive parts of the document.
    \value FuzzyHit The point at which input occurred can lie close to
                    input-sensitive parts of the document.
*/

/*!
    \enum Qt::WhiteSpaceMode

    This enum describes the types of whitespace mode that are used by
    the QTextDocument class to meet the requirements of different kinds
    of textual information.

    \value WhiteSpaceNormal         The whitespace mode used to display
                                    normal word wrapped text in paragraphs.
    \value WhiteSpacePre            A preformatted text mode in which
                                    whitespace is reproduced exactly.
    \value WhiteSpaceNoWrap         

    \omitvalue WhiteSpaceModeUndefined
*/

/*!
    \enum Qt::ButtonState_enum
    \compat
    \value ShiftButton  
    \value ControlButton
    \value AltButton    
    \value MetaButton   
    \value Keypad       
    \value KeyButtonMask

    Use Qt::KeyboardModifier instead.
*/

/*!
    \typedef Qt::ButtonState
    \compat

    Use Qt::KeyboardModifier instead.
*/

/*!
    \enum Qt::CheckState

    This enum describes the state of checkable items, controls, and widgets.

    \value Unchecked        The item is unchecked.
    \value PartiallyChecked The item is partially checked. Items in hierarchical models
                            may be partially checked if some, but not all, of their
                            children are checked.
    \value Checked          The item is checked.

    \sa QCheckBox, QAbstractItemModel::ItemFlag, QAbstractItemModel::Role
*/
