/****************************************************************************
**
** Qt's global enums etc.
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the kernel module of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \namespace Qt

    \brief The Qt namespace contains miscellaneous identifiers
    used throughout the Qt library.

    \ingroup misc
*/

/*!
    \enum Qt::Orientation

    This type is used to signify an object's orientation.

    \value Horizontal
    \value Vertical

    Orientation is used with QScrollBar for example.
*/

/*!
    \enum Qt::AlignmentFlag

    This enum type is used to describe alignment. It contains
    horizontal and vertical flags.

    The horizontal flags are:

    \value AlignLeft Aligns with the left edge.
    \value AlignRight Aligns with the right edge.
    \value AlignHCenter Centers horizontally in the available space.
    \value AlignJustify Justifies the text in the available space.
    \omitvalue AlignAuto

    The vertical flags are:

    \value AlignTop Aligns with the top.
    \value AlignBottom Aligns with the bottom.
    \value AlignVCenter Centers vertically in the available space.

    You can use only one of the horizontal flags at a time. There is
    one two-dimensional flag:

    \value AlignCenter Centers in both dimensions.

    You can use at most one horizontal and one vertical flag at a
    time. Qt::AlignCenter counts as both horizontal and vertical.

    Three enum values are useful in applications that can be run in
    right-to-left mode:

    \value AlignAbsolute  If the widget's layout direction is
        Qt::RightToLeft (instead of Qt::LeftToRight, the default),
        Qt::AlignLeft refers to the \e right edge and Qt::AlignRight
        to the \e left edge. This is normally the desired behavior.
        If you want Qt::AlignLeft to always mean "left" and
        Qt::AlignRight to always mean "right", combine the flag with
        Qt::AlignAbsolute.
    \value AlignLeading  Synonym for Qt::AlignLeft.
    \value AlignTrailing  Synonym for Qt::AlignRight.

    Masks:

    \value AlignHorizontal_Mask
    \value AlignVertical_Mask

    Conflicting combinations of flags have undefined meanings.
*/

/*!
    \enum Qt::MouseButton

    This enum type describes the different mouse buttons.

    \value NoButton        The button state does not refer to any
    button (see QMouseEvent::button()).
    \value LeftButton      The left button is pressed, or an event refers
    to the left button. (The left button may be the right button on
    left-handed mice.)
    \value RightButton     The right button.
    \value MidButton       The middle button.
    \value XButton1        The first X button.
    \value XButton2        The second X button.

    \omitvalue MouseButtonMask

    \sa KeyboardModifier Modifier
*/

/*!
    \enum Qt::KeyboardModifier

    This enum describes the modifier keys.

    \bold{Note:} On Mac OS X, the \c ControlModifier value corresponds to
    the Command keys on the Macintosh keyboard, and the \c MetaModifier value
    corresponds to the Control keys.

    \value NoModifier       No modifier key is pressed.
    \value ShiftModifier    A Shift key on the keyboard is pressed.
    \value ControlModifier  A Ctrl key on the keyboard is pressed.
    \value AltModifier      An Alt key on the keyboard is pressed.
    \value MetaModifier     A Meta key on the keyboard is pressed.
    \value KeypadModifier   A keypad button is pressed.

    \omitvalue KeyboardModifierMask

    \sa MouseButton Modifier
*/

/*!
    \enum Qt::Modifier

    This enum provides shorter names for the keyboard modifier keys
    supported by Qt.

    \bold{Note:} On Mac OS X, the \c CTRL value corresponds to
    the Command keys on the Macintosh keyboard, and the \c META value
    corresponds to the Control keys.

    \value SHIFT The Shift keys provided on all standard keyboards.
    \value META The Meta keys.
    \value CTRL The Ctrl keys.
    \value ALT The normal Alt keys, but not keys like AltGr.
    \value UNICODE_ACCEL The shortcut is specified as a Unicode code
    point, not as a Qt Key.
    \omitvalue MODIFIER_MASK

    \sa KeyboardModifier MouseButton
*/

/*!
    \enum Qt::GlobalColor

    \raw HTML
    <style type="text/css" id="colorstyles">
     #white { background-color: #ffffff; color: #000000 }
     #black { background-color: #000000; color: #ffffff }
     #red { background-color: #ff0000; color: #000000 }
     #darkRed { background-color: #800000; color: #ffffff }
     #green { background-color: #00ff00; color: #000000 }
     #darkGreen { background-color: #008000; color: #ffffff }
     #blue { background-color: #0000ff; color: #ffffff }
     #darkBlue { background-color: #000080; color: #ffffff }
     #cyan { background-color: #00ffff; color: #000000 }
     #darkCyan { background-color: #008080; color: #ffffff }
     #magenta { background-color: #ff00ff; color: #000000 }
     #darkMagenta { background-color: #800080; color: #ffffff }
     #yellow { background-color: #ffff00; color: #000000 }
     #darkYellow { background-color: #808000; color: #ffffff }
     #gray { background-color: #a0a0a4; color: #000000 }
     #darkGray { background-color: #808080; color: #ffffff }
     #lightGray { background-color: #c0c0c0; color: #000000 }
    </style>
    \endraw

    Qt's predefined QColor objects:

    \value white       \raw HTML
    White <tt id="white">(#ffffff)</tt>
    \endraw
    \value black       \raw HTML
    Black <tt id="black">(#000000)</tt>
    \endraw
    \value red         \raw HTML
    Red <tt id="red">(#ff0000)</tt>
    \endraw
    \value darkRed     \raw HTML
    Dark red <tt id="darkRed">(#800000)</tt>
    \endraw
    \value green       \raw HTML
    Green <tt id="green">(#00ff00)</tt>
    \endraw
    \value darkGreen   \raw HTML
    Dark green <tt id="darkGreen">(#008000)</tt>
    \endraw
    \value blue        \raw HTML
    Blue <tt id="blue">(#0000ff)</tt>
    \endraw
    \value darkBlue    \raw HTML
    Dark blue <tt id="darkBlue">(#000080)</tt>
    \endraw
    \value cyan        \raw HTML
    Cyan <tt id="cyan">(#00ffff)</tt>
    \endraw
    \value darkCyan    \raw HTML
    Dark cyan <tt id="darkCyan">(#008080)</tt>
    \endraw
    \value magenta     \raw HTML
    Magenta <tt id="magenta">(#ff00ff)</tt>
    \endraw
    \value darkMagenta \raw HTML
    Dark magenta <tt id="darkMagenta">(#800080)</tt>
    \endraw
    \value yellow      \raw HTML
    Yellow <tt id="yellow">(#ffff00)</tt>
    \endraw
    \value darkYellow  \raw HTML
    Dark yellow <tt id="darkYellow">(#808000)</tt>
    \endraw
    \value gray        \raw HTML
    Gray <tt id="gray">(#a0a0a4)</tt>
    \endraw
    \value darkGray    \raw HTML
    Dark gray <tt id="darkGray">(#808080)</tt>
    \endraw
    \value lightGray   \raw HTML
    Light gray <tt id="lightGray">(#c0c0c0)</tt>
    \endraw
    \value transparent a transparent black value (i.e., QColor(0, 0, 0, 0))
    \value color0 0 pixel value (for bitmaps)
    \value color1 1 pixel value (for bitmaps)

    \sa QColor

*/

/*!
    \enum Qt::PenStyle

    This enum type defines the pen styles that can be drawn using
    QPainter. The styles are:

    \table
    \row
    \o \inlineimage qpen-solid.png
    \o \inlineimage qpen-dash.png
    \o \inlineimage qpen-dot.png
    \row
    \o Qt::SolidLine
    \o Qt::DashLine
    \o Qt::DotLine
    \row
    \o \inlineimage qpen-dashdot.png
    \o \inlineimage qpen-dashdotdot.png
    \o \inlineimage qpen-custom.png
    \row
    \o Qt::DashDotLine
    \o Qt::DashDotDotLine
    \o Qt::CustomDashLine
    \endtable

    \value NoPen  no line at all. For example, QPainter::drawRect()
    fills but does not draw any boundary line.

    \value SolidLine  A plain line.
    \value DashLine  Dashes separated by a few pixels.
    \value DotLine  Dots separated by a few pixels.
    \value DashDotLine  Alternate dots and dashes.
    \value DashDotDotLine  One dash, two dots, one dash, two dots.
    \value CustomDashLine  A custom pattern defined using
                           QPainterPathStroker::setDashPattern().

    \omitvalue MPenStyle

    \sa QPen
*/

/*!
    \enum Qt::PenCapStyle

    This enum type defines the pen cap styles supported by Qt, i.e.
    the line end caps that can be drawn using QPainter.

    \table
    \row
    \o \inlineimage qpen-square.png
    \o \inlineimage qpen-flat.png
    \o \inlineimage qpen-roundcap.png
    \row
    \o Qt::SquareCap
    \o Qt::FlatCap
    \o Qt::RoundCap
    \endtable

    \value FlatCap  a square line end that does not cover the end
	point of the line.
    \value SquareCap  a square line end that covers the end point and
	extends beyond it by half the line width.
    \value RoundCap  a rounded line end.
    \omitvalue MPenCapStyle

    \sa QPen
*/

/*!
    \enum Qt::PenJoinStyle

    This enum type defines the pen join styles supported by Qt, i.e.
    which joins between two connected lines can be drawn using
    QPainter.

    \table
    \row
    \o \inlineimage qpen-bevel.png
    \o \inlineimage qpen-miter.png
    \o \inlineimage qpen-roundjoin.png
    \row
    \o Qt::BevelJoin
    \o Qt::MiterJoin
    \o Qt::RoundJoin
    \endtable

    \value MiterJoin  The outer edges of the lines are extended to
	meet at an angle, and this area is filled.
    \value BevelJoin  The triangular notch between the two lines is filled.
    \value RoundJoin  A circular arc between the two lines is filled.
    \omitvalue MPenJoinStyle

    \sa QPen
*/

/*!
    \enum Qt::BrushStyle

    This enum type defines the brush styles supported by Qt, i.e. the
    fill pattern of shapes drawn using QPainter.

    \image brush-styles.png Brush Styles

    \value NoBrush  No brush pattern.
    \value SolidPattern  Uniform color.
    \value Dense1Pattern  Extremely dense brush pattern.
    \value Dense2Pattern  Very dense brush pattern.
    \value Dense3Pattern  Somewhat dense brush pattern.
    \value Dense4Pattern  Half dense brush pattern.
    \value Dense5Pattern  Somewhat sparse brush pattern.
    \value Dense6Pattern  Very sparse brush pattern.
    \value Dense7Pattern  Extremely sparse brush pattern.
    \value HorPattern  Horizontal lines.
    \value VerPattern  Vertical lines.
    \value CrossPattern  Crossing horizontal and vertical lines.
    \value BDiagPattern  Backward diagonal lines.
    \value FDiagPattern  Forward diagonal lines.
    \value DiagCrossPattern  Crossing diagonal lines.
    \value LinearGradientPattern  Linear gradient (set using dedicated QBrush constructor).
    \value ConicalGradientPattern  Linear gradient (set using dedicated QBrush constructor).
    \value RadialGradientPattern  Linear gradient (set using dedicated QBrush constructor).
    \value TexturePattern  Custom pattern (see QBrush::setTexture()).

    \omitvalue CustomPattern

    \sa QBrush
*/

/*!
    \enum Qt::TextFlag

    This enum type is used to define some modifier flags. Some of
    these flags only make sense in the context of printing:

    \value TextSingleLine Treats all whitespace as spaces and prints just
           one line.
    \value TextDontClip If it's impossible to stay within the given bounds,
           it prints outside.
    \value TextExpandTabs Makes the U+0009 (ASCII tab) character move to
           the next tab stop.
    \value TextShowMnemonic Displays the string "\&P" as \underline{P}
           (see QButton for an example). For an ampersand, use "\&\&".
    \value TextWordWrap Breaks lines at appropriate points, e.g. at word
           boundaries.
    \value TextWrapAnywhere Breaks lines anywhere, even within words.
    \value TextHideMnemonic Same as Qt::TextShowMnemonic but doesn't draw the underlines.
    \value TextDontPrint Treat this text as "hidden" and don't print
    it.
    \value TextIncludeTrailingSpaces Don't automatically delete
    trailing whitespace.

    \omitvalue BreakAnywhere
    \omitvalue DontClip
    \omitvalue DontPrint
    \omitvalue ExpandTabs
    \omitvalue IncludeTrailingSpaces
    \omitvalue NoAccel
    \omitvalue ShowPrefix
    \omitvalue SingleLine
    \omitvalue WordBreak

    You can use as many modifier flags as you want, except that
    Qt::TextSingleLine and Qt::TextWordWrap cannot be combined.

    Flags that are inappropriate for a given use are generally
    ignored.
*/

/*!
    \enum Qt::BGMode

    Background mode:

    \value TransparentMode
    \value OpaqueMode
*/

/*!
    \enum Qt::ConnectionType

    This enum describes the types of connection that can be used between signals and
    slots. In particular, it determines whether a particular signal is delivered to a
    slot immediately or queued for delivery at a later time.

    \value DirectConnection  When emitted, the signal is immediately delivered to the slot.
    \value QueuedConnection  When emitted, the signal is queued until the event loop is
                             able to deliver it to the slot.
    \value AutoConnection    If the signal is emitted from an object in the
                             same thread as the receiving object, the slot is
                             invoked directly, as with Qt::DirectConnection;
                             otherwise the signal is queued, as with
                             Qt::QueuedConnection.
    \omitvalue AutoCompatConnection

    \sa {Thread Support in Qt}, QObject::connect()
*/

/*!
    \enum Qt::DateFormat

    \value TextDate The default Qt format.
    \value ISODate ISO 8601 extended format (YYYY-MM-DD, or with time,
    YYYY-MM-DDTHH:MM:SS).
    \value LocalDate The locale-dependent format.
*/


/*!
    \enum Qt::TimeSpec

    \value LocalTime Locale dependent time (Timezones and Daylight Savings Time).
    \value UTC Coordinated Universal Time, replaces Greenwich Mean Time.
*/

/*!
    \enum Qt::DayOfWeek

    \value Monday
    \value Tuesday
    \value Wednesday
    \value Thursday
    \value Friday
    \value Saturday
    \value Sunday
*/

/*!
    \enum Qt::CaseSensitivity

    \value CaseInsensitive
    \value CaseSensitive
*/

/*!
    \enum Qt::ToolBarArea

    \value LeftToolBarArea
    \value RightToolBarArea
    \value TopToolBarArea
    \value BottomToolBarArea
    \value AllToolBarAreas

    \omitvalue ToolBarArea_Mask
*/

/*!
    \enum Qt::DockWidgetArea

    \value LeftDockWidgetArea
    \value RightDockWidgetArea
    \value TopDockWidgetArea
    \value BottomDockWidgetArea
    \value AllDockWidgetAreas

    \omitvalue DockWidgetArea_Mask
*/

/*!
    \enum Qt::BackgroundMode

    \compat

    \value FixedColor
    \value FixedPixmap
    \value NoBackground
    \value PaletteForeground
    \value PaletteButton
    \value PaletteLight
    \value PaletteMidlight
    \value PaletteDark
    \value PaletteMid
    \value PaletteText
    \value PaletteBrightText
    \value PaletteBase
    \value PaletteBackground
    \value PaletteShadow
    \value PaletteHighlight
    \value PaletteHighlightedText
    \value PaletteButtonText
    \value PaletteLink
    \value PaletteLinkVisited
    \value X11ParentRelative
*/

/*!
    \enum Qt::ImageConversionFlag

    The options marked "(default)" are set if no other values from
    the list are included (since the defaults are zero):

    Color/Mono preference (ignored for QBitmap):

    \value AutoColor (default) - If the image has \link
           QImage::depth() depth\endlink 1 and contains only
           black and white pixels, the pixmap becomes monochrome.
    \value ColorOnly The pixmap is dithered/converted to the
           \link QPixmap::defaultDepth() native display depth\endlink.
    \value MonoOnly The pixmap becomes monochrome. If necessary,
           it is dithered using the chosen dithering algorithm.

    Dithering mode preference for RGB channels:

    \value DiffuseDither (default) - A high-quality dither.
    \value OrderedDither A faster, more ordered dither.
    \value ThresholdDither No dithering; closest color is used.

    Dithering mode preference for alpha channel:

    \value ThresholdAlphaDither (default) - No dithering.
    \value OrderedAlphaDither A faster, more ordered dither.
    \value DiffuseAlphaDither A high-quality dither.
    \omitvalue NoAlpha

    Color matching versus dithering preference:

    \value PreferDither (default when converting to a pixmap) - Always dither
           32-bit images when the image is converted to 8 bits.
    \value AvoidDither (default when converting for the purpose of saving to
           file) - Dither 32-bit images only if the image has more than 256
           colors and it is being converted to 8 bits.
    \omitvalue AutoDither

    \omitvalue ColorMode_Mask
    \omitvalue Dither_Mask
    \omitvalue AlphaDither_Mask
    \omitvalue DitherMode_Mask
*/

/*! \enum Qt::GUIStyle

    \compat

    \value WindowsStyle
    \value MotifStyle
    \value MacStyle
    \value Win3Style
    \value PMStyle
*/

/*!
    \enum Qt::UIEffect

    \value UI_General
    \value UI_AnimateMenu
    \value UI_FadeMenu
    \value UI_AnimateCombo
    \value UI_AnimateTooltip
    \value UI_FadeTooltip
    \value UI_AnimateToolBox Reserved

    \sa QApplication::setEffectEnabled()
*/

/*! \enum Qt::AspectRatioMode

    This enum type defines what happens to the aspect ratio when
    scaling an rectangle.

    \image qimage-scaling.png

    \value IgnoreAspectRatio  The size is scaled freely. The aspect
                              ratio is not preserved.
    \value KeepAspectRatio  The size is scaled to a rectangle as
                            large as possible inside a given
                            rectangle, preserving the aspect ratio.
    \value KeepAspectRatioByExpanding  The size is scaled to a
                                       rectangle as small as possible
                                       outside a given rectangle,
                                       preserving the aspect ratio.

    \omitvalue ScaleFree
    \omitvalue ScaleMin
    \omitvalue ScaleMax

    \sa QSize::scale(), QImage::scaled()
*/

/*! \typedef Qt::ScaleMode
    \compat

    Use Qt::AspectRatioMode instead.

    The enum values have been renamed as follows:

    \table
    \row \i Old enum value \i New enum value
    \row \i Qt::ScaleFree  \i Qt::IgnoreAspectRatio
    \row \i Qt::ScaleMin   \i Qt::KeepAspectRatio
    \row \i Qt::ScaleMax   \i Qt::KeepAspectRatioByExpanding
    \endtable
*/

/*! \enum Qt::TransformationMode

    This enum type defines whether image transformations (e.g.,
    scaling) should be smooth or not.

    \value FastTransformation  The transformation is performed
                               quickly, with no smoothing.
    \value SmoothTransformation  The resulting image has smoothed
                                 edges.

    \sa QImage::scaled()
*/

/*!
    \enum Qt::WidgetAttribute

    \keyword widget attributes

    This enum type is used to specify various widget
    attributes. Attributes are set and cleared with
    QWidget::setAttribute(), and queried with QWidget::testAttribute(),
    although some have special convenience functions which are
    mentioned below.

    \value WA_AcceptDrops Allows data from drag and drop operations
    to be dropped onto the widget (see QWidget::setAcceptDrops()).

    \value WA_DeleteOnClose Makes Qt delete this widget when the
    widget has accepted the close event (see QWidget::closeEvent()).

    \omitvalue WA_ForceAcceptDrops

    \value WA_QuitOnClose Makes Qt quit the application when the last
    widget with the attribute set has accepted closeEvent(). This
    behavior can be adjusted with the
    QApplication::quitOnLastWindowClosed property. By default the
    attribute is set for all widgets of type Qt::Window.

    \value WA_KeyCompression Enables key event compression if set,
    and disables it if not set. By default key compression is off, so
    widgets receive one key press event for each key press (or more,
    since autorepeat is usually on). If you turn it on and your
    program doesn't keep up with key input, Qt may try to compress key
    events so that more than one character can be processed in each
    event.
    For example, a word processor widget might receive 2, 3 or more
    characters in each QKeyEvent::text(), if the layout recalculation
    takes too long for the CPU.
    If a widget supports multiple character unicode input, it is
    always safe to turn the compression on.
    Qt performs key event compression only for printable characters.
    Qt::Modifier keys, cursor movement keys, function keys and
    miscellaneous action keys (e.g. Escape, Enter, Backspace,
    PrintScreen) will stop key event compression, even if there are
    more compressible key events available.
    Not all platforms support this compression, in which case turning
    it on will have no effect.
    This is set/cleared by the widget's author.

    \value WA_PendingMoveEvent Indicates that a move event is
    pending, e.g. when a hidden widget was moved. This is set/cleared
    by the Qt kernel

    \value WA_PendingResizeEvent Indicates that a resize event is
    pending, e.g. when a hidden widget was resized. This is
    set/cleared by the Qt kernel.

    \value WA_UnderMouse Indicates that the widget is under the
    mouse cursor. The value is not updated correctly during drag and
    drop operations. There is also a getter function
    QWidget::underMouse(). This is set/cleared by the Qt kernel.

    \value WA_Disabled Indicates that the widget is disabled, i.e.
    it does not receive any mouse or keyboard events. There is also a
    getter functions QWidget::isEnabled().  This is set/cleared by the
    Qt kernel.

    \value WA_ContentsPropagated This flag is superfluous and
    obsolete; it no longer has any effect. Since Qt 4.1, all widgets
    that do not set WA_PaintOnScreen propagate their contents.

    \value WA_ForceDisabled Indicates that the widget is
    explicitly disabled, i.e. it will remain disabled even when all
    its ancestors are set to the enabled state. This implies
    WA_Disabled. This is set/cleared by QWidget::setEnabled() and
    QWidget::setDisabled().

    \value WA_SetPalette Indicates that the widgets has a palette
    of its own. This is set/cleared by QWidget::setPalette().

    \value WA_SetFont Indicates that the widgets has a font of its
    own. This is set/cleared by QWidget::setFont().

    \value WA_SetCursor Indicates that the widgets has a cursor of its
    own. This is set/cleared by QWidget::setCursor() and
    QWidget::unsetCursor().

    \value WA_NoBackground This value is obsolete. Use
    WA_OpaquePaintEvent instead.

    \value WA_OpaquePaintEvent Indicates that the widget paints all its
    pixels when it receives a paint event. It is thus not required for
    operations like updating, resizing, scrolling and focus changes to
    call erase the widget before generating paint events. Using
    WA_OpaquePaintEvent is a small optimization. It can help to reduce
    flicker on systems that do not provide double buffer support, and
    it avoids the computational cycles necessary to erase the
    background prior to paint. \bold{Note:} Unlike WA_NoSystemBackground,
    WA_OpaquePaintEvent makes an effort to avoid transparent window
    backgrounds. This is set/cleared by the widget's author.

    \value WA_NoSystemBackground Indicates that the widget has no
    background, i.e. when the widget receives paint events, the
    background is not automatically repainted. \bold{Note:} Unlike
    WA_OpaquePaintEvent, newly exposed areas are \e never filled with the
    background (e.g after showing a window for the first time the user
    can see "through" it until the application processes the paint
    events). Setting this flag implicitly disables double buffering
    for the widget. This is set/cleared by the widget's author.

    \value WA_UpdatesDisabled Indicates that updates are blocked
    (including the system background). This flag must never be
    set/cleared by the widget author. It is set/cleared by the Qt
    kernel.

    \value WA_ForceUpdatesDisabled Indicates that the widget is
    explicitly updates disabled, i.e. it will remain disabled even
    when all its ancestors are set to the updates enabled state. This
    implies WA_UpdatesDisabled. This is set/cleared by
    QWidget::setUpdatesEnabled().

    \value WA_StaticContents Indicates that the widget contents
    are north-west aligned and static. On resize, such a widget will
    receive paint events only for the newly visible part of itself.
    This is set/cleared by the widget's author.

    \value WA_PaintOnScreen Indicates that the widget wants to draw
    directly onto the screen. Widgets with this attribute set do not
    participate in composition management, i.e. they cannot be
    semi-transparent or shine through semi-transparent overlapping
    widgets. This is not supported on Mac OS X. The flag is set or
    cleared by the widget's author. This flag is required for
    rendering outside of Qt's paint system, e.g. should you want to
    use native X11 painting primitives.

    \value WA_PaintUnclipped Makes all painters operating on this
    widget unclipped. Children of this widget or other widgets in
    front of it do not clip the area the painter can paint on. This is
    not supported on Mac OS X.

    \value WA_PaintOutsidePaintEvent Makes it possible to use QPainter
    to paint on the widget outside \l{QWidget::paintEvent()}{paintEvent()}.
    This is not supported on Mac OS X. We recommend that you
    use this attribute only when porting Qt 3 code to Qt 4.

    \value WA_Hover Forces Qt to generate paint events when the mouse
    enters or leaves the widget. This feature is typically used when
    implementing custom styles; see the \l{widgets/styles}{Styles}
    example for details.

    \value WA_WindowModified Indicates that the window is marked as
    modified. On some platforms this will mean nothing, on others
    (including Mac OS X and Windows) the window will take a modified
    appearance. This is set/cleared by QWidget::setWindowModified().

    \value WA_Resized Indicates that the widget has an explicit
    size. This is set/cleared by QWidget::resize() and
    by QWidget::setGeometry().

    \value WA_Moved Indicates that the widget has an explicit
    position. This is set/cleared by QWidget::move() and
    by QWidget::setGeometry().

    \value WA_Mapped Indicates that the widget is mapped on screen.
    This is set/cleared by the Qt kernel.

    \value WA_NoMouseReplay Used for popup widgets. Indicates that the
    most recent mouse press event should not be replayed when the
    popup widget closes. The flag is set by the widget's author and
    cleared by the Qt kernel every time the widget receives a new
    mouse event.

    \value WA_OutsideWSRange Indicates that the widget is outside
    the valid range of the window system's coordinate system. A widget
    outside the valid range cannot be mapped on screen. This is
    set/cleared by the Qt kernel.

    \value WA_MacMetalStyle Indicates the the widget should be
    drawn in metal style as supported by the windowing system (only
    meaningfull on Mac OS X). This is set by widget's author.

    \value WA_CustomWhatsThis Indicates that the widget wants to
    continue operating normally in What's This mode This is set by the
    widget's author.

    \value WA_LayoutOnEntireRect Indicates that the widget
    wants QLayout to operate on the entire QWidget::rect(), not only
    on QWidget::contentsRect(). This is set by the widget's author.

    \value WA_NoChildEventsForParent Indicates that the widget does
    not want ChildAdded or ChildRemoved events sent to its
    parent. This is rarely necessary but can help to avoid automatic
    insertion widgets like splitters and layouts. This is set by a
    widget's author.

    \value WA_NoChildEventsFromChildren Indicates that the widget does
    not want to receive ChildAdded or ChildRemoved events sent from its
    children. This is set by a widget's author.

    \value WA_MouseTracking Indicates that the widget has mouse tracking
    enabled. See QWidget::mouseTracking.

    \value WA_GroupLeader
        Makes this window a group leader. A group
        leader should \e not have a parent (i.e. it should be a
        top-level window). Any decendant windows (direct or indirect)
        of a group leader are in its group; other windows are not. If
        you show a secondary window from the group (i.e. show a
        window whose top-most parent is a group leader), that window
        will be modal with respect to the other windows in the group,
        but modeless with respect to windows in other groups.

    \value WA_KeyboardFocusChange Set on a toplevel window when
        the users changes focus with the keyboard (tab, backtab, or shortcut).

    \value WA_WindowPropagation Makes a toplevel window inherit font and palette from its parent.

    \value WA_InputMethodEnabled
    \value WA_InputMethodTransparent
    \value WA_MacNoClickThrough
    \value WA_MouseNoMask
    \value WA_NoMousePropagation
    \value WA_RightToLeft
    \value WA_SetLayoutDirection
    \value WA_ShowModal \e{This attribute has been deprecated.} Use QWidget::windowModality instead.

    \omitvalue WA_WState_CompressKeys
    \omitvalue WA_WState_ConfigPending
    \omitvalue WA_WState_Created
    \omitvalue WA_WState_DND
    \omitvalue WA_WState_ExplicitShowHide
    \omitvalue WA_WState_Hidden
    \omitvalue WA_WState_InPaintEvent
    \omitvalue WA_WState_OwnSizePolicy
    \omitvalue WA_WState_Polished
    \omitvalue WA_WState_Reparented
    \omitvalue WA_WState_Visible
    \omitvalue WA_SetWindowIcon
    \omitvalue WA_PendingUpdate
    \omitvalue WA_LaidOut
    \omitvalue WA_GrabbedShortcut
    \omitvalue WA_TransparentForMouseEvents
    \omitvalue WA_InvalidSize
    \omitvalue WA_ForceUpdatesDisabled
    \omitvalue WA_NoX11EventCompression
    \omitvalue WA_TintedBackground

    \omitvalue WA_AttributeCount
*/

/*! \typedef Qt::HANDLE

    Platform-specific handle type for system objects. This is
    equivalent to \c{void *} on Windows and Mac OS X, and embedded
    Linux, and to \c{unsigned long} on X11.

    \warning Using this type is not portable.
*/

/*!
    \enum Qt::Key

    The key names used by Qt.

    \value Key_Escape
    \value Key_Tab
    \value Key_Backtab
    \omitvalue Key_BackTab
    \value Key_Backspace
    \omitvalue Key_BackSpace
    \value Key_Return
    \value Key_Enter
    \value Key_Insert
    \value Key_Delete
    \value Key_Pause
    \value Key_Print
    \value Key_SysReq
    \value Key_Clear
    \value Key_Home
    \value Key_End
    \value Key_Left
    \value Key_Up
    \value Key_Right
    \value Key_Down
    \value Key_PageUp
    \omitvalue Key_Prior
    \value Key_PageDown
    \omitvalue Key_Next
    \value Key_Shift
    \value Key_Control    On Mac OS X, this corresponds to the Command keys.
    \value Key_Meta       On Mac OS X, this corresponds to the Control keys.
    \value Key_Alt
    \value Key_AltGr
    \value Key_CapsLock
    \value Key_NumLock
    \value Key_ScrollLock
    \value Key_F1
    \value Key_F2
    \value Key_F3
    \value Key_F4
    \value Key_F5
    \value Key_F6
    \value Key_F7
    \value Key_F8
    \value Key_F9
    \value Key_F10
    \value Key_F11
    \value Key_F12
    \value Key_F13
    \value Key_F14
    \value Key_F15
    \value Key_F16
    \value Key_F17
    \value Key_F18
    \value Key_F19
    \value Key_F20
    \value Key_F21
    \value Key_F22
    \value Key_F23
    \value Key_F24
    \value Key_F25
    \value Key_F26
    \value Key_F27
    \value Key_F28
    \value Key_F29
    \value Key_F30
    \value Key_F31
    \value Key_F32
    \value Key_F33
    \value Key_F34
    \value Key_F35
    \value Key_Super_L
    \value Key_Super_R
    \value Key_Menu
    \value Key_Hyper_L
    \value Key_Hyper_R
    \value Key_Help
    \value Key_Direction_L
    \value Key_Direction_R
    \value Key_Space
    \value Key_Any
    \value Key_Exclam
    \value Key_QuoteDbl
    \value Key_NumberSign
    \value Key_Dollar
    \value Key_Percent
    \value Key_Ampersand
    \value Key_Apostrophe
    \value Key_ParenLeft
    \value Key_ParenRight
    \value Key_Asterisk
    \value Key_Plus
    \value Key_Comma
    \value Key_Minus
    \value Key_Period
    \value Key_Slash
    \value Key_0
    \value Key_1
    \value Key_2
    \value Key_3
    \value Key_4
    \value Key_5
    \value Key_6
    \value Key_7
    \value Key_8
    \value Key_9
    \value Key_Colon
    \value Key_Semicolon
    \value Key_Less
    \value Key_Equal
    \value Key_Greater
    \value Key_Question
    \value Key_At
    \value Key_A
    \value Key_B
    \value Key_C
    \value Key_D
    \value Key_E
    \value Key_F
    \value Key_G
    \value Key_H
    \value Key_I
    \value Key_J
    \value Key_K
    \value Key_L
    \value Key_M
    \value Key_N
    \value Key_O
    \value Key_P
    \value Key_Q
    \value Key_R
    \value Key_S
    \value Key_T
    \value Key_U
    \value Key_V
    \value Key_W
    \value Key_X
    \value Key_Y
    \value Key_Z
    \value Key_BracketLeft
    \value Key_Backslash
    \value Key_BracketRight
    \value Key_AsciiCircum
    \value Key_Underscore
    \value Key_QuoteLeft
    \value Key_BraceLeft
    \value Key_Bar
    \value Key_BraceRight
    \value Key_AsciiTilde
    \value Key_nobreakspace
    \value Key_exclamdown
    \value Key_cent
    \value Key_sterling
    \value Key_currency
    \value Key_yen
    \value Key_brokenbar
    \value Key_section
    \value Key_diaeresis
    \value Key_copyright
    \value Key_ordfeminine
    \value Key_guillemotleft
    \value Key_notsign
    \value Key_hyphen
    \value Key_registered
    \value Key_macron
    \value Key_degree
    \value Key_plusminus
    \value Key_twosuperior
    \value Key_threesuperior
    \value Key_acute
    \value Key_mu
    \value Key_paragraph
    \value Key_periodcentered
    \value Key_cedilla
    \value Key_onesuperior
    \value Key_masculine
    \value Key_guillemotright
    \value Key_onequarter
    \value Key_onehalf
    \value Key_threequarters
    \value Key_questiondown
    \value Key_Agrave
    \value Key_Aacute
    \value Key_Acircumflex
    \value Key_Atilde
    \value Key_Adiaeresis
    \value Key_Aring
    \value Key_AE
    \value Key_Ccedilla
    \value Key_Egrave
    \value Key_Eacute
    \value Key_Ecircumflex
    \value Key_Ediaeresis
    \value Key_Igrave
    \value Key_Iacute
    \value Key_Icircumflex
    \value Key_Idiaeresis
    \value Key_ETH
    \value Key_Ntilde
    \value Key_Ograve
    \value Key_Oacute
    \value Key_Ocircumflex
    \value Key_Otilde
    \value Key_Odiaeresis
    \value Key_multiply
    \value Key_Ooblique
    \value Key_Ugrave
    \value Key_Uacute
    \value Key_Ucircumflex
    \value Key_Udiaeresis
    \value Key_Yacute
    \value Key_THORN
    \value Key_ssharp
    \omitvalue Key_agrave
    \omitvalue Key_aacute
    \omitvalue Key_acircumflex
    \omitvalue Key_atilde
    \omitvalue Key_adiaeresis
    \omitvalue Key_aring
    \omitvalue Key_ae
    \omitvalue Key_ccedilla
    \omitvalue Key_egrave
    \omitvalue Key_eacute
    \omitvalue Key_ecircumflex
    \omitvalue Key_ediaeresis
    \omitvalue Key_igrave
    \omitvalue Key_iacute
    \omitvalue Key_icircumflex
    \omitvalue Key_idiaeresis
    \omitvalue Key_eth
    \omitvalue Key_ntilde
    \omitvalue Key_ograve
    \omitvalue Key_oacute
    \omitvalue Key_ocircumflex
    \omitvalue Key_otilde
    \omitvalue Key_odiaeresis
    \value Key_division
    \omitvalue Key_oslash
    \omitvalue Key_ugrave
    \omitvalue Key_uacute
    \omitvalue Key_ucircumflex
    \omitvalue Key_udiaeresis
    \omitvalue Key_yacute
    \omitvalue Key_thorn
    \value Key_ydiaeresis
    \value Key_Multi_key
    \value Key_Codeinput
    \value Key_SingleCandidate
    \value Key_MultipleCandidate
    \value Key_PreviousCandidate
    \value Key_Mode_switch
    \value Key_Kanji
    \value Key_Muhenkan
    \value Key_Henkan
    \value Key_Romaji
    \value Key_Hiragana
    \value Key_Katakana
    \value Key_Hiragana_Katakana
    \value Key_Zenkaku
    \value Key_Hankaku
    \value Key_Zenkaku_Hankaku
    \value Key_Touroku
    \value Key_Massyo
    \value Key_Kana_Lock
    \value Key_Kana_Shift
    \value Key_Eisu_Shift
    \value Key_Eisu_toggle
    \value Key_Hangul
    \value Key_Hangul_Start
    \value Key_Hangul_End
    \value Key_Hangul_Hanja
    \value Key_Hangul_Jamo
    \value Key_Hangul_Romaja
    \value Key_Hangul_Jeonja
    \value Key_Hangul_Banja
    \value Key_Hangul_PreHanja
    \value Key_Hangul_PostHanja
    \value Key_Hangul_Special
    \value Key_Dead_Grave
    \value Key_Dead_Acute
    \value Key_Dead_Circumflex
    \value Key_Dead_Tilde
    \value Key_Dead_Macron
    \value Key_Dead_Breve
    \value Key_Dead_Abovedot
    \value Key_Dead_Diaeresis
    \value Key_Dead_Abovering
    \value Key_Dead_Doubleacute
    \value Key_Dead_Caron
    \value Key_Dead_Cedilla
    \value Key_Dead_Ogonek
    \value Key_Dead_Iota
    \value Key_Dead_Voiced_Sound
    \value Key_Dead_Semivoiced_Sound
    \value Key_Dead_Belowdot
    \value Key_Dead_Hook
    \value Key_Dead_Horn
    \value Key_Back
    \value Key_Forward
    \value Key_Stop
    \value Key_Refresh
    \value Key_VolumeDown
    \value Key_VolumeMute
    \value Key_VolumeUp
    \value Key_BassBoost
    \value Key_BassUp
    \value Key_BassDown
    \value Key_TrebleUp
    \value Key_TrebleDown
    \value Key_MediaPlay
    \value Key_MediaStop
    \value Key_MediaPrevious
    \omitvalue Key_MediaPrev
    \value Key_MediaNext
    \value Key_MediaRecord
    \value Key_HomePage
    \value Key_Favorites
    \value Key_Search
    \value Key_Standby
    \value Key_OpenUrl
    \value Key_LaunchMail
    \value Key_LaunchMedia
    \value Key_Launch0
    \value Key_Launch1
    \value Key_Launch2
    \value Key_Launch3
    \value Key_Launch4
    \value Key_Launch5
    \value Key_Launch6
    \value Key_Launch7
    \value Key_Launch8
    \value Key_Launch9
    \value Key_LaunchA
    \value Key_LaunchB
    \value Key_LaunchC
    \value Key_LaunchD
    \value Key_LaunchE
    \value Key_LaunchF
    \value Key_MediaLast
    \value Key_unknown

    \value Key_Call
    \value Key_Context1
    \value Key_Context2
    \value Key_Context3
    \value Key_Context4
    \value Key_Flip
    \value Key_Hangup
    \value Key_No
    \value Key_Select
    \value Key_Yes

    \sa QKeyEvent::key()
*/

/*!
    \enum Qt::HitTestAccuracy

    This enum contains the types of accuracy that can be used by the
    QTextDocument class when testing for mouse clicks on text documents.

    \value ExactHit The point at which input occurred must coincide
                    exactly with input-sensitive parts of the document.
    \value FuzzyHit The point at which input occurred can lie close to
                    input-sensitive parts of the document.
*/

/*!
    \enum Qt::WhiteSpaceMode

    This enum describes the types of whitespace mode that are used by
    the QTextDocument class to meet the requirements of different kinds
    of textual information.

    \value WhiteSpaceNormal         The whitespace mode used to display
                                    normal word wrapped text in paragraphs.
    \value WhiteSpacePre            A preformatted text mode in which
                                    whitespace is reproduced exactly.
    \value WhiteSpaceNoWrap

    \omitvalue WhiteSpaceModeUndefined
*/

/*!
    \enum Qt::ButtonState_enum
    \compat
    \value ShiftButton
    \value ControlButton
    \value AltButton
    \value MetaButton
    \value Keypad
    \value KeyButtonMask

    Use Qt::KeyboardModifier instead.
*/

/*!
    \typedef Qt::ButtonState
    \compat

    Use Qt::KeyboardModifier instead.
*/

/*!
    \enum Qt::CheckState

    This enum describes the state of checkable items, controls, and widgets.

    \value Unchecked        The item is unchecked.
    \value PartiallyChecked The item is partially checked. Items in hierarchical models
                            may be partially checked if some, but not all, of their
                            children are checked.
    \value Checked          The item is checked.

    \sa QCheckBox, Qt::ItemFlags, Qt::ItemDataRole
*/


/*!
    \enum Qt::ToolButtonStyle

    The style of the tool button, describing how the button's text and
    icon should be displayed.

    \value ToolButtonIconOnly Only display the icon.
    \value ToolButtonTextOnly Only display the text.
    \value ToolButtonTextBesideIcon The text appears beside the icon.
    \value ToolButtonTextUnderIcon The text appears under the icon.
*/

/*!
    \enum Qt::Corner

    This enum type specifies a corner in a rectangle:

    \value TopLeftCorner     The top-left corner of the rectangle.
    \value TopRightCorner    The top-right corner of the rectangle.
    \value BottomLeftCorner  The bottom-left corner of the rectangle.
    \value BottomRightCorner The bottom-right corner of the rectangle.

    \omitvalue TopLeft
    \omitvalue TopRight
    \omitvalue BottomLeft
    \omitvalue BottomRight
*/

/*!
    \enum Qt::ScrollBarPolicy

    This enum type describes the various modes of QAbstractScrollArea's scroll
    bars.

    \value ScrollBarAsNeeded QAbstractScrollArea shows a scroll bar when the
    content is too large to fit and not otherwise. This is the
    default.

    \value ScrollBarAlwaysOff QAbstractScrollArea never shows a scroll bar.

    \value ScrollBarAlwaysOn  QAbstractScrollArea always shows a scroll bar.

    (The modes for the horizontal and vertical scroll bars are
    independent.)
*/

/*!
    \enum Qt::ArrowType

    \value NoArrow
    \value UpArrow
    \value DownArrow
    \value LeftArrow
    \value RightArrow
*/

/*!
    \enum Qt::FocusReason

    This enum specifies why the focus changed. It will be passed
    through QWidget::setFocus and can be retrieved in the QFocusEvent
    sent to the widget upon focus change.

    \value MouseFocusReason        A mouse action occurred.
    \value TabFocusReason          The Tab key was pressed.
    \value BacktabFocusReason      A Backtab occurred. The input for this may
                                   include the Shift or Control keys;
                                   e.g. Shift+Tab.
    \value ActiveWindowFocusReason The window system made this window either
                                   active or inactive.
    \value PopupFocusReason        The application opened/closed a popup that
                                   grabbed/released the keyboard focus.
    \value ShortcutFocusReason     The user typed a label's buddy shortcut
    \value MenuBarFocusReason      The menu bar took focus.
    \value OtherFocusReason        Another reason, usually application-specific.
    \omitvalue NoFocusReason        No good reason, really.

    \sa {Keyboard Focus}
*/

/*!
    \enum Qt::WindowState

    \keyword window state

    This enum type is used to specify the current state of a top-level
    window.

    The states are

    \value WindowNoState   The window has no state set (in normal state).
    \value WindowMinimized The window is minimized (i.e. iconified).
    \value WindowMaximized The window is maximized with a frame around it.
    \value WindowFullScreen The window fills the entire screen without any frame around it.
    \value WindowActive The window is the active window, i.e. it has keyboard focus.

*/

/*!
    \enum Qt::ContextMenuPolicy

    This enum type defines the various policies a widget can have with
    respect to showing a context menu.

    \value NoContextMenu  the widget does not feature a context menu.
    \value DefaultContextMenu  the widget's QWidget::contextMenuEvent() handler is called.
    \value ActionsContextMenu  the widget displays its QWidget::actions() as context menu.
    \value CustomContextMenu  the widget emits the QWidget::customContextMenuRequested() signal.
*/

/*!
    \enum Qt::FocusPolicy

    This enum type defines the various policies a widget can have with
    respect to acquiring keyboard focus.

    \value TabFocus  the widget accepts focus by tabbing.
    \value ClickFocus  the widget accepts focus by clicking.
    \value StrongFocus  the widget accepts focus by both tabbing
                    and clicking. On Mac OS X this will also
                    be indicate that the widget accepts tab focus
                    when in 'Text/List focus mode'.
    \value WheelFocus  like Qt::StrongFocus plus the widget accepts
                    focus by using the mouse wheel.
    \value NoFocus  the widget does not accept focus.

*/

/*!
    \enum Qt::ShortcutContext

    For a QEvent::Shortcut event to occur, the shortcut's key sequence
    must be entered by the user in a context where the shortcut is
    active. The possible contexts are these:

    \value WidgetShortcut The shortcut is only triggered when its
    parent widget has focus.
    \value WindowShortcut The shortcut is triggered when its
    parent widget is a logical subwidget of the active top-level window.
    \value ApplicationShortcut The shortcut is triggered when the application is active.
*/

/*!
    \typedef Qt::WFlags

    Synonym for Qt::WindowFlags.
*/

/*!
    \enum Qt::WindowType

    \keyword window flag

    This enum type is used to specify various window-system properties
    for the widget. They are fairly unusual but necessary in a few
    cases. Some of these flags depend on whether the underlying window
    manager supports them.

    The main types are

    \value Widget  This is the default type for QWidget. Widgets of
                   this type are child widgets if they have a parent,
                   and independent windows if they have no parent.
                   See also Qt::Window and Qt::SubWindow.

    \value Window  Indicates that the widget is a window, usually
                   with a window system frame and a title bar,
                   irrespective of whether the widget has a parent or
                   not.

    \value Dialog  Indicates that the widget is a window that should
                   be decorated as a dialog (i.e., typically no
                   maximize or minimize buttons in the title bar).
                   This is the default type for QDialog. If you want
                   to use it as a modal dialog, it should be launched
                   from another window, or have a parent and used
                   with the QWidget::windowModality property. If you make
                   it modal, the dialog will prevent other top-level
                   windows in the application from getting any input.
                   We refer to a top-level window that has a parent
                   as a \e secondary window.

    \value Sheet   Indicates that the widget is a Macintosh sheet.

    \value Drawer  Indicates that the widget is a Macintosh drawer.

    \value Popup   Indicates that the widget is a popup top-level
                   window, i.e. that it is modal, but has a window
                   system frame appropriate for popup menus.

    \value Tool    Indicates that the widget is a tool window. A tool
                   window is often a small window with a smaller than
                   usual title bar and decoration, typically used for
                   collections of tool buttons. It there is a parent,
                   the tool window will always be kept on top of it.
                   If there isn't a parent, you may consider using
                   Qt::WindowStaysOnTopHint as well. If the window
                   system supports it, a tool window can be decorated
                   with a somewhat lighter frame. It can also be
                   combined with Qt::FramelessWindowHint.

    \value ToolTip Indicates that the widget is a tooltip. This is
                   used internally to implement
                   \l{QWidget::toolTip}{tooltips}.

    \value SplashScreen Indicates that the window is a splash screen.
                        This is the default type for QSplashScreen.

    \value Desktop  Indicates that this widget is the desktop. This
                    is the type for QDesktopWidget.

    \value SubWindow  Indicates that this widget is a child widget,
                      irrespective of whether the widget has a parent
                      or not.

    There are also a number of flags which you can use to customize
    the appearance of top-level windows. These have no effect on other
    windows:

    \value MSWindowsFixedSizeDialogHint  Gives the window a thin dialog border on Windows.
           This style is traditionally used for fixed-size dialogs.

    \value MSWindowsOwnDC  Gives the window its own display
           context on Windows.

    \value X11BypassWindowManagerHint  Bypass the window
           manager completely. This results in a borderless window
           that is not managed at all (i.e., no keyboard input unless
           you call QWidget::activateWindow() manually).

    \value FramelessWindowHint  Produces a borderless window.
           The user cannot move or resize a borderless window via the window
           system. On X11, the result of the flag is dependent on the window manager and its
           ability to understand Motif and/or NETWM hints. Most existing
           modern window managers can handle this.

    \value WindowTitleHint  Gives the window a title bar.

    \value WindowSystemMenuHint  Adds a window system menu, and possibly a close button.

    \value WindowMinimizeButtonHint  Adds a minimize button. On
           some platforms this implies Qt::WindowSystemMenuHint for it to work.

    \value WindowMaximizeButtonHint  Adds a maximize button. On
           some platforms this implies Qt::WindowSystemMenuHint for it to work.

    \value WindowMinMaxButtonsHint  Adds a minimize and a maximize
           button. On some platforms this implies Qt::WindowSystemMenuHint for it to work.

    \value WindowContextHelpButtonHint  Adds a context help button to dialogs.
	On some platforms this implies Qt::WindowSystemMenuHint for it to work.

    \value WindowShadeButtonHint

    \value WindowStaysOnTopHint  Informs the window system that the
           window should stay on top of all other windows. Note that
           on some window managers on X11 you also have to pass
           Qt::X11BypassWindowManagerHint for this flag to work
           correctly.

    \value WindowType_Mask  A mask for extracting the window type
                            part of the window flags.

    Obsolete flags:

    \value WMouseNoMask         Use Qt::WA_MouseNoMask instead.
    \value WDestructiveClose    Use Qt::WA_DeleteOnClose instead.
    \value WStaticContents      Use Qt::WA_StaticContents instead.
    \value WGroupLeader         No longer needed.
    \value WShowModal           Use QWidget::windowModality instead.
    \value WNoMousePropagation  Use Qt::WA_NoMousePropagation instead.
    \value WType_TopLevel       Use Qt::Window instead.
    \value WType_Dialog         Use Qt::Dialog instead.
    \value WType_Popup          Use Qt::Popup instead.
    \value WType_Desktop        Use Qt::Desktop instead.
    \value WType_Mask           Use Qt::WindowType_Mask instead.

    \value WStyle_Customize     No longer needed.
    \value WStyle_NormalBorder  No longer needed.
    \value WStyle_DialogBorder  Use Qt::MSWindowsFixedSizeDialogHint instead.
    \value WStyle_NoBorder      Use Qt::FramelessWindowHint instead.
    \value WStyle_Title         Use Qt::WindowTitleHint instead.
    \value WStyle_SysMenu       Use Qt::WindowSystemMenuHint instead.
    \value WStyle_Minimize      Use Qt::WindowMinimizeButtonHint instead.
    \value WStyle_Maximize      Use Qt::WindowMaximizeButtonHint instead.
    \value WStyle_MinMax        Use Qt::WindowMinMaxButtonsHint instead.
    \value WStyle_Tool          Use Qt::Tool instead.
    \value WStyle_StaysOnTop    Use Qt::WindowStaysOnTopHint instead.
    \value WStyle_ContextHelp   Use Qt::WindowContextHelpButtonHint instead.

    \value WPaintDesktop        No longer needed.
    \value WPaintClever         No longer needed.

    \value WX11BypassWM         Use Qt::X11BypassWindowManagerHint instead.
    \value WWinOwnDC            Use Qt::MSWindowsOwnDC instead.
    \value WMacSheet            Use Qt::Sheet instead.
    \value WMacDrawer           Use Qt::Drawer instead.

    \value WStyle_Splash        Use Qt::SplashScreen instead.

    \value WNoAutoErase         No longer needed.
    \value WRepaintNoErase      No longer needed.
    \value WNorthWestGravity    Use Qt::WA_StaticContents instead.
    \value WType_Modal          Use Qt::Dialog and QWidget::windowModality instead.
    \value WStyle_Dialog        Use Qt::Dialog instead.
    \value WStyle_NoBorderEx    Use Qt::FramelessWindowHint instead.
    \value WResizeNoErase       No longer needed.
    \value WMacNoSheet          No longer needed.
*/

/*!
    \enum Qt::DropAction

    \value CopyAction       Copy the data to the target.
    \value MoveAction       Move the date from the source to the target.
    \value LinkAction       Create a link from the source to the target.
    \value ActionMask
    \value TargetMoveAction
    \value IgnoreAction     Ignore the action (do nothing with the data).
*/

#if defined(Q_OS_WIN) && defined(QT3_SUPPORT)
/*!
    \enum Qt::WindowsVersion
    \compat

    \value WV_32s
    \value WV_95
    \value WV_98
    \value WV_Me
    \value WV_DOS_based
    \value WV_NT
    \value WV_2000
    \value WV_XP
    \value WV_2003
    \value WV_NT_based
    \value WV_CE
    \value WV_CENET
    \value WV_CE_based
*/
#endif

#if defined(Q_OS_MAC) && defined(QT3_SUPPORT)
/*!
    \enum Qt::MacintoshVersion
    \compat

    \value MV_Unknown  Use QSysInfo::MV_Unknown instead.
    \value MV_9        Use QSysInfo::MV_9 instead.
    \value MV_10_DOT_0 Use QSysInfo::MV_10_0 instead.
    \value MV_10_DOT_1 Use QSysInfo::MV_10_1 instead.
    \value MV_10_DOT_2 Use QSysInfo::MV_10_2 instead.
    \value MV_10_DOT_3 Use QSysInfo::MV_10_3 instead.
    \value MV_10_DOT_4 Use QSysInfo::MV_10_4 instead.

    \value MV_CHEETAH  Use QSysInfo::MV_10_0 instead.
    \value MV_PUMA     Use QSysInfo::MV_10_1 instead.
    \value MV_JAGUAR   Use QSysInfo::MV_10_2 instead.
    \value MV_PANTHER  Use QSysInfo::MV_10_3 instead.
    \value MV_TIGER    Use QSysInfo::MV_10_4 instead.

    \sa QSysInfo::MacVersion
*/
#endif

/*! \typedef Qt::ToolBarDock
    \compat

    Use Qt::Dock instead.
*/

/*!
    \enum Qt::Dock

    Each dock window can be in one of the following positions:

    \value DockUnmanaged not managed by a Q3MainWindow.

    \value DockTornOff the dock window floats as its own top level
    window which always stays on top of the main window.

    \value DockTop  above the central widget, below the menu bar.

    \value DockBottom  below the central widget, above the status bar.

    \value DockRight to the right of the central widget.

    \value DockLeft  to the left of the central widget.

    \value DockMinimized the dock window is not shown (this is
    effectively a 'hidden' dock area); the handles of all minimized
    dock windows are drawn in one row below the menu bar.

    \omitvalue Bottom
    \omitvalue Left
    \omitvalue Minimized
    \omitvalue Right
    \omitvalue Top
    \omitvalue TornOff
    \omitvalue Unmanaged
*/

/*!
  \enum Qt::AnchorAttribute

  An anchor has one or more of the following attributes:

  \value AnchorName the name attribute of the anchor. This attribute is
  used when scrolling to an anchor in the document.

  \value AnchorHref the href attribute of the anchor. This attribute is
  used when a link is clicked to determine what content to load.
*/

/*!
    \enum Qt::SortOrder

    This enum describes how the items in a widget are sorted.

    \value AscendingOrder The items are sorted ascending e.g. starts with
    'AAA' ends with 'ZZZ' in Latin-1 locales

    \value DescendingOrder The items are sorted descending e.g. starts with
    'ZZZ' ends with 'AAA' in Latin-1 locales

    \omitvalue Ascending
    \omitvalue Descending
*/

/*!
    \enum Qt::ClipOperation

    \value NoClip This operation turns clipping off.

    \value ReplaceClip Replaces the current clip path/rect/region with
    the one supplied in the function call.

    \value IntersectClip Intersects the current clip path/rect/region
    with the one supplied in the function call.

    \value UniteClip Unites the current clip path/rect/region with the
    one supplied in the function call.
*/

/*!
    \enum Qt::FillRule

    Specifies which method should be used to fill the paths and polygons.

    \value OddEvenFill Specifies that the region is filled using the
    odd even fill rule. With this rule, we determine whether a point
    is inside the shape by using the following method.
    Draw a horizontal line from the point to a location outside the shape,
    and count the number of intersections. If the number of intersections
    is an odd number, the point is inside the shape. This mode is the
    default.

    \value WindingFill Specifies that the region is filled using the
    non zero winding rule. With this rule, we determine whether a
    point is inside the shape by using the following method.
    Draw a horizontal line from the point to a location outside the shape.
    Determine whether the direction of the line at each intersection point
    is up or down. The winding number is determined by summing the
    direction of each intersection. If the number is non zero, the point
    is inside the shape. This fill mode can also in most cases be considered
    as the intersection of closed shapes.
*/

/*!
    \enum Qt::PaintUnit

    \compat

    \value PixelUnit
    \value LoMetricUnit Obsolete
    \value HiMetricUnit Obsolete
    \value LoEnglishUnit Obsolete
    \value HiEnglishUnit Obsolete
    \value TwipsUnit Obsolete
*/

/*!
    \enum Qt::TextFormat

    This enum is used in widgets that can display both plain text and
    rich text, e.g. QLabel. It is used for deciding whether a text
    string should be interpreted as one or the other. This is normally
    done by passing one of the enum values to a setTextFormat()
    function.

    \value PlainText  The text string is interpreted as a plain text
        string.

    \value RichText The text string is interpreted as a rich text
        string using the current Q3StyleSheet::defaultSheet().

    \value AutoText The text string is interpreted as for
        Qt::RichText if Qt::mightBeRichText() returns true, otherwise
        as Qt::PlainText.

    \value LogText A special, limited text format which is only used
    by QTextEdit in an optimized mode.
*/

/*!
    \enum Qt::CursorShape

    This enum type defines the various cursors that can be used.

    \value ArrowCursor  standard arrow cursor
    \value UpArrowCursor  upwards arrow
    \value CrossCursor  crosshair
    \value WaitCursor  hourglass/watch
    \value IBeamCursor  ibeam/text entry
    \value SizeVerCursor  vertical resize
    \value SizeHorCursor  horizontal resize
    \value SizeFDiagCursor  diagonal resize (\)
    \value SizeBDiagCursor  diagonal resize (/)
    \value SizeAllCursor  all directions resize
    \value BlankCursor  blank/invisible cursor
    \value SplitVCursor  vertical splitting
    \value SplitHCursor  horizontal splitting
    \value PointingHandCursor  a pointing hand
    \value ForbiddenCursor  a slashed circle
    \value WhatsThisCursor  an arrow with a question mark
    \value BusyCursor  standard arrow with hourglass/watch
    \value BitmapCursor
    \omitvalue LastCursor

    \omitvalue arrowCursor
    \omitvalue upArrowCursor
    \omitvalue crossCursor
    \omitvalue waitCursor
    \omitvalue ibeamCursor
    \omitvalue sizeVerCursor
    \omitvalue sizeHorCursor
    \omitvalue sizeBDiagCursor
    \omitvalue sizeFDiagCursor
    \omitvalue sizeAllCursor
    \omitvalue blankCursor
    \omitvalue splitVCursor
    \omitvalue splitHCursor
    \omitvalue pointingHandCursor
    \omitvalue forbiddenCursor
    \omitvalue whatsThisCursor

    ArrowCursor is the default for widgets in a normal state.

    \image cursors.png Cursor Shapes
*/

/*!
    \typedef Qt::TextFlags
    \compat

    Use Qt::TextFlag instead.
*/

/*!
    \enum Qt::LayoutDirection

    Specifies the direction of Qt's layouts:

    \value LeftToRight  Left-to-right layout.
    \value RightToLeft  Right-to-left layout.

    Right-to-left layouts are necessary for certain languages,
    notably Arabic and Hebrew.

    \sa QApplication::setLayoutDirection(), QWidget::setLayoutDirection()
*/

/*!
    \enum Qt::InputMethodQuery

    \value ImMicroFocus
    \value ImFont
    \value ImCursorPosition
    \value ImSurroundingText
    \value ImCurrentSelection
*/

/*!
    \enum Qt::ItemDataRole

    Each item in the model has a set of data elements associated with
    it, each with its own role. The roles are used by the view to indicate
    to the model which type of data it needs.

    The general purpose roles are:

    \value DisplayRole    The key data to be rendered (usually text).
    \value DecorationRole The data to be rendered as a decoration (usually an icon).
    \value EditRole       The data in a form suitable for editing in an
                          editor.
    \value ToolTipRole    The data displayed in the item's tooltip.
    \value StatusTipRole  The data displayed in the status bar.
    \value WhatsThisRole  The data displayed for the item in "What's This?"
                          mode.
    \value SizeHintRole   The size hint for the item that will be supplied
                          to views.

    Roles describing appearance and meta data:

    \value FontRole            The font used for items rendered with the default
                               delegate.
    \value TextAlignmentRole   The alignment of the text for items rendered with the
                               default delegate.
    \value BackgroundColorRole The background color used for items rendered with
                               the default delegate.
    \value TextColorRole       The text color used for items rendered with
                               the default delegate.
    \value CheckStateRole      This role is used to obtain the checked state of
                               an item (see \l Qt::CheckState).

    Accessibility roles:

    \value AccessibleTextRole        The text to be used by accessibility
                                     extensions and plugins, such as screen
                                     readers.
    \value AccessibleDescriptionRole A description of the item for accessibility
                                     purposes.

    User roles:

    \value UserRole       The first role that can be used for
                                     application-specific purposes.
*/

/*!
    \enum Qt::ItemFlag

    This enum describes the properties of an item:

    \value ItemIsSelectable It can be selected.
    \value ItemIsEditable It can be edited.
    \value ItemIsDragEnabled It can be dragged.
    \value ItemIsDropEnabled It can be used as a drop target.
    \value ItemIsUserCheckable It can be checked or unchecked by the user.
    \value ItemIsEnabled The user can interact with the item.
    \value ItemIsTristate The item is checkable with three separate states.
*/

/*!
    \enum Qt::MatchFlag

    This enum describes the type of matches that can be used when searching
    for items in a model.

    \value MatchExactly   The value matches the item exactly.
    \value MatchContains  The value is contained in the item.
    \value MatchStartsWith  The value matches the start of the item.
    \value MatchEndsWith   The value matches the end of the item.
    \value MatchCaseSensitive  The search is case sensitive.
    \value MatchRegExp  The value is a regular expression.
    \value MatchWildcard  The value is a string with wildcards.
    \value MatchWrap  The search wraps around.
    \value MatchRecursive  The the entire hierarchy is searched.
*/

/*!
    \enum Qt::TextElideMode

    This enum specifies where the ellipsis should appear when
    displaying texts that don't fit:

    \value ElideLeft    The ellipsis should appear at the beginning of the text.
    \value ElideRight   The ellipsis should appear at the end of the text.
    \value ElideMiddle  The ellipsis should appear in the middle of the text.

    Qt::ElideMiddle is normally the most appropriate choice for URLs (e.g.,
    "\l{http://www.trolltech.cn/newsroom/announcements/Beijing-Office-Opening.pdf}{http://www.trolltech.cn/news...s/Beijing-Office-Opening.pdf}"),
    whereas Qt::ElideRight is appropriate
    for other strings (e.g.,
    "\l{http://doc.trolltech.com/qq/qq09-mac-deployment.html}{Deploying Applications on Ma...}").

    \sa QAbstractItemView::textElideMode, QAbstractItemDelegate::elidedText()
*/

/*!
    \enum Qt::WindowModality

    \keyword modal

    This enum specifies the behavior of a modal window. A modal window
    is one that blocks input to other windows. Note that windows that
    are children of a modal window are not blocked.

    The values are:
    \value NonModal         The window is not modal and does not block input to other windows.
    \value WindowModal      The window is modal to a single window heirarchy and blocks input to its parent window, all grand parent windows, and all siblings of its parent and grand parent windows.
    \value ApplicationModal The window is modal to the application and blocks input to all windows.

    \sa QWidget::windowModality, QDialog
*/
