s/****************************************************************************
**
** Documentation for creating custom styles with QStyle.
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \page customstyles.html

    \title Custom Styles

    A style in Qt implements the look and feel found in a GUI for a
    particular platform. For example, Windows platforms may use
    QWindowsStyle or QWindowsXPStyle style, Mac OS X uses QMacStyle,
    and so on.

    This is a short guide that describes the steps that are necessary
    to get started creating and using custom styles with the Qt style
    API. First, we go through the steps necessary to create a style:

    \list 1
    \i Pick a base style to inherit from.
    \i Reimplement the necessary functions in the derived class.
    \endlist

    Then we explain how to use the new style from within your own
    applications, or as a plugin that can be used by existing Qt
    applications.

    \section1 Creating a Custom Style

    The first step is to pick one of the base styles provided with Qt to
    build your custom style from. The choice will depend on what look and
    feel you are trying to achieve. We recommend that you choose from the
    QWindowsStyle derived classes or the QMotifStyle derived classes.
    These are the two base look and feel classes in the Qt style engine.
    Inheriting directly from QCommonStyle is also an option if you want to
    start almost from scratch when implementing your style. In this simple
    example we will inherit from QWindowsStyle.

    Depending on which parts of the base style you want to change,
    you must reimplement the functions that are used to draw those
    parts of the interface. If you take a look at the \l{QStyle}
    documentation, you will find a list of the different primitives,
    controls and complex controls. In this example we will first
    change the look of the spin box arrows that are used in the
    QWindowsStyle. The arrows are \e{primitive elements} that are
    drawn by the QStyle::drawPrimitive() function, so we need to
    reimplement that function. We need the following class
    declaration:

    \quotefile customstyle/customstyle.h
    \skipto class CustomStyle
    \printuntil };

    From the QStyle docs we see that \c PE_SpinBoxUp and \c
    PE_SpinBoxDown the primitive elements we need to do something
    with. We get the following in our drawPrimitive() function:

    \quotefile customstyle/customstyle.cpp
    \skipto ::drawPrimitive
    \printuntil /^}/

    \section1 Using a Custom Style

    There are several ways of using a custom style in a Qt application.
    The simplest way is to include the following lines of code in the
    application's main() function:

    \include customstyle/main.cpp

    \section1 Making a Custom Style Available as a Plugin

    You may want to make your style available for use in other
    applications, some of which may not be yours and are not available for
    you to recompile. The Qt Plugin system makes it possible to create
    styles as plugins. Styles created as plugins are loaded as shared
    objects at runtime by Qt itself. Please refer to the \link
    plugins-howto.html Qt Plugin\endlink documentation for more
    information on how to go about creating a style plugin.

    Compile your plugin and put it into \c $QTDIR/plugins/styles. We
    now have a pluggable style that Qt can load automatically. To use
    your new style with existing applications, simply start the
    application with the following argument:

    \code
        ./myapplication -style custom
    \endcode

    The application will use the look and feel from the custom style you
    implemented. 
*/
