/*!
    \page qt4-accessibility.html
    \title Qt 4: Cross-Platform Accessibility Support

    Qt 4 allows developers to write cross-platform applications that
    are usable by visually impaired users as well as by users with
    other disabilities. Qt accessibility will make applications
    accessible to more users and opens the governmental market, where
    accessibility is often a requirement.

    \section1 General Overview

    Qt 3 already supports Microsoft Active Accessibility (MSAA) and
    Mac OS X Accessibility. Qt 4 closes the gap in Trolltech's
    accessibility offering by introducing support for AT-SPI on
    Unix/X11 systems.

    The accessibility classes themselves have been extended in
    various ways since Qt 3. We added new functions and new enum
    values, and revised the API to make it more consistent with the
    rest of Qt. We also added two properties to QWidget,
    \l{QWidget::accessibleName}{accessibleName} and
    \l{QWidget::accessibleDescription}{accessibleDescription}, that
    can be set in \i{Qt Designer} to provide basic help texts without
    having to write any code.

    Qt's accessibility architecture is as follows. Qt offers one
    generic interface, \l QAccessibleInterface, that can be used to
    wrap all widgets and objects (e.g., QPushButton). This single
    interface provides all the metadata necessary for the assistive
    technologies. Qt provides implementations of this interface for
    its built-in widgets as plugins.

    When you develop custom widgets, you can create custom subclasses
    of \l QAccessibleInterface and distribute them as plugins (using
    \l QAccessibePlugin) or compile them into the application. The
    main advantage of using plugins is that the accessibility classes
    are only loaded into memory if they are actually used; they don't
    slow down the common case where no assistive technology is being
    used.

    In addition to QAccessibleInterface, Qt includes two convenience
    classes, \l QAccessibleObject and \l QAccessibleWidget, that
    provide the lowest common denominator of metadata (e.g., widget
    geometry, window title, basic help text). You can use them as
    base classes when wrapping your custom QObject or QWidget
    subclasses.

    Another new feature in Qt 4 is that Qt can now support other
    backends in addition to the predefined ones. This is done by
    subclassing \l QAccessibleBridge.

    \omit
    \section1 Software Layering

        Qt Application
            | links to
        Qt Accessibility Module
            | Plugin (in-process)
        Qt ATK Bridge
            | links to
        ATK
            | Plugin (in-process)
        at-spi
            | CORBA
        assistive technologies

    Windows:

        Qt Application
            | links to
        Qt Accessibility Module
            | COM (?)
        MSAA
            | ?
        assistive technologies

    Mac:

        ?
    \endomit

    \section1 The Current State of the Accessibility Support

    * The architecture is in place and is not expected to change much.
    * Not all widgets have been implemented yet.
    * Not all AT-SPI interfaces have been bridged yet

    \section1 Example Code

    * create an interface

    * creating a plugin

    * registering stuff

    \section1 Comparison with Qt 3

    * Qt 3, you had to have plugins; Qt 4, can compile them into your app and
      register them
        * Qt 4: the built-in ones are plugins by default; can be built into the Qt library
          using ...
        * custom a12y interfaces can be built into your app or provided as plugins

    * Qt 3 had no generic support for backends

    \section1 Future Work

    * implement the missing widgets
    * complete the AT-SPI bridge

    \link qt4-intro.html [Back to the Technology Preview page] \endlink
*/
