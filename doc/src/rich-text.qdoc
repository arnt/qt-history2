/*!
\page rich-text.html

\title Rich Text Processing

\tableofcontents

See also the \l{text.html}{list of text-related classes}.

\section1 Overview

The Scribe framework provides a set of classes for reading and manipulating
structured textual documents. Unlike previous rich text support in Qt, the
new classes are centered around the \c QTextDocument class rather than raw
text information. This enables the developer to create and modify structured
rich text documents without having to prepare content in an intermediate
markup format.

The information within a document can be accessed via two complementary
interfaces: a \l{#cursor}{cursor-based interface} for editing, and a
structure-based interface for easy navigation that provides a high level
overview of the  document. The main advantage of this approach is that the text
can be edited using operations that mimic the user's interaction with an editor
without losing the underlying structure of the document.

\section1 Document structure

The structured representation of a text document presents its contents as
a hierarchy of text blocks, frames, tables, and other objects. These provide
both logical structure to the document, and indicate how their contents are
to be displayed. Generally, frames and tables are used to group other
structures, and text blocks contain the actual textual information.

\table
\row
\i \inlineimage richtext-document.png
\i
The "top level" of a document might be populated in the way shown.
Each document always contains a root frame, and this contains always contains
at least one text block. For documents with some textual content, the root
frame usually contains a sequence of blocks and other elements.
Sequences of frames and tables are always separated by text blocks in a
document, even if the text blocks contain no information. This ensures that
new elements can always be inserted between existing structures.
\endtable

New elements are created and inserted into the document using a
\c QTextCursor. Elements can be given a particular format when they are
created; otherwise they take the cursor's current format for the
element.

\section2 Text blocks

Text blocks typically contain a number of text fragments, each displayed
using a different character format. Fragments are created when the document
is edited, and can be split, merged, or removed in order to efficiently
represent the different styles of text in the block.

The block itself can have its own character format that can be used for
drawing block-level decoration, such as the bullet points found alongside
list items. The formatting for the block itself is described by the
\c QTextBlockElement class, and describes properties such as text alignment,
indentation, and background color:

\quotefromfile snippets/textblock-formats/main.cpp
\skipto QTextBlockFormat backgroundFormat
\printuntil cursor.setBlockFormat

The fragments within the block can be read with an iterator:

\quotefromfile snippets/textblock-fragments/xmlwriter.cpp
\skipto QTextBlock::iterator it;
\printuntil if (fragment.isValid()) {
\skipto ...
\printuntil ...
\skipto }
\printuntil }
\printuntil }

Although the document may contain complex structures, we can always extract
just the text blocks from it in the correct order.

\quotefromfile snippets/textblock-fragments/xmlwriter.cpp
\skipto QTextBlock currentBlock
\printuntil while (currentBlock.isValid()) {
\skipto ...
\printuntil ...
\skipto currentBlock = currentBlock.next();
\printuntil }

\section2 Frames

Text frames group together blocks of text, providing document structures
that are larger than paragraphs in the document. The format of a frame
specifies how it is rendered and positioned on the page. Frames are
either inserted into the text flow, or they float to the left or right
hand side of the page.

The following code shows how a frame can be inserted between two text
blocks in a document's root frame:

\table
\row
\i \inlineimage qtextdocument-frames.png
\i
\quotefromfile snippets/textdocument-frames/mainwindow.cpp
\code
cursor.insertText(...);
\endcode
\skipto QTextFrame *mainFrame
\printuntil cursor.insertFrame(
\code
cursor.insertText(...);
\endcode
\skipto cursor = mainFrame->
\printuntil cursor = mainFrame->
\code
cursor.insertText(...);
\endcode
\endtable


\section2 Tables

Tables are collections of cells that are arranged in rows and columns
in the usual way. Cells can contain other elements, such as frames and text
blocks, and are constructed by the document in the same way as other
structures:

\code
QTextTable *table = cursor.insertTable(rows, columns);
\endcode

Tables can be created with a specific format that defines the overall
properties of the table, such as its alignment, background color, and
the cell spacing used. It can also determine the constraints on each
column, allowing each of them to have a fixed width, or resize according
to the available space:

\quotefromfile snippets/textdocument-tables/mainwindow.cpp
\skipto QTextTableFormat tableFormat;
\printuntil QTextTable *table


\section3 Lists

Lists are sequences of text blocks that are formatted in the usual way, but
which also provide the standard list decorations, such as bullet points and
enumerated items in various styles. Lists can be nested, and will be indented
if the list's format specifies a non-zero indentation.

\section3 Images

\target cursor
\section1 Cursor-based editing

At the simplest level, text documents are made up of a string of characters,
marked up in some way to represent the block structure of the text within
the document. \c QTextCursor provides a cursor-based interface that allows
the contents of a \c QTextDocument to be manipulated at the character level.
Since the document's structure is also encoded in the character stream, the
document structure can itself be changed by the cursor.

The cursor keeps track of its location within its parent document, and can
report information about the surrounding structure, such as the enclosing
text block, frame, table, or list. The formats of the enclosing structures
can also be directly obtained through the cursor.

\section2 Using a cursor

The main use of a cursor is to insert or modify text within a block.
We can use a text editor's cursor, or we can obtain a cursor directly from a
document:

\code
    QTextDocument *document = new QTextDocument;
    QTextCursor cursor(document);
\endcode

The cursor is positioned at the start of the document so that we can write
into the first (empty) block in the document. Text can be inserted into the
current block in the current character format, or in a custom format that
is specified with the text:

\quotefromfile snippets/textdocument-charformats/main.cpp
\skipto cursor.insertText
\printuntil emphasisFormat

Once the character format has been used, that format becomes the current
format and will be used for any following text inserted into the document
until another character format is specified.

\section2 Packaging cursor operations

A series of editing operations can be packaged together so that they can
be replayed, or undone together in a single action. This is achieved by
using the \c beginEditBlock() and \c endEditBlock() functions in the
following way:

\quotefromfile textdocument-selections/mainwindow.cpp
\skipto void MainWindow::selectWord
\skipto cursor.beginEditBlock
\printuntil cursor.endEditBlock


\section2 Multiple cursors

Multiple cursors can be used to simultaneously edit the same document,
although only one will be visible to the user in a \c QTextEdit widget.
The \c QTextDocument ensures that each cursor writes text correctly and
does not interfere with any of the others. 

\quotefromfile snippets/textdocument-cursors/main.cpp
\skipto QTextDocument *document
\printuntil QTextCursor redCursor
\skipto QTextCursor blueCursor
\printuntil QTextCursor blueCursor

\section1 Common tasks

There are a number of tasks that are often performed by developers
when editing and processing text documents using Qt. These include the use
of display widgets such as \c QTextBrowser and \c QTextEdit, creation of
documents with \c QTextDocument, editing using a \c QTextCursor, and
exporting the document structure.
This document outlines some of the more common ways of using the Scribe
classes to perform these tasks, showing convenient patterns that can be
reused in your own applications.

\section2 Using QTextEdit

A text editor widget can be constructed and used to display HTML in the
following way:

\code
    QTextEdit *editor = new QTextEdit(parent);
    editor->setHtml(aStringContainingHTMLtext);
    editor->show();
\endcode

By default, the text editor contains a document with a root frame, inside
which is an empty text block. This document can be obtained so that it can
be modified directly by the application:

\code
    QTextDocument *document = editor->document();
\endcode

The text editor's cursor may be used to edit a document:

\code
    QTextCursor cursor = editor->textCursor();
\endcode

Although a document can be edited using many cursors at once, a \c QTextEdit
only displays a single cursor at a time. Therefore, if we want to update the
editor to display a particular cursor or its selection, we need to set the
editor's cursor after we have modified the document:

\code
    editor->setTextCursor(cursor);
\endcode

\section2 Selecting text

Text is selected by moving the cursor using operations that are similar to
those that the user would make to select text in an editor. To select text
between two points in the document, we need to position the cursor at the
first point then move it using a special \l{QTextCursor::MoveMode} with a
\l{QTextCursor::MoveOperation}.
When we select the text, we leave the selection anchor at the old cursor
position just as the user might do by holding down the Shift key when
selecting text:

\quotefromfile snippets/textdocument-selections/mainwindow.cpp
\skipto cursor.movePosition(QTextCursor::StartOfWord);
\printuntil cursor.movePosition(QTextCursor::EndOfWord

In the above code, a whole word is selected using this method. \c QTextCursor
provides a number of common move operations.

\section2 Finding text

\c QTextDocument provides a cursor-based interface for searching, making
integration with a text editor straightforward. 

\quotefromfile snippets/textdocument-find/main.cpp
\skipto QTextCursor newCursor(document);
\printuntil }
\printuntil }

*/
