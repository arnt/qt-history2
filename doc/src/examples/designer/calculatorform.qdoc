/*!
    \example designer/calculatorform
    \title Calculator Form Example

    The Calculator Form Example shows how to use a form created with \QD in an
    application by using the user interface information from a QWidget subclass.
    We use \l{Using a Component in Your Application#a-dialog-with-auto-connect}{uic's
    auto-connection} feature to automatically connect signals from widgets on the
    form to slots in our code.

    \omit
    \image calculatorform-example.png Screenshot of the Calculator Form example
    \endomit

    The example presents two spin boxes that are used to input integer values
    and a label that shows their sum. Whenever either of the spin boxes are
    updated, the signal-slot connections between the widgets and the form
    ensure that the label is also updated.

    \section1 Preparation

    The user interface for this example is designed completely using \QD. The
    result is a .ui file describing the form, the widgets used, any signal-slot
    connections between them, and other standard user interface properties.

    To ensure that the example can use this file, we need to include a \c FORMS
    declaration in the example's project file:

    \quotefromfile designer/calculatorform/calculatorform.pro
    \skipto FORMS
    \printuntil FORMS

    When the project is built, \c uic will create a header file that lets us
    construct the form.

    \section1 CalculatorForm Class Definition

    The \c CalculatorForm class uses the user interface described in the
    \c calculatorform.ui file. To access the form and its contents, we need
    to include the \c ui_calculatorform.h header file created by \c uic
    during the build process:

    \quotefromfile designer/calculatorform/calculatorform.h
    \skipto #include
    \printuntil #include

    We define the \c CalculatorForm class by subclassing QWidget because the
    form itself is based on QWidget:

    \skipto class CalculatorForm
    \printuntil /^\};/

    Apart from the constructor, the class contains two private slots that
    are named according to the auto-connection convention used by \c uic.
    The private \c ui member variable refers to the form, and is used to
    access the contents of the user interface.

    \section1 CalculatorForm Class Implementation

    The constructor simply calls the base class's constructor and
    sets up the form's user interface.

    \quotefromfile designer/calculatorform/calculatorform.cpp
    \skipto CalculatorForm::CalculatorForm
    \printuntil /^\}/

    The user interface is set up with the \c setupUI() function. We pass
    \c this as the argument to this function to use the \c CalculatorForm
    widget itself as the container for the user interface.

    To automatically connect signals from the spin boxes defined in the
    user interface, we use the naming convention that indicates which
    widgets and their signals in the user interface should be connected
    to each slot. The first slot is called whenever the spin box called
    "inputSpinBox1" in the user interface emits the
    \l{QSpinBox::valueChanged()}{valueChanged()} signal:

    \skipto on_inputSpinBox1_valueChanged
    \printuntil on_inputSpinBox1_valueChanged

    When this occurs, we use the value supplied by the signal to update the
    output label by setting its new text directly. We access the output label
    and the other spin box via the class's private \c ui variable.

    The second slot is called whenever the second spin box, called
    "inputSpinBox2", emits the \l{QSpinBox::valueChanged()}{valueChanged()}
    signal:

    \skipto on_inputSpinBox2_valueChanged
    \printuntil on_inputSpinBox2_valueChanged

    In this case, the value from the first spin box is read and combined
    with the value supplied by the signal. Again, the output label is
    updated directly via the \c ui variable.
*/
