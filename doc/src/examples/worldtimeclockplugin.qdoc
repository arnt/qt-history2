/*!
    \example designer/worldtimeclockplugin
    \title World Time Clock Plugin Example

    The World Time Clock Plugin example shows how to create a custom
    widget plugin for \QD that uses signals and slots.

    \image worldtimeclockplugin-example.png

    In this example, we simply extend the \l
    {designer/customwidgetplugin}{Custom Widget Plugin} example and
    its custom widget (based on the \l{widgets/analogclock}{Analog
    Clock} example), by introducing the concept of signals and slots.

    The World Time Clock Plugin example consists of two classes:

    \list
    \o \c WorldTimeClock is a custom clock widget with hour and
       minute hands that is automatically updated every few seconds.
    \o \c WorldTimeClockPlugin exposes the \c WorldTimeClock class to \QD.
    \endlist

    First we will take a look at the \c WorldTimeClock class which
    extends the \l {designer/customwidgetplugin}{Custom Widget Plugin}
    example's \c AnalogClock class by providing a signal and a
    slot. Then we will take a quick look at the \c
    WorldTimeClockPlugin class, but this class is in most parts
    identical to the \l {designer/customwidgetplugin}{Custom Widget
    Plugin} example's implementation.

    Finally we take a look at the plugin's project file. The project
    file for custom widget plugins needs some additional information
    to ensure that they will work within \QD. This is also covered in
    the \l {designer/customwidgetplugin}{Custom Widget Plugin} example,
    but due to its importance (custom widget plugins rely on
    components supplied with \QD which must be specified in the
    project file that we use) we will repeat it here.

    \section1 WorldTimeClock Class

    The \c WorldTimeClock class inherits QWidget, and is a custom
    clock widget with hour and minute hands that is automatically
    updated every few seconds. What makes this example different from
    the \l {designer/customwidgetplugin}{Custom Widget Plugin}
    example, is the introduction of the signal and slot in the custom
    widget class:

    \quotefromfile designer/worldtimeclockplugin/worldtimeclock.h
    \skipto class QDESIGNER_WIDGET_EXPORT WorldTimeClock
    \printuntil /^\};/

    We declare the \c setTimeZone() slot with an associated \c
    timeZoneOffset variable, and we declare an \c updated() signal
    which takes the current time as argument and is emitted whenever
    the widget is repainted.

    \image worldtimeclock-connection.png

    In \QD's workspace we can then, for example, connect the \c
    WorldTimeClock widget's \c updated() signal to a QTimeEdit's \l
    {QDateTimeEdit::setTime()}{setTime()} slot using \QD's mode
    for editing signal and slots.

    \image worldtimeclock-signalandslot.png

    We can also connect a QSpinBox's \l
    {QSpinBox::valueChanged()}{valueChanged()} signal to the \c
    WorldTimeClock's \c setTimeZone() slot.

    \section1 WorldTimeClockPlugin Class

    The \c WorldTimeClockPlugin class exposes the \c WorldTimeClock
    class to \QD. Its definition is equivalent to the \l
    {designer/customwidgetplugin}{Custom Widget Plugin} example's
    plugin class which is explained in detail. The only part of the
    class definition that is specific to this particular custom widget
    is the class name:

    \quotefromfile designer/worldtimeclockplugin/worldtimeclockplugin.h
    \skipto class WorldTimeClockPlugin
    \printuntil /^\};/

    The plugin class provides \QD with basic information about our
    plugin, such as its class name and its include file. Furthermore
    it knows how to create instances of the \c WorldTimeClockPlugin
    widget.  \c WorldTimeClockPlugin also defines the \l
    {QDesignerCustomWidgetInterface::initialize()}{initialize()}
    function which is called after the plugin is loaded into \QD. The
    function's QDesignerFormEditorInterface parameter provides the
    plugin with a gateway to all of \QD's API's.

    The \c WorldTimeClockPlugin class inherits from both QObject and
    QDesignerCustomWidgetInterface. It is important to remember, when
    using multiple inheritance, to ensure that all the interfaces
    (i.e. the classes that doesn't inherit Q_OBJECT) are made known to
    the meta object system using the Q_INTERFACES() macro. This
    enables \QD to use \l qobject_cast() to query for supported
    interfaces using nothing but a QObject pointer.

    The implementation of the \c WorldTimeClockPlugin is also
    equivalent to the plugin interface implementation in the \l
    {designer/customwidgetplugin}{Custom Widget Plugin} example (only
    the class name and the implementation of
    QDesignerCustomWidgetInterface::domXml() differ). The main thing
    to remember is to use the Q_EXPORT_PLUGIN2() macro to export the \c
    WorldTimeClockPlugin class for use with \QD:

    \quotefromfile designer/worldtimeclockplugin/worldtimeclockplugin.cpp
    \skipto Q_EXPORT_PLUGIN2
    \printuntil Q_EXPORT_PLUGIN2

    Without this macro, there is no way for Qt Designer to use the
    widget.

    \section1 The Project File: worldtimeclockplugin.pro

    The project file for custom widget plugins needs some additional
    information to ensure that they will work as expected within \QD:

    \quotefromfile designer/worldtimeclockplugin/worldtimeclockplugin.pro
    \printline CONFIG
    \printline TEMPLATE
    \printline DESTDIR

    The \c TEMPLATE variable's value make \c qmake create the custom
    widget as a library.

    The \c CONFIG variable contains two values, \c designer and \c
    plugin:

    \list
        \o \c designer: Since custom widgets plugins rely on components
           supplied with \QD, this value ensures that our plugin link against
           \QD's library (\c libQtDesigner.so).

        \o \c plugin: We also need to ensure that \c qmake considers the
           custom widget a \e plugin library.
    \endlist

    When Qt is configured to build in both debug and release modes,
    \QD will be built in release mode.  When this occurs, it is
    necessary to ensure that plugins are also built in release
    mode. For that reason you might have to add a \c release value to
    your \c CONFIG variable. Otherwise, if a plugin is built in a mode
    that is incompatible with \QD, it won't be loaded and
    installed. For more information about plugins, see the \l {How to
    Create Qt Plugins} document.

    The \c DESTDIR variable's value makes qmake install the plugin
    alongside the other \QD widget plugins which is useful for testing
    purposes.

    \skipto HEADERS
    \printuntil worldtimeclockplugin.cpp

    The header and source files for the widget are declared in the
    usual way, and in addition we provide an implementation of the
    plugin interface so that \QD can use the custom widget.
*/
