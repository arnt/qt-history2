/*! \page qaxcontainer-example-webbrowser.html
    \ingroup qaxcontainer-examples
  \title A Web Browser

  This example utilizes the Microsoft Web Browser ActiveX control 
  to implement a fully functional Web Browser application. The
  user interface has been developed using the Qt Designer
  integration of the QAxWidget class.

  The code demonstrates how the Qt application can communicate 
  with the embedded ActiveX controls using signals, slots and the 
  dynamicCall() function.

  \quotefile webbrowser/main.cpp
  \skipto class
  \printuntil };
  The \c MainWindow class declares a \c QMainWindow based user interface,
  using the \c Ui::MainWindow class generated by Qt Designer. A number
  of slots are implemented to handle events from the various user 
  interface elements, including the \c WebBrowser object, which is a
  \c QAxWidget hosting the Microsoft Web Browser control.

  \printto MainWindow::on_
  The constructor initializes the user interface, installs a progress
  bar on the status bar, and uses \link QAxBase::dynamicCall() dynamicCall()
  \endlink to invoke the \c GoHome() method of Internet Explorer to navigate 
  to the user's home page.

  \printto MainWindow::on_actionGo_triggered
  Different slots handle the signals emitted by the WebBrowser object.
  Connections that don't require any coding, i.e. connecting the \c back 
  action to the \c GoBack() slot, have already been made in Qt Designer.

  \printto int main(
  \printuntil }
  The rest of the implementation is not related to ActiveQt - the actions
  are handled by different slots, and the entry point function starts the
  application using standard Qt APIs.

  To build the example you must first build the
  \link qaxcontainer.html QAxContainer \endlink library.
  Then run your make tool in \c examples/webbrowser and
  run the resulting \c webbrowser.exe.
*/
