/*! 
  \page qaxcontainer-example-qutlook.html
  \ingroup qaxcontainer-examples
  \title In Sync with Outlook
 
  This example demonstrates the use of ActiveQt to automate Outlook. The example
  makes use of the \link activeqt-tools-dumpcpp.html dumpcpp \endlink tool to generate a C++
  namespace for the type library describing the Outlook Object Model.
  
  \quotefile qutlook/qutlook.pro
  \printto else
  
  The project file checks if the the Outlook type library is located in the standard location.
  If not, then the generated makefile will just print an error message.

  \printuntil }
  \printuntil }

  If the type library could be located, then it is added to the \c TYPELIBS variable, and the
  use of the \e dumpcpp tool is turned on. The build step will now run the \e dumpcpp tool
  whenever the type library changes, and will generate a header and a cpp file (in this case, 
  \c msoutl.h and \c msoutl.cpp) that declare and implement an easy to use Qt-like API to the 
  Outlook objects.

  \quotefile qutlook/addressview.h
  \skipto class AddressView
  \printuntil };

  The AddressView class declares a QWidget subclass for the user interface. The QTreeView widget
  will display the contents of Outlook's Contact folder.

  \quotefile qutlook/addressview.cpp
  \skipto #include
  \printto class AddressBookModel
  
  The implementation includes the required header files (including the \c msoutl.h header generated
  by the \e dumpcpp tool), and provides a \c qHash implementation for QModelIndex, which allows
  caching of data in the application (thus reducing the number of calls to Outlook).

  \printuntil };
  The AddressBookModel class implements a QAbstractListModel that communicates directly with Outlook,
  using a QHash for caching.

  \printto ::~AddressBookModel
  The constructor initializes Outlook. For Outlook APIs that return subobjects of type \c IDispatch
  the return value has to be put into an object of the correct type. The various signals Outlook
  provides to notify about contents changes are connected to the \c updateOutlook() slot.

  \printto ::rowCount()
  The destructor logs off from the session.

  \printto ::data(
  The \c rowCount() implementation returns the number of entries as reported by Outlook. \c columnCount
  and \c headerData are implemented to show four columns in the tree view.

  \printto ::changeItem(
  The \c data() implementation is the core of the model. If the requested data is in the cache the
  cached value is used, otherwise the data is acquired from Outlook.

  \printto ::addItem(
  The \c changeItem() slot is called when the user changes the current entry using the user interface.
  The Outlook item is accessed using the Outlook API, and is modified using the property setters.
  Finally, the item is saved to Outlook, and removed from the cache. Note that the model does not
  signal the view of the data change, as Outlook will emit a signal on it's own.

  \printto ::update(
  The \c addItem() slot calls the CreateItem method of the Outlook to create a new contact item,
  sets the properties of the new item to the values entered by the user and saves the item.
  
  \printto ::AddressView
  The \c update() slot clears the cache, and emits the reset() signal to notify the view about the
  data change requiring a redraw of the contents.

  \printto ::itemSelected
  \printuntil }
  The rest of the file implements the user interface.

  \quotefile qutlook/main.cpp
  \skipto #include
  \printuntil }

  The \c main() entry point function finally instantiates the user interface and enters the
  event loop.

  To build the example you must first build the \link qaxcontainer.html QAxContainer \endlink 
  library. Then run your make tool in \c examples/qutlook and run the resulting \c qutlok.exe.
*/

