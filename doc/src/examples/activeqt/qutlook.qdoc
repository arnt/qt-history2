/*! 
    \example activeqt/qutlook
    \title Qutlook Example (ActiveQt)

    The Qutlook example demonstrates the use of ActiveQt to automate
    Outlook. The example makes use of the \link
    activeqt-tools-dumpcpp.html dumpcpp \endlink tool to generate a
    C++ namespace for the type library describing the Outlook Object
    Model.

    \quotefile qutlook/qutlook.pro
    \printuntil else
    \printuntil }

    The project file uses the \c dumpcpp tool to add MS Outlook type library to the project.
    If this fails, then the generated makefile will just print an error message, otherwise
    the build step will now run the \e dumpcpp tool on the type library, and 
    generate a header and a cpp file (in this case, \c msoutl.h and \c msoutl.cpp) that 
    declares and implement an easy to use API to the Outlook objects.

    \quotefile qutlook/addressview.h
    \skipto class AddressView
    \printuntil };

    The AddressView class is a QWidget subclass for the user interface. The QTreeView widget
    will display the contents of Outlook's Contact folder as provided by the \c{model}.

    \quotefile qutlook/addressview.cpp
    \skipto #include
    \printuntil };
    The AddressBookModel class is a QAbstractListModel subclass that communicates directly with 
    Outlook, using a QHash for caching.

    \printto ::~AddressBookModel
    The constructor initializes Outlook. The various signals Outlook provides to notify about 
    contents changes are connected to the \c updateOutlook() slot.

    \printto ::rowCount(
    The destructor logs off from the session.

    \printto ::headerData(
    The \c rowCount() implementation returns the number of entries as reported by Outlook. \c columnCount
    and \c headerData are implemented to show four columns in the tree view.

    \printto ::data(
    The \c headerData() implementation returns hardcoded strings.

    \printto ::changeItem(
    The \c data() implementation is the core of the model. If the requested data is in the cache the
    cached value is used, otherwise the data is acquired from Outlook.

    \printto ::addItem(
    The \c changeItem() slot is called when the user changes the current entry using the user interface.
    The Outlook item is accessed using the Outlook API, and is modified using the property setters.
    Finally, the item is saved to Outlook, and removed from the cache. Note that the model does not
    signal the view of the data change, as Outlook will emit a signal on it's own.

    \printto ::update(
    The \c addItem() slot calls the CreateItem method of Outlook to create a new contact item,
    sets the properties of the new item to the values entered by the user and saves the item.

    \printto ::AddressView
    The \c update() slot clears the cache, and emits the reset() signal to notify the view about the
    data change requiring a redraw of the contents.

    \printto ::itemSelected
    \printuntil }
    The rest of the file implements the user interface using only Qt APIs, i.e. without communicating
    with Outlook directly.

    \quotefile qutlook/main.cpp
    \skipto #include
    \printuntil }

    The \c main() entry point function finally instantiates the user interface and enters the
    event loop.

    To build the example you must first build the \link qaxcontainer.html QAxContainer \endlink 
    library. Then run your make tool in \c examples/qutlook and run the resulting \c qutlok.exe.
*/
