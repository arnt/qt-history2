/*!
    \example dialogbuttonbox 
    \title Dialog Button Box Example
    
    This example shows use of QDialogButtonBox.
    
    \image dialogbuttonboxexample.png
    
    QDialogButtonBox lays out buttons for dialogs and message
    boxes in a way that follows interface guidelines for the current
    widget style, e.g., QWindowsStyle or QMotifStyle.
    
    Buttons in dialogs follow roles that describe the actions the
    buttons trigger (e.g., accepting or rejecting the dialog or asking
    for help). In a QDialogButtonBox each button is assigned such a
    role. A 'Yes' or 'Save' button will, for instance, have an accept
    role. The QDialogButtonBox has a finite number of predefined roles
    (defined by the \l{QDialogButtonBox::}{ButtonRole} enum).
    
    This example lets the user add buttons to dialog button boxes
    in a QMdiArea; it is possible to select from a group of buttons
    that already have roles assigned (defined by the
    \l{QDialogButtonBox::}{StandardButton} enum) or enter the button's
    text and select a role. The \l{QDialogButtonBox::}{StandardButton}
    enum defines the available buttons. The user can change the
    style of the boxes; the styles available depend on the platform on
    which the example is run. 
    
    The dialog button box example consists of two classes:
    MainWindow and AddButtonDialog. MainWindow inherits QMainWindow
    and provides an mdi area to which the user can add dialog boxes.
    It also displays a table that shows the text and role of the
    buttons in the active dialog button box in the mdi area.
    AddButtonDialog lets the user select buttons to add to the dialog
    boxes. We have used the designer for the GUI in this example.
    
    \section1 MainWindow Class Definition
    
    \quotefromfile dialogbuttonbox/mainwindow.h 
    \skipto /class MainWindow/ 
    \printuntil /^\};/
    
    The \c MainWindow class inherits the class generated by
    designer and QMainWindow. We connect the widgets with private
    slots, which we will examine as we encounter them in the code.
    
    \section1 MainWindow Class Implementation
    
    We will now look at the implementation of the class, and we
    start with the constructor:
    
    \quotefromfile dialogbuttonbox/mainwindow.cpp 
    \skipto /::MainWindow/ 
    \printuntil /RejectRole/

    We start by creating the menus and widgets of the main window
    by calling the \c setupUi() method generated by designer.
    
    As mentioned, QDialogButtonBox supports a number of standard
    buttons, which we can add to dialog button boxes in designer. If
    we want buttons with custom texts and roles, we add them
    programmatically (as shown in the code above).

    \dots
    \skipto /^\}/
    \printuntil /^\}/

    The rest of the constructor sets up the QMdiArea and
    QTableWidget. We move on to \c connectActions():

    \skipto /::connectActions/ 
    \printuntil /styleGroup->actions/
    
    The user can choose from four different boxes (identified by
    the Presets enum) when adding boxes to the mdi area. The QAction
    class lets us store user data in a QVariant. We use the values
    from \c Presets as data for the actions. We cast them to ints as
    QVariant cannot store \c Presets values.
    
    We iterate over the available styles and create an action for
    each of them using the string key as the actions' text, which we
    use in \c newStyle() to create styles with
    QStyleFactory::create().
    
    \dots \skipto /^\}/ 
    \printuntil /\}/
    
    The rest of the function connects widgets to slots in \c
    MainWindow.
   
    Here is the \c createDialogButtonBox() implementation:
    
    \skipto /::createDialogButtonBox/ 
    \printuntil /FileError/
    
    The \c createDialogButtonBox() function returns a
    QDialogButtonBox (to add to the mdi area).In the constructor
    we select which of the \l{QDialogButtonBox::}{StandardButton}s
    the new dialog button box should start out with. We show two
    of the four different boxes that the function can create.

    \dots 
    \skipto /setStyle/ 
    \printuntil /^\}/
    
    The style of the boxes is individual and not based on the
    current application style, so we set the style with \c
    setStyle() function, which we will examine shortly.
 
    The \c addButton() slot opens an \c AddButtonDialog, which
    lets the user add buttons to the active - or, if no sub window is
    active, the previously active sub window - dialog box in the
    mdi area (revise this sentence). We take a closer look at the \c
    deleteButton() slot:

    \quotefromfile dialogbuttonbox/mainwindow.cpp
    \skipto /::deleteButton/ 
    \printuntil /^\}/
    
    The \c deleteButton() slot removes the button selected in the
    table from the dialog button box. The text column in the table
    contains the text of the buttons in the last activated dialog box. 
    We iterate over the buttons in the box and remove the box
    that has the same text as the selected button in the table.

    Here is the \c loadPresetBox() slot:
    
    \skipto /::loadPresetBox/ 
    \printuntil /^\}/
    
    The \c loadPresetBox() slot is connected to the actions that
    let the user add dialog boxes to the mdi area: \c
    loadSaveChangesAction, \c loadReallyQuitAction, \c
    loadEmptyAction, and \c loadFileErrorAction. The dialog box is
    created with \c createDialogButtonBox(). We retrieve the user
    data stored in the action with \l{QAction::}{data()} and cast it
    to a \c Preset.

    Here is the \c newStyle() slot:
    
    \skipto /::newStyle/ 
    \printuntil /^\}/
    
    The \c newStyle() slot is called when the user changes the
    style used for the dialog button boxes; the active box in the
    mdi area and future boxes will take the new style. We
    have set the text of the actions to the keys used by
    QStyleFactory::create().
    
    \skipto /::newOrientation/
    \printuntil /^\}/

    The \c newOrientation() slot is called when the user requests
    that the orientation of the active dialog box should change.
    We have stored the two values of the Qt::Orientation enum in 
    \c horizontalAction and \c verticalAction.

    Here follows the implementation of the \c windowActivated()
    slot:

    \skipto /::subWindowActivated/
    \printuntil /^\}/

    When a new window in the mdi area is activated we need to
    update the table and menus.
  
    \skipto /::setStyle/ 
    \printuntil /^\}/
    
    The \l{QWidget::}{setStyle()} function does not set the style
    of children of the widget. We loop through the children of the box
    (the buttons) and set the style and palette on each of them. 
    
    Here is the \c resolveButtons() implementation:
    
    \skipto /::resolveButtons/ 
    \printuntil /^\}/
    
    \c resolveButtons() fills the table when a button is added or
    a new window is activated in the mdi area. We iterate through the
    buttons in the active button box and set the texts and roles in
    the table.

    \section1 AddButtonDialog Class Definition
    
    The \c AddButtonDialog class lets the user choose a button to
    add to a dialog button box. It uses widgets laid out with designer
    in the Ui::AddDialogButton class.
    
    \quotefromfile dialogbuttonbox/addbuttondialog.h 
    \skipto /class AddButtonDialog/ 
    \printuntil /^\};/
    
    \section1 AddButtonDialogBox Class Implementation
    
    \quotefromfile dialogbuttonbox/addbuttondialog.cpp
    
    We start with a look at the constructor:
    
    \skipto /::AddButtonDialog/ 
    \printuntil /^\}/
    
    We start by creating the GUI from designer by calling \c
    setupUi(). We then fill the comboboxes with items with the \c
    fillStandardButtonCombo() and fillCustomButtonCombo() functions.

    We move on to the \c fillStandardButtonCombo() function:
    
    \skipto /::fillStandardButtonCombo/ 
    \printuntil /^\}/
    
    We want the \gui {Standard button combo} to have one item for
    each of the standard buttons QDialogButtonBox supports. In stead
    of adding the items individually with \l{QComboBox::addItem()}, we
    make use of Qt's \l{Meta-Object System}{meta object system}.
  
    \skipto /::fillCustomButtonCombo/ 
    \printuntil /DestructiveRole/ 
    
    The \c fillCustomButtonCombo() functions fill the \gui
    {Custom combo box} with items. The combobox lets the user select
    which QDialogButtonBox::ButtonRole the added button will have.
    
    We have one combobox item for each of the button roles. We
    can attach user data in \l{QVariant}s to combobox items; we store
    the QDialogButtonBox::ButtonRole values in the items as ints
    (QVariant does not support ButtonRole).
    
    \dots 
    \skipto /^\}/ 
    \printuntil /\}/

    \quotefromfile dialogbuttonbox/addbuttondialog.cpp

    The \c addButton() slot is called when the user adds a button
    to the mdi area. It first checks whether it is a standard or
    custom button to be added; we will look at the code for each
    possibility. Here is its implementation:
	 
    \skipto /::addButton/ 
    \printto /else/
   
    We fetch the QDialogButton::StandardButton value from the
    current item of the combo box.

    \printuntil /^\}/

    When we add a custom button, we create a new button and add
    it to the button box with the role from the \gui{Custom
    button combo}.

    The button is created by default with the application style,
    so we must set the style currently used by the dialog button
    box.
 
    \skipto /::standardButtonSelected/ 
    \printuntil /^\}/
    
    The \c standardButtonSelected() slot is called when the
    selected item in the \gui{Standard button combo} changes. We fill
    the \gui {Standard text label} and \gui {Standard role label}.
*/
