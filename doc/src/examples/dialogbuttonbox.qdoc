/*!
    \example widgets/dialogbuttonbox 
    \title Dialog Button Box Example
    
    This example shows use of QDialogButtonBox.
    
    \image dialogbuttonboxexample.png
    
    QDialogButtonBox lays out buttons for dialogs and message
    boxes in a way that follows interface guidelines for the current
    widget style, e.g., QWindowsStyle or QMotifStyle.
    
    Buttons in dialogs follow roles that describe the actions the
    buttons trigger (e.g., accepting or rejecting the dialog or asking
    for help). In a QDialogButtonBox each button is assigned such a
    role. A 'Yes' or 'Save' button will, for instance, have an accept
    role. The QDialogButtonBox has a finite number of predefined roles
    (defined by the \l{QDialogButtonBox::}{ButtonRole} enum).
    
    This example lets the user add buttons to dialog button boxes
    in a QWorkspace. QDialogButtonBox has several buttons with roles
    already assigned, e.g., 'Help', 'OK', and 'Cancel'. The user can
    select from these or enter the text and select a role when adding
    buttons. The user can change the style of the boxes; the styles
    available depend on the platform on which the example is run. 
    
    The dialog button box example consists of two classes:
    MainWindow and AddButtonDialog.  MainWindow inherits QMainWindow
    and provides a workspace to which the user can add dialog boxes.
    It also provides a table that shows the texts and roles of the
    buttons in the active dialog button box in the workspace.
    AddButtonDialog lets the user select buttons to add to the dialog
    boxes. We have used the designer for the GUI in this example.
    
    \section1 MainWindow Class Definition
    
    \quotefromfile widgets/dialogbuttonbox/mainwindow.h 
    \skipto /class MainWindow/ 
    \printuntil /^\};/
    
    The \c MainWindow class inherits the class generated by
    designer and QMainWindow. We connect the widgets with private
    slots, which we will examine as we encounter them in the code.
    
    \section1 MainWindow Class Implementation
    
    We will now look at the implementation of the class, and we
    start with the constructor:
    
    \quotefromfile widgets/dialogbuttonbox/mainwindow.cpp 
    \skipto /::MainWindow/ 
    \printuntil /RejectRole/

    We start by creating the menus and widgets of the main window
    by calling the \c setupUi() method generated by designer.
    
    As mentioned, QDialogButtonBox supports a number of standard
    buttons - defined by the \l{QDialogButtonBox::}{StandardButton}
    enum - which we can add to dialog button boxes in designer. If we
    want buttons with custom texts and roles, we add them
    programmatically (as shown in the code above).

    \printuntil /^\}/ 

    We do not want the vertical table header to be visible and we
    want to select rows in stead of single cells; we cannot give the
    table this behavior in designer.

    We continue our code walk through by having a look at \c
    connectActions():

    \skipto /::connectActions/ 
    \printuntil /styleGroup->actions/
    
    The user can choose from four different boxes (identified by
    the Presets enum) when adding boxes to the workspace. The QAction
    class lets us store user data in a QVariant.  We use the values
    from \c Presets as data for the actions. We cast them to int as
    QVariant cannot store \c Presets values.
    
    We iterate over the available styles and create an action for
    each of them using the string key as the actions' text, which we
    use in \c newStyle() to create styles with
    QStyleFactory::create().
    
    \dots \skipto /^\}/ 
    \printuntil /\}/
    
    The rest of the function connects widgets to slots in \c
    MainWindow.
   
    Here is the \c createDialogButtonBox() implementation:
    
    \skipto /::createDialogButtonBox/ 
    \printuntil /FileError/
    
    The \c createDialogButtonBox() function returns a
    QDialogButtonBox (to add to the workspace). 

    \dots 
    \skipto /setStyle/ 
    \printuntil /^\}/
    
    The style of the boxes is individual and not based on the
    current application style, so we set the style with \c
    setStyle().
 
    The \c addButton() slot opens a \c AddButtonDialog, which let
    the user add buttons to the active dialog box in the workspace.
    We take a closer look at the \c deleteButton() slot:

    \quotefromfile widgets/dialogbuttonbox/mainwindow.cpp
    \skipto /::deleteButton/ 
    \printuntil /^\}/
    
    The \c deleteButton() slot removes the button selected in the
    table from the dialog button box. The text column in the table
    contains the text of the buttons in the active dialog box. 
    We iterate over the buttons in the box and remove the box
    that has the same text as the selected button in the table.

    Here is the \c loadPresetBox() slot:
    
    \skipto /::loadPresetBox/ 
    \printuntil /^\}/
    
    The \c loadPresetBox() slot is connected to the actions that
    let the user add dialog boxes to the workspace: \c
    loadSaveChangesAction, \c loadReallyQuitAction, \c
    loadEmptyAction, and \c loadFileErrorAction. The dialog box is
    created with \c createDialogButtonBox(). We retrieve the user
    data stored in the action with \l{QAction::}{data()} and cast it
    to a \c Preset.

    Here is the \c newStyle() slot:
    
    \skipto /::newStyle/ 
    \printuntil /^\}/
    
    The \c newStyle() slot is called when the user changes the
    style used for the dialog button boxes; the active box in the
    workspace and new added boxes will take the new style. We
    have set the text of the actions to the keys used by
    QStyleFactory::create().
    
    \skipto /::newOrientation/
    \printuntil /^\}/

    The \c newOrientation() slot is called when the user requests
    that the orientation of the active dialog box should change.
    We have stored the two values of the Qt::Orientation enum in the
    \c horizontalAction and \c verticalAction.

    Here follows the implementation of the \c windowActivated()
    slot:

    \skipto /::windowActivated/
    \printuntil /^\}/

    When a new window in the workspace is activated we need to
    update the table and menus.
  
    \skipto /::setStyle/ 
    \printuntil /^\}/
    
    The \l{QWidget::}{setStyle()} function does not set the style
    of children of the widget. We loop through the children of the
    box and set the style on each of them. 
    
    Here is the \c resolveButtons() implementation:
    
    \skipto /::resolveButtons/ 
    \printuntil /^\}/
    
    \c resolveButtons() fills the table when a button is added or
    a new window is activated in the workspace. We iterate through the
    buttons in the active button box and set the texts and roles in
    the table.

    \section1 AddButtonDialog Class Definition
    
    The \c AddButtonDialog class lets the user choose a button to
    add to a dialog button box. It uses widgets laid out by designer
    in the Ui::AddDialogButton class.
    
    \quotefromfile widgets/dialogbuttonbox/addbuttondialog.h 
    \skipto /class AddButtonDialog/ 
    \printuntil /^\};/
    
    \section1 AddButtonDialogBox Class Implementation
    
    \quotefromfile widgets/dialogbuttonbox/addbuttondialog.cpp
    
    We start with a look at the constructor:
    
    \skipto /::AddButtonDialog/ 
    \printuntil /^\}/
    
    We start by creating the GUI from designer by calling \c
    setupUi(). We then fill the comboboxes with items with the \c
    fillStandardButtonCombo() and fillCustomButtonCombo() functions.

    We move on to the \c fillStandardButtonCombo() function:
    
    \skipto /::fillStandardButtonCombo/ 
    \printuntil /^\}/
    
    We want the \gui {Standard button combo} to have one item for each
    of the standard buttons QDialogButtonBox supports. In stead of
    adding the items individually with \l{QComboBox::addItem()}, we
    make use of Qt's \l{Meta-Object System}{meta object system}.
  
    \skipto /::fillCustomButtonCombo/ 
    \printuntil /DestructiveRole/    
    
    The \c fillCustomButtonCombo() functions fill the \gui
    {Custom combo box} with items.  The combobox lets the user select
    which QDialogButtonBox::ButtonRole the added button will have.
    
    We have one combobox item for each of the button roles. 
    We can attach user data in \l{QVariant}{QVariants} to
    combobox items; we store the QDialogButtonBox::ButtonRole
    values in the items as ints (QVariant does not support
    ButtonRole).
    
    \dots 
    \skipto /^\}/ 
    \printuntil /\}/

    \quotefromfile widgets/dialogbuttonbox/addbuttondialog.cpp

    The \c addButton() slot is called when the user adds a button 
    to the workspace. It first checks whether it is a standard or
    custom button to be added; we will look at the code for each
    possibility. Here is its implementation:
 
    \skipto /::addButton/ 
    \printto /else/
   
    We fetch the QDialogButton::StandardButton value from the
    current item of the combo box.

    \printuntil /^\}/

    When we add a custom button, we create a new button and add
    it to the button box with the role from the \gui{Custom
    button combo}.

    The button is created by default with the application style,
    so we must set the style currently used by the dialog button
    box.
 
    \skipto /::standardButtonSelected/ 
    \printuntil /^\}/
    
    The \c standardButtonSelected() slot is called when the
    selected item in the \gui{Standard button combo} changes. We fill
    the \gui {Standard text label} and \gui {Standard role label}.
*/
