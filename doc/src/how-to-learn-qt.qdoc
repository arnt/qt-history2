/****************************************************************************
**
** Documentation for class hierarchy.
**
** Copyright (C) 1992-$THISYEAR$ $TROLLTECH$. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \page how-to-learn-qt.html

    \title How to Learn Qt
    \ingroup howto

    We assume that you already know C++.

    The best way to learn Qt is to read the official Qt book,
    \l{http://www.amazon.com/gp/product/0131872494/ref=ase_trolltech/}{C++
    GUI Programming with Qt 4} (ISBN 0-13-187249-4). This book
    provides comprehensive coverage of Qt programming all the way
    from "Hello Qt" to advanced features like multithreading, 2D and
    3D graphics, networking, item view classes, and XML. See \l{Books
    about Qt Programming} for a complete list of Qt books, including
    translations.

    If you want to program purely in C++, designing your interfaces
    in code without the aid of any design tools, read the
    \l{tutorial.html}{tutorial}. The tutorial is designed to get you
    into Qt programming, with the emphasis on working code rather
    than being a tour of features.

    If you want to design your user interfaces using a design tool, then
    read at least the first few chapters of the \l{Qt Designer manual}.

    By now you'll have produced some small working applications and have a
    broad feel for Qt programming. You could start work on your own
    projects straight away, but we recommend reading a couple of key
    overviews to deepen your understanding of Qt: the \link
    object.html Qt Object Model \endlink and \link signalsandslots.html
    Signals and Slots\endlink.

    At this point, we recommend looking at the \link overviews.html
    overviews\endlink and reading those that are relevant to your
    projects. You may also find it useful to browse the source code of the
    \link examples.html examples\endlink that have things in common with
    your projects. You can also read Qt's source code since this is
    supplied. 

    If you run the \c qtdemo application, you'll see many of Qt's
    widgets in action.

    Qt comes with extensive documentation, with hypertext
    cross-references throughout, so you can easily click your way to
    whatever interests you. The part of the documentation that you'll
    probably use the most is the \link index.html API
    Reference\endlink. Each link provides a different way of
    navigating the API Reference; try them all to see which work best
    for you. You might also like to try \link assistant-manual.html
    Qt Assistant\endlink: this tool is supplied with Qt and provides
    access to the entire Qt API, and it provides a full text search
    facility. There are also a growing number of \l{Books about Qt
    Programming}.

    Good luck, and have fun!
*/
