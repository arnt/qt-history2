/****************************************************************************
**
** Copyright (C) 2006-$THISYEAR$ $TROLLTECH$. All rights reserved.
**
** This file is part of the $MODULE$ of the Qt Toolkit.
**
** $TROLLTECH_DUAL_LICENSE$
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \page qtopiacore-crosscompiling.html

    \title Cross-Compiling Qtopia Core Applications
    \ingroup qtopiacore

    Cross-compiling is the process of compiling an application on one
    machine, producing executable code for a different machine or
    device. To cross-compile a \l {Qtopia Core} application, use the
    following approach:

    \tableofcontents

    \section1 Step 1: Set the Cross-Compiler's Path

    Specify which cross-compiler to use by setting the \c PATH
    environment variable. For example, if the current shell is bash,
    ksh, zsh or sh:

    \code
        export PATH=path/to/cross/compiler:$PATH
    \endcode

    \section1 Step 2: Include the Required Libraries

    Make sure that all the third party libraries that the application
    and the Qt libraries require, are present in the tool chain. In
    particular, if the zlib and jpeg libraries are not available, they
    must be included by running the \c configure script with the \c -L
    and \c -I options. For example:

    \code
        cd path/to/Qtopia/Core
        ./configure -L /path/to/libjpeg/libraries -I /path/to/libjpeg/headers
    \endcode

    The JPEG source can be downloaded from \l http://www.ijg.org/. The
    \l {Qtopia Core} distribution includes a version of the zlib source
    that can be compiled into the Qtopia core library. If integrators
    wish to use a later version of the zlib library, it can be
    downloaded from the \l http://www.gzip.org/zlib/ website.

    \section1 Step 3: Create a Target Specific qmake Specification

    The qmake tool requires a platform and compiler specific \c
    qmake.conf file describing the various default values, to generate
    the appropriate Makefiles. The standard \l {Qtopia Core}
    distribution provides such files for several combinations of
    platforms and compilers. These files are located in the
    distribution's \c mkspecs subdirectory.

    Create a \c qmake.conf for your target environment by copying and
    customizing an already existing file. For example:

    \code
        cp path/to/Qtopia/Core/mkspecs/qws/linux-mips-g++/...
           path/to/Qtopia/Core/mkspecs/qws/linux-myplatform-g++/...
    \endcode

    Note that it is recommended to copy the entire directory.

    \section1 Step 4: Provide Hardware Drivers

    Without the proper mouse and keyboard drivers, you will not be
    able to give any input to your application when it is installed on
    the target device. You must also ensure that the appropriate
    screen driver is present to make the server process able to put
    the application's widgets on screen.

    \l {Qtopia Core} provides serveral ready-made mouse, keyboard and
    screen drivers, see the \l {Qtopia Core Pointer Handling}{pointer
    handling}, \l {Qtopia Core Character Input}{character input} and
    \l {Qtopia Core Display Management}{display management}
    documentation for details.

    In addition, custom drivers can be added by deriving from the
    QWSMouseHandler, QWSKeyboardHandler and QScreen classes
    respectively, and by creating corresponding plugins to make use of
    Qt's plugin mechanism (dynamically loading the drivers into the
    server application at runtime). Note that the plugins must be
    located in a location where Qt will look for plugins, e.g., the
    standard \c plugin directory.

    See the \l {How to Create Qt Plugins} documentation and the \l
    {tools/plugandpaint}{Plug & Paint} example for details.

    \section1 Step 5: Build the Target Specific Executable

    Before building the executable, you must specify the platform
    architecture as well as the platform specific hardware drivers by
    running the \c configure script:

    \code
        cd path/to/Qtopia/Core
        ./configure -embedded <platform> -qt-kbd-<keyboarddriver>
                    -qt-mouse-<mousedriver> -qt-gfx-<screendriver>

        cd path/to/myApplication
        qmake -project
        qmake
        make
    \endcode

    That's all. Your target specific executable is ready for deployment.

    \table 100%
    \row
    \o \bold {See also:}

    \l {Qtopia Core Architecture} and \l {Deploying Qtopia Core
    Applications}.

    \endtable
*/
