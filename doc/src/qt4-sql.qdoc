/*!
    \page qt4-sql.html
    \title Qt 4: Database GUI Layer

    The GUI layer of the SQL module in Qt 4 has been entirely
    redesigned to work with \l{qt4-interview.html}{Interview} (Qt's
    new model/view classes). It consists of three model classes
    (QSqlQueryModel, QSqlTableModel, and QSqlRelationalTableModel)
    that can be used with Qt's view classes, notably QTableView.

    \section1 General Overview

    The Qt 4 SQL classes are divided into three layers:

    \list
    \o The database drivers
    \o The core SQL classes
    \o The GUI classes
    \endlist

    The database drivers and the core SQL classes are mostly the same
    as in Qt 3. The database item models are new with Qt 4; they
    inherit from QAbstractItemModel and make it easy to present data
    from a database in a view class such as QListView, QTableView,
    and QTreeView.

    The philosophy behind the Qt 4 SQL module is that it should be
    possible to use database models for rendering and editing data
    just like any other item models. By changing the model at
    run-time, you can decide whether you want to store your data in
    an SQL database or in, say, an XML file. This generic approach
    has the additional benefit that you don't need to know anything
    about SQL to display and edit data.

    Currently, the Qt 4 SQL module includes three item models:

    \list
    \o QSqlQueryModel is a read-only model based on an arbitrary
       SQL query.
    \o QSqlTableModel is a read-write model that works on a single
       table.
    \o QSqlRelationalTableModel is a QSqlTableModel subclass with
       foreign key support.
    \endlist

    Combined with Qt's view classes and Qt's default delegate class
    (QItemDelegate), the models offer a very powerful mechanism for
    accessing databases. For finer control on the rendering of the
    fields, you can subclass one of the predefined models, or even
    QAbstractItemDelegate or QItemDelegate if you need finer control.

    You can also perform some customizations without subclassing. For
    example, you can sort a table using QSqlTableModel::sort(), and
    you can initialize new rows by connecting to the
    QSqlTableModel::primeInsert() signal.

    One nice feature supported by the read-write models is the
    possibility to perform changes to the item model without
    affecting the database until QSqlTableModel::submitChanges() is
    called. Changes can be dropped using QSqlTableModel::revertAll().

    The new classes perform advantageously compared to the SQL
    module's GUI layer in Qt 3. Speed and memory improvements in the
    tool classes (especially QVariant, QString, and QMap) and in the
    SQL drivers contribute to making Qt 4 database applications more
    snappy.

    \section1 The Current State of the Database Module

    The database drivers and the core SQL classes are not expected to
    change significantly before the final Qt 4.0 release.

    The QSqlQueryModel and QSqlTableModel classes are mostly
    finished, but they might get some new features before Qt 4.0 is
    released. QSqlRelationalTableModel is still in development and
    might change significantly. See \l{Future Work} for details.

    The Oracle, IBM DB2, and Sybase closed source drivers are left
    out of this Technology Preview. They will be available in the
    Enterprise Edition of the Qt 4.0 beta 1 release.

    \section1 Example Code

    The simplest way to present data from a database is to simply
    combine a QSqlQueryModel with a QTableView:

    \code
        QSqlQueryModel model;
        model.setQuery("select * from person");

        QTableView view;
        view.setModel(&model);
        view.show();
    \endcode

    To present the contents of a single table, we can use
    QSqlTableModel instead:

    \code
        QSqlTableModel model;
        model.setTable("person");
        model.select();

        QTableView view;
        view.setModel(&model);
        view.show();
    \endcode

    In practice, it's common that we need to customize the rendering
    of a field in the database. In that case, we can create our own
    model based on QSqlQueryModel. The next code snippet shows a
    custom model that prepends '#' to the value in field 0 and
    converts the value in field 2 to uppercase:

    \quotefromfile sql/querymodel/customsqlmodel.h
    \skipto class CustomSqlModel
    \printuntil };

    \quotefromfile sql/querymodel/customsqlmodel.cpp
    \skipto ::data(
    \printuntil /^\}/

    It is also possible to subclass QSqlQueryModel to add support for
    editing. This is done by reimplementing
    QAbstractItemModel::flags() to specify which database fields are
    editable and QAbstractItemModel::setData() to modify the
    database. Here's an example of a setData() reimplementation that
    changes the first or last name of a person:

    \quotefromfile sql/querymodel/editablesqlmodel.cpp
    \skipto ::setData
    \printuntil /^\}/

    It relies on helper functions called setFirstName() and
    setLastName(), which execute an \c{update}. Here's
    setFirstName():

    \quotefromfile sql/querymodel/editablesqlmodel.cpp
    \skipto ::setFirstName
    \printuntil /^\}/

    See Qt's \c examples/sql directory for more examples.

    \section1 Comparison with Qt 3

    The core SQL database classes haven't changed so much since Qt 3.
    Here's a list of the main changes:

    \list
    \o QSqlDatabase is now value-based instead of pointer-based.
    \o QSqlFieldInfo and QSqlRecordInfo has been merged into
       QSqlField and QSqlRecord.
    \o The SQL query generation has been moved into the drivers. This
       makes it possible to use non-standard SQL extensions. It also
       opens the door to non-SQL databases.
    \endlist

    The GUI-related database classes have been entirely redesigned.
    The QSqlCursor abstraction has been replaced with QSqlQueryModel
    and QSqlTableModel; QSqlEditorFactory is replaced by
    QAbstractItemDelegate; QDataTable is replaced by QTableView. The
    old classes are part of the \l{Qt 3 compatibility library} to aid
    porting to Qt 4.

    \section1 Future Work

    The SQL module will continue to evolve. Below are some ideas that
    are likely to be implemented before Qt 4 is released:

    \list
    \o Generic form support, in the spirit of the old QSqlForm class
       but with a generic interface that isn't restricted to
       databases.
    \o More convenience features in existing models.
    \o Additional models.
    \o Support for asynchronous queries.
    \endlist

    \link qt4-intro.html [Back to the Technology Preview page] \endlink
*/
