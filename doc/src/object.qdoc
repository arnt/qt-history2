/****************************************************************************
**
** Explanation of the Qt object model.
**
** Copyright (C) 1992-$THISYEAR$ $TROLLTECH$. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \page object.html
    \title Qt Object Model
    \ingroup architecture
    \brief A description of the powerful features made possible by Qt's dynamic object model.

    The standard C++ object model provides very efficient runtime
    support for the object paradigm. But its static nature is
    inflexibile in certain problem domains. Graphical user interface
    programming is a domain that requires both runtime efficiency and
    a high level of flexibility. Qt provides this, by combining the
    speed of C++ with the flexibility of the Qt Object Model.

    Qt adds these features to C++:

    \list
    \o a very powerful mechanism for seamless object
       communication called \l{signals and slots}
    \o queryable and designable \l{Qt's Property System}{object
       properties}
    \o powerful \l{events and event filters}
    \o contextual \l{i18n}{string translation for internationalization}
    \o sophisticated interval driven \l timers that make it possible
       to elegantly integrate many tasks in an event-driven GUI
    \o hierarchical and queryable \l{Object Trees and Object Ownership}{object
       trees} that organize object ownership in a natural way
    \o guarded pointers (QPointer) that are automatically
       set to 0 when the referenced object is destroyed, unlike normal C++
       pointers which become dangling pointers when their objects are destroyed
    \o a \l{metaobjects.html#qobjectcast}{dynamic cast} that works across
       library boundaries.
    \endlist

    Many of these Qt features are implemented with standard C++
    techniques, based on inheritance from QObject. Others, like the
    object communication mechanism and the dynamic property system,
    require the \l{Meta-Object System} provided
    by Qt's own \l{moc}{Meta-Object Compiler (moc)}.

    The meta-object system is a C++ extension that makes the language
    better suited to true component GUI programming. Although
    templates can be used to extend C++, the meta-object system
    provides benefits using standard C++ that cannot be achieved with
    templates; see \l{Why Doesn't Qt Use Templates for Signals and
    Slots?}
*/
