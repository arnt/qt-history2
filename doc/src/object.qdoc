/****************************************************************************
**
** Explanation of the Qt object model.
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \page object.html

    \title Qt Object Model

    The standard C++ object model provides very efficient runtime
    support for the object paradigm. But its static nature is
    inflexibile in certain problem domains. Graphical user interface
    programming is a domain that requires both runtime efficiency and
    a high level of flexibility. Qt provides this, by combining the
    speed of C++ with the flexibility of the Qt Object Model.

    Qt adds these features to C++:

    \list
    \o a very powerful mechanism for seamless object
       communication called \link signalsandslots.html signals and
       slots \endlink
    \o queryable and designable \link properties.html object
       properties \endlink
    \o powerful \link eventsandfilters.html events and event filters \endlink
    \o contextual \link i18n.html string translation for internationalization \endlink
    \o sophisticated interval driven \link timers.html timers \endlink
       that make it possible to elegantly integrate many tasks in an
       event-driven GUI
    \o hierarchical and queryable \link objecttrees.html object
       trees \endlink that organize object ownership in a natural way
    \o guarded pointers, \l QPointer, that are automatically
       set to 0 when the referenced object is destroyed, unlike normal C++
       pointers which become "dangling pointers" when their objects are destroyed
    \o a \l{metaobject.html#qtcast}{dynamic cast} that works across
       library boundaries.
    \endlist

    Many of these Qt features are implemented with standard C++
    techniques, based on inheritance from \l QObject. Others, like the
    object communication mechanism and the dynamic property system,
    require the \link metaobjects.html Meta-Object System \endlink provided
    by Qt's own \link moc.html Meta-Object Compiler (moc) \endlink. 

    The Meta-Object System is a C++ extension that makes the language
    better suited to true component GUI programming. Although templates can
    be used to extend C++, the Meta-Object System provides benefits using
    standard C++ that cannot be achieved with templates; see \link
    templates.html Why Doesn't Qt Use Templates for Signals and
    Slots? \endlink
*/
