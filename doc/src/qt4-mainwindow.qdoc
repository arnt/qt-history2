/*!
    \page qt4-mainwindow.html
    \title The Qt 4 Main Window Classes

    Qt 4 introduces a new set of main window classes that will replace the
    Qt 3 main window classes, providing a more efficient implementation
    while remaining easy-to-use.

    \tableofcontents

    \section1 Overview of the Main Window Classes

    The main window-related classes have been redesigned to satisfy a
    number of requirements, addressing issues raised by our customers and
    internal developers. The aim of this redesign is to provide a more
    consistent and efficient framework for main window management.

    Toolbar and dock window functionality is provided by two independent
    classes: QToolBar and QDockWidget. Toolbars and dock widgets
    reside in separate areas, with toolbars outside the dock widget
    area. This behavior differs from the standard Qt 3 behavior, where
    QToolBar inherited functionality from QDockWidget, and both types of
    component shared the same areas. The result is a more consistent
    and predictable experience for users. Toolbars and dock widgets
    provide feedback while being dragged into their new positions.

    \image mainwindow-docks.png

    The diagram above shows the layout of a main window that contains both
    toolbars and dock widgets. Each corner area can be used by either
    of the adjacent dock widget areas, allowing dock widget behavior and
    main window layout to be specified precisely.

    Toolbars and dock widgets are child widgets of the main window. They
    are no longer reparented into a dock area widget by the main window.
    Instead, layouts are used to manage the placement of toolbars and dock
    widgets. One consequence is that the old QDockArea class is no
    longer required in Qt 4.

    \section1 The Current State of the Main Window Classes

    Qt 4 provides the following classes for managing main windows and
    associated user interface components:

    \list
    \o QMainWindow remains the central class around which applications
       can be built. The interface to this class has been simplified --
       much of the functionality previously included is now present in the
       companion classes, QDockWidget and QToolBar.

    \o QDockWidget provides a widget that can be used to create
       detachable tool palettes or helper windows. Dock widgets keep track
       of their own properties -- they can be moved, closed, and floated as
       external windows.

    \o QToolBar provides a generic toolbar widget that can hold a
       number of different action-related widgets, such as buttons,
       drop-down menus, comboboxes, and spin boxes. The emphasis on a
       unified action model in Qt 4 means that toolbars cooperate well
       with menus and keyboard shortcuts.
    \endlist

    \section1 What's Changed Since Qt 4 Beta 1?

    \list
    \o QMainWindow and QToolBar have an \c iconSize property that
       specifies the size of the QToolButton icons. The default size
       is chosen based on the style.

    \o The behavior of QDockWidget has been improved significantly.
    \endlist

    \section1 Example Code

    Using QMainWindow is straightforward. Generally, we subclass
    QMainWindow and set up menus, toolbars, and dock widgets inside
    the QMainWindow constructor.

    To add a menu bar to the main window, we simply create the menus, and
    add them to the main window's menu bar. Note that the
    QMainWindow::menuBar() function will automatically create the menu bar
    the first time it is called. You can also call
    QMainWindow::setMenuBar() to use a custom menu bar in the main window.

    \code
        MainWindow::MainWindow(QWidget *parent)
            : QMainWindow(parent)
        {
            ...
            QAction *newAction = new QAction(tr("&New"), this);
            QAction *openAction = new QAction(tr("&Open"), this);
            ...
    \endcode

    Once actions have been created, we can add them to the main window
    components. To begin with, we add them to the popup menus:

    \code
            QMenu *fileMenu = new QMenu(tr("&File"), this);
            QMenu *editMenu = new QMenu(tr("&Edit"), this);
            QMenu *helpMenu = new QMenu(tr("&Help"), this);
            ...
            fileMenu->addAction(newAction);
            fileMenu->addAction(openAction);
            fileMenu->addAction(saveAction);
            fileMenu->addAction(saveAsAction);
            fileMenu->addSeparator();
            ...
            menuBar()->addMenu(fileMenu);
            menuBar()->addMenu(editMenu);
            menuBar()->addMenu(helpMenu);
            ...
        }
    \endcode

    The QToolBar and QMenu classes use Qt's action system to provide a
    consistent API. In the above code, some existing actions were added to
    the file menu with the QMenu::addAction() function. QToolBar also
    provides this function, making it easy to reuse actions in different
    parts of the main window. This avoids unnecessary duplication of work.

    We create a toolbar as a child of the main window, and add the desired
    actions to it:

    \code
        QToolBar *toolbar = new QToolBar(this);
        toolbar->setWindowTitle(tr("Main Tool Bar"));

        toolbar->addAction(openAction);
        toolbar->addAction(saveAction);
        toolbar->addAction(printAction);
        toolbar->addSeparator();
        toolbar->addAction(undoAction);
        toolbar->addAction(redoAction);
        ...
        toolbar->setAllowedAreas(Qt::TopToolBarArea | Qt::BottomToolBarArea);
        toolbar->setArea(Qt::TopToolBarArea);
    \endcode

    In this example, the toolbar is restricted to the top and bottom
    toolbar areas of the main window, and is initially placed in the
    top tool bar area. We can see that the actions specified by \c
    openAction and \c saveAction will be displayed both on the
    toolbar and in the file menu.

    QDockWidget is used in a similar way to QToolBar. We create a
    dock widget as a child of the main window, and add widgets as children
    of the dock widget:

    \code
        QDockWidget *dockWidget = new QDockWidget(mainWindow);
        dockWidget->setWindowTitle(tr("Tools"));

        QWidget *widget = new QWidget(dockWidget);
        ...
        dockWidget->setAllowedArea(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);
        mainWindow->addDockWidget(Qt::LeftDockWidgetArea, dockWidget);
    \endcode

    In this example, the dock widget can only be placed in the left and
    right dock areas, and it is initially placed in the left dock area.

    The QMainWindow API allows the programmer to customize which dock
    widget areas occupy the four corners of the dock widget area. If
    required, the default can be changed with the
    QMainWindow::setCorner() function:

    \code
        setCorner(Qt::TopLeftCorner, Qt::LeftDockWidgetArea);
        setCorner(Qt::BottomLeftCorner, Qt::LeftDockWidgetArea);
        setCorner(Qt::TopRightCorner, Qt::RightDockWidgetArea);
        setCorner(Qt::BottomRightCorner, Qt::RightDockWidgetArea);
    \endcode

    The following diagram shows the configuration produced by the above code.
    Note that the left and right dock widgets will occupy the top and bottom
    corners of the main window in this layout.

    \image mainwindow-docks-example.png

    Finally, once all of the main window components have been set up, the
    central widget is created and installed:

    \code
        QWidget *centralWidget = new QWidget(this);
        setCentralWidget(centralWidget);
    \endcode

    The central widget can be any subclass of QWidget.


    \section1 What's Changed since Qt 3?

    Although the QMainWindow class in Qt 3 provided support for
    toolbars, dock widgets, and other standard user interface
    components, its design meant that these items were managed
    through a large number of QMainWindow member functions. In Qt 4,
    the QMainWindow class delegates many of the management tasks to
    QDockWidget and QToolBar. As a result, these classes are used in
    a slightly different way in Qt 4.

    QMainWindow retains the menuBar() function, but menus are always
    constructed using QAction objects. All kinds of menus are
    constructed using the general QMenu class.

    Qt 3:
    \code
        QPopupMenu *fileMenu = new QPopupMenu(this);
        openAction->addTo(fileMenu);
        saveAction->addTo(fileMenu);
        ...
        menuBar()->insertItem(tr("&File"), fileMenu);
    \endcode
    Qt 4:
    \code
        QMenu *fileMenu = menuBar()->addMenu(tr("&File"));
        fileMenu->addAction(openAction);
        fileMenu->addAction(saveAction);
        ...
    \endcode

    Toolbars follow the same pattern as menus, with the new, more
    consistent behavior:

    Qt 3:
    \code
        QToolBar *fileTools = new QToolBar(this, "file toolbar");
        openAction->addTo(fileTools);
        saveAction->addTo(fileTools);
        ...
    \endcode
    Qt 4:
    \code
        QToolBar *fileTools = addToolBar(tr("File Tool Bar"));
        fileTools->addAction(openAction);
        fileTools->addAction(saveAction);
        ...
    \endcode

    The behavior of dock widgets is now configured through the member
    functions of QDockWidget. For example, compare the old and new ways
    of creating a dock widget in the dock area on the left hand side of the
    main window.

    In Qt 3:
    \code
        QDockWidget *dockWidget = new QDockWidget(this);
        mainWin->moveDockWidget(dockWidget, Qt::DockLeft);
    \endcode
    In Qt 4:
    \code
        QDockWidget *dockWidget = new QDockWidget(mainWindow);
        mainWindow->addDockWidget(Qt::LeftDockWidgetArea, dockWidget);
    \endcode

    These changes provide more than a cosmetic improvement to Qt's API.
    They allow more consistent behavior to be defined and implemented. In
    response to feedback from customers, we hope to improve these classes
    even further.

    \section1 Future Work

    The main window classes will continue to evolve and improve as part of
    the push toward Qt 4. Below are some ideas that have been discussed by
    the Trolltech development team, and put forward for implementation.
    Feedback is welcome and encouraged.

    \list

    \o Dragging/dropping behavior may change such that dropped dock
       widgets will always split a single dock widget.
       (The current behavior when placing a dock widget between two other
       dock widgets is to take equal space from each to make room for the
       newly placed dock widget.)

    \endlist

    \link qt4-intro.html [Back to the Beta page] \endlink
*/
