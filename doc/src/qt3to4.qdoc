/*!
    \page qt3to4.html
    \title qt3to4 - The Qt 3 to 4 Porting Tool

    The \c qt3to4 tool provides help when moving a project from Qt 3
    to Qt 4. It is designed to automate the most tedious part of the
    porting effort.

    See the \l{porting4.html}{Porting Guide} for more information
    about porting from Qt 3 to Qt 4.

    \section1 Usage

    \c qt3to4 can be run either on individual C++ source or header
    files, or on an entire project specified by a qmake \c .pro file:

    \code
        qt3to4 myfile.cpp
        qt3to4 myapp.pro
    \endcode

    In project mode, \c qt3to4 reads the \c .pro file and converts
    all files specified in it. The tool modifies the files in place.
    You might want to make a copy of your project before you run the
    tool.

    \section1 Porting Rules

    The Qt porting tool loads its porting rules from an XML file
    called \c q3porting.xml located in Qt's \c tools/porting/src directory. 
    By editing this file, you can add your own rules or remove some
    rules.

    The standard \c q3porting.xml file specifies the following
    conversions:

    \list
    \o  Rename classes that are now part of the Qt 3 support
        library (e.g., replace \c QFileDialog with \c{Q3FileDialog}).
    \o  Prefix or rename enum values that have been moved or
        renamed (e.g., replace \c QButton::On with \c{QCheckBox::On}) or
        members of the Qt namespace (e.g., replace \c QWidget::red with
        \c{Qt::red}).
    \o  Add \c #include directives that might be needed in Qt 4.
    \endlist

    \section2 Location of the qt3porting.xml File

    You can now specify the location of the \c qt3porting.xml file with the
    \c{-f} command line option. This is useful if you want to use a modified
    file with your own rules. 

    If you you don't want to maintain a modified \c qt3porting.xml it is
    possible to create a "patch" file that includes the original file and adds
    or disables rules. The syntax for this file looks like this:

    \code
    <Rules>
      <Include>/path/to/q3porting.xml</Include>

      <item Type="RenamedHeader" Disable="True" >
        <Qt4>q3sqlselectcursor.h</Qt4>
        <Qt3>qsqlselectcursor.h</Qt3>
      </item>

      <item Type="RenamedHeader" >
        <Qt4>newclass.h</Qt4>
        <Qt3>oldclass.h</Qt3>
      </item>
    </Rules>
    \endcode

    \section1 Logging

    The porting tool logs all changes to a file called \c
    portinglog.txt in the current directory. This file lists all
    changes made to the source files.
    
    \section1 Advanced Usage
     
    When porting, qt3to4 parses the source files and ports the contents according to
    the C++ language rules. This C++ parsing step can be disabled with the
    -disableCppParsing option.

    If C++ parsing is enabled, qt3to4 must be able to locate the headers included
    from the source files. Necessary headers include the public Qt headers and 
    any headers that declares names that may conflict with names in the public
    Qt headers. The standard C++ headers and system headers are usually not needed.
    
    You can tell qt3to4 where to look for headers by using the \c{-I} command
    line option. Qt 3.3 header information is built in, so it is normaly not
    neccesary to specify the location of the Qt headers. If you are porting
    from a different version of Qt 3, you may want to disable the built-in
    headers with \c{-disableBuiltInQt3Headers}, and then add the path to the
    actual headers with the \c{-I} option.
    
    When porting a project, qt3to4 will read the INCLUDEPATH and DEPENDPATH
    variables from the .pro file and add the paths specified here to the list
    of include search directories.
    
    To see which headers that are not found, use the \c{-missingFileWarnings}
    option.
*/
