/*!
    \page emb-qvfb.html

    \contentspage {Qtopia Core}{Contents}
    \previouspage The Linux Framebuffer
    \nextpage Running as a VNC Server

    \title The Virtual Framebuffer
    \ingroup qtopia-core

    The virtual framebuffer allows Qtopia Core programs to be developed on
    a desktop machine, without switching between consoles and X11.

    The virtual framebuffer is located in \c $QTDIR/tools/qvfb.

    \section1 Using the Virtual Framebuffer

    \list 1
    \i Configure Qtopia Core with the \c -qvfb argument and compile the library:
        \code
        ./configure -qvfb
        make
        \endcode
    \i Compile \c qvfb as a normal Qt/X11 application and run it. Do \e not
        compile it as a Qtopia Core application.
    \i Start a Qtopia Core master application (i.e., construct
        QApplication with the QApplication::GuiServer flag or use the \c
        -qws command line parameter). You can tell the server that
        you want to use the virtual framebuffer driver, e.g.:
        \code
        masterapp -qws -display QVFb:0
        \endcode
    \i Qtopia Core will autodetect \c qvfb, so you can omit the \c -display
       command line parameter if you know that \c qvfb is running, and that
       the Qtopia Core library supports \c qvfb. (If this is not the case,
       Qtopia Core will write to the real framebuffer, and your X11
       display will be corrupted.)

    \endlist

    \c qvfb supports the following command line options:

    \table
    \header \i Option \i Meaning
    \row
    \i \c -width \e width
    \i the width of the virtual framebuffer (default: 240).
    \row
    \i \c -height \e height
    \i the height of the virtual framebuffer (default: 320).
    \row
    \i \c -depth \e depth
    \i the depth of the virtual framebuffer (1, 8 or 32; default: 8).
    \row
    \i \c -nocursor
    \i do not display the X11 cursor in the framebuffer window.
    \row
    \i \c -qwsdisplay \e :id
    \i the Qtopia Core display ID to provide (default: :0).
    \endtable

    \section1 Virtual Framebuffer Design

    The virtual framebuffer emulates a framebuffer using a shared memory region
    (the virtual frame buffer) and a utility to display the framebuffer in a
    window (\c qvfb). The regions of the display that have changed are updated
    periodically, so you will see discrete snapshots of the framebuffer rather
    than each individual drawing operation. For this reason drawing problems
    such as flickering may not be apparent until the program is run using a real
    framebuffer.

    The target refresh rate can be set via the \bold{View|Refresh Rate}
    menu item. This will cause \c qvfb to check for updated regions more
    frequently. The rate is a target only. If little drawing is being
    done, the framebuffer will not show any updates between drawing
    events. If an application is displaying an animation, the updates will
    be frequent, and the application and \c qvfb will compete for
    processor time.

    Mouse and keyboard events are passed to the Qtopia Core master process via
    named pipes.

    \warning The virtual framebuffer is a development tool only. No
    security issues have been considered in the virtual framebuffer
    design. It should be avoided in a production environment; do not
    configure production libraries with \c -qvfb.
*/
