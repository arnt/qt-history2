/*!
    \page qtopiacore-qvfb.html

    \contentspage {Qtopia Core}{Contents}

    \title The Virtual Framebuffer

    \l {Qtopia Core} applications write directly to the framebuffer,
    eliminating the need for the X Window System and saving
    memory. For development and debugging purposes, the \l {Qtopia
    Core} platform provides a virtual framebuffer allowing \l {Qtopia
    Core} programs to be developed on a desktop machine, without
    switching between consoles and X11.

    \image qtopiacore-virtualframebuffer.png

    The virtual framebuffer emulates a framebuffer using a shared
    memory region and the \c qvfb tool to display the framebuffer in
    a window. The \c qvfb tool is located in Qt's \c /tools/qvfb
    directory, and provides several features accessible through its
    \gui File and \gui View menus.

    Please note that the virtual framebuffer is a development tool
    only. No security issues have been considered in the virtual
    framebuffer design. It should be avoided in a production
    environment, i.e. do not configure production libraries with the
    \c -qvfb option.

    \tableofcontents

    \section1 Displaying the Virtual Framebuffer

    To run the \c qvfb tool displaying the virtual framebuffer, the
    Qtopia Core library must be configured and compiled with the \c
    -qvfb option:

    \code
         cd path/to/Qtopia/Core
         ./configure -qvfb
         make
    \endcode

    Then compile and run the \c qvfb tool as a normal Qt/X11
    application (i.e. do \e not compile it as a \l {Qtopia Core}
    application):

    \code
        cd path/to/Qt/tools/qvfb
        make
        ./qvfb
    \endcode

    The \c qvfb application supports the following command line
    options:

    \table
    \header \o Option \o Description
    \row
    \o \c {-width <width>}
    \o The width of the virtual framebuffer (default: 240).
    \row
    \o \c {-height <height>}
    \o The height of the virtual framebuffer (default: 320).
    \row
    \o \c {-depth <depth>}
    \o The depth of the virtual framebuffer (1, 8 or 32; default: 8).
    \row
    \o \c -nocursor
    \o Do not display the X11 cursor in the framebuffer window.
    \row
    \o \c {-qwsdisplay <:id>}
    \o The \l {Qtopia Core} display ID (default: :0).
    \endtable

    \section1 Running Applications Using the Virtual Framebuffer

    Once the virtual framebuffer (the \c qvfb application) is running,
    it is ready for use: Start a Qtopia Core master application
    (i.e. construct a QApplication object with the
    QApplication::GuiServer flag or use the \c -qws command line
    parameter. See the \l {Running Applications} documentation for
    details). For example:

    \code
        cd path/to/Qtopia/Core/examples/widgets/analogclock
        make
        ./analogclock -qws
    \endcode

    Note that as long as the virtual framebuffer is running and the
    Qtopia Core library supports \c qvfb, Qtopia Core will
    automatically detect it and use it by default. Alternatively, the
    \c -display option can be used to specify the virtual framebuffer
    driver. For example:

    \code
        cd path/to/Qtopia/Core/examples/widgets/analogclock
        make
        ./analogclock -qws -display QVFb:0
    \endcode

    \warning If \c qvfb is not running (or the current Qtopia Core
    library doesn't support it) and the driver is not explicitly
    specified, Qtopia Core will write to the real framebuffer and the
    X11 display will be corrupted.

    \section1 The File Menu

    \image qtopiacore-qvfbfilemenu.png

    The \gui File menu allows the user to configure the virtual
    framebuffer display (\gui File|Configure...), save a snapshot of
    the framebuffer contents (\gui {File|Save Image...}) and record
    the movements in the framebuffer (\gui File|Animation...).

    When choosing the \gui File|Configure menu item, the \c qvfb tool
    provides a configuration dialog allowing the user to customize the
    display of the virtual framebuffer. The user can modify the size
    and depth as weel as the Gamma values, and also select the
    preferred skin (i.e. making the virtual framebuffer simulate the
    target device environment). In addition, it is possible to emulate
    a touch screen and a LCD screen.

    \table 100%
    \row
        \o
        \bold {Target Device Environment}

        The \c qvfb tool provides various skins for the virtual
        framebuffer allowing the user to view their application in an
        environment similar to their target device. The provided skins
        are:

        \list
            \o ClamshellPhone
            \o pda
            \o PDAPhone
            \o QtopiaPDA
            \o QtopiaPhone-Advanced
            \o QtopiaPhone-Simple
            \o SmartPhone
            \o SmartPhone2
            \o SmartPhoneWithButtons
            \o TouchscreenPhone
            \o Trolltech-Keypad
            \o Trolltech-Touchscreen
        \endlist

        \o \image qtopiacore-phone.png
        \o \image qtopiacore-pda.png
    \endtable

    Note that when configuring (except when changing the Gamma values
    only), any applications using the virtual framebuffer will be
    terminated.

    \section1 The View Menu

    \image qtopiacore-qvfbviewmenu.png

    The \gui View menu allows the user to modify the target's refresh
    rate (\gui {View|Refresh Rate...}), making \c qvfb check for
    updated regions more or less frequently.

    The regions of the display that have changed are updated
    periodically, i.e. the virtual framebuffer is displaying discrete
    snapshots of the framebuffer rather than each individual drawing
    operation. For this reason drawing problems such as flickering may
    not be apparent until the program is run using a real framebuffer.
    If little drawing is being done, the framebuffer will not show any
    updates between drawing events. If an application is displaying an
    animation, the updates will be frequent, and the application and
    \c qvfb will compete for processor time.

    The \gui View menu also allows the user to zoom the view of the
    application  (\gui {View|Zoom *}).
*/
