/*!
    \page qtopiacore-qvfb.html

    \contentspage {Qtopia Core}{Contents}

    \title The Virtual Framebuffer

    \l {Qtopia Core} applications write directly to the framebuffer,
    eliminating the need for the X Window System and saving
    memory. For development and debugging purposes, the \l {Qtopia
    Core} platform provides a virtual framebuffer allowing \l {Qtopia
    Core} programs to be developed on a desktop machine, without
    switching between consoles and X11.

    \image qtopiacore-virtualframebuffer.png

    The virtual framebuffer emulates a framebuffer using a shared
    memory region and the \c qvfb tool to display the framebuffer in a
    window. The \c qvfb tool also supports a feature known as a skin
    which can be used to change the look and feel of the display. The
    tool is located in Qt's \c /tools/qvfb directory, and provides
    several additional features accessible through its \gui File and
    \gui View menus.

    Please note that the virtual framebuffer is a development tool
    only. No security issues have been considered in the virtual
    framebuffer design. It should be avoided in a production
    environment, i.e. do not configure production libraries with the
    \c -qvfb option.

    \tableofcontents

    \section1 Displaying the Virtual Framebuffer

    To run the \c qvfb tool displaying the virtual framebuffer, the
    Qtopia Core library must be configured and compiled with the \c
    -qvfb option:

    \code
         cd path/to/Qtopia/Core
         ./configure -qvfb
         make
    \endcode

    Then compile and run the \c qvfb tool as a normal Qt/X11
    application (i.e. do \e not compile it as a \l {Qtopia Core}
    application):

    \code
        cd path/to/Qt/tools/qvfb
        make
        ./qvfb
    \endcode

    The \c qvfb application supports the following command line
    options:

    \table
    \header \o Option \o Description
    \row
    \o \c {-width <width>}
    \o The width of the virtual framebuffer (default: 240).
    \row
    \o \c {-height <height>}
    \o The height of the virtual framebuffer (default: 320).
    \row
    \o \c {-depth <depth>}
    \o The depth of the virtual framebuffer (1, 8 or 32; default: 8).
    \row
    \o \c -nocursor
    \o Do not display the X11 cursor in the framebuffer window.
    \row
    \o \c {-qwsdisplay <:id>}
    \o The \l {Qtopia Core} display ID (default: :0).
    \row
    \o \c {-skin <name>.skin}
    \o The preferred skin which must be located in Qt's \c /tools/qvfb/ directory.
    \row
    \o \c {-zoom <factor>}
    \o Scales the application view with the given factor.

    \endtable

    \section2 Skins

    A skin is a set of XML and pixmap files that tell the vitual
    framebuffer how it should look and how it should behave; a skin
    can change the unrealistic display into a display that is
    identical to the device being devolped. Note that a skin can have
    buttons which, when clicked, send signals to the Qtopia
    application running inside the virtual framebuffer, just as would
    happen on a real device.

    \table 100%
    \row
        \o
        \bold {Target Device Environment}

        The \c qvfb tool provides various skins by default, allowing
        the user to view their application in an environment similar
        to their target device. The provided skins are:

        \list
            \o ClamshellPhone
            \o pda
            \o PDAPhone
            \o QtopiaPDA
            \o QtopiaPhone-Advanced
            \o QtopiaPhone-Simple
            \o SmartPhone
            \o SmartPhone2
            \o SmartPhoneWithButtons
            \o TouchscreenPhone
            \o Trolltech-Keypad
            \o Trolltech-Touchscreen
        \endlist

        In addition it is possible to create custom skins.

        \o \image qtopiacore-phone.png
        \o \image qtopiacore-pda.png
    \endtable

    \bold {Creating Custom Skins}

    The XML and pixmap files specifying a custom skin must be located
    in a corresponding subdirectory of the Qt's \c /tools/qvfb
    directory. See the SmartPhone skin for an example of the file
    structure:

    \code
        cd path/to/Qt/tools/qvfb/SmartPhone.skin/
    \endcode

    The \c SmartPhone.skin directory contains the following files:

    \list
        \o SmartPhone.skin
        \o defaultbuttons.conf
        \o SmartPhone.png
        \o SmartPhone-pressed.png
    \endlist

    \table 100%
    \header
    \o {2,1} The SmartPhone Skin
    \row
    \o
    \image qtopiacore-smartphone.png The SmartPhone Skin
    \o {1,3}
    \code
        [SkinFile]
        Up=SmartPhone.png
        Down=SmartPhone-pressed.png
        Screen=90 107 176 208
        Areas=26

        "1"        0x0031 138 459 149 473 142 483 120 ...
        "2"        0x0032 153 467 202 492
        "3"        0x0033 258 457 260 470 243 483 215 ...
        "4"        0x0034 138 492 149 506 142 516 120 ...
        "5"        0x0035 153 499 202 524
        "6"        0x0036 258 489 260 502 243 515 215 ...
        "7"        0x0037 138 524 149 538 142 548 120 ...
        "8"        0x0038 153 531 202 556
        "9"        0x0039 258 521 260 534 243 547 215 ...
        "*"        0x002a 138 556 149 570 142 580 120 ...
        "0"        0x0030 153 564 202 589
        "#"        0x0023 258 554 260 567 243 580 215 ...
        "Call"     0x01100004  88 395 130 439
        "Hangup"   0x01100005 227 395 269 439
        "Context1" 0x01100000 145 321 134 333 132 ...
        "Back"     0x01000061 249 322 240 354 219 373 ...
        "Select"   0x01010000 160 338 195 371
        "Left"     0x1000012 159 338 149 328 141 336 ...
        "Down"     0x1000015 160 373 150 382 159 391 ...
        "Right"    0x1000014 195 336 206 323 215 338 ...
        "Up"       0x1000013 160 336 149 326 158 319  ...
    \endcode
    \row
    \o \c SmartPhone.png
    \row
    \o
    \image qtopiacore-smartphonepressed.png The SmartPhone Skin
    \row
    \o \c SmartPhone-pressed.png
    \o \c SmartPhone.skin
    \endtable

    The \c SmartPhone.skin file specifies two pixmaps: One for the
    normal skin (\c Up) and one for the activated skin (\c Down). It
    also specifies the screen size (\c Screen) and the number of
    available buttons (\c Areas) followed by a description of the
    buttons themselves. Each button is specified by its name, keycode
    and coordinates. The coordinates are a list of at least 2 points
    in clockwise order that define a shape for the button; a click
    inside this shape will be treated as a click on that button. While
    pressed, the pixels for the button are redrawn from the activated
    skin.

    The \c defaultbuttons.conf file customizes the launch screen
    applications, orders the soft keys and provides input method
    hints.

    \section2 The File Menu

    \image qtopiacore-qvfbfilemenu.png

    The \gui File menu allows the user to configure the virtual
    framebuffer display (\gui File|Configure...), save a snapshot of
    the framebuffer contents (\gui {File|Save Image...}) and record
    the movements in the framebuffer (\gui File|Animation...).

    When choosing the \gui File|Configure menu item, the \c qvfb tool
    provides a configuration dialog allowing the user to customize the
    display of the virtual framebuffer. The user can modify the size
    and depth as weel as the Gamma values, and also select the
    preferred skin (i.e. making the virtual framebuffer simulate the
    target device environment). In addition, it is possible to emulate
    a touch screen and a LCD screen.

    Note that when configuring (except when changing the Gamma values
    only), any applications using the virtual framebuffer will be
    terminated.

    \section2 The View Menu

    \image qtopiacore-qvfbviewmenu.png

    The \gui View menu allows the user to modify the target's refresh
    rate (\gui {View|Refresh Rate...}), making \c qvfb check for
    updated regions more or less frequently.

    The regions of the display that have changed are updated
    periodically, i.e. the virtual framebuffer is displaying discrete
    snapshots of the framebuffer rather than each individual drawing
    operation. For this reason drawing problems such as flickering may
    not be apparent until the program is run using a real framebuffer.
    If little drawing is being done, the framebuffer will not show any
    updates between drawing events. If an application is displaying an
    animation, the updates will be frequent, and the application and
    \c qvfb will compete for processor time.

    The \gui View menu also allows the user to zoom the view of the
    application  (\gui {View|Zoom *}).

    \section1 Running Applications Using the Virtual Framebuffer

    Once the virtual framebuffer (the \c qvfb application) is running,
    it is ready for use: Start a Qtopia Core master application
    (i.e. construct a QApplication object with the
    QApplication::GuiServer flag or use the \c -qws command line
    parameter. See the \l {Running Applications} documentation for
    details). For example:

    \code
        cd path/to/Qtopia/Core/examples/widgets/analogclock
        make
        ./analogclock -qws
    \endcode

    Note that as long as the virtual framebuffer is running and the
    Qtopia Core library supports \c qvfb, Qtopia Core will
    automatically detect it and use it by default. Alternatively, the
    \c -display option can be used to specify the virtual framebuffer
    driver. For example:

    \code
        cd path/to/Qtopia/Core/examples/widgets/analogclock
        make
        ./analogclock -qws -display QVFb:0
    \endcode

    \warning If \c qvfb is not running (or the current Qtopia Core
    library doesn't support it) and the driver is not explicitly
    specified, Qtopia Core will write to the real framebuffer and the
    X11 display will be corrupted.
*/
