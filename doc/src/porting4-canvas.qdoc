/*!
    \page graphicsview-porting.html
    \title Porting to Graphics View
    \ingroup architecture
    \ingroup multimedia

    \keyword QGraphicsView GraphicsView Porting Graphics Canvas
    \since 4.2

    Graphics View provides a surface for managing and interacting with a large
    number of custom-made 2D graphical items, and a view widget for
    visualizing the items, with support for zooming and rotation. Graphics
    View was introduced in Qt 4.2, replacing its predecessor, QCanvas. For
    more on Graphics View, see \l{The Graphics View Framework}.

    This document walks through the steps needed, class by class and function
    by function, to port a QCanvas application to Graphics View.

    \tableofcontents

    Qt 4.2 provides two complete examples of Q3Canvas applications ported to
    Graphics View:

    \list
    \o \l{Ported Canvas Example}, the canvas example from Qt 3.
    \o \l{Ported Asteroids Example}, the Asteroids game from the Qt 3 demo.
    \endlist

    \section1 Introduction

        Conceptually, the Graphics View classes from Qt 4 and the Canvas
        classes from Qt 3 provide similar functionality using a similar
        design. Instead of "canvas", we use the term "scene". Otherwise, the
        class names and functions are almost the same as in Qt 3. The easiest
        classes to port will be QCanvas and QCanvasView. Experience shows that
        most time is spent porting the item classes, depending on the
        complexity of the QCanvasItem classes you have been using before.

        This porting guide will assume you have already ported your
        application to Qt 4, by making use of Q3Canvas. If you have not done
        so already, as a first step, run the \l qt3to4 tool on your
        project. This tool will automate the most tedious part of the porting
        effort.

        Some additional steps are usually required before your application
        will compile and run. You can read more about the porting process in
        \l{Porting to Qt 4}.

    \section1 Porting from Q3Canvas

        QGraphicsScene is the equivalent of Q3Canvas. There are some noticable
        differences in this new API: Whereas the Q3Canvas classes use integer
        precision, QGraphicsScene is entirely based on double coordinates,
        with graphical primitives such as QPointF instead of QPoint, QRectF
        instead of QRect, and QPolygonF and QPainterPath.

        In addition, there is no explicit support for canvas tiles anymore,
        and the chunks system has been replaced with an implicitly maintained
        internal BSP tree.

        \table
        \header \o Q3Canvas \o QGraphicsScene

        \row \o Q3Canvas::Q3Canvas() \o There is no QPixmap based constructor,
           and the concept of tiles is gone. You can use
           QGraphicsScene::backgroundBrush to set a brush pattern for the
           background, or reimplement QGraphicsScene::drawBackground() in a
           QGraphicsScene subclass. In addition, the QGraphicsScene geometry
           is provided as a full QRectF. Instead of Q3Canvas(int width, int
           height), you can use QGraphicsScene(int top, int left, int width,
           int height).

        \row \o Q3Canvas::allItems() \o QGraphicsScene::items()

        \row \o Q3Canvas::backgroundColor() \o QGraphicsScene::backgroundBrush
        or QGraphicsView::backgroundBrush

        \row \o Q3Canvas::backgroundPixmap() \o
        QGraphicsScene::backgroundBrush or QGraphicsView::backgroundBrush

        \row \o Q3Canvas::chunkSize() \o See QGraphicsScene::itemIndexMethod.

        \row \o Q3Canvas::collisions() \o QGraphicsScene::items()

        \row \o Q3Canvas::drawArea() \o QGraphicsScene::render()

        \row \o Q3Canvas::onCanvas() \o QGraphicsScene::sceneRect() and
        QRectF::contains().

        \row \o Q3Canvas::rect() \o QGraphicsScene::sceneRect()

        \row \o Q3Canvas::resize() \o QGraphicsScene::setSceneRect()

        \row \o Q3Canvas::retune() \o See QGraphicsScene::itemIndexMethod.

        \row \o Q3Canvas::setAdvancePeriod() \o There is no concept of an
        advance period in the new API; instead, you can connect
        QTimer::timeout() to the QGraphicsScene::advance() slot to obtain
        similar functionality.

        \row \o Q3Canvas::setAllChanged() \o QGraphicsScene::update() with no arguments.

        \row \o Q3Canvas::setChanged() \o QGraphicsScene::update()

        \row \o Q3Canvas::setDoubleBuffering() \o Double buffering is
        implicitly enabled in all widget in Qt 4. See Qt::WA_PaintOnScreen for
        how to disable double buffering.

        \row \o Q3Canvas::tile() \o No equivalent. You can use
        QGraphicsScene::backgroundBrush() or QGraphicsScene::drawBackground() instead.

        \row \o Q3Canvas::setTiles() \o No equivalent. You can use
        QGraphicsScene::backgroundBrush() or QGraphicsScene::drawBackground()
        instead.

        \row \o Q3Canvas::setUnchanged() \o No equivalent. This call can
        usually be removed with no side effects.

        \row \o Q3Canvas::setUpdatePeriod() \o There is no concept of an
        update period in the new API; instead, you can connect
        QTimer::timeout() to the QGraphicsScene::update() slot to obtain
        similar functionality.

        \row \o Q3Canvas::size() \o QGraphicsScene::sceneRect() and
        QRectF::size().

        \row \o Q3Canvas::validChunk() \o QGraphicsScene::sceneRect() and
        QRectF::contains().

        \row \o Q3Canvas::resized() \o QGraphicsScene::sceneRectChanged()

        \row \o Q3Canvas::drawForeground() \o QGraphicsScene::drawForeground()
        or QGraphicsView::drawForeground().

        \row \o Q3Canvas::drawBackground() \o QGraphicsScene::drawBackground()
        or QGraphicsView::drawBackground().

        \endtable

    \section1 Porting from Q3CanvasView

        The equivalent of Q3CanvasView in Graphics View is called
        QGraphicsView.  In most cases, this is the easiest class to port. In
        addition to providing all of Q3CanvasView's functionality,
        QGraphicsView provides new functionality. You can read more about this
        in QGraphicsView's documentation.

        \table
        \header \o Q3CanvasView \o QGraphicsView

        \row \o Q3CanvasView::Q3CanvasView() \o QGraphicsView provides the
        same constructors as Q3CanvasView, but without the name and flags
        arguments.

        \row \o Q3CanvasView::canvas() \o QGraphicsView::scene()

        \row \o Q3CanvasView::inverseWorldMatrix() \o QGraphicsView::matrix()
        and QMatrix::inverted(). See also QGraphicsView::mapToScene() and
        QGraphicsView::mapFromScene().

        \row \o Q3CanvasView::setCanvas() \o QGraphicsView::setScene()

        \row \o Q3CanvasView::setWorldMatrix() \o QGraphicsView::setMatrix(),
        QGraphicsView::rotate(), QGraphicsView::scale(), and more.

        \row \o Q3CanvasView::worldMatrix() \o QGraphicsView::matrix()

        \row \o Q3CanvasView::drawContents() \o QGraphicsView::render()

        \endtable

    \section1 Porting from Q3CanvasItem

        The equivalent of Q3CanvasItem in Graphics View is called
        QGraphicsItem. Deriving from this class is very common, and because of
        that, porting from Q3CanvasItem often involves more work than Q3Canvas
        and Q3CanvasView.

        Q3CanvasItem has become easier to use, easier to subclass, and more
        powerful with QGraphicsItem. The key difference from Q3CanvasItem lies
        in event propagation and item groups, but you will also find several
        convenient new features, such as support for tooltips, cursors, item
        transformation and drag and drop. You can read all about QGraphicsItem
        in its own class documentation.

        This section starts with a table that shows how to port each function
        from Q3CanvasItem to QGraphicsItem. Immediately after that, each of
        Q3CanvasItem's standard subclasses have a section of their own.

        \table
        \header \o Q3CanvasItem \o QGraphicsItem

        \row \o Q3CanvasItem::advance() \o QGraphicsItem::advance(). See also
        QTimeLine and QGraphicsItemAnimation.

        \row \o Q3CanvasItem::animated() \o No equivalent; All items are
        advanced by QGraphicsScene::advance().

        \row \o Q3CanvasItem::boundingRectAdvanced() \o No equivalent. You can
        translate QGraphicsItem::boundingRect() instead (see
        QRectF::translate()).

        \row \o Q3CanvasItem::canvas() \o QGraphicsItem::scene()

        \row \o Q3CanvasItem::collidesWith() \o
        QGraphicsItem::collidesWithItem() and
        QGraphicsItem::collidesWithPath().

        \row \o Q3CanvasItem::collisions() \o QGraphicsItem::collidingItems()

        \row \o Q3CanvasItem::draw() \o QGraphicsItem::paint(). See also
        QStyleOptionGraphicsItem.

        \row \o Q3CanvasItem::hide() \o QGraphicsItem::hide() or
        QGraphicsItem::setVisible(). \l{QGraphicsItem}s are \e visible by
        default; \l{Q3CanvasItem}s, however, are not.

        \row \o Q3CanvasItem::isActive() \o No equivalent.

        \row \o Q3CanvasItem::isVisible() \o
        QGraphicsItem::isVisible(). \l{QGraphicsItem}s are \e visible by
        default; \l{Q3CanvasItem}s, however, are not.

        \row \o Q3CanvasItem::move() \o QGraphicsItem::setPos().
        \row \o Q3CanvasItem::rtti() \o QGraphicsItem::type() and qgraphicsitem_cast().
        \row \o Q3CanvasItem::setActive() \o No equivalent.
        \row \o Q3CanvasItem::setAnimated() \o No equivalent.
        \row \o Q3CanvasItem::setCanvas() \o QGraphicsScene::addItem().

        \row \o Q3CanvasItem::setVelocity() \o No equivalent. You can add x
        and y velocity as member data of your class, and call
        QGraphicsItem::moveBy(x, y) from inside QGraphicsItem::advance(). See
        also QTimeLine and QGraphicsItemAnimation.

        \row \o Q3CanvasItem::setVisible() \o
        QGraphicsItem::setVisible(). \l{QGraphicsItem}s are \e visible by
        default; \l{Q3CanvasItem}s, however, are not.

        \row \o Q3CanvasItem::setX() \o QGraphicsItem::setPos()
        \row \o Q3CanvasItem::setY() \o QGraphicsItem::setPos()

        \row \o Q3CanvasItem::setXVelocity() \o No equivalent.
        \row \o Q3CanvasItem::setYVelocity() \o No equivalent.

        \row \o Q3CanvasItem::setZ() \o QGraphicsItem::setZValue()

        \row \o Q3CanvasItem::show() \o QGraphicsItem::show() or
        QGraphicsItem::setVisible(). \l{QGraphicsItem}s are \e visible by
        default; \l{Q3CanvasItem}s, however, are not.

        \row \o Q3CanvasItem::xVelocity() \o No equivalent.
        \row \o Q3CanvasItem::yVelocity() \o No equivalent.

        \endtable

        \section2 Q3CanvasPolygonalItem

            The equivalent of Q3CanvasPolygonalItem in Graphics View is called
            QAbstractGraphicsShapeItem. Unlike Q3CanvasPolygonalItem, it does
            not define area points (Q3CanvasPolygonalItem::areaPoints());
            instead, each item's geometry is stored in the subclasses.

            The Q3CanvasPolygonalItem::drawShape() function is no longer
            available; instead, you can set the brush and pen from inside
            QGraphicsItem::paint().

            \table
            \header \o Q3CanvasPolygonalItem \o QAbstractGraphicsShapeItem

            \row \o Q3CanvasPolygonalItem::areaPoints() \o No equivalent; each
            item's geometry is stored in the respective subclass.

            \row \o Q3CanvasPolygonalItem::areaPointsAdvanced() \o No
            equivalent; you can use QPolygonF::translate() or
            QPainterPath::translate() instead.

            \row \o Q3CanvasPolygonalItem::drawShape() \o
            QGraphicsItem::paint(). You can set the pen and brush from inside
            this function.

            \row \o Q3CanvasPolygonalItem::invalidate() \o
            QGraphicsItem::prepareGeometryChange()

            \row \o Q3CanvasPolygonalItem::isValid() \o No equivalent; items'
            geometry is always in a valid state.

            \row \o Q3CanvasPolygonalItem::winding() \o This function is only
            useful for polygon items and path items; see
            QGraphicsPolygonItem::fillRule(), and QPainterPath::fillRule() for
            QGraphicsPathItem.

            \endtable

        \section2 Q3CanvasEllipse

            The equivalent of Q3CanvasEllipse in Graphics View is called
            QGraphicsEllipseItem. The most noticable difference to
            QGraphicsEllipseItem is that the ellipse is not longer drawn
            centered around its position; rather, it is drawn using a bounding
            QRectF, just like QPainter::drawEllipse().

            For compatibility, you may want to shift the ellipse up and to the
            left to keep the ellipse centered. Example:

            \code
                // Before
                Q3CanvasEllipse ellipse(10, 10);

                // After
                QGraphicsEllipseItem ellipse(-5, -5, 10, 10);
            \endcode

            Note: QGraphicsEllipseItem uses QAbstractGraphicsShapeItem::pen()
            for outlines, whereas Q3CanvasEllipse did not use
            Q3CanvasPolygonalItem::pen().

            \table
            \header \o Q3CanvasEllipse \o QGraphicsEllipseItem

            \row \o Q3CanvasEllipse::angleLength() \o QGraphicsEllipseItem::spanAngle()

            \row \o Q3CanvasEllipse::angleStart() \o QGraphicsEllipseItem::startAngle()

            \row \o Q3CanvasEllipse::setAngles() \o
            QGraphicsEllipseItem::setStartAngle() and
            QGraphicsEllipseItem::setSpanAngle()

            \row \o Q3CanvasEllipse::setSize() \o QGraphicsEllipseItem::setRect()

            \endtable

            \section2 Q3CanvasLine

            The equivalent of Q3CanvasLine in Graphics View is called
            QGraphicsLineItem.

            \table
            \header \o Q3CanvasLine \o QGraphicsLineItem

            \row \o Q3CanvasLine::endPoint() \o QGraphicsLineItem::line() and QLineF::p2()

            \row \o Q3CanvasLine::setPoints() \o QGraphicsLineItem::setLine()

            \row \o Q3CanvasLine::startPoint() \o QGraphicsLineItem::line()
            and QLineF::p1()

            \endtable

        \section2 Q3CanvasPolygon

            The equivalent of Q3CanvasPolygon in Graphics View is called
            QGraphicsPolygonItem.

            \table
            \header \o Q3CanvasPolygon \o QGraphicsPolygonItem

            \row \o Q3CanvasPolygon::areaPoints() \o
            QGraphicsPolygonItem::polygon() and QGraphicsItem::mapToParent()

            \row \o Q3CanvasPolygon::points() \o QGraphicsPolygonItem::polygon()

            \row \o Q3CanvasPolygon::setPoints() \o QGraphicsPolygonItem::setPolygon()

            \endtable

        \section2 Q3CanvasSpline

            The equivalent of Q3CanvasSpline in Graphics View is called
            QGraphicsPathItem. This item can be used to describe any type of
            path supported by QPainter.

            Q3CanvasSpline takes its control points as a Q3PointArray, but
            QPainterPath operates on a sequence of calls to
            QPainterPath::moveTo() and QPainterPath::cubicTo(). Here is how
            you can convert a bezier curve Q3PointArray to a QPainterPath:

            \code
            static QPainterPath fromControlPoints(const Q3PointArray &pa)
            {
                QPainterPath path;
                path.moveTo(pa[0]);
                for (int i = 1; i < pa.size(); i += 3)
                    path.cubicTo(pa[i], pa[(i + 1) % pa.size()], pa[(i + 2) % pa.size()]);
                return path;
            }
            \endcode

            Note: QGraphicsPathItem uses QAbstractGraphicsShapeItem::pen() for
            outlines, whereas Q3CanvasSpline did not use
            Q3CanvasPolygonalItem::pen().

            \table
            \header \o Q3CanvasSpline \o QGraphicsPathItem

            \row \o Q3CanvasSpline::closed() \o No equivalent. You can call
            QPainterPath::closeSubPath() to close a subpath explicitly.

            \endtable

        \section2 Q3CanvasRectangle

            The equivalent of Q3CanvasRectangle in Graphics View is called
            QGraphicsRectItem.

            \table
            \header \o Q3CanvasRectangle \o QGraphicsRectItem

            \row \o Q3CanvasRectangle::height() \o QGraphicsRectItem::rect()
            and QRectF::height()

            \row \o Q3CanvasRectangle::setSize() \o QGraphicsRectItem::setRect()

            \row \o Q3CanvasRectangle::size() \o QGraphicsRectItem::rect() and QRectF::size()

            \row \o Q3CanvasRectangle::width() \o QGraphicsRectItem::rect() and QRectF::width()

            \row \o Q3CanvasRectangle::chunks() \o No equivalent.

            \endtable

        \section2 Q3CanvasSprite

            Q3CanvasSprite is the item class that differs the most from its
            Q3Canvas predecessor. The closest resemblance of Q3CanvasSprite in
            Graphics View is QGraphicsPixmapItem.

            Q3CanvasSprite supports animated pixmaps; QGraphicsPixmapItem,
            however, is a simple single-frame pixmap item. If all you need is
            a pixmap item, porting is straight-forward. If you do need the
            animation support, extra work is required; there is no direct
            porting approach.

            For the \l{Ported Asteroids Example}, a subclass of
            QGraphicsPixmapItem is used to replace Q3CanvasSprite, storing a
            list of pixmaps and a frame counter. The animation is advanced in
            QGraphicsItem::advance().

            \section3 Q3CanvasPixmap, Q3CanvasPixmapArray

                These classes have been removed from the API. You can use
                QPixmap instead of Q3CanvasPixmap, and QList instead of
                Q3CanvasPixmapArray.

                Q3CanvasPixmapArray included convenience for loading a
                sequence of pixmaps or masks using a path with a wildcard (see
                Q3CanvasPixmapArray::readPixmaps() and
                Q3CanvasPixmapArray::readCollisionMasks()). To achieve similar
                functionality using Graphics View, you can load the images by
                using QDir:

                \code
                    wildcardPath.replace("%1", "*");
                    QFileInfo fi(wildcardPath);

                    QList<QPixmap> frames;
                    foreach (QString entry, QDir(fi.path(), fi.fileName()).entryList())
                        frames << QPixmap(fi.path() + "/" + entry);
                \endcode

        \section2 Q3CanvasText

            Q3CanvasText has been split into two classes in Graphics View:
            QGraphicsSimpleTextItem and QGraphicsTextItem. For porting,
            QGraphicsSimpleTextItem should be adequate. QGraphicsTextItem
            provides advanced document structuring features similar to that of
            QTextEdit, and it also allows interaction (e.g., editing and
            selection).

            \table
            \header \o Q3CanvasText \o QGraphicsSimpleTextItem

            \row \o Q3CanvasText::color() \o QGraphicsSimpleTextItem::pen().

            \row \o Q3CanvasText::setColor() \o QGraphicsSimpleTextItem::setPen().

            \row \o Q3CanvasText::textFlags() \o Use QGraphicsTextItem instead.

            \endtable


        \section2 Q3CanvasItemList

            Use QList instead.

*/
