/****************************************************************************
**
** Explanation of moc and the meta-object system.
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*! \page signalsandslots.html

    \title Signals and Slots

    Signals and slots are used for communication between objects. The
    signals and slots mechanism is a central feature of Qt and
    probably the part that differs most from other toolkits.

    In GUI programming, we often want a change in one widget to be
    notified to another widget. More generally, we want objects of
    any kind to be able to communicate with one another. For example,
    if a user clicks a \menu{Close} button, we probably want the
    window's \l{QWidget::close()}{close()} function to be called.

    Older toolkits achieve this kind of communication using
    callbacks. A callback is a pointer to a function, so if you want
    a processing function to notify you about some event you pass a
    pointer to another function (the callback) to the processing
    function. The processing function then calls the callback when
    appropriate. Callbacks have two fundamental flaws. Firstly, they
    are not type-safe. We can never be certain that the processing
    function will call the callback with the correct arguments.
    Secondly, the callback is strongly coupled to the processing
    function since the processing function must know which callback
    to call.

    \img abstract-connections.png
    \caption An abstract view of some signals and slots connections

    In Qt, we have an alternative to the callback technique. We use
    signals and slots. A signal is emitted when a particular event
    occurs. Qt's widgets have many pre-defined signals, but we can
    always subclass to add our own. A slot is a function that is
    called in reponse to a particular signal. Qt's widgets have many
    pre-defined slots, but it is common practice to add your own
    slots so that you can handle the signals that you are interested
    in. 

    The signals and slots mechanism is type safe: The signature of a
    signal must match the signature of the receiving slot. (In fact a
    slot may have a shorter signature than the signal it receives
    because it can ignore extra arguments.) Since the signatures are
    compatible, the compiler can help us detect type mismatches.
    Signals and slots are loosely coupled: a class which emits a
    signal neither knows nor cares which slots receive the signal.
    Qt's signals and slots mechanism ensures that if you connect a
    signal to a slot, the slot will be called with the signal's
    parameters at the right time. Signals and slots can take any
    number of arguments of any type. They are completely typesafe: no
    more callback core dumps!

    All classes that inherit from QObject or one of its subclasses
    (e.g., QWidget) can contain signals and slots. Signals are emitted by
    objects when they change their state in a way that may be interesting
    to the outside world. This is all the object does to communicate. It
    does not know or care whether anything is receiving the signals it
    emits. This is true information encapsulation, and ensures that the
    object can be used as a software component.

    Slots can be used for receiving signals, but they are also normal
    member functions. Just as an object does not know if anything receives
    its signals, a slot does not know if it has any signals connected to
    it. This ensures that truly independent components can be created with
    Qt.

    You can connect as many signals as you want to a single slot, and a
    signal can be connected to as many slots as you desire. It is even
    possible to connect a signal directly to another signal. (This will
    emit the second signal immediately whenever the first is emitted.)

    Together, signals and slots make up a powerful component programming
    mechanism.

    \section1 A Small Example

    A minimal C++ class declaration might read:

    \quotefromfile snippets/signalsandslots/signalsandslots.h
    \skipto PlainCounter
    \skipto class Counter
    \printuntil };

    A small QObject-based class might read:

    \skipto ObjectCounter
    \skipto include <QObject>
    \printline include
    \printline class Counter
    \printuntil };

    The QObject-based version has the same internal state, and public
    methods to access the state, but in addition it has support for
    component programming using signals and slots. This class can
    tell the outside world that its state has changed by emitting a
    signal, \c{valueChanged()}, and it has a slot which other objects
    can send signals to.

    All classes that contain signals or slots must mention \c
    Q_OBJECT at the top of their declaration. They must also derive
    (directly or indirectly) from QObject.

    Slots are implemented by the application programmer.
    Here is a possible implementation of Foo::setValue():

    \quotefromfile snippets/signalsandslots/signalsandslots.cpp
    \skipto ::setValue
    \printuntil /^\}$/

    The \c{emit} line emits the signal \c valueChanged() from the
    object, with the new value as argument.

    In the following code snippet, we create two \c Counter objects
    and connect the first object's \c valueChanged() signal to the
    second object's \c setValue() slot:

    \skipto Counter a
    \printline Counter a
    \printuntil SLOT
    \printline a.setValue
    \printline b.setValue

    Calling \c{a.setValue(12)} makes \c{a} emit a
    \c{valueChanged(12)} signal, which \c{b} will receive in its
    \c{setValue()} slot, i.e. \c{b.setValue(12)} is called. Then
    \c{b} emits the same \c{valueChanged()} signal, but since no slot
    has been connected to \c{b}'s \c{valueChanged()} signal, the
    signal is ignored.

    Note that the \c{setValue()} function sets the value and emits
    the signal only if \c{value != m_value}. This prevents infinite
    looping in the case of cyclic connections (e.g., if
    \c{b.valueChanged()} were connected to \c{a.setValue()}).

    A signal is emitted for every connection you make; if you
    duplicate a connection, two signals will be emitted. You can
    always break a connection using QObject::disconnect().

    This example illustrates that objects can work together without knowing
    about each other, as long as there is someone around to set up a
    connection between them initially.

    The C++ preprocessor changes or removes the \c{signals},
    \c{slots}, and \c{emit} keywords so that the compiler is
    presented with standard C++.

    Run the \link moc.html moc\endlink on class definitions that
    contain signals or slots. This produces a C++ source file which
    should be compiled and linked with the other object files for the
    application. If you use \link qmake-manual.html qmake\endlink,
    the makefile rules to automatically invoke the \link moc.html
    moc\endlink will be added to your makefile for you.

    \section1 Signals

    Signals are emitted by an object when its internal state has changed
    in some way that might be interesting to the object's client or owner.
    Only the class that defines a signal and its subclasses can emit the
    signal.

    A list box, for example, emits both \c{clicked()} and
    \c{currentChanged()} signals. Most objects will probably only be
    interested in \c{currentChanged()} which gives the current list item
    whether the user clicked it or used the arrow keys to move to it. But
    some objects may only want to know which item was clicked. If the
    signal is interesting to two different objects you just connect the
    signal to slots in both objects.

    When a signal is emitted, the slots connected to it are executed
    immediately, just like a normal function call. The signal/slot
    mechanism is totally independent of any GUI event loop. The
    \c{emit} will return when all slots have returned.

    If several slots are connected to one signal, the slots will be
    executed one after the other, in an arbitrary order, when the signal
    is emitted.

    Signals are automatically generated by the \link moc.html moc\endlink
    and must not be implemented in the \c .cpp file. They can never have
    return types (i.e. use \c void).

    A note about arguments. Our experience shows that signals and slots
    are more reusable if they do \e not use special types. If \l
    QScrollBar::valueChanged() were to use a special type such as the
    hypothetical \c QRangeControl::Range, it could only be connected to
    slots designed specifically for QRangeControl. Something as simple as
    the program in \l{tutorial/t5}{Tutorial 5} would be impossible.

    \section1 Slots

    A slot is called when a signal connected to it is emitted. Slots are
    normal C++ functions and can be called normally; their only special
    feature is that signals can be connected to them. A slot's arguments
    cannot have default values, and, like signals, it is rarely wise to
    use your own custom types for slot arguments.

    Since slots are normal member functions with just a little extra
    spice, they have access rights like ordinary member functions. A
    slot's access right determines who can connect to it:

    A \c{public slots} section contains slots that anyone can connect
    signals to. This is very useful for component programming: you create
    objects that know nothing about each other, connect their signals and
    slots so that information is passed correctly, and, like a model
    railway, turn it on and leave it running.

    A \c{protected slots} section contains slots that this class and its
    subclasses may connect signals to. This is intended for slots that are
    part of the class's implementation rather than its interface to the
    rest of the world.

    A \c{private slots} section contains slots that only the class itself
    may connect signals to. This is intended for very tightly connected
    classes, where even subclasses aren't trusted to get the connections
    right.

    You can also define slots to be virtual, which we have found quite
    useful in practice.

    The signals and slots mechanism is efficient, but not quite as fast as
    "real" callbacks. Signals and slots are slightly slower because of the
    increased flexibility they provide, although the difference for real
    applications is insignificant. In general, emitting a signal that is
    connected to some slots, is approximately ten times slower than
    calling the receivers directly, with non-virtual function calls. This
    is the overhead required to locate the connection object, to safely
    iterate over all connections (i.e. checking that subsequent receivers
    have not been destroyed during the emission) and to marshall any
    parameters in a generic fashion. While ten non-virtual function calls
    may sound like a lot, it's much less overhead than any \c new or
    \c delete operation, for example. As soon as you perform a string,
    vector or list operation that behind the scene requires \c new or
    \c delete, the signals and slots overhead is only responsible for a
    very small proportion of the complete function call costs. The same is
    true whenever you do a system call in a slot; or indirectly call more
    than ten functions. On an i586-500, you can emit around 2,000,000
    signals per second connected to one receiver, or around 1,200,000 per
    second connected to two receivers. The simplicity and flexibility of
    the signals and slots mechanism is well worth the overhead, which your
    users won't even notice.

    \section1 Meta-Object Information

    The meta-object compiler (\link moc.html moc\endlink) parses the
    class declaration in a C++ file and generates C++ code that
    initializes the meta-object. The meta-object contains the names
    of all the signal and slot members, as well as pointers to these
    functions.

    The meta-object contains additional information such as the
    object's \link QObject::className() class name\endlink. You can
    also check if an object \link QObject::inherits()
    inherits\endlink a specific class, for example:

    \skipto inherits(
    \printuntil toggle
    \printline }

    The meta-object information is also used by qt_cast<T>(), which
    is similar to QObject::inherits() but is less error-prone:

    \skipto qt_cast
    \printuntil toggle

    See \l{metaobjects.html}{Meta-Object System} for more
    information.

    \section1 A Real Example

    Here is a simple commented example of a widget.

    \quotefromfile snippets/signalsandslots/lcdnumber.h
    \skipto #ifndef
    \printline #ifndef
    \printline #define
    \printline #include <QFrame>
    \printline class LcdNumber
    \printline {
    \printline Q_OBJECT

    \c LcdNumber inherits QObject, which has most of the signal-slot
    knowledge, via QFrame and QWidget. It is somewhat similar to the
    built-in QLCDNumber widget.

    The \c Q_OBJECT macro is expanded by the preprocessor to declare
    several member functions that are implemented by the \c{moc}; if
    you get compiler errors along the lines of "undefined reference
    to vtable for \c{LcdNumber}", you have probably forgotten to
    \link moc.html run the moc\endlink or to include the moc output
    in the link command.

    \printline public
    \printline LcdNumber

    It's not obviously relevant to the moc, but if you inherit
    QWidget you almost certainly want to have the \c parent argument
    in your constructor and pass it to the base class's constructor.

    Some destructors and member functions are omitted here; the \c
    moc ignores member functions.

    \skipto signals
    \printline signals
    \printline overflow()

    \c LcdNumber emits a signal when it is asked to show an impossible
    value.

    If you don't care about overflow, or you know that overflow
    cannot occur, you can ignore the \c overflow() signal, i.e. don't
    connect it to any slot. 

    If on the other hand you want to call two different error
    functions when the number overflows, simply connect the signal to
    two different slots. Qt will call both (in arbitrary order).

    \printline public slots:
    \printuntil setSmallDecimalPoint
    \printline };
    \printline #endif

    A slot is a receiving function used to get information about
    state changes in other widgets. \c LcdNumber uses it, as the code
    above indicates, to set the displayed number. Since \c{display()}
    is part of the class's interface with the rest of the program,
    the slot is public.

    Several of the example programs connect the
    \l{QScrollBar::valueChanged()}{valueChanged()} signal of a
    QScrollBar to the \c display() slot, so the LCD number
    continuously shows the value of the scroll bar.

    Note that \c display() is overloaded; Qt will select the
    appropriate version when you connect a signal to the slot. With
    callbacks, you'd have to find five different names and keep track
    of the types yourself.

    Some irrelevant member functions have been omitted from this
    example.
*/
