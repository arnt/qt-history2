/*!
    \class QSizePolicy
    \brief The QSizePolicy class is a layout attribute describing horizontal
    and vertical resizing policy.

    \ingroup appearance
    \ingroup geomanagement

    The size policy of a widget is an expression of its willingness to
    be resized in various ways.

    Widgets that reimplement QWidget::sizePolicy() return a QSizePolicy
    that describes the horizontal and vertical resizing policy they
    prefer when being laid out.

    QSizePolicy contains two independent QSizePolicy::Policy values
    and two stretch factors; one describes the widgets's horizontal
    size policy, and the other describes its vertical size policy. It
    also contains a flag to indicate whether the height and width of
    its preferred size are related.

    The horizontal and vertical policies are set in the usual
    constructor and can be queried using horizontalPolicy() and
    verticalPolicy().

    The hasHeightForWidth() flag indicates whether the widget's
    \l{QWidget::sizeHint()}{sizeHint()} is width-dependent (such as a
    menu bar or a word-wrapping label).

    \sa QSize, QWidget::sizeHint(), QWidget::sizePolicy(),
        QLayoutItem::sizeHint()
*/

/*!
    \enum QSizePolicy::PolicyFlag

    These flags are combined together to form the various \l{Policy}
    values:

    \value GrowFlag  The widget can grow beyond its size hint if necessary.
    \value ExpandFlag  The widget should get as much space as possible.
    \value ShrinkFlag  The widget can shrink below its size hint if necessary.
    \value IgnoreFlag  The widget's size hint is ignored. The widget will get
        as much space as possible.

    \sa Policy
*/

/*!
    \enum QSizePolicy::Policy

    The per-dimension sizing types used when constructing a
    QSizePolicy are:

    \value Fixed  The QWidget::sizeHint() is the only acceptable
        alternative, so the widget can never grow or shrink (e.g. the
        vertical direction of a push button).

    \value Minimum  The sizeHint() is minimal, and sufficient. The
        widget can be expanded, but there is no advantage to it being
        larger (e.g. the horizontal direction of a push button).

    \value Maximum  The sizeHint() is a maximum. The widget can be
        shrunk any amount without detriment if other widgets need the
        space (e.g. a separator line).

    \value Preferred  The sizeHint() is best, but the widget can be
        shrunk and still be useful. The widget can be expanded, but there
        is no advantage to it being larger than sizeHint() (the default
        QWidget policy).

    \value Expanding  The sizeHint() is a sensible size, but the
        widget can be shrunk and still be useful. The widget can make use
        of extra space, so it should get as much space as possible (e.g.
        the horizontal direction of a slider).

    \value MinimumExpanding  The sizeHint() is minimal, and sufficient.
        The widget can make use of extra space, so it should get as much
        space as possible (e.g. the horizontal direction of a slider).

    \value Ignored  The sizeHint() is ignored. The widget will get as
        much space as possible.

    \sa PolicyFlag
*/

/*!
    \fn QSizePolicy::QSizePolicy()

    Constructs a QSizePolicy with \l Fixed as its horizontal and
    vertical policies.

    \sa setHorizontalPolicy(), setVerticalPolicy(), setHorizontalStretch(),
        setVerticalStretch(), setHeightForWidth()
*/

/*!
    \fn QSizePolicy::QSizePolicy(Policy horizontal, Policy vertical)

    It constructs a QSizePolicy with independent horizontal and
    vertical policies, \a horizontal and \a vertical respectively. These policies
    affect how the widget is treated by the \l{Layout
    Management}{layout engine}.

    Use setHeightForWidth() if the preferred height of the widget is
    dependent on the width of the widget (for example, a QLabel with
    line wrapping).

    \sa horizontalPolicy(), verticalPolicy(), setHeightForWidth()
*/

/*!
    \fn QSizePolicy::Policy QSizePolicy::horizontalPolicy() const

    Returns the horizontal component of the size policy.

    \sa setHorizontalPolicy(), verticalPolicy(), horizontalStretch()
*/

/*!
    \fn QSizePolicy::Policy QSizePolicy::verticalPolicy() const

    Returns the vertical component of the size policy.

    \sa setVerticalPolicy(), horizontalPolicy(), verticalStretch()
*/

/*!
    \fn void QSizePolicy::setHorizontalPolicy(Policy policy)

    Sets the horizontal component of the size policy to \a policy.

    \sa horizontalPolicy(), setVerticalPolicy()
*/

/*!
    \fn void QSizePolicy::setVerticalPolicy(Policy policy)

    Sets the vertical component of the size policy to \a policy.

    \sa verticalPolicy(), setHorizontalPolicy()
*/

/*!
    \fn Qt::Orientations QSizePolicy::expandingDirections() const

    Returns whether this widget can make use of more space than
    sizeHint(). A value of Qt::Horizontal or Qt::Vertical means that
    the widget wants to grow horizontally or vertically (i.e., the
    horizontal or vertical policy is \l Expanding or \l
    MinimumExpanding), whereas Qt::Horizontal | Qt::Vertical means
    that it wants to grow in both dimensions.

    \sa horizontalPolicy(), verticalPolicy()
*/

/*!
    \fn void QSizePolicy::setHeightForWidth(bool hfw)

    Sets the hasHeightForWidth() flag to \a hfw.

    \sa hasHeightForWidth()
*/

/*!
    \fn bool QSizePolicy::hasHeightForWidth() const

    Returns true if the widget's preferred height depends on its
    width; otherwise returns false.

    \sa setHeightForWidth()
*/

/*!
    \fn bool QSizePolicy::operator==(const QSizePolicy &other) const

    Returns true if this policy is equal to \a other; otherwise
    returns false.

    \sa operator!=()
*/

/*!
    \fn bool QSizePolicy::operator!=(const QSizePolicy &other) const

    Returns true if this policy is different from \a other; otherwise
    returns false.

    \sa operator==()
*/

/*!
    \fn int QSizePolicy::horizontalStretch() const

    Returns the horizontal stretch factor of the size policy.

    \sa setHorizontalStretch(), verticalStretch()
*/

/*!
    \fn int QSizePolicy::verticalStretch() const

    Returns the vertical stretch factor of the size policy.

    \sa setVerticalStretch(), horizontalStretch()
*/

/*!
    \fn void QSizePolicy::setHorizontalStretch(uchar stretch)

    Sets the horizontal stretch factor of the size policy to \a
    stretch.

    \sa horizontalStretch() setVerticalStretch()
*/

/*!
    \fn void QSizePolicy::setVerticalStretch(uchar stretch)

    Sets the vertical stretch factor of the size policy to \a
    stretch.

    \sa verticalStretch() setHorizontalStretch()
*/

/*!
    \fn void QSizePolicy::transpose()

    Swaps the horizontal and vertical policies and stretches.
*/

#ifdef QT3_SUPPORT
/*!
    \typedef QSizePolicy::SizeType
    \compat

    Use QSizePolicy::Policy instead.
*/

/*!
    \enum QSizePolicy::ExpandData
    \compat

    Use Qt::Orientations instead.

    \value NoDirection  Use 0 instead.
    \value Horizontally  Use Qt::Horizontal instead.
    \value Vertically  Use Qt::Vertical instead.
    \value BothDirections  Use Qt::Horizontal | Qt::Vertical instead.
*/

/*!
    \fn bool QSizePolicy::mayShrinkHorizontally() const

    Use horizontalPolicy() & QSizePolicy::ShrinkFlag instead.
*/

/*!
    \fn bool QSizePolicy::mayShrinkVertically() const

    Use verticalPolicy() & QSizePolicy::ShrinkFlag instead.
*/

/*!
    \fn bool QSizePolicy::mayGrowHorizontally() const

    Use horizontalPolicy() & QSizePolicy::GrowFlag instead.
*/

/*!
    \fn bool QSizePolicy::mayGrowVertically() const

    Use verticalPolicy() & QSizePolicy::GrowFlag instead.
*/

/*!
    \fn Qt::QSizePolicy::Orientations QSizePolicy::expanding() const

    Use expandingDirections() instead.
*/

/*!
    \fn QSizePolicy::QSizePolicy(Policy horizontal, Policy vertical, bool hfw)

    Use the QSizePolicy(\a horizontal, \a vertical) constructor and call
    setHeightForWidth(\a hfw).
*/

/*!
    \fn QSizePolicy::QSizePolicy(Policy hPolicy, Policy vPolicy, uchar hStretch,
                                 uchar vStretch, bool hfw)

    Use the QSizePolicy(\a hPolicy, \a vPolicy) constructor and call
    setHorizontalStretch(\a hStretch), setVerticalStretch(\a
    vStretch), and setHeightForWidth(\a hfw).
*/

/*!
    \fn QSizePolicy::Policy QSizePolicy::horData() const

    Use horizontalPolicy() instead.
*/

/*!
    \fn QSizePolicy::Policy QSizePolicy::verData() const

    Use verticalPolicy() instead.
*/

/*!
    \fn void QSizePolicy::setHorData(Policy policy)

    Use setHorizontalPolicy(\a policy) instead.
*/

/*!
    \fn void QSizePolicy::setVerData(Policy policy)

    Use setVerticalPolicy(\a policy) instead.
*/

/*!
    \fn uint QSizePolicy::horStretch() const

    Use horizontalStretch() instead.
*/

/*!
    \fn uint QSizePolicy::verStretch() const

    Use verticalStretch() instead.
*/

/*!
    \fn void QSizePolicy::setHorStretch(uchar stretch)

    Use setHorizontalStretch(\a stretch) instead.
*/

/*!
    \fn void QSizePolicy::setVerStretch(uchar stretch)

    Use setVerticalStretch(\a stretch) instead.
*/
#endif
