/*!
    \class QSizePolicy
    \brief The QSizePolicy class is a layout attribute describing horizontal
    and vertical resizing policy.

    \ingroup appearance
    \ingroup geomanagement

    The size policy of a widget is an expression of its willingness to
    be resized in various ways.

    Widgets that reimplement QWidget::sizePolicy() return a QSizePolicy
    that describes the horizontal and vertical resizing policy they
    prefer when being laid out.

    QSizePolicy contains two independent SizeType objects and two
    stretch factors; one describes the widgets's horizontal size
    policy, and the other describes its vertical size policy. It also
    contains a flag to indicate whether the height and width of its
    preferred size are related.

    The horizontal and vertical \l{SizeType}s are set in the usual constructor
    and can be queried using a variety of functions.

    The hasHeightForWidth() flag indicates whether the widget's sizeHint()
    is width-dependent (such as a word-wrapping label) or not.

    \sa QSizePolicy::SizeType
*/

/*!
    \enum QSizePolicy::SizeTypeFlag

    The per-dimension sizing types used when constructing a
    QSizePolicy are:

    \value Fixed  the QWidget::sizeHint() is the only acceptable
    alternative, so the widget can never grow or shrink (e.g. the
    vertical direction of a push button).

    \value Minimum  the sizeHint() is minimal, and sufficient. The
    widget can be expanded, but there is no advantage to it being
    larger (e.g. the horizontal direction of a push button).

    \value Maximum  the sizeHint() is a maximum. The widget can be
    shrunk any amount without detriment if other widgets need the
    space (e.g. a separator line).

    \value Preferred  the sizeHint() is best, but the widget can be
    shrunk and still be useful. The widget can be expanded, but there
    is no advantage to it being larger than sizeHint() (the default
    QWidget policy).

    \value Expanding  the sizeHint() is a sensible size, but the
    widget can be shrunk and still be useful. The widget can make use
    of extra space, so it should get as much space as possible (e.g.
    the horizontal direction of a slider).

    \value MinimumExpanding the sizeHint() is minimal, and sufficient.
    The widget can make use of extra space, so it should get as much
    space as possible (e.g. the horizontal direction of a slider).

    \value Ignored the sizeHint() is ignored. The widget will get as
    much space as possible.
*/

/*!
    \enum QSizePolicy::ExpandData

    This enum type describes in which directions a widget can make use
    of extra space. There are four possible values:

    \value NoDirection  the widget cannot make use of extra space in
    any direction.

    \value Horizontally  the widget can usefully be wider than the
    sizeHint().

    \value Vertically  the widget can usefully be taller than the
    sizeHint().

    \value BothDirections  the widget can usefully be both wider and
    taller than the sizeHint().

    \omitvalue Horizontal
    \omitvalue Vertical
*/

/*!
    \fn QSizePolicy::QSizePolicy()

    Constructs a minimally initialized QSizePolicy.
*/

/*!
    \fn QSizePolicy::QSizePolicy(SizeType hor, SizeType ver)

    It constructs a QSizePolicy with independent horizontal and
    vertical sizing types, \a hor and \a ver respectively. These \link
    QSizePolicy::SizeType sizing types\endlink affect how the widget
    is treated by the \link QLayout layout engine\endlink.

    Use setHeightForWidth() if the preferred height of the widget is dependent
    on the width of the widget (for example, a QLabel with line
    wrapping).

    \sa horizontalData() verticalData() setHeightForWidth()
*/


/*!
    \fn QSizePolicy::SizeType QSizePolicy::horizontalData() const

    Returns the horizontal component of the size policy.

    \sa setHorizontalData() verticalData() horizontalStretch()
*/

/*!
    \fn QSizePolicy::SizeType QSizePolicy::verticalData() const

    Returns the vertical component of the size policy.

    \sa setVerticalData() horizontalData() verticalStretch()
*/

/*!
    \fn bool QSizePolicy::mayShrinkHorizontally() const

    Returns true if the widget can sensibly be narrower than its
    sizeHint(); otherwise returns false.

    \sa mayShrinkVertically() mayGrowHorizontally()
*/

/*!
    \fn bool QSizePolicy::mayShrinkVertically() const

    Returns true if the widget can sensibly be shorter than its
    sizeHint(); otherwise returns false.

    \sa mayShrinkHorizontally() mayGrowVertically()
*/

/*!
    \fn bool QSizePolicy::mayGrowHorizontally() const

    Returns true if the widget can sensibly be wider than its
    sizeHint(); otherwise returns false.

    \sa mayGrowVertically() mayShrinkHorizontally()
*/

/*!
    \fn bool QSizePolicy::mayGrowVertically() const

    Returns true if the widget can sensibly be taller than its
    sizeHint(); otherwise returns false.

    \sa mayGrowHorizontally() mayShrinkVertically()
*/

/*!
    \fn QSizePolicy::ExpandData QSizePolicy::expanding() const

    Returns whether this layout can make use of more space than
    sizeHint(). A value of \c Qt::Vertical or \c Qt::Horizontal means that it wants
    to grow in only one dimension, whereas \c BothDirections means that
    it wants to grow in both dimensions.

    \sa mayShrinkHorizontally() mayGrowHorizontally()
        mayShrinkVertically() mayGrowVertically()
*/

/*!
    \fn void QSizePolicy::setHorizontalData(SizeType d)

    Sets the horizontal component of the size policy to size type \a
    d.

    \sa horizontalData() setVerticalData()
*/

/*!
    \fn void QSizePolicy::setVerticalData(SizeType d)

    Sets the vertical component of the size policy to size type \a d.

    \sa verticalData() setHorizontalData()
*/

/*!
    \fn bool QSizePolicy::hasHeightForWidth() const

    Returns true if the widget's preferred height depends on its
    width; otherwise returns false.

    \sa setHeightForWidth()
*/

/*!
    \fn void QSizePolicy::setHeightForWidth(bool b)

    Sets the hasHeightForWidth() flag to \a b.

    \sa hasHeightForWidth()
*/

/*!
    \fn uint QSizePolicy::horizontalStretch() const

    Returns the horizontal stretch factor of the size policy.

    \sa setHorizontalStretch() verticalStretch()
*/

/*!
    \fn uint QSizePolicy::verticalStretch() const

    Returns the vertical stretch factor of the size policy.

    \sa setVerticalStretch() horizontalStretch()
*/

/*!
    \fn void QSizePolicy::setHorizontalStretch(uchar sf)

    Sets the horizontal stretch factor of the size policy to \a sf.

    \sa horizontalStretch() setVerticalStretch()
*/

/*!
    \fn void QSizePolicy::setVerticalStretch(uchar sf)

    Sets the vertical stretch factor of the size policy to \a sf.

    \sa verticalStretch() setHorizontalStretch()
*/

/*!
    \fn void QSizePolicy::transpose()

    Swaps the horizontal and vertical policies and stretches.
*/


/*!
    \fn bool QSizePolicy::operator==(const QSizePolicy &s) const

    Returns true if this policy is equal to \a s; otherwise returns
    false.

    \sa operator!=()
*/

/*!
    \fn bool QSizePolicy::operator!=(const QSizePolicy &s) const

    Returns true if this policy is different from \a s; otherwise
    returns false.

    \sa operator==()
*/

#ifdef QT3_SUPPORT
/*!
    \fn QSizePolicy::QSizePolicy(SizeType hor, SizeType ver, bool hfw)

    Use the QSizePolicy(\a hor, \a ver) constructor and call
    setHeightForWidth(\a hfw).
*/

/*!
    \fn QSizePolicy::QSizePolicy(SizeType hor, SizeType ver, uchar hors, uchar vers, bool hfw)

    Use the QSizePolicy(\a hor, \a ver) constructor and call
    setHorizontalStretch(\a hors), setVerticalStretch(\a vers), and
    setHeightForWidth(\a hfw).
*/

/*!
    \fn QSizePolicy::SizeType QSizePolicy::horData() const

    Use horizontalData() instead.
*/

/*!
    \fn QSizePolicy::SizeType QSizePolicy::verData() const

    Use verticalData() instead.
*/

/*!
    \fn void QSizePolicy::setHorData(SizeType policy)

    Use setHorizontalData(\a policy) instead.
*/

/*!
    \fn void QSizePolicy::setVerData(SizeType policy)

    Use setVerticalData(\a policy) instead.
*/

/*!
    \fn uint QSizePolicy::horStretch() const

    Use horizontalStretch() instead.
*/

/*!
    \fn uint QSizePolicy::verStretch() const

    Use verticalStretch() instead.
*/

/*!
    \fn void QSizePolicy::setHorStretch(uchar stretch)

    Use setHorizontalStretch(\a stretch) instead.
*/

/*!
    \fn void QSizePolicy::setVerStretch(uchar stretch)

    Use setVerticalStretch(\a stretch) instead.
*/
#endif
