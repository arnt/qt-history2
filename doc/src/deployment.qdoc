/****************************************************************************
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \page deployment.html

    \title Deploying Qt Applications

    The procedure of deploying Qt applications is different for the
    various platforms:

    \list
        \o \l{Deployment on Qt/X11}{Qt/X11}
        \o \l{Deployment on Qt/Windows}{Qt/Windows}
        \o \l{Deployment on Qt/Mac}{Qt/Mac}
    \endlist

    This document lists the platform-specific files needed to
    distribute Qt applications.

    \tableofcontents

    \section1 Static Qt Applications

    To distribute static Qt applications, you need the following file
    for all platforms:

    \list
        \o your application's executable
    \endlist

    \section1 Dynamic Qt Applications

    To distribute dynamic Qt applications, you will need the following
    files for all platforms:

    \list
        \o application executable
        \o the Qt library
    \endlist

    The Qt library must either be in the same directory as the
    application executable or in a directory which is included in the
    system library path.

    The library is provided by the following platform specific files:

    \table
        \header \o Platform \o File
        \row \o Windows \o \c qt[version].dll
        \row \o Unix/Linux \o \c libqt[version].so
        \row \o Mac \o \c libqt[version].dylib
    \endtable

    \e version includes the three version numbers.

    \section2 Distributing Plugins

    You must include any plugin files required by the application.

    Plugins must be put into a subdirectory under a directory known to
    Qt as a plugin directory. The subdirectory must have the name of
    the plugin category (e.g. \c styles, \c sqldrivers, \c designer,
    etc.).

    Qt searches in the following directories for plugin categories:

    \list
        \o Application specific plugin paths
        \o Build-directory of Qt
        \o The application directory
    \endlist

    Application specific plugin paths can be added using
    QCoreApplication::addLibraryPath(). The build-directory of Qt is
    hardcoded in the Qt library and can be changed as a part of the
    installation process.

    \section1 Dynamic Dialogs

    For dynamic dialogs if you use QWidgetFactory, you need the
    following files for all platforms:

    \list
        \o The same files as used for dynamic Qt applications
        \o The QUI Library
    \endlist

    The QUI library is provided by the following platform specific files:

    \table
        \header \o Platform \o File
        \row \o Windows  \o\c qui.lib
        \row \o Unix/Linux  \o\c libqui.so
        \row \o Mac \o \c libqui.dylib
    \endtable

    The QUI library must either be in the same directory as the
    application executable or in a directory which is included in the
    system library path.

    \sa Installation {Window System Specific Notes}
*/

/*
    \page deployment-x11.html

    \title Deployment on Qt/X11
*/

/*!
    \page deployment-windows.html

    \title Deployment on Qt/Windows

    Some words about linking and libraries on Windows:

    - static libs (.lib) vs. dynamically loaded libraries (.dll)

    - dynamically loaded DLLs come with a static import library to link against

    KERNEL32.DLL, USER32.DLL etc. - System runtime
    KERNEL32.LIB, USER32.LIB etc. - Platform SDK

    QTCORE4.DLL, QTGUI4.DLL - Qt runtime
    QTCORE4.LIB, QTGUI4.LIB - Qt SDK

    - Qt not a system library, so it has to be redistributed

    - Required to redistribute the runtime of those Qt modules used in application

    - compiler specific C runtime needs to be redistributed as well

    - some compiler specific libs required depending on configuration (C++ runtime if STL)

    - depends tool lists dependencies of an executable


    \section1 Shared Libraries

    - more flexible, small executables

    - might be larger total package (one exe + DLLs), and more files to deploy

    - The binary installer of Qt includes precompiled shared libraries

    - debug vs. release - only release libraries are redistributable

    [Screen shot of depends for assistant]


    \section1 Static Linking

    - fewer files to deploy

    - bigger executables, no plugins, no flexibility

    - Qt runtime compiled into the executable

    - Compiler specific libs (C runtime, C++ runtime) still need to be shipped

    [Screen shot of depends for assistant]


    \section1 Other considerations

    - plugins

    - Assistant

    - ActiveQt

    \section1 Distributing "Plug & Paint"

    The "plug & paint" example in Qt consists of multiple projects: The application itself in
    \c{examples/tools/plugandpaint}, and application-specific plugins in 
    \c{examples/tools/plugandpaintplugins}. 
    
    Plugin-based applications need to link against Qt as a shared library - if static linking 
    would be used, then the application itself and each plugin would pull in their own instance 
    of Qt.

    There are two challengines in deploying this application: it links against Qt as a 
    shared library, so the Qt runtime has to be correctly redistributed along with the application
    executable. And, since the application functionality is provided by plugins, those have to 
    be installed in the correct location on the target system so that the application can find them.

    Looking at the release build of the "plugandpaint" executable with the "depends" tool lists the
    following immediate dependencies to non-system libraries:

    \table
    \header
    \i Qt
    \i VC++ 6.0
    \i VC++ 7.1 (2003)
    \i MinGW
    \row
    \i \list
        \o QTCORE4.DLL - The QtCore runtime
        \o QTGUI4.DLL - The QtGui runtime
    \endlist
    \i \list
        \o MSVCRT.DLL - The C runtime
        \o MSVCP60.DLL - The C++ runtime (STL only)
    \endlist
    \i \list
        \o MSVCR71.DLL - The C runtime
        \o MSVCP71.DLL - The C++ runtime (STL only)
    \endlist
    \endtable

    Looking at the plugin DLLs lists the exact same dependencies.

    When searching for plugins the application searches for plugins in a "plugins" subdirectory 
    inside the directory of the application executable:

    \code
    .\plugandpaint.exe
    .\plugins\pnp_basictools.dll
    .\plugins\pnp_extrafilters.dll
    \endcode

    An archive distributing all Qt and C runtime DLLs required to start the application executable
    as well as all plugins would now have to include the following files

    \code
    .\plugandpaint.exe
    .\qtcore4.dll
    .\qtgui4.dll
    .\msvcrt.dll OR .\msvcr71.dll
    .\msvcp71.dll OR .\msvcp71.dll
    .\plugins\pnp_basictools.dll
    .\plugins\pnp_extrafilters.dll
    \endcode

    Extracting this archive on a machine without Qt and without any compiler installed to verify
    that the application can now be successfully deployed.
*/

/*
    \page deployment-mac.html

    \title Deployment on Qt/Mac
*/
