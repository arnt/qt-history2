/****************************************************************************
**
** Documentation of character input.
**
** Copyright (C) 1992-$THISYEAR$ Trolltech AS. All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
** EDITIONS: FREE, PROFESSIONAL, ENTERPRISE
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \page emb-charinput.html

    \title Character Input

    When running a Qtopia Core application, it either runs as a server
    or connects to an existing server.  Internally in the
    client/server protocol, each key press and key release is sent as
    a QWSKeyEvent object to the server.
    \ingroup qtopia-core

    A key event can be generated from a keyboard driver. A keyboard
    driver reads data from a device, finds out which keys were
    pressed, and then calls the static QWSServer::processKeyEvent()
    function with the key information. But key events do not always
    come from a keyboard device, they can can also be generated by the
    server process.

    \table
    \row
    \o
    \bold {Input Widgets}

    The server process may call the static QWSServer::sendKeyEvent()
    function at any time. Typically, this is done by popping up a
    widget, and letting the user specify characters with the pointer
    device.

    Note that the key input widget should not take focus, since the
    server would then just send the key events back to the input
    widget. One way to make sure that the input widget never takes
    focus is to set the Qt::Tool widget flag in the QWidget
    constructor.

    The \l {http://www.trolltech.com/products/qtopia/ }{Qtopia}
    environment contains various input widgets such as Handwriting
    Recognition and Virtual Keyboard.
    \endtable

    The various keyboard drivers can be compiled into the library or
    loaded as plugins, and enabled and disabled using the \c configure
    script. For example:

    \code
        configure -qt-kbd-s15000
    \endcode

    Run \c {./configure -help} to list the available keyboard drivers.
    In the default Qt configuration, only the "tyy" driver is enabled.

    \tableofcontents

    \section1 Available Keyboard Drivers

    Qtopia Core provides drivers for the SL5000, Yopy, NEC Vr41XX,
    console (tty) and USB protocols.

    Note that the console keyboard driver also handles console
    switching (\bold{Ctrl+Alt+F1}, ..., \bold{Ctrl+Alt+F10}) and
    termination (\bold{Ctrl+Alt+Backspace}).

    Other drivers can be added by deriving from the QWSKeyboardHandler
    and QKbdDriverPlugin classes and using Qt's plugin mechanism.

    If your keyboard supports either PC101 code set 1 scancodes, or
    the standard Linux keycodes, then you can save work by subclassing
    from QWSPC101KeyboardHandler rather than QWSKeyboardHandler. For
    keyboards that support code set 1 scancodes, call
    QWSPC101KeyboardHandler::doKey() with the scancodes as keys are
    pressed. For keyboards that support the standard Linux keycodes
    (see the Linux loadkeys manual page), call
    QWSPC101KeyboardHandler::doKey() with the keycodes.

    \section1 Specifying a Keyboard Driver

    To specify which driver to use, set the QWS_KEYBOARD environment
    variable. For example (if the current shell is bash, ksh, zsh or
    sh):

    \code
         export QWS_KEYBOARD=<driver>:<device>
    \endcode

    The \c <driver> argument is either \c sl5000, \c yopy, \c vr41xx,
    \c tty or \c usb, and the \c <device> argument is typically \c
    /dev/tty0. Note that the latter argument is optional.

    Multiple keyboard drivers can be specified in one go:

    \code
         export QWS_KEYBOARD=<driver> <driver> <driver>:<device>
    \endcode

    Input will be read from all of specified drivers.
*/
