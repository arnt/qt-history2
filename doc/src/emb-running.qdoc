/*!
    \page emb-running.html

    \contentspage {Qtopia Core}{Contents}
    \previouspage Installing Qtopia Core
    \nextpage Porting Applications to Qtopia Core

    \title Running Applications
    \ingroup qtopia-core

    A Qtopia Core application requires a master application to be running,
    or to be the master application itself. The master application is
    primarily responsible for managing top-level window regions, and
    pointer and keyboard input.

    Any Qtopia Core application can be the master application by
    constructing the QApplication object with the
    \c{QApplication::GuiServer} type, or by being run with the \c{-qws}
    command line option.

    This document assumes you have the Linux framebuffer configured correctly
    and that no master process is running. If you do not have a working Linux
    framebuffer you can use the
    \link emb-qvfb.html Qtopia Core virtual framebuffer\endlink, or you can
    run Qtopia Core as a \link emb-vnc.html VNC server\endlink.

    Change to a Linux console and select an example to run, e.g. \c
    examples/widgets. Make sure \c $QTDIR is set to the directory where you
    installed Qtopia Core and add the \c $QTDIR/lib directory to
    \c $LD_LIBRARY_PATH, e.g.:

    \code
        export QTDIR=$HOME/qt-VERSION
        export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
    \endcode

    Run the application with the \c{-qws} option:

    \code
        cd $QTDIR/examples/demos/textedit
        ./textedit -qws
    \endcode

    You should see the \c textedit example appear. If your mouse doesn't
    work correctly you must specify the type of mouse to use. You can
    exit the master application at any time using
    \bold{Ctrl+Alt+Backspace}.

    If you wish to run additional applications you should run them as clients
    i.e. without the \c{-qws} option.

    \section1 Displays

    Qtopia Core allows multiple displays to be used simultaneously by running
    multiple Qtopia Core master processes. This is achieved using the \c -display
    command line parameter or the \c $QWS_DISPLAY environment variable.

    The \c -display parameter's syntax is:

    \code
        [gfx driver][:driver specific options][:display number]
    \endcode

    To try this functionality you can do the following:
    \list 1
    \i Change to VC 1 (virtual console one) and run the launcher example:

    \code
        $ cd examples/tools/launcher
        $ ./launcher -qws
    \endcode

    \i Switch to VC 2 and run another one:

    \code
        $ cd examples/tools/launcher
        $ ./launcher -qws -display :1
    \endcode

    Another launcher will be started. Start an application in this launcher.

    \i Press \bold{Ctrl+Alt+F1} - back to display 0. You can also start
    additional applications on a particular display by specifying the
    display ID. Change to VC 3:

    \code
        $ cd examples/widgets/styles
        $ ./styles -display :1
    \endcode

    will display the widgets example on display :1 (VC 2).
    \endlist

    Only the master process needs to specify the driver/device part
    explicitly. The clients get the information they need from the master
    when they connect. So once you have a master server running using a
    particular driver, you can just use \c client \c display \c n to use
    display \c n.

    \section1 Mouse Input

    Qtopia Core attempts to autodetect a mouse by default.  The supported
    protocols are MouseMan, Microsoft, IntelliMouse and
    some other devices specific to certain hardware (e.g. Vr touch panel).
    To specify the mouse to use set the \c $QWS_MOUSE_PROTO environment
    variable, for example:

    \code
        export QWS_MOUSE_PROTO=IntelliMouse
    \endcode

    The mouse autodetection opens the serial devices and psaux which
    may cause conflicts with other programs using those devices.  If
    this is the case then specify the mouse driver protocol and device
    explicitly:

    \code
        export QWS_MOUSE_PROTO=MouseMan:/dev/inputs/mice
    \endcode

    \sa {Pointer Handling}
*/
