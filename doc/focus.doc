/* $Id: focus.doc,v 1.1 1999/10/25 14:49:59 arnt Exp $

/*! \page focus.html

<title>
Qt toolkit - Keyboard Focus Overview
</title></head><body bgcolor="#ffffff">

\postheader

<h1 align=center>Keyboard Focus Overview</h1><br clear="all">

Keyboard focus, like much else on the human end of a GUI, tends to be
full of exceptions and not at all neat.

The basic problem is that the user's keystrokes can be directed at any
of several windows on the screen, and any of several widgets inside
the intended window.  The user presses a key, wishing it to go to the
right place.  The window system is responsible for directing the
keystroke to the window the user wishes, the application running that
window for directing each keystroke to the widget the user wishes.  Of
course the user's wish moves at whim.

The application's responsibilities is the subject of this page.

<h2>Focus motion</h2>

There are, historically, a few ways in which the user directs the
keyboard focus at a desired widget: <ol>

<li> The user presses Tab (or Shift-Tab) (or sometimes Enter)

<li> The user clicks a widget

<li> The user presses a keyboard shortcut

<li> The user uses the mouse wheel

<li> The user moves the focus to this window, and the application has
to guess to which widget

</ol>

Each of these motion mechanisms is different, and different types of
widgets receive focus in only some of them.  We'll cover each of them
in turn. <ol>

<li> Tab/Shift-Tab.

Pressing Tab is by far the most common way to move focus using the
keyboard.  Sometimes in data-entry applications Enter does the same as
Tab.  We will ignore that for the moment.

Tab, in all window systems in common use today, moves the keyboard
focus to the next widget in a circular per-window list.  Tab moves
focus along the circular list in one direction, Shift-Tab in the
other.  The order in which Tab moves is called the tab order.

In Qt, this list is kept in the \l QFocusData class.  There is one
QFocusData object per window, and widgets automatically append
themselves to the end of it when \l QWidget::setFocusPolicy() is
called with an appropriate \l QWidget::FocusPolicy.  You can customize
the tab order using \l QWidget::setTabOrder().  (If you don't, Tab
generally moves focus in the order of widget construction.)

Since pressing Tab is so common, most widgets that can have focus
should support tab focus.  The major exception is widgets that are
only seldom used, and where there is some keyboard accelerator or
error handler that moves the focus.

For example, in a data entry dialog, there might be a field that is
only necessary in one per cent of all cases.  In such a dialog, Tab
should probably skip this field, and one or both of these should
happen: <ul>

<li> If the program can determine whether the field is needed, it can
move focus there when the user finishes entry and presses Ok, or when
the user presses Enter after finishing the other fields.

<li> Thee label for the field can include a keyboard shortcut that
moves focus to this field.

</ul>

<li> The user clicks a widget

This is perhaps even more common than pressing Tab on computers with a
good mouse or other pointing device.

Clicking to move the focus is slightly more powerful than Tab.  While
it moves the focus \e to a widget, for editor widgets it also moves
the text cursor (the widget's internal focus) to the spot where the
mouse is clicked.

Since it is so common, it's a good idea to support it for most
widgets.  People are used to it.  However, there is also an important
reason to avoid it: You may not want to remove focus from the widget
where it was.

For example, in a word processor, when the user clicks the 'B'
(boldface) tool button, what should happen to the keyboard focus?
Should it remain where it was, almost certainly in the editing widget,
or should it move to the 'B' button?

We advise supporting click-to-focus for widgets that support text
entry, and to avoid it for most widgets where a mouse click has a
different effect.  (For buttons, we also recommend adding a keyboard
shortcut - \l QButton and its subclasses make that very easy.)

For widget that don't fall into either class, we have no advice.

In Qt, only the \l QWidget::setFocusPolicy() function affects
click-to-focus.

<li> The user presses a keyboard shortcut



<li> The user uses the mouse wheel

<li> The user moves the focus to this window, and the application has
to guess to which widget




*/
