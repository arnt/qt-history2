/****************************************************************************
** $Id: //depot/qt/main/doc/porting3.doc#1 $
**
** Help with porting from Qt 2.x to Qt 3.x
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page porting.html

\title Porting to Qt 3.x

You're probably looking at this page because you want to port
your application from Qt 2.x to Qt 3.x, but to be sure, let's
review the good reasons to do this:
<ul>
 <li>###
</ul>

The Qt 3.x series is not binary compatible with the 2.x series.
This means programs compiled for Qt 2.x must be recompiled to work
with Qt 3.x.  Qt 3.x is also not completely \e source compatible
with 2.x, however all points of incompatibility cause
compiler errors (rather than mysterious results), or produce run-time
messages.  The result is that Qt 3.x includes many additional features,
discards obsolete functionality that is easily converted to use the new
features, and that porting an application from Qt 2.x to Qt 3.x is
a simple task well worth the amount of effort required.


To port code using Qt 2.x to use Qt 3.x:

<ol>
 <li> Briefly read the porting notes below to get an idea of what to expect.
 <li> Be sure your code compiles and runs well on all your target platforms
        with Qt 2.x.
 <li> Recompile with Qt 3.x.  For each error, search below for related
	identifiers (eg. function names, class names) - this documented is
	structured to mention all relevant identifiers to facilitate such
	searching, even if that makes it a little verbose.
 <li> If you get stuck, ask on the qt-interest mailing list, or
	Trolltech Technical Support if you're a Professional Edition
	licensee.
</ol>


Many very major projects, such as ###
have been ported, so there is plenty of expertise in the collective conscious
that is the Qt Developer Community!
</p>


<hr>

<h2 align=center>The Porting Notes</h2>

<ul>
 <li><b>\link #Headers Header file inclusion changes \endlink</b>
 <li><b>\link #Namespace Namespace \endlink</b>
 <li><b>\link #Removed Removed functions \endlink</b>
 <li><b>\link #QRegExp QRegExp \endlink</b>
 <li><b>\link #QTranslator QTranslator \endlink</b>
 <li><b>\link #Bezier Bezier Curves \endlink</b>
</ul>

<hr>

<h3><a name="Headers">Header file inclusion changes</a></h3>

Qt 3.x remove some unnecessary nested #include directives from
header files. This speeds up compilation when you don't need those
nested header files. But in some cases you will find you need to add
an extra #include to your files.

For example, if you get a message about QStringList or its functions
not being defined, then add \c {#include <qstringlist.h>} at
the top of the file giving the error.

Header files that you might need to add #include directives for include:
<ul>
    <li>\c <qcursor.h>
    <li>\c <qregexp.h>
    <li>\c <qpainter.h>
    <li>\c <qstringlist.h>
    <li>\c <qstrlist.h>
    <li>\c <qvaluelist.h>
</ul>

<h3><a name="Namespace">Namespace</a></h3>

Qt 3.x is namespace-clean.  A few global identifiers that had been
left in Qt 2.x have been discarded.

Enumeration \c QCursorShape and it values are now part of the
special \c Qt class defined in qnamespace.h. If you get compilation
errors about these being missing (unlikely, since most of your code will
be in classes that inherit from the Qt namespace class), then change:

<ul>
    <li>\c QCursorShape becomes \c Qt::CursorShape
    <li>\c ArrowCursor becomes \c Qt::ArrowCursor
    <li>\c UpArrowCursor becomes \c Qt::UpArrowCursor
    <li>\c CrossCursor becomes \c Qt::CrossCursor
    <li>\c WaitCursor becomes \c Qt::WaitCursor
    <li>\c IbeamCursor becomes \c Qt::IbeamCursor
    <li>\c SizeVerCursor becomes \c Qt::SizeVerCursor
    <li>\c SizeHorCursor becomes \c Qt::SizeHorCursor
    <li>\c SizeBDiagCursor becomes \c Qt::SizeBDiagCursor
    <li>\c SizeFDiagCursor becomes \c Qt::SizeFDiagCursor
    <li>\c SizeAllCursor becomes \c Qt::SizeAllCursor
    <li>\c BlankCursor becomes \c Qt::BlankCursor
    <li>\c SplitVCursor becomes \c Qt::SplitVCursor
    <li>\c SplitHCursor becomes \c Qt::SplitHCursor
    <li>\c PointingHandCursor becomes \c Qt::PointingHandCursor
    <li>\c BitmapCursor becomes \c Qt::BitmapCursor
</ul>

The name of some debugging macro variables has been changed.  We have
tried not to break source compatibility as much as possible.  If you observe
error messages on the UNIX console or the Windows debugging stream that were
previously disabled, please check these macro variables:

<ul>
    <li>\c DEBUG becomes \c QT_DEBUG
    <li>\c NO_DEBUG becomes \c QT_NO_DEBUG
    <li>\c NO_CHECK becomes \c QT_NO_CHECK
    <li>\c CHECK_STATE becomes \c QT_CHECK_STATE
    <li>\c CHECK_RANGE becomes \c QT_CHECK_RANGE
    <li>\c CHECK_NULL becomes \c QT_CHECK_NULL
    <li>\c CHECK_MATH becomes \c QT_CHECK_MATH
</ul>

The name of some debugging macro functions has been changed as well
but source compatibility should not be affected if the macro variable
\c QT_CLEAN_NAMESPACE is not defined:

<ul>
    <li>\c ASSERT becomes \c Q_ASSERT
    <li>\c CHECK_PTR becomes \c Q_CHECK_PTR
</ul>

For the record, undocumented macro variables that are not part of the API
have been changed:

<ul>
    <li>\c _OS_*_ becomes \c Q_OS_*
    <li>\c _WS_*_ becomes \c Q_WS_*
    <li>\c _CC_*_ becomes \c Q_CC_*
</ul>

<h3><a name="Removed">Removed functions</a></h3>

All \link removed30.html these functions \endlink have been removed in Qt 3.x.
<ul>
    <li>QWidget::setFontPropagation, QWidget::setPalettePropagation
    <li>QMenuBar::setActItem, QMenuBar::setWindowsAltMode
    <li>QCheckListItem::paintBranches
    <li>QString::visual, QString::basicDirection
    <li>QStyle::set...
</ul>

<h3><a name="QRegExp">QRegExp</a></h3>

The \l QRegExp class has been rewritten to support most of the features of Perl
regular expressions.  Both the regular expression syntax and the QRegExp
interface were modified.

Be also aware that \c <qregexp.h> is no longer included
automatically when you include \c <qstringlist.h>. See
\link #Headers above \endlink for details.  <!-- In Qt 3.0, qregexp.h has to
include qstringlist.h, so it's no good to have qstringlist.h include qregexp.h,
unless one wants to achieve an Escher effect. -->

<dl>
<p><dt><b>New special characters</b></dt>
<dd> There are five new special characters: <tt>(</tt>, <tt>)</tt>, <tt>{</tt>,
<tt>|</tt> and <tt>}</tt> (parentheses, braces and pipe).  When porting old
regular expressions, you have to add <tt>&#92;</tt> (backslash) in front of any
of these (actually, <tt>&#92;&#92;</tt> in C++ strings), unless it is already
there.

Example:  Old code like

\code
    QRegExp rx( "([0-9|]*\\)" );        // works in Qt 2.x
\endcode

should be converted into

\code
    QRegExp rx( "\\([0-9]\\|]*\\)" );   // works in Qt 2.x and 3.x
\endcode

However, wildcard patterns need no conversion.  Here are two examples:

\code
    QRegExp wild( "(*.*)" );
    wild.setWildcard( TRUE );
\endcode

\code
    // TRUE as third argument means wildcard
    QRegExp wild( "(*.*)", FALSE, TRUE );
\endcode

Usually, QRegExp is easy to spot in programs.  However, in one unfortunate case,
it is subtle: as first argument to \l QString::replace().  Code like

\code
    QString text = fetch_it_from_somewhere();
    text.replace( QString("([^)]*)"), "" );
\endcode

involves an implicit QRegExp (namely, \c "([^)]*)") that should be
changed.
</dd>

<p><dt><b>QRegExp& QRegExp::operator= ( const QString & pattern )</b></dt>
<dd>
This function has been replaced by \l QRegExp::setPattern() in Qt 2.2.  Old code
such as

\code
    QRegExp rx( "alpha" );
    rx.setCaseSensitive( FALSE );
    rx.setWildcard( TRUE );
    rx = "beta";
\endcode

still compiles with Qt 3, but produces a different result (the case sensitivity
and wildcard options are forgotten).  This way,
\code
    rx = "beta";
\endcode

is the same as
\code
    rx = QRegExp( "beta" );
\endcode

which is what one would expect.

</dd>

<p><dt><b>bool QRegExp::match ( const QString & str, int index = 0,
    int * len = 0, bool indexIsStart = TRUE ) const</b></dt>
<dd>
This function is now obsolete, as it has an unwieldy parameter list
and a bad name.  It will be removed in a future version of Qt.
The documentation for \l QRegExp::match() explains how to accomplish
the same.
</dd>

<p><dt><b>int QRegExp::find ( const QString & str, int index )</b></dt>
<dd>
This function was removed, after a brief appearance in Qt 2.2.  Its name is
confusing.  Use \l QRegExp::search() or \l QString::find() instead.
</dd>
</dl>

<h3><a name="QFont">QFont</a></h3>

The internals of QFont have changed significantly between Qt 2.2 and Qt 3.0, to give better 
Unicode support and make developing internationalized applications easier. The external 
behaviour has however not changed a lot. The main change is that the CharSet enum in QFont 
and functions related to it have disappeared. This comes about because Qt does now
handle all charset related issues internally, and takes this burden away from the developer.

If you used the CharSet enum anywhere or any functions as QFont::charSet(), QFont::setCharSet() 
just remove them from your code to get things working again. There are a few other functions that 
took a QFont::CharSet as parameter. Just remove the charset from the parameterlist.


<h3><a name="QTranslator">QTranslator</a></h3>

The \l QTranslator class was extended in Qt 2.2, and these extensions lead to a
new interface.  This interface is used mainly by translation tools (such as
\link http://www.trolltech.com/linguist/ Qt Linguist \endlink).  For source
compatibility, no member function was effectively removed.  The \l QTranslator
documentation points out which functions are obsolete.

However, the following function is no longer virtual:

<dl>
<p><dt><b>QString QTranslator::find ( const char * context,
    const char * sourceText ) const</b></dt>
<dd>
If you have a class that inherits QTranslator and that reimplements
QTranslator::find(), you should reimplement QTranslator::findMessage() instead.
In fact, find() is now defined in terms of findMessage().  By doing the
conversion, you will also gain support for translator comments and for any
future extension.
</dd>
</dl>

<h3><a name="Bezier">Bezier Curves</a></h3>
The function names for Bezier curves in \c QPainter and
\c QPointArray have been corrected. They now properly reflect their
cubic form instead of a quadratic one. If you have been using either
\c QPainter::drawQuadBezier() or
\c QPointArray::quadBezier() you will have to replace these calls
with
<ul>
 <li>void QPainter::drawCubicBezier( const QPointArray &, int index=0 ) and
 <li>QPointArray QPointArray::cubicBezier() const
</ul>
respectively. Neither the arguments nor the resulting curve have changed.
*/

// I split this to work around limitations in perl's regexp parser. --Arnt

// warwick can regenerate this with his qt-2-report

<h3><a name="QMultiLineEdit">QMultiLineEdit</a></h3>

The QMultiLineEdit was a simple editor widget in former Qt
versions. Since Qt 3.0, which comes with a new richtext engine,
which also supports editing, QMultiLineEdit is obsolete. It is still
included for compatibility reasons. It is now a subclass of
QTextEdit which wrappes the old QMultiLineEdit so that it is mostly
source compatible to keep old applications working.

If you implement something new with QMultiLineEdit, rather use
QTextEdit instead.

Although most of the old QMultiLineEdit API is still available,
there is one important difference. Because of a design flaw of the
old QMultiLineEdit it operated on lines and not on paragraphs. As
lines do change all the time during wordwrap, the new richtext
engine only knows paragraphs as elements in the data structure. So
all functions (like numLines(), textLine()), which worked on lines,
now work on paragraphs.

Also the function getString() has been removed as this one published
the internal data structure.

So, applications which made normal usage of the QMultiLineEdit,
should keep working without problems. Programs which did some
special stuff with it might require some porting.


/*! \page removed30.html

\title Functions removed in  Qt 3.0

<pre>
</pre>

*/
