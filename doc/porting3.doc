/****************************************************************************
** $Id: $
**
** Help with porting from Qt 2.x to Qt 3.x
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page porting.html

\title Porting to Qt 3.x

You're probably looking at this page because you want to port
your application from Qt 2.x to Qt 3.x, but to be sure, let's
review the good reasons to do this:
\list
\i ###
\endlist

The Qt 3.x series is not binary compatible with the 2.x series. This
means programs compiled for Qt 2.x must be recompiled to work with Qt
3.x.  Qt 3.x is also not completely \e source compatible with 2.x,
however all points of incompatibility cause compiler errors or
run-time messages (rather than mysterious results).  The result is
that Qt 3.x includes many additional features, discards obsolete
functionality that is easily converted to use the new features, and
that porting an application from Qt 2.x to Qt 3.x is a simple task
well worth the amount of effort required.

To port code using Qt 2.x to use Qt 3.x:

\list 1
\i Briefly read the porting notes below to get an idea of what to expect.
\i Be sure your code compiles and runs well on all your target platforms
   with Qt 2.x.
\i Recompile with Qt 3.x.  For each error, search below for related
   identifiers (eg. function names, class names) - this documented is
   structured to mention all relevant identifiers to facilitate such
   searching, even if that makes it a little verbose.
\i If you get stuck, ask on the \link http://qt-interest.trolltech.com/
   qt-interest \endlink mailing list, or Trolltech Technical Support if
   you're a Professional Edition licensee.
\endlist

Many very major projects, such as ###
have been ported, so there is plenty of expertise in the collective conscious
that is the Qt Developer Community!

\tableofcontents

\target Headers
\section1 Header file inclusion changes

Qt 3.x remove some unnecessary nested #include directives from
header files. This speeds up compilation when you don't need those
nested header files. But in some cases you will find you need to add
an extra #include to your files.

For example, if you get a message about QStringList or its functions
not being defined, then add \c {#include <qstringlist.h>} at
the top of the file giving the error.

Header files that you might need to add #include directives for include:
\list
\i \c <qcursor.h>
\i \c <qregexp.h>
\i \c <qpainter.h>
\i \c <qpen.h>
\i \c <qstringlist.h>
\i \c <qstrlist.h>
\i \c <qvaluelist.h>
\endlist

\section1 Namespace

Qt 3.x is namespace clean.  A few global identifiers that had been
left in Qt 2.x have been discarded.

Enumeration \l Qt::CursorShape and it values are now part of the
special \c Qt class defined in qnamespace.h. If you get compilation
errors about these being missing (unlikely, since most of your code will
be in classes that inherit from the Qt namespace class), then change:

\list
\i \c QCursorShape becomes \c Qt::CursorShape
\i \c ArrowCursor becomes \c Qt::ArrowCursor
\i \c UpArrowCursor becomes \c Qt::UpArrowCursor
\i \c CrossCursor becomes \c Qt::CrossCursor
\i \c WaitCursor becomes \c Qt::WaitCursor
\i \c IbeamCursor becomes \c Qt::IbeamCursor
\i \c SizeVerCursor becomes \c Qt::SizeVerCursor
\i \c SizeHorCursor becomes \c Qt::SizeHorCursor
\i \c SizeBDiagCursor becomes \c Qt::SizeBDiagCursor
\i \c SizeFDiagCursor becomes \c Qt::SizeFDiagCursor
\i \c SizeAllCursor becomes \c Qt::SizeAllCursor
\i \c BlankCursor becomes \c Qt::BlankCursor
\i \c SplitVCursor becomes \c Qt::SplitVCursor
\i \c SplitHCursor becomes \c Qt::SplitHCursor
\i \c PointingHandCursor becomes \c Qt::PointingHandCursor
\i \c BitmapCursor becomes \c Qt::BitmapCursor
\endlist

The name of some debugging macro variables has been changed.  We have
tried not to break source compatibility as much as possible.  If you observe
error messages on the UNIX console or the Windows debugging stream that were
previously disabled, please check these macro variables:

\list
\i \c DEBUG becomes \c QT_DEBUG
\i \c NO_DEBUG becomes \c QT_NO_DEBUG
\i \c NO_CHECK becomes \c QT_NO_CHECK
\i \c CHECK_STATE becomes \c QT_CHECK_STATE
\i \c CHECK_RANGE becomes \c QT_CHECK_RANGE
\i \c CHECK_NULL becomes \c QT_CHECK_NULL
\i \c CHECK_MATH becomes \c QT_CHECK_MATH
\endlist

The name of some debugging macro functions has been changed as well
but source compatibility should not be affected if the macro variable
\c QT_CLEAN_NAMESPACE is not defined:

\list
\i \c ASSERT becomes \c Q_ASSERT
\i \c CHECK_PTR becomes \c Q_CHECK_PTR
\endlist

For the record, undocumented macro variables that are not part of the API
have been changed:

\list
\i \c _OS_*_ becomes \c Q_OS_*
\i \c _WS_*_ becomes \c Q_WS_*
\i \c _CC_*_ becomes \c Q_CC_*
\endlist

\section1 Removed functions

All these functions have been removed in Qt 3.x:
\list
\i QWidget::setFontPropagation, QWidget::setPalettePropagation
\i QMenuBar::setActItem, QMenuBar::setWindowsAltMode
\i QCheckListItem::paintBranches
\i QString::visual, QString::basicDirection
\i QStyle::set...
    ### keep in sync with dist/changes-3.0
\endlist

Additionally, the following preprocessor directives have been removed:

\list
\i \c {#define strlen qstrlen}
\i \c {#define strcpy qstrcpy}
\i \c {#define strcmp qstrcmp}
\i \c {#define strncmp qstrncmp}
\i \c {#define stricmp qstricmp}
\i \c {#define strnicmp qstrnicmp}
\endlist

See the changes-3.0.0 document for motivation why this had to be done.
You might have been relying on the non-portable and unpredictable behavior
resulting from these directives. We strongly recommend to either make
use of the safe qstr* variants directly or ensure that no 0 pointer is
passed to the standard C functions in your code base.

\section1 Collection class renaming

The classes QArray, QCollection, QList, QListIterator, QQueue, QStack
and QVector have been renamed QMemArray, QPtrCollection, QPtrList,
QPtrListIterator, QPtrQueue and QPtrStack, and they are found in the
header files \c <qmemarray.h>, \c <qptrcollection.h>, \c <qptrlist.h>,
\c <qptrqueue.h>, \c <qptrstack.h> and \c <qptrvector.h>. To
ease porting, the old names and the old header-file names are still
supported.

\section1 QButtonGroup

In Qt 2.x, the function QButtonGroup::selected() returns the selected
\e radio button (QRadioButton). In Qt 3.0, it returns the selected \e
toggle button (\l QButton::toggleButton), a more general concept.
This might affect programs that use QButtonGroup containing a mixture of
radio buttons and non-radio toggle buttons.

\section1 QDate

Two member functions of QDate were virtual in Qt 2.0 and are not anymore
in Qt 3.0. The information here is relevant only if you subclassed
QDate and reimplemented these functions:

\list
\i QString QDate::monthName( int month ) const
\i QString QDate::dayName( int weekday ) const
\endlist

Apart from losing their virtualness, QDate::monthName() and
QDate::dayName() have been renamed QDate::shortMonthName() and
QDate::shortDayName() and have been made static (as they always
should had been). The old names are still provided for source
compatibility.

\section1 QFont

The internals of QFont have changed significantly between Qt 2.2 and
Qt 3.0, to give better  Unicode support and make developing
internationalized applications easier. The external  behaviour has
however not changed a lot. The main change is that the CharSet enum
in QFont  and functions related to it have disappeared. This comes
about because Qt does now handle all charset related issues
internally, and takes this burden away from the developer.

If you used the CharSet enum anywhere or any functions as
QFont::charSet(), QFont::setCharSet()  just remove them from your
code to get things working again. There are a few other functions
that  took a QFont::CharSet as parameter. Just remove the charset
from the parameterlist.

\section1 QLayout and Related Abstract Layout Classes

The definition of \l QGLayoutIterator, \l QLayout, \l QLayoutItem, \l
QLayoutIterator, \l QSpacerItem and \l QWidgetItem were moved from \c
<qabstractlayout.h> to \c <qlayout.h>. The header \c
<qabstractlayout.h> now includes \c <qlayout.h> for compatibility. It
might be removed in a future version.

\section1 QMultiLineEdit

The QMultiLineEdit was a simple editor widget in former Qt
versions. Since Qt 3.0, which comes with a new richtext engine,
which also supports editing, QMultiLineEdit is obsolete. It is still
included for compatibility reasons. It is now a subclass of
QTextEdit which wrappes the old QMultiLineEdit so that it is mostly
source compatible to keep old applications working.

If you implement something new with QMultiLineEdit, you should use
QTextEdit instead.

Although most of the old QMultiLineEdit API is still available,
there is one important difference. Because of a design flaw of the
old QMultiLineEdit it operated on lines and not on paragraphs. As
lines do change all the time during wordwrap, the new richtext
engine only knows paragraphs as elements in the data structure. So
all functions (like numLines(), textLine()), which worked on lines,
now work on paragraphs.

Also the function getString() has been removed as this function
published the internal data structure.

So, applications which made normal usage of the QMultiLineEdit,
should keep working without problems. Programs which did some
special stuff with it might require some porting.

The source code for the old 2.x version of QMultiLineEdit can be found
in \c $QTDIR/src/attic/qtmultilineedit.h/cpp. Note that the class has
been renamed to QtMultiLineEdit to avoid name clashes. If you really
need to keep compatibility with the old QMultiLineEdit, simply include
this class in your project and rename all references from
QMultiLineEdit to QtMultiLineEdit.

\section1 QPrinter

QPrinter has undergone some changes, to make it more flexible and
force the same runtime behaviour on Unix and on Windows. In 2.x,
QPrinter behaved differently on Windows and Unix, when using view
transformations on the QPainter. This has changed now, and QPrinter
behaves consistent across all platforms. A compatibilty mode has been
added that behaves exactly as in Qt-2.x, to ease porting from Qt-2.x
to Qt-3. This compatibilty mode can be enabled by passing a
QPrinter::Compatible flag to the QPrinter constructor.

On X11, QPrinter used to generate encapsulated postscript when
fullPage() was TRUE and only one page was printed. This does not
happen by default anymore, giving a more consistent printing output.

\section1 QRegExp

The \l QRegExp class has been rewritten to support most of the features of Perl
regular expressions.  Both the regular expression syntax and the QRegExp
interface were modified.

Be also aware that \c <qregexp.h> is no longer included
automatically when you include \c <qstringlist.h>. See
\link #Headers above \endlink for details.

\omit
In Qt 3.0, qregexp.h has to
include qstringlist.h, so it's no good to have qstringlist.h include qregexp.h,
unless one wants to achieve an Escher effect.
\endomit

\section2 New special characters

There are five new special characters: <tt>(</tt>, <tt>)</tt>, <tt>{</tt>,
<tt>|</tt> and <tt>}</tt> (parentheses, braces and pipe). When porting old
regular expressions, you have to add <tt>&#92;</tt> (backslash) in front of any
of these (actually, <tt>&#92;&#92;</tt> in C++ strings), unless it is already
there.

Example: Old code like

\code
    QRegExp rx( "([0-9|]*\\)" );        // works in Qt 2.x
\endcode

should be converted into

\code
    QRegExp rx( "\\([0-9]\\|]*\\)" );   // works in Qt 2.x and 3.x
\endcode

However, wildcard patterns need no conversion.  Here are two examples:

\code
    QRegExp wild( "(*.*)" );
    wild.setWildcard( TRUE );
\endcode

\code
    // TRUE as third argument means wildcard
    QRegExp wild( "(*.*)", FALSE, TRUE );
\endcode

Usually, QRegExp is easy to spot in programs.  However, in one unfortunate case,
it is subtle: as first argument to \l QString::replace().  Code like

\code
    QString text = fetch_it_from_somewhere();
    text.replace( QString("([^)]*)"), "" );
\endcode

involves an implicit QRegExp (namely, \c "([^)]*)") that should be
changed.

\section2 QRegExp::operator=()

This function has been replaced by \l QRegExp::setPattern() in Qt 2.2.  Old code
such as

\code
    QRegExp rx( "alpha" );
    rx.setCaseSensitive( FALSE );
    rx.setWildcard( TRUE );
    rx = "beta";
\endcode

still compiles with Qt 3, but produces a different result (the case sensitivity
and wildcard options are forgotten). This way,
\code
    rx = "beta";
\endcode

is the same as
\code
    rx = QRegExp( "beta" );
\endcode

which is what one expects.

\section2 QRegExp::match()

The following function is now obsolete, as it has an unwieldy
parameter list and a bad name:
\list
\i bool QRegExp::match( const QString \& str, int index = 0,
			int * len = 0, bool indexIsStart = TRUE ) const
\endlist
It will be removed in a future version of Qt. Its documentation
explains how to accomplish the same.

\section2 QRegExp::find()

This function was removed, after a brief appearance in Qt 2.2.  Its name was
too confusing.  Use \l QRegExp::search() or \l QString::find() instead.

\section1 QTableView

The QTableView class has been obsoleted and is no longer a part of the
Qt API. You should either use the powerful QTable class or the
simplistic QGridView in any new code you create. If you really need
the old table view for compatibility issues you can find it in \c
$QTDIR/src/attic/qttableview.{cpp,h}. Note that the class has been
renamed from QTableView to QtTableView to avoid name clashes. To use
it, simply include it in your project and rename all references in
your code from QTableView to QtTableView.

\section1 QToolButton

The \l QToolButton class used to distinguish between "on" and "off"
icons. In 3.0, this mechanism was moved into the \l QIconSet class
(see \l QIconSet::State).

The old \l QToolButton::onIconSet and \l QToolButton::offIconSet
properties are still provided for old source to compile, but their
semantics have changed: They are now synonyms for \l
QToolButton::iconSet. If you used that distinction in Qt 2, you will
need to adjust your code to use the QIconSet On/Off mechanism.

Likewise, the \e on parameter of these two functions is now ignored:

\list
\i void QToolButton::setIconSet ( const QIconSet \& set, bool on )</li>
\i QIconSet QToolButton::iconSet ( bool on ) const</li>
\endlist

These functions are still provided only for ease of porting. New code
should rather use the following:

\list
\i void QToolButton::setIconSet( const QIconSet \& set )</li>
\i QIconSet QToolButton::iconSet() const</li>
\endlist

Finally, this function is no longer virtual:

\list
\i void QToolButton::setIconSet( const QIconSet \& set, bool on )
\endlist

If you have a class that inherits QToolButton and that reimplements
QToolButton::setIconSet(), you should make the signature of the
reimplementation agree with the new \l QToolButton::setIconSet(),
a virtual function.

\section1 QTranslator

The \l QTranslator class was extended in Qt 2.2, and these extensions lead to a
new interface.  This interface is used mainly by translation tools (such as
\link http://www.trolltech.com/linguist/ Qt Linguist \endlink).  For source
compatibility, no member function was effectively removed.  The \l QTranslator
documentation points out which functions are obsolete.

However, the following function is no longer virtual:

\list
\i QString QTranslator::find( const char * context,
			      const char * sourceText ) const
\endlist

If you have a class that inherits QTranslator and that reimplements
QTranslator::find(), you should reimplement QTranslator::findMessage() instead.
In fact, find() is now defined in terms of findMessage().  By doing the
conversion, you will also gain support for translator comments and for any
future extension.

\section1 QXml classes

The semantics of QXmlInputSource has slightly changed. This change affects
only code that parses the same data from the same input source multiple
times. In that cases you have to do a QXmlInputSource::reset() before the
second call to QXmlSimpleReader::parse().

So code like:
\code
    QXmlInputSource source( &xmlFile );
    QXmlSimpleReader reader;
    ...
    reader.parse( source );
    ...
    reader.parse( source );
\endcode

Has to be changed to:
\code
    QXmlInputSource source( &xmlFile );
    QXmlSimpleReader reader;
    ...
    reader.parse( source );
    ...
    source.reset();
    reader.parse( source );
\endcode

\section1 Bezier curves

The function names for Bezier curves in QPainter and QPointArray have
been corrected. They now properly reflect their cubic form instead of
a quadratic one. If you have been using either
QPainter::drawQuadBezier() or QPointArray::quadBezier() you will have
to replace these calls with
\list
\i void QPainter::drawCubicBezier( const QPointArray \&, int index=0 ) and
\i QPointArray QPointArray::cubicBezier() const
\endlist
respectively. Neither the arguments nor the resulting curve have changed.

\section1 Locale-aware string comparisons in item classes (QIconView, QListBox,
	  QListView and QTable)

In Qt 2.x, QString provided only string comparison using the Unicode
values of the characters of a string. This is efficient and reliable,
but it is not the appropriate order for most languages. For example,
French users expect '&eacute;' (e acute) to be treated essentially as
'e' and not put after 'z'.

In Qt 3.0, QString::localeAwareCompare() implements that on some
platforms. The classes \l QIconView, \l QListBox, \l QListView and \l
QTable now use QString::localeAwareCompare() instead of
QString::compare(). The impact of this is usually positive.
Otherwise, you can always reimplement QIconViewItem::compare(),
QListBox::text(), QListViewItem::compare() or QTableItem::key().

*/

// I split this to work around limitations in perl's regexp parser. --Arnt

// warwick can regenerate this with his qt-2-report
