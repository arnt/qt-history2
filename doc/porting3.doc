/****************************************************************************
** $Id: //depot/qt/main/doc/porting3.doc#1 $
**
** Help with porting from Qt 2.x to Qt 3.x
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/

/*! \page porting.html

\title Porting to Qt 3.x

<p>
You're probably looking at this page because you want to port
your application from Qt 2.x to Qt 3.x, but to be sure, let's
review the good reasons to do this:
<ul>
 <li>###
</ul>

<p>
The Qt 3.x series is not binary compatible with the 2.x series.
This means programs compiled for Qt 2.x must be recompiled to work
with Qt 3.x.  Qt 3.x is also not completely <em>source</em> compatible
with 2.x, however all points of incompatibility cause
compiler errors (rather than mysterious results), or produce run-time
messages.  The result is that Qt 3.x includes many additional features,
discards obsolete functionality that is easily converted to use the new
features, and that porting an application from Qt 2.x to Qt 3.x is
a simple task well worth the amount of effort required.


To port code using Qt 2.x to use Qt 3.x:

<ol>
 <li> Briefly read the porting notes below to get an idea of what to expect.
 <li> Be sure your code compiles and runs well on all your target platforms
        with Qt 2.x.
 <li> Recompile with Qt 3.x.  For each error, search below for related
	identifiers (eg. function names, class names) - this documented is
	structured to mention all relevant identifiers to facilitate such
	searching, even if that makes it a little verbose.
 <li> If you get stuck, ask on the qt-interest mailing list, or
	Trolltech Technical Support if you're a Professional Edition
	licensee.
</ol>


Many very major projects, such as ###
have been ported, so there is plenty of expertise in the collective conscious
that is the Qt Developer Community!
</p>


<hr>

<h2 align=center>The Porting Notes</h2>

<ul>
 <li><b><a href="#Headers">Header file inclusion changes</a></b>
 <li><b><a href="#Namespace">Namespace</a></b>
 <li><b><a href="#Removed">Removed functions</a></b>
 <li><b><a href="#QRegExp">QRegExp</a></b>
 <li><b><a href="#QTranslator">QTranslator</a></b>
</ul>

<hr>

<h3><a name="Headers">Header file inclusion changes</a></h3>

<p> Qt 3.x remove some unnecessary nested #include directives from
header files. This speeds up compilation when you don't need those
nested header files. But in some cases you will find you need to add
an extra #include to your files.

<p> For example, if you get a message about QStringList or its functions
not being defined, then add <code>#include &lt;qstring.h&gt;</code> at
the top of the file giving the error.

<p> Headers that have been moved around include
<ul>
    <li><code>&lt;qcursor.h&gt;</code>
    <li><code>&lt;qregexp.h&gt;</code>
    <li><code>&lt;qstringlist.h&gt;</code>
    <li><code>&lt;qvaluelist.h&gt;</code>
</ul>

<h3><a name="Namespace">Namespace</a></h3>

<p> Qt 3.x is namespace-clean.  A few global identifiers that have been
left in Qt 2.x have been discarded.  Enumeration <code>QCursorShape</code>
and it values are now part of the
special <code>Qt</code> class defined in qnamespace.h. If you get compilation
errors about these being missing (unlikely, since most of your code will
be in classes that inherit from the Qt namespace class), then change:

<ul>
    <li><code>QCursorShape</code> becomes <code>Qt::CursorShape</code>
    <li><code>ArrowCursor</code> becomes <code>Qt::ArrowCursor</code>
    <li><code>UpArrowCursor</code> becomes <code>Qt::UpArrowCursor</code>
    <li><code>CrossCursor</code> becomes <code>Qt::CrossCursor</code>
    <li><code>WaitCursor</code> becomes <code>Qt::WaitCursor</code>
    <li><code>IbeamCursor</code> becomes <code>Qt::IbeamCursor</code>
    <li><code>SizeVerCursor</code> becomes <code>Qt::SizeVerCursor</code>
    <li><code>SizeHorCursor</code> becomes <code>Qt::SizeHorCursor</code>
    <li><code>SizeBDiagCursor</code> becomes <code>Qt::SizeBDiagCursor</code>
    <li><code>SizeFDiagCursor</code> becomes <code>Qt::SizeFDiagCursor</code>
    <li><code>SizeAllCursor</code> becomes <code>Qt::SizeAllCursor</code>
    <li><code>BlankCursor</code> becomes <code>Qt::BlankCursor</code>
    <li><code>SplitVCursor</code> becomes <code>Qt::SplitVCursor</code>
    <li><code>SplitHCursor</code> becomes <code>Qt::SplitHCursor</code>
    <li><code>PointingHandCursor</code> becomes <code>Qt::PointingHandCursor</code>
    <li><code>BitmapCursor</code> becomes <code>Qt::BitmapCursor</code>
</ul>

<h3><a name="Removed">Removed functions</a></h3>

All <a href="removed30.html">these functions</a> have been removed in Qt 3.x.
<ul>
    <li>QWidget::setFontPropagation, QWidget::setPalettePropagation
    <li>QMenuBar::setActItem, QMenuBar::setWindowsAltMode
    <li>QCheckListItem::paintBranches
    <li>QString::visual, QString::basicDirection
    <li>QRegExp::isEmpty
</ul>

<h3><a name="QRegExp">QRegExp</a></h3>

The \l QRegExp class has been rewritten to support most of the features of Perl
regular expressions.  Both the regular expression syntax and the QRegExp
interface were modified.

<dl>
<p><dt><b>New special characters</b></dt>
<dd> There are five new special characters: <tt>(</tt>, <tt>)</tt>, <tt>{</tt>,
<tt>|</tt> and <tt>}</tt> (parentheses, braces and pipe).  When porting old
regular expressions, you have to add <tt>&#92;</tt> (backslash) in front of it
(actually, <tt>&#92;&#92;</tt>), unless it is already there.

Example:  Old code like

\code
    QRegExp rx( "([0-9|]*\\)" );        // works in Qt 2.x
\endcode

should be converted into

\code
    QRegExp rx( "\\([0-9]\\|]*\\)" );   // works in Qt 2.x and 3.x
\endcode

However, wildcard patterns need no conversion.  Here are two examples:

\code
    QRegExp wild( "(*.*)" );
    wild.setWildcard( TRUE );
\endcode

\code
    // TRUE as third argument means wildcard
    QRegExp wild( "(*.*)", FALSE, TRUE );
\endcode

Usually, QRegExp is easy to spot in programs.  However, in one unfortunate case,
it is subtle: as first argument to \l QString::replace().  Code like

\code
    QString text = fetch_it_from_somewhere();
    text.replace( "([^)]*)", "" );
\endcode

involves an implicit QRegExp (namely, <code>"([^)]*)"</code>) that should be
changed.
</dd>

<p><dt><b>QRegExp::QRegExp ()</b></dt>
<dd>
This function used to create a regular expression that matches anywhere (i.e,
whose pattern is "").  Now it creates one that matches nowhere (i.e., whose
pattern is QString::null).
</dd>

<p><dt><b>QRegExp& QRegExp::operator= ( const QString & pattern )</b></dt>
<dd>
This function has been replaced by \l QRegExp::setPattern() in Qt 2.2.  Old code
such as

\code
    QRegExp rx( "alpha" );
    rx.setCaseSensitive( FALSE );
    rx.setWildcard( TRUE );
    rx = "beta";
\endcode

still compiles with Qt 3, but produces a different result (the case sensitivity
and wildcard options are forgotten).  This way,

\code
    rx = "beta";
\endcode

is the same as

\code
    rx = QRegExp( "beta" );
\endcode
</dd>

<p><dt><b>bool QRegExp::isEmpty () const</b></dt>
<dd>
This function was removed.  Use
\l QRegExp::pattern()\link QString::isEmpty() .isEmpty\endlink() instead.
</dd>

<p><dt><b>bool QRegExp::match ( const QString & str, int index = 0,
    int * len = 0, bool indexIsStart = TRUE ) const</b></dt>
<dd>
This function has an unwieldy parameter list and the wrong name.  If you see
code like

\code
    QString bigText = getBigText();
    QRegExp rx( "[Dd]og" );
    int index = rx.match( bigText );
\endcode

(where match() takes only one argument), change it to

\code
    QString bigText = getBigText();
    QRegExp rx( "[Dd]og" );
    int index = rx.search( bigText );
\endcode

There is now a method \l QRegExp::match( const QString& str ) and it
accomplishes something more fit for that name.

For ease of porting, the old QRegExp::match( const QString&, int, int *, bool )
is still available for those case where QRegExp::search() won't do.  Read its
documentation for how to implement the same functionality with the new
interface. </dd>

<p><dt><b>int QRegExp::find ( const QString & str, int index )</b></dt>
<dd> This function was removed, after a brief appearance in Qt 2.2.  Use
\l QRegExp::search() or \l QString::find() instead.
</dd>
</dl>

Be also aware that <code>&lt;qregexp.h&gt;</code> is no longer included
automatically when you include <code>&lt;qstringlist.h&gt;</code>. See
<a href="#Headers">above</a> for details.

<h3><a name="QTranslator">QTranslator</a></h3>

The \l QTranslator class was extended in Qt 2.2, and these extensions lead to a
new interface.  This interface is used mainly by translation tools (such as Qt
Linguist).  For source compatibility, no member function was effectively
removed.  The \l QTranslator documentation points out which functions are
obsolete.

However, the following function is no longer virtual:

<dl>
<p><dt><b>QString QTranslator::find ( const char * context,
    const char * sourceText ) const</b></dt>
<dd>
If you have a class that inherits QTranslator and that reimplements
QTranslator::find(), you should reimplement QTranslator::findMessage() instead.
In fact, find() is defined in terms of QTranslator::findMessage().  By doing the
conversion, you will gain support for translator comments and for any future
extension.
</dd>
</dl>

*/

// I split this to work around limitations in perl's regexp parser. --Arnt

// warwick can regenerate this with his qt-2-report

/*! \page removed30.html

\title Functions removed in  Qt 3.0

<pre>
</pre>

*/
